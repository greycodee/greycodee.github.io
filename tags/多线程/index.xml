<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>多线程 on Hello,I‘m Greycode!</title><link>https://greycode.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link><description>Recent content in 多线程 on Hello,I‘m Greycode!</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 22 Jun 2020 16:29:38 +0000</lastBuildDate><atom:link href="https://greycode.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><item><title>创建线程的3种方式</title><link>https://greycode.top/posts/create-thread-3/</link><pubDate>Mon, 22 Jun 2020 16:29:38 +0000</pubDate><guid>https://greycode.top/posts/create-thread-3/</guid><description>Java线程状态变迁图 构造一个线程 在线程执行start()方法之前,首先需要初始化(NEW)一个线程,初始化的时候,可以设置线程名称,线程所属的线程组、线程优先级、是否是Daemon线程等信息。
Thread常见参数及设置方法:
//线程是否是守护线程 默认false private boolean daemon = false; //设置方法 Thread thread=new Thread(); thread.setDaemon(true); //线程名字 默认&amp;#34;Thread-&amp;#34; + nextThreadNum() private volatile String name; //设置方法 Thread thread=new Thread(); thread.setName(&amp;#34;myThread&amp;#34;); //不能设置为null,会报异常 //线程优先级 是否起作用和操作系统及虚拟机版本相关 private int priority; //设置方法 范围:1-10 默认5 myThread.setPriority(1); Thread源码构造方法 在Thread源码中,一共提供了9种构造方法.
从这些构造方法中,大致可以分为有Runnable构造参数的,和无Runnable构造参数两大类,无Runnable构造参数的就需要去继承Thread来重写run()方法(注:Thread也实现了Runnable接口),有Runnable构造参数的,就实现Runnable接口的run方法,然后通过构造参数,把实现Runnable接口的实例传入Thread.
无返回值的线程 可以看到,通过集成Thread类和实现Runnable接口的run()方法返回值都是void.这类是没有返回值的
方法一:继承Thread类创建一个线程 //继承Thread类,重写run方法 class MyThread extends Thread{ @Override public void run() { System.out.println(&amp;#34;继承Thread,重写run方法&amp;#34;); } } public class ThreadTest{ public static void main(String[] args){ MyThread myThread=new MyThread(); myThread.</description></item></channel></rss>