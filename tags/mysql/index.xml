<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MySQL on Greycode's Blog</title><link>https://blog.greycode.top/tags/mysql/</link><description>Recent content in MySQL on Greycode's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Mar 2022 23:51:51 +0000</lastBuildDate><atom:link href="https://blog.greycode.top/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>MySQL是怎样通讯的？</title><link>https://blog.greycode.top/posts/2852f14d7d13471798ce28c544741e89/</link><pubDate>Sun, 27 Mar 2022 23:51:51 +0000</pubDate><guid>https://blog.greycode.top/posts/2852f14d7d13471798ce28c544741e89/</guid><description>前言 我们平常使用数据库的场景一般是程序里面代码直接连接使用，然后进行 CRUD 操作。或者使用有 GUI 界面的数据库软件来手动操作数据库， 这类软件有 DataGrip、Navicat等等&amp;hellip;。平常很少关心它们的底层数据交互是怎么样的，相信你看了这篇文章一定能有大概的了解。本篇文章的代码使用 Go 语言来实现 MySQL 的协议。
协议简介 MySQL 协议一般分为两个阶段，一个是连接阶段，一个是命令阶段。 连接阶段主要是客户端和服务端进行相互认证的阶段，就像我们平常登陆某个网站的一个操作。 命令阶段主要是客户端向服务端进行的一些指令的发送，然后服务端处理指令并返回结果的一个过程。 在客户端和服务端发送的数据包中，前 3 个字节表示这个数据包的大小，所以这里就有一个问题，就是它有一个大小的限制，数据包大小不能超过16777215 ($2^{24}-1$) bytes，也就是 16M 大小（16进制表示：ff ff ff，刚刚 3 个字节）。这就会有三种情况出现，一种是数据包小于 16M，一种是等于，一种是大于。所以在 MySQL 协议中是这样处理的：
小于 16M：发送一个数据包就可以了 等于 16M：发送两个数据包，第二个包为空包 大于 16M：发送多个数据包，每个数据包大小最大为 16M，当最后一个数据包等于 16M 时，再多发送一个空数据包 每个数据包中的第 4 个字节表示这个数据包的序号ID，这个 ID 在不同阶段会递增，比如在连接阶段，这个 ID 会随着包的数量而递增，当连接阶段完成后进入命令阶段，这个 ID 又会从 0 开始递增，直到这个命令的生命周期结束。
初始握手包 当客户端进行尝试使用 TCP 连接 MySQL 服务端时，服务端就会响应一个初始的握手包，这个握手包有 V9、V10 两个版本。不过现在一般用的都是 V10 版本，如果 MySQL 的版本在 3.21.0 之前，那么服务端响应的是 V9 版本的初始握手包。本篇文章就讲讲现在常用的 V10 版本的初始握手包。
我们可以使用以下代码来尝试连接我们本地的 MySQL 服务:</description></item><item><title>插入emoji到mysql时提示了一个表里不存在的字段的错误</title><link>https://blog.greycode.top/posts/mysql-utf8mb4-error/</link><pubDate>Wed, 29 Apr 2020 17:16:27 +0000</pubDate><guid>https://blog.greycode.top/posts/mysql-utf8mb4-error/</guid><description>1.问题描述 由于公司前端有需求，需要在tiny_user_info表的nickname这个字段里存入emoji表情，于是我熟练地将这个字段修改为utf8mb4，改好后测试插入一条带emoji数据。于是报了这个错误：
[2020-04-29 15:57:25] [HY000][1366] Incorrect string value: &amp;#39;\xF0\x9F\x98\x98&amp;#39; for column &amp;#39;user_name&amp;#39; at row 14 当时我就傻了，我这个表里也没有user_name这个字段啊，怎么会报这个字段错误,我明明修改的是nickname这个字段啊。于是google和百度搜了一圈，无解。
２.解决方案 试了好几种方法，删字段，重新建。删表，重新建。都不行。。。。。静下心来，于是打算从mysql服务器入手。进入到mysql对应库的文件夹，发现tiny_user_info这个表有三个文件
和常见的多了一个TRG文件。这是一个触发器文件，打开一看，发现了user_name字段。。。。。。
原来是同事在这个表里加了个触发器，当tiny_user_info里新增数据时，会触发新增到另一张表里，nickname的值同时会插入到另一张表的user_name字段，而他那张表的字段没有设置utf8mb4编码,所以导致插入失败。于是叫同事把他那张表设置一下utf8mb4编码后，就可以正常插入了。</description></item><item><title>更新驱动到mysql-connector-java-8遇到的一些问题</title><link>https://blog.greycode.top/posts/mysql-update-driver-connector-8/</link><pubDate>Wed, 25 Dec 2019 17:07:12 +0000</pubDate><guid>https://blog.greycode.top/posts/mysql-update-driver-connector-8/</guid><description>更新驱动到mysql-connector-java-8遇到的一些问题 问题 POM &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;8.0.16&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; application.properties spring.datasource.driver-class-name=com.mysql.jdbc.Driver 项目是SpringBoot构建的,数据库版本是:MySQL5.7,用了mysql-connector-java-8来链接数据库,application.properties也配置成spring.datasource.driver-class-name=com.mysql.jdbc.Driver,中间遇到了几个问题;
问题一 描述 如上配置后,控制台报了一下错误:
Loading class `com.mysql.jdbc.Driver&amp;#39;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&amp;#39;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary. 翻译过来后就是:
加载类 com.mysql.jdbc.Driver。 不推荐使用。 新的驱动程序类为 com.mysql.cj.jdbc.Driver。 通过SPI自动注册驱动程序，通常不需要手动加载驱动程序类。
解决 根据提示,解决方法有两种:
更改application.properties文件 spring.datasource.driver-class-name=com.mysql.jdbc.Driver //改成下面这样 spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver 去掉application.properties文件中的spring.datasource.driver-class-name,因为它说会通过SPI自动注册的; 问题二 描述 数据库的数据时间总是和实际时间差8个小时
解决 在数据库url添加serverTimezone=GMT%2B8
spring.datasource.url=jdbc:mysql://10.25.0.01:3307/db?useUnicode=true&amp;amp;autoReconnect=true&amp;amp;characterEncoding=UTF-8&amp;amp;serverTimezone=GMT%2B8 总结 mysql-connector-java5.X的版本驱动名是:com.mysql.jdbc.Driver; 6.X及以上版本的驱动名是:com.mysql.cj.jdbc.Driver</description></item><item><title>Docker迁移根目录导致mysql权限问题</title><link>https://blog.greycode.top/posts/docker-transfer-pit/</link><pubDate>Fri, 20 Dec 2019 15:04:16 +0000</pubDate><guid>https://blog.greycode.top/posts/docker-transfer-pit/</guid><description>问题描述 最近由于公司服务器硬盘老是爆满，导致经常要清硬盘空间．最后发现/var/lib/docker目录占了25G,以前分kvm分区的时候，他们分了两个区：根目录＂/＂,和＂/home＂目录，发现home目录使用几乎为零，于是准备迁移Docker的根目录：
迁移根目录我看的是这个文章：docker的存储目录迁移,　不过迁移的时候我没有使用rsync这个命令，而是使用cp -R;
文件复制过去后，按照教程，重新启动docker服务，可是其中mysql容器跑不起来了，报mysqld: Can&amp;rsquo;t create/write to file &amp;lsquo;/tmp/ibTCv7Rw&amp;rsquo; (Errcode: 13 - Permission denied)
期间按照网上的方法：说docker容器启动是添加&amp;ndash;privileged=true,设置/tmp目录的权限，关闭selinux，这些方法都没用！！！！！！
其中设置/tmp文件权限这个方法，我把里面的/tmp文件挂载出来后，设置了权限，报这个的问题是解决了，可是又出现了新的问题，又报Version: &amp;lsquo;5.7.27&amp;rsquo; socket: &amp;lsquo;/var/run/mysqld/mysqld.sock&amp;rsquo;
看来还是得从根源上解决问题啊！
我的解决办法 我想，既然是权限问题，那肯定是复制文件的时候权限丢失了，于是查了下cp命令保持权限的命令（cp -p）: 于是我又重新关闭的docker服务，然后删除了所有复制到home文件的目录，重新用cp -p -R /var/lib/docker /home/docker/lib/来重新复制了文件；
复制后，重启docker服务，启动docker容器，ok,一切正常；用docker info查看，看到已成功转移到/home下．</description></item><item><title>Docker下安装mysql并设置用户权限</title><link>https://blog.greycode.top/posts/docker-mysql/</link><pubDate>Tue, 03 Sep 2019 15:58:46 +0000</pubDate><guid>https://blog.greycode.top/posts/docker-mysql/</guid><description>环境 Ubuntu18.04
Docker19.03.1
Mysql5.7
Docker 拉取镜像 Docker拉取镜像默认是从DockerHub上面拉取，上面有各厂商提供的优质官方镜像，可以直接拉取使用。或者也可以用DockerFile自定义构建你自己的镜像。
sudo docker pull mysql:5.7 //拉取镜像到本地 注：上面mysql:5.7指的是拉取5.7版本的mysql，如果不加直接写mysql的话默认是拉取mysql的最新版本。
如果显示上面这样，说明已经拉取好了。
查看镜像 sudo docker images //查看本地镜像 创建容器 创建 sudo docker run -d -p 3306:3306 --name mysql5.7 -e MYSQL_ROOT_PASSWORD=root mysql:5.7 -d 指定容器运行于后台 -p 端口映射 主机端口:容器端口 &amp;ndash;name 自定义容器名字，方便记忆，不设置的话会随机生产 -e 容器环境变量 创建好的话会显示一串随机生产的id
查看创建好的容器 sudo docker ps -a -a 显示所有创建好的容器，如果不加只显示正在运行的容器 Mysql 进入容器 sudo docker exec -it mysql5.7 bash -i 打开STDIN，用于控制台交互 -t 分配tty设备，该可以支持终端登录 登录mysql mysql -uroot -p 注：然后输入刚才创建容器时的密码，就是MYSQL_ROOT_PASSWORD这个参数
创建测试数据库 create database test; 创建mysql用户 create user &amp;#39;zmh&amp;#39;@&amp;#39;%&amp;#39; identified by &amp;#39;zmh&amp;#39;; 注：&amp;quot;%&amp;ldquo;表示可以任意ip访问</description></item></channel></rss>