<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Recursive on Greycode's Blog</title><link>https://blog.greycode.top/tags/recursive/</link><description>Recent content in Recursive on Greycode's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 17 Aug 2019 12:38:52 +0000</lastBuildDate><atom:link href="https://blog.greycode.top/tags/recursive/index.xml" rel="self" type="application/rss+xml"/><item><title>递归算法-获取json中指定key的所有值</title><link>https://blog.greycode.top/posts/algorithm-recursive-01/</link><pubDate>Sat, 17 Aug 2019 12:38:52 +0000</pubDate><guid>https://blog.greycode.top/posts/algorithm-recursive-01/</guid><description>今天在工作中遇到要解析json并获取json里所有指定key的值，再把key的值插入对应的数据映射表。于是写了一个递归算法来取值。
1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;fastjson&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.58&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 2.创建两个工具类方法，用来判断传入的是不是json对象或json数组 public static boolean isJSONObj(Object json){ return json instanceof JSONObject; } public static boolean isJSONArray(Object json){ return json instanceof JSONArray; } java中的instanceof也称为类型比较运算符，因为它将实例与类型进行比较。它返回true或false。
3.建立核心重载方法 public static void getJSONValue(JSONObject json,String k,List&amp;lt;String&amp;gt; list){ for (Object j:json.keySet()){ if(isJSONObj(json.get(j))){ //是对象 JSONObject j2= JSON.parseObject(json.get(j).toString()); getJSONValue(j2,k,list); }else if(isJSONArray(json.get(j))){ JSONArray j3=JSON.parseArray(json.get(j).toString()); //是数组 getJSONValue(j3,k,list); }else if(j==k){ //是字符串 list.add(json.get(j).toString()); } } } public static void getJSONValue(JSONArray json,String k,List&amp;lt;String&amp;gt; list){ for (Object j:json){ if(isJSONObj(j)){ //是对象 JSONObject j2= JSON.</description></item></channel></rss>