<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Singleton on Greycode&#39;s Blog</title>
    <link>http://localhost:1313/tags/singleton/</link>
    <description>Recent content in Singleton on Greycode&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Oct 2019 21:16:37 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/singleton/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计模式系例-单例模式</title>
      <link>http://localhost:1313/posts/gof-singleton/</link>
      <pubDate>Tue, 22 Oct 2019 21:16:37 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/gof-singleton/</guid>
      <description>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬
前言 网上说单例模式是所有模式中最简单的一种模式，巧的是我也这么认为。不过越简单的东西，往往坑就隐藏的越深，这边文章我会把我知道的几个坑所出来。
一.什么是单例模式 ​ 就如同他的名字一样，&amp;lsquo;单例&amp;rsquo;-就是只有一个实例。也就是说一个类在全局中最多只有一个实例存在，不能在多了，在多就不叫单例模式了。
1.白话小故事 ​ 程序员小H单身已久，每天不是对着电脑，就是抱着手机这样来维持生活。某日，坐在电脑前，突然感觉一切都索然无味。谋生想找一个对象来一起度过人生美好的每一天。
​ 于是精心打扮出门找对象，由于小H很帅，很快就找到了心仪的另一半&amp;ndash;小K。小H的心中永远只有小K一个人，而且发誓永远不会在找新对象。
小H和小K的关系就是单例模式，在小H的全局中只有一个小K对象，且无第二个，如果有第二个的话，他们之间的关系就出问题了。哈哈
2.用在哪里 ​ 单例模式一般用在对实例数量有严格要求的地方，比如数据池，线程池，缓存，session回话等等。
3.在Java中构成的条件 静态变量 静态方法 私有构造器 二.单例模式的两种形态 1.懒汉模式 线程不安全
public class Singleton { private static Singleton unsingleton; private Singleton(){} public static Singleton getInstance(){ if(unsingleton==null){ unsingleton=new Singleton(); } return unsingleton; } } 2.饿汉模式 线程安全
public class Singleton { private static Singleton unsingleton=new Singleton(); private Singleton(){} public static Singleton getInstance(){ return unsingleton; } } 调用 public class Test { public static void main(String[] args) { Singleton singleton1=Singleton.</description>
    </item>
    
  </channel>
</rss>
