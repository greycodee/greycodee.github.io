<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工厂方法模式 on Greycode&#39;s Blog</title>
    <link>http://localhost:1313/tags/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/</link>
    <description>Recent content in 工厂方法模式 on Greycode&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 Dec 2019 17:25:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>设计模式系列-工厂模式</title>
      <link>http://localhost:1313/posts/gof-factory-method/</link>
      <pubDate>Sun, 15 Dec 2019 17:25:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/gof-factory-method/</guid>
      <description>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬
前言 工厂模式有一下三种
简单工厂模式 工厂方法模式 抽象工厂模式 其中简单工厂模式不在23中模式之中，更多的是一种编程习惯，而我们平常所说的工厂模式一般指的是工厂方法模式，抽象工厂在实际的业务开发中也用的比较少，因为它有时候违背了开闭原则．由于篇幅有限，抽象工厂本文就不讲了，以后单独讲；
简单工厂模式 简单工厂到底有多简单呢？简单到只有一个工厂，这个工厂相当于是万能工厂，你想要什么，只要和它说一声，它就会想方设法的去抱你创建，然后给你；举个买车的简单的例子：
当我要买车的时候，我选了这两种车．
/** * 创建一个汽车接口 * */ public interface Car { /** * 汽车能动 * */ void run(); } /** * 奔驰车 * */ public class Benz implements Car { @Override public void run() { System.out.println(&amp;#34;大奔开动了&amp;#34;); } } /** * 五菱神车 * */ public class Wuling implements Car { @Override public void run() { System.out.println(&amp;#34;五菱神车开动了&amp;#34;); } } 选是选好了，可是要怎么得到呢？是不是下意识的new一个出来？
//我要奔驰车 Benz　myCar=new Benz(); 如果是这样的话，就相当于自己亲手造了一辆奔驰车出来，因为是你自己new出来的嘛！！！！！</description>
    </item>
    
  </channel>
</rss>
