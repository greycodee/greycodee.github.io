<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on Greycode's Blog</title><link>https://greycode.top/categories/linux/</link><description>Recent content in Linux on Greycode's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 01 Sep 2021 15:47:14 +0000</lastBuildDate><atom:link href="https://greycode.top/categories/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>centos 多网卡配置优先级</title><link>https://greycode.top/posts/0a5a3927baea4155849c174e4c613913/</link><pubDate>Wed, 01 Sep 2021 15:47:14 +0000</pubDate><guid>https://greycode.top/posts/0a5a3927baea4155849c174e4c613913/</guid><description>过程 查看网卡配置
[root@localhost ~]# ip addr 1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: em1: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 34:17:eb:f0:18:8f brd ff:ff:ff:ff:ff:ff inet 192.168.0.84/24 brd 192.168.0.255 scope global noprefixroute em1 valid_lft forever preferred_lft forever inet6 240e:390:c6a:c3a0:3617:ebff:fef0:188f/64 scope global noprefixroute dynamic valid_lft 259182sec preferred_lft 172782sec inet6 fe80::3617:ebff:fef0:188f/64 scope link noprefixroute valid_lft forever preferred_lft forever 3: em2: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc mq state UP group default qlen 1000 link/ether 34:17:eb:f0:18:90 brd ff:ff:ff:ff:ff:ff inet 192.</description></item><item><title>后端服务器时间不一致问题解决手册</title><link>https://greycode.top/posts/9afc3efaec15479bb5fbc6f670594a94/</link><pubDate>Tue, 15 Jun 2021 10:32:50 +0000</pubDate><guid>https://greycode.top/posts/9afc3efaec15479bb5fbc6f670594a94/</guid><description>时区问题 一般快 8 小时，慢 8 小时的问题都是时区问题，直接把时区改成 CST 时区
编辑系统环境变量文件 /etc/profile
export TZ=&amp;#39;CST-8&amp;#39; Linux 系统时间不同步问题 Linux 系统时间比正常时间快几分中或慢几分钟，但是时区是正确的 CST 时区，这是就要用到 ntpdate 这个命令了
安装 #centos,redhat系列 yum install ntpdate #debian,ubuntu系列 apt install ntpdate #archlinux系列 pacman -S ntpdate 2、通过ntpdate命令从时钟服务器同步
我们这里选用中国ntp服务器cn.pool.ntp.org来作为时钟同步的来源。为能正常访问到cn.pool.ntp.org，你的Linux系统应该能访问外网才行。
执行命令如下：
ntpdate cn.pool.ntp.org 3、配置crontab自动执行同步
如果每次手动执行，显然是很麻烦的。这里，我们使用crontab定时任务来定期执行ntpdate同步命令，例如我们每10分钟或一小时执行一次，可以通过以下方式实现。
首先在命令终端中输入crontab -e命令，然后输入如下命令保存即可。
crontab -e 开始编辑文件内容，输入定时执行命令：
#每10分钟执行一次 */10 * * * * /usr/sbin/ntpdate cn.pool.ntp.org 或者
#每一个小时执行一次 0 * * * * /usr/sbin/ntpdate cn.pool.ntp.org 参考资料 https://linux265.com/news/6009.html</description></item><item><title>Hexo使用UUID生成文章路径</title><link>https://greycode.top/posts/79b5fe12-9c60-4b93-be92-dffb00fa39c7/</link><pubDate>Wed, 27 Jan 2021 17:51:05 +0000</pubDate><guid>https://greycode.top/posts/79b5fe12-9c60-4b93-be92-dffb00fa39c7/</guid><description>教程 编写一个名为hexoN的脚本文件 #!/bin/bash uuid=$(sudo cat /proc/sys/kernel/random/uuid) echo $uuid hexo new $uuid 添加执行权限 chmod +x hexoN 在用户根目录的.zshrc(因为我用的是ohmyzsh，所以是这个文件，一般是.bashrc，也可直接加载系统文件/etc/profile中)追加一条 # 后面地址是存放这个脚本的文件夹路径 根据实际更改 export PATH=$PATH:/home/zheng/software/shell 执行命令是刚才追加的内容生效 source .zshrc 使用 到Hexo博客的根目录执行</description></item><item><title>使用GitHub Actions编译树莓派内核</title><link>https://greycode.top/posts/github-actions-build-pi-kernerl/</link><pubDate>Tue, 26 Jan 2021 15:56:07 +0000</pubDate><guid>https://greycode.top/posts/github-actions-build-pi-kernerl/</guid><description>仓库地址 仓库地址：https://github.com/GreyCode9/make-raspberrypi-kernel
创建秘钥 点击Github右上角头像 -&amp;gt; Settings -&amp;gt; Developer settings -&amp;gt; Personal access tokens -&amp;gt; Generate new token 或者直接点这个链接进入： https://github.com/settings/tokens
创建后保存这个秘钥(秘钥只显示一次)
创建仓库 创建仓库**make-raspberrypi-kernel**
然后点击仓库的Settings -&amp;gt; Secrets -&amp;gt;New repository secret
然后填入刚才生成的秘钥
创建Actions 接着点击Actions ,创建一个Actions，然后填入如下内容
name: Make RaspberryPi Kernel on: push: tags: - &amp;#39;v*&amp;#39; # 当推送的Tag为v开头的，就会触发构建 env: USE_SSH_CONFIG: true # 是否使用ssh连接进行 true:使用 false:不使用 jobs: build: runs-on: ubuntu-18.04 steps: - uses: actions/checkout@v2 - name: pull RaspberryPi Kernel linux run: | cd ../ git clone https://github.</description></item><item><title>fastDFS安装使用教程</title><link>https://greycode.top/posts/linux-fastdfs-install/</link><pubDate>Thu, 07 May 2020 13:34:10 +0000</pubDate><guid>https://greycode.top/posts/linux-fastdfs-install/</guid><description>FastDFS简介 FastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB &amp;lt; file_size &amp;lt;500MB）为载体的在线服务。
FastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。
Tracker Server：跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的 storage server和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。
Storage Server：存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份。
Client：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。
结构图
上传文件流程
安装环境 系统及软件版本 Git开源地址 Centos 7 # libfastcommon V1.0.43 https://github.com/happyfish100/fastdfs fastdfs V6.06 https://github.com/happyfish100/libfastcommon 我虚拟机装的Centos7的ip地址是172.16.54.137
安装前工作 关闭防火墙 为了方便，先关闭防火墙。线上环境安装可安装后开放对应端口。
service firewalld stop 下载所需安装包 libfastcommon wget https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz -O libfastcommon.tar.gz fastDFS wget https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz -O fastdfs.tar.gz 安装fastDFS环境 解压安装libfastcommon tar -zxvf libfastcommon.tar.gz &amp;amp;&amp;amp; cd libfastcommon-1.0.43/ &amp;amp;&amp;amp; .</description></item><item><title>树莓派安装docker</title><link>https://greycode.top/posts/build-docker-pi/</link><pubDate>Fri, 30 Aug 2019 18:33:03 +0000</pubDate><guid>https://greycode.top/posts/build-docker-pi/</guid><description>前言 和平常x86_64架构的电脑安装docker不同，树莓派是ARM架构的，所以安装步骤比较繁琐一点。
使用APT源安装docker 更新apt软件源及安装必备组件。为了确认所下载软件包的合法性，还需要添加软件源的 GPG 密钥。
$sudo apt-get update $sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg2 \ lsb-release \ software-properties-common $curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/raspbian/gpg | sudo apt-key add - 添加docker ce 软件源 首先执行以下一行命令，然后记一下输出的结果
$ echo $(lsb_release -cs) stretch 在/etc/apt/sources.list.d目录下新建文件docker.list
$ sudo vi /etc/apt/sources.list.d/docker.list 在文件里添加下面这行
deb [arch=armhf] https://download.docker.com/linux/raspbian $(lsb_release -cs) stable 把$(lsb_release -cs)改为刚才第一行输出的结果，比如我的输出的是stretch，改完后如下
deb [arch=armhf] https://download.docker.com/linux/raspbian stretch stable 保存，退出
安装docker ce 依次执行以下两行命令，即可完成安装
$ sudo apt-get update $ sudo apt-get install docker-ce 启动 $ service docker start 启动 $ service docker stop 停止 $ service docker status 状态 $ service docker restart 重启</description></item><item><title>JDK时区问题</title><link>https://greycode.top/posts/problem-jdk-timezone/</link><pubDate>Tue, 27 Aug 2019 15:26:30 +0000</pubDate><guid>https://greycode.top/posts/problem-jdk-timezone/</guid><description>今天碰到一个大坑，弄了快一个小时才解决掉；
一个管理台后端服务，用docker隔离了三个容器，oracle,nginx,tomcat;后发现管理台查出来的时间和现实时间相差8个小时，一查是linux时区问题；
于是改之,三台容器都输入一下代码 cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime 测试了一下，发现问题docker容器的时区是正确了，可是问题并未得到解决，数据库时间还是慢了8个小时。
于是又查资料，换另外一种设置时区的方法； vi /etc/sysconfig/clock 在里面输入如下内容
ZONE=&amp;#34;Asia/Shanghai&amp;#34; UTC=false ARC=false 保存，重启，测试。。。。。发现还是一样,快疯了
第三种方法，设置TZ环境变量 设置环境变量可以在设置系统级别的/etc/profile ,也可以设置用户级别的home目录的.bashrc。由于用的是docker，防止变量重启失效，只能在.bashrc里设置。在.bashrc加入如下内容：
export TZ=&amp;#39;CST-8&amp;#39; 保存：然后执行
source .bashrc 使设置立即生效。
重启容器，测试，发现时间正常了。。。。哈哈哈哈
总结 上面问题出在jdk的new Date()方法，所以只要设置jdk所在的那个docker容器的变量就可以，不用每个都设置。jdk的new Date()方法每次调用都会去取环境变量TZ的时区，TZ是TimeZone的缩写，容器内部操作系统并未指定时区（TimeZone）信息，系统默认使用世界标准时（UTC+0),所以导致new Date()出来的数据存库会比当前时间慢8个小时；</description></item></channel></rss>