{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/vexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","path":"fonts/SourceSansPro.ttf","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/gitment.js","path":"js/gitment.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/qrious.js","path":"js/qrious.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/catalog.png","path":"css/images/catalog.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/error_icon.png","path":"css/images/error_icon.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/escheres.png","path":"css/images/escheres.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/favicon.ico","path":"css/images/favicon.ico","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/logo.png","path":"css/images/logo.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/menu.png","path":"css/images/menu.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/top.png","path":"css/images/top.png","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":0,"renderable":1},{"_id":"themes/vexo/source/css/plugins/gitment.css","path":"css/plugins/gitment.css","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/baidu-verify-9BFFE2B7F8.txt","path":"baidu-verify-9BFFE2B7F8.txt","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/root.txt","path":"root.txt","modified":0,"renderable":0},{"_id":"source/images/WechatIMG5.jpeg","path":"images/WechatIMG5.jpeg","modified":0,"renderable":0},{"_id":"source/images/gof-factory-method/20191215162632-20211008153952135.gif","path":"images/gof-factory-method/20191215162632-20211008153952135.gif","modified":0,"renderable":0},{"_id":"source/images/gof-factory-method/20191215163319-20211008153952143.jpg","path":"images/gof-factory-method/20191215163319-20211008153952143.jpg","modified":0,"renderable":0},{"_id":"source/images/gof-factory-method/20191215163907-20211008153952183.gif","path":"images/gof-factory-method/20191215163907-20211008153952183.gif","modified":0,"renderable":0},{"_id":"source/images/gof-factory-method/20191215170620-20211008153952135.jpg","path":"images/gof-factory-method/20191215170620-20211008153952135.jpg","modified":0,"renderable":0},{"_id":"source/images/gof-factory-method/gof-factory-method-20211008153952229.jpg","path":"images/gof-factory-method/gof-factory-method-20211008153952229.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"9e6f55d7c01343e1ffd36d55860587fd269d6cb6","modified":1633679844155},{"_id":"source/CNAME","hash":"0e08caaee6255bfc75108ea847b152278f5d06d8","modified":1633686282122},{"_id":"source/clock.html","hash":"f379a0cd10b6140ff06122473aa0d9d3fc69c742","modified":1633679844193},{"_id":"source/baidu-verify-9BFFE2B7F8.txt","hash":"50cc3c23409426c3e28cf8800423ecda502f1eb8","modified":1633679844192},{"_id":"source/ea667b0f708cd4ded0b79ebbdd99373a.html","hash":"8285746bede8562c1bc26a88041d01ca82127d20","modified":1633679844193},{"_id":"source/robots.txt","hash":"4dc86d8e587c036a47970ac0271a3fa67cfaf1c4","modified":1633686275303},{"_id":"source/root.txt","hash":"51c99f66271aedfff930264c82fdbe9b4d05b67e","modified":1633679844199},{"_id":"source/_data/wikis.yml","hash":"457e18a459a537f2b95926cef5a3dead0ac9fc2e","modified":1633686119760},{"_id":"source/_data/links.yml","hash":"6a33eda826df0f8f900595b6c090df7d2680a701","modified":1633686115071},{"_id":"source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1633679844192},{"_id":"source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1633679844192},{"_id":"source/friends/index.md","hash":"75fb0e0cea8341302f9dd72c6cdab156ead139d3","modified":1633679844193},{"_id":"source/categories/index.md","hash":"5c03e8bf8ebfd90090c540be943e1433aadb685a","modified":1633679844193},{"_id":"source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1633679844198},{"_id":"source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1633679844198},{"_id":"source/images/WechatIMG5.jpeg","hash":"31388898b2c2d032ad7be6fcba3cf90c64f39257","modified":1633679844194},{"_id":"source/series/index.md","hash":"364b07ea1e0b28e792fc7bbddac0069c771dbefa","modified":1633679844199},{"_id":"source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1633679844198},{"_id":"source/wikis/index.md","hash":"721dede17763912e4f6edcedb42e732e2fbba880","modified":1633679844200},{"_id":"source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1633679844199},{"_id":"source/_posts/algorithm/array-vs-linked.md","hash":"2d952902641a0a12f4fc65043eca224692dd9d1f","modified":1633680836941},{"_id":"source/_posts/algorithm/algorithm-avltree-01.md","hash":"6dc38e2338e71e83f6c17a94cffc438df7f4355f","modified":1633683646051},{"_id":"source/_posts/algorithm/algorithm-recursive-01.md","hash":"b4e3fe40cc8d4cb0c8459f0b37e7d5ad1c217b09","modified":1633680785025},{"_id":"source/_posts/gof/gof-abstract-factory.md","hash":"b2998544a96e293911d604ef492fa78f11b62d69","modified":1633681114240},{"_id":"source/_posts/gof/gof-factory-method.md","hash":"1b7f01b9e7f53b3efee81536e7595d7fc397e08d","modified":1633681175554},{"_id":"source/_posts/gof/234C81B9931C44CB9B88E0E53210BB48.md","hash":"761ccb4342f8217547ccaacaa1085bafbf06e7e5","modified":1633681392463},{"_id":"source/_posts/gof/gof-builder.md","hash":"e4d795685bda98b6442eaec81d447517ec2e3819","modified":1633681141786},{"_id":"source/_posts/gof/gof-oop-7-all.md","hash":"6fe33bdddc71e48ee9a787d622ad5d0813539b95","modified":1633681191644},{"_id":"source/_posts/gof/gof-prototype.md","hash":"f2182438ff61fbffa1f0eb6746ceee76f4f780fb","modified":1633681216105},{"_id":"source/_posts/gof/gof-singleton.md","hash":"b803c225904adef62b3398359bc1f927164501b1","modified":1633681227570},{"_id":"source/_posts/gof/gof-taemplate-method.md","hash":"fcc1924d9689de75839d112147f77384e3404233","modified":1633681317058},{"_id":"source/_posts/archive/33f09b03-a5a7-4d66-93d3-7063905f9b81.md","hash":"c323b6caa3405682473a16a80966129c4a59ecc8","modified":1633681031213},{"_id":"source/_posts/archive/2852F14D7D13471798CE28C544741E89.md","hash":"1a26244a867cbcd863e1baecbe9a8ee110e0d85d","modified":1648396714832},{"_id":"source/_posts/archive/FA21243A47644D98B4380AE439D2A69F.md","hash":"f4ad20bf658631f10ae44ccb60738ca11c0a26a4","modified":1645514166034},{"_id":"source/_posts/dubbo/dcf9d2d8-9c11-404a-874d-57834303dcac.md","hash":"1c56e6469e3273367498436f6649b3721782c0f3","modified":1633679844161},{"_id":"source/_posts/golang/e1273901-26b1-4cfb-a55c-a9f5047855a5.md","hash":"8a8fcf98e10033f01d15ce1bab8f8577be09b1d6","modified":1633679844164},{"_id":"source/_posts/golang/47ca1795-f020-44a6-9847-02ef3955f6c9.md","hash":"79a1a83569df5dbd047f3424ee33ad836d84f975","modified":1633679844163},{"_id":"source/_posts/linux/9AFC3EFAEC15479BB5FBC6F670594A94.md","hash":"ffd32cb38d29988420c5461135aceaee77df5e1a","modified":1633679844183},{"_id":"source/_posts/linux/0A5A3927BAEA4155849C174E4C613913.md","hash":"a71cf3fab7455a2eef924863b23d7ef749073989","modified":1633679844182},{"_id":"source/_posts/docker/docker-mysql.md","hash":"f340891bc267440ab2a603b804593927b865ed0f","modified":1633681063721},{"_id":"source/_posts/docker/docker-transfer-pit.md","hash":"c55ff479a0712b42be6ab7de2d4cc00026aae0b4","modified":1633681085494},{"_id":"source/_posts/linux/build-docker-pi.md","hash":"f7bd3e6cf1b94a922c350abe8c0224f0893f6c05","modified":1633679844183},{"_id":"source/_posts/linux/79b5fe12-9c60-4b93-be92-dffb00fa39c7.md","hash":"aa866f4b6f7e97ddba54c477d805914f0cf08fc3","modified":1633683422542},{"_id":"source/_posts/linux/problem-jdk-timezone.md","hash":"3170b50dea6e6c832306747b81885c2ae921832d","modified":1633679844184},{"_id":"source/_posts/linux/linux-fastdfs-install.md","hash":"1c15ae034fe2d0a71b3d51a4f64d01fe4832650c","modified":1633683408723},{"_id":"source/_posts/java/74CAAAFD610241A1B8ECDB5F3BB33EE4.md","hash":"858aaed402a1270f8ac0632a9a51e0b81c95ccc8","modified":1633679844164},{"_id":"source/_posts/java/CA3AB1D58EA74B76A5FD69F79DD5EC79.md","hash":"08d92bfd7e615c1eaa4dbad5cafb9e313cbd4545","modified":1633679844164},{"_id":"source/_posts/linux/github-actions-build-pi-kernerl.md","hash":"de5ac7c4a8f67fe91200099ac855c371aca3f005","modified":1633683379001},{"_id":"source/_posts/java/java-array-init.md","hash":"85995b4a0a9f03679016e42477d168982857ca74","modified":1633679844168},{"_id":"source/_posts/java/java-8-stream-method.md","hash":"39d3ffad9f5e7012911fd591cbfe726a996bb0ea","modified":1633682032432},{"_id":"source/_posts/java/java-arraylist-source-1.md","hash":"e89d9dafadb2d8407b9e477640fca4be73b9121d","modified":1633683610277},{"_id":"source/_posts/java/java-base-data-pack.md","hash":"6947b77a7b5b1cadb2f2a72a1c65daa394424df3","modified":1633681939596},{"_id":"source/_posts/java/java-base-wei.md","hash":"26ba42778361223f5417e5c8a9c359639a2e8280","modified":1633681996838},{"_id":"source/_posts/java/java-equals.md","hash":"8021525767fa9913c2280da86a9c6ca4e4506c78","modified":1633682013192},{"_id":"source/_posts/java/jdkproxy-cglib.md","hash":"81e0625d305ae5d927ea966e849efcf2b312d940","modified":1633683547828},{"_id":"source/_posts/java/problem-java-base64.md","hash":"423d236fa289c5bd0f1f9a185c6a6a10cff941ef","modified":1633679844179},{"_id":"source/_posts/java/mdc-test.md","hash":"6dfee6ed957daa7b438fc243678837a427c1a7ab","modified":1633682075148},{"_id":"source/_posts/java/java-isnull-four.md","hash":"557383cf08080ce2cdfe03bba449960e962702a8","modified":1633682020873},{"_id":"source/_posts/recommend/recommend-tool-1.md","hash":"9112ea145aedfeea68f392c63889748b1726fa2f","modified":1633679844186},{"_id":"source/_posts/java/nacos-post-error.md","hash":"fac1d611ab4471ad417450457868bac7fb1a4098","modified":1633679844178},{"_id":"source/_posts/mysql/mysql-update-driver-connector-8.md","hash":"1719dcaa6795575545c096178b92a7b31ca3d65a","modified":1633679844184},{"_id":"source/_posts/mysql/mysql-utf8mb4-error.md","hash":"e1bb4e2d83ed4ee95b2e851b55daae3bf724d1f6","modified":1633683329754},{"_id":"source/_posts/recommend/git-commend-note.md","hash":"51a6d36d2a3857bf17d2978e8a24190a38d8be10","modified":1633683463096},{"_id":"source/_posts/rocketmq/rocketmq-cluster-build.md","hash":"851848cf65a679dc7245281146581a60610de966","modified":1633683271945},{"_id":"source/_posts/protocol/0143CD7666CD44389FE6F565E10EEE1A.md","hash":"c9b66398f005d41d22ac578a0f30652f2d0dd5e9","modified":1633683318664},{"_id":"source/_posts/protocol/4dd3868b-e23e-4446-b7ec-fd95e98612f4.md","hash":"141fc50bf8fa9e58c89e20a3c5fdb197f643e461","modified":1633679844185},{"_id":"source/_posts/spring/9944CC0FEBD34A3EBD04EAA1564F4C3A.md","hash":"9f9903e9382574638441d1d8f611f5867c035d84","modified":1633683263784},{"_id":"source/_posts/spring/fegin-resttemplate-addheard.md","hash":"3d05ce1296dcff27e37b177e35032868e168a16a","modified":1633679844188},{"_id":"source/_posts/spring/EEF92888390B4E7C866FE7ADA6A0B42B.md","hash":"9c133babff7dbd218a10767fd666b91cbf2fe5fa","modified":1633683191232},{"_id":"source/_posts/spring/C2E28AA517AA45768B679D93F248B5DE.md","hash":"8f6a9fe69dad6611955aed633ca74f80b7f6eeeb","modified":1633683222076},{"_id":"source/_posts/spring/spring-boot-resttemplate-example.md","hash":"afe3d61b10fcff5d3102d188e4f0f203f067915f","modified":1633683089255},{"_id":"source/_posts/spring/apring-aop-ann.md","hash":"0f3b2f35cee9918a7a1247cd3577e9ee7dbb3013","modified":1633679844188},{"_id":"source/_posts/vue/vue-cli3-11-problem.md","hash":"6c4f20413d88487d55371da3e119a0d938d08bec","modified":1633679844192},{"_id":"source/_posts/vue/2CA7C67D02E74713A030F09651A5F164.md","hash":"06b1c65b1270c7ccb08d9841a1f2614519ee556a","modified":1633679844191},{"_id":"source/_posts/vertx/10EF2E95447C468CB55BD7BD0675C090.md","hash":"766f45c1246a13b61ac5fa5da21b3928ecbdd0c4","modified":1633679844191},{"_id":"source/_posts/jenkins/build-jenkins-ci-cd.md","hash":"27bedbbd6aa42dd4705c5a9cdd09bee0edb1440f","modified":1633682236955},{"_id":"source/_posts/jenkins/build-jenkins-docker.md","hash":"d8fb76aeabfe2eddb1a9e0590ea209266a8a7406","modified":1633748804156},{"_id":"source/_posts/jenkins/build-jenkins-sonarqube.md","hash":"99074b85a9f76230a3ff3a7a88675cadd0cce2a6","modified":1633749259099},{"_id":"source/_posts/jenkins/build-jenkins-mavne.md","hash":"2c09172fa75a1e4c632862dd97bf4a71d300afe3","modified":1633749313760},{"_id":"source/_posts/jenkins/problem-jenkins-02.md","hash":"970332f4b854b257ed351c9f128eafe5a1cb74cc","modified":1633749192872},{"_id":"source/_posts/tool/9ACF61395A77470CA029D24AEC2CA42F.md","hash":"3d1d1bc9165906567923ec2778ffbfa714c80717","modified":1633679844190},{"_id":"source/_posts/jenkins/problem-jenkins-01.md","hash":"e9e7ace68b1eeede1e0b0771275bf5f0e2ef3f39","modified":1633749136486},{"_id":"source/_posts/tool/21324399FBDC41CBA815D2069BB62168.md","hash":"1b9a2f145af3d515a98a3bf2c04c07e6af7ac7c1","modified":1633682901062},{"_id":"source/_posts/tool/0D992236EC6B4E5EAD15886D992FF84B.md","hash":"ddc9e77a57bb634f02973408f5b914f426b50191","modified":1633682947031},{"_id":"source/_posts/tool/775FF9A0CE4940EBBB45FED3FAD7AB5B.md","hash":"402d2bf03aecb6ec3426d7257f59dd1abf954468","modified":1633682917756},{"_id":"source/_posts/tool/C334612CBDCE41E79F7EA6A2F3F4C10C.md","hash":"5d2a3b26f0b37d669b682a20f2a3b5a4605dc06b","modified":1633682881377},{"_id":"source/images/gof-factory-method/20191215162632-20211008153952135.gif","hash":"87e6b607287ba716aba531441fa756f0f7dfe223","modified":1633679844194},{"_id":"source/_posts/tool/git-tool-command.md","hash":"48e43ea1226c83d6e6c78f20371f37cf35258242","modified":1633682814770},{"_id":"source/images/gof-factory-method/20191215163319-20211008153952143.jpg","hash":"1948fb7e88908d9ff9246f4fafd1b0ff80e2c03a","modified":1633679844194},{"_id":"source/images/gof-factory-method/20191215170620-20211008153952135.jpg","hash":"a3f86c7d55967510c85a8ec8fb18b6795e963a81","modified":1633679844195},{"_id":"source/images/gof-factory-method/20191215163907-20211008153952183.gif","hash":"4f827c91be532cfcce26b9752ec0c995bc38e5c7","modified":1633679844195},{"_id":"source/_posts/archive/essay/8B40046C17644103BD2A256EB938884C.md","hash":"7b0af52bbd3d727911e727c673fb551bc66f4cac","modified":1633679844158},{"_id":"source/_posts/archive/essay/A98D5EC3509F483E80919CA2E09BDA1B.md","hash":"a6e9984c60598ed23c29d042248ae9e868b11196","modified":1633679844158},{"_id":"source/_posts/archive/quarkus/5756337C1CEA4B599E678A3380DCFE00.md","hash":"a320839eaa86327966a067f51fa03928ff65fae4","modified":1633679844159},{"_id":"source/_posts/archive/quarkus/5870388109C640649633FA0BB2F5C9C1.md","hash":"8b92bb00a6d79c840af5e1969df366b96a95b28f","modified":1633679844159},{"_id":"source/_posts/archive/code/FFC3580D7E244B5282E3FDD7F3EB8E95.md","hash":"89724cf98ef85f6085f47f0db036eca6d3ec3d46","modified":1633680894595},{"_id":"source/_posts/archive/quarkus/3EC6E900CDCB4BCEBA3B0BE40C9AADBB.md","hash":"bb8e628d8ccd6d73fb48e05121afbd5998d5de87","modified":1633680912890},{"_id":"source/_posts/archive/zookeeper/2B9475B258994C18BCC5FCFA4B6D81D2.md","hash":"c01f4788b1a349e9ace71649cd5ebea497a5c305","modified":1633679844160},{"_id":"source/_posts/archive/web-security/sso-and-cas.md","hash":"8f932d84dd73e1f32be32d91db78b5941015bec7","modified":1633679844159},{"_id":"source/_posts/archive/web-security/oauth-and-jwt.md","hash":"96d55fcf4debf7daaaf035a641997676108f9292","modified":1633680937475},{"_id":"source/_posts/archive/web-security/spring-security-oauth-server-demo.md","hash":"ba3802c4d839d6088df94033110d60eda666b280","modified":1633681000509},{"_id":"source/_posts/archive/zookeeper/8B8235DEF437432C99C81E97D68D0644.md","hash":"4335052ea7375d642fe48d93e5bae725999e97f2","modified":1633681019288},{"_id":"source/_posts/java/disruptor/18e3fbd6-ff4b-4a0a-b82f-a547dbef8d0c.md","hash":"ee86f7c12c51f9b30a4820c3fe5ae95c23bcf09c","modified":1633681497363},{"_id":"source/_posts/java/disruptor/926f33f0-651d-471a-ad0c-b632fcce8c0f.md","hash":"404a46a04d1be6cd864be664d74bbda887f4bc9a","modified":1633679844165},{"_id":"source/_posts/java/disruptor/b3025291-ae52-4d26-a70c-66a79bda07d7.md","hash":"b9452a01a0279c16dea8c7a869e7a1032a750ac7","modified":1633679844166},{"_id":"source/_posts/java/disruptor/9a1bdb74-8ed3-4905-88bc-7b3b4e0a4af2.md","hash":"f628a6220b56f226f378da2f7134264c8b9b63e5","modified":1633681465344},{"_id":"source/_posts/java/disruptor/ff51336d-70d4-449c-9214-fff2542bef1f.md","hash":"f6e03ee8e91b1c5298b3699c20e5016be89bf88f","modified":1633679844167},{"_id":"source/_posts/java/disruptor/a552f7f0-4cbe-4628-8fcf-02f8b8730b56.md","hash":"2ae13803e24871f27decc79379cd95a8a26c2354","modified":1633679844166},{"_id":"source/_posts/java/jvm/java-class-init.md","hash":"0affeceee0a5b3df8d100905c86b2895e1b00a86","modified":1633681570657},{"_id":"source/_posts/java/disruptor/c16646bf-1474-42a7-a5cd-84b99669062c.md","hash":"8e5f16659b4c34137aa58456cf98ca87753c9b58","modified":1633681426729},{"_id":"source/_posts/java/jvm/java-jvm-stack-1.md","hash":"d54b898e2c8707a01ac6e485be3c9b4c7352b923","modified":1633681663114},{"_id":"source/_posts/java/jvm/java-class-load-1.md","hash":"f5d054e63d405a21bec22992038199b976a5efab","modified":1633681594215},{"_id":"source/_posts/java/jvm/java-class-load-2.md","hash":"1ca814c77d1f803ce61eb744c342f7676d80edff","modified":1633681609019},{"_id":"source/_posts/java/jvm/jvm-gc-alg.md","hash":"a6c93154247a92f3d96ac8ad06a1df3530640f76","modified":1633681713859},{"_id":"source/_posts/java/jvm/jvm-javastack-EscapeAnalysis.md","hash":"7f43219d4f898a991be24b1f4fe319b406ee7069","modified":1633679844176},{"_id":"source/_posts/java/jvm/jvm-object-four-quote.md","hash":"d465c07348ac077528b7b5f69878ae844622adec","modified":1633681726345},{"_id":"source/_posts/java/nio/0702ff46-16cd-4520-9d33-0794cfda4b09.md","hash":"30cdb07b557632c7ed8acee6e2beca9766a81561","modified":1633679844178},{"_id":"source/_posts/java/jvm/jvm-object-is-alive.md","hash":"a5f676e80fd16ed36a5cea0ca18636e2cb9bf8ad","modified":1633681737972},{"_id":"source/_posts/java/nio/534d0985-a4a0-4239-ae81-d76378f64552.md","hash":"c9b15c3c4d869df7a5f2fd3d685a4a4bb5d91b80","modified":1633679844179},{"_id":"source/_posts/java/jvm/jvm-running-data-area.md","hash":"c893a8640f004f397762fb2f5fc59dffb7084ec8","modified":1633681749825},{"_id":"source/_posts/java/nio/2571330c-67ef-4d4c-8717-6c96768009c7.md","hash":"14a6c10459fdb25ccd8bd3cfda4eb69d69ad5135","modified":1633679844178},{"_id":"themes/vexo/.gitignore","hash":"37fb9fd49e7f944716efd3284a6bf55adb6dd0c2","modified":1648397654905},{"_id":"themes/vexo/LICENSE","hash":"3e135cd69c0e02c0a49dd43d571f600223cc61d1","modified":1648397654905},{"_id":"themes/vexo/README.md","hash":"76d30348cde696a75dd4f50b0747c5e8e3779046","modified":1648397654905},{"_id":"source/_posts/java/nio/8d2049e3-3eb1-46ed-a44b-57398964eb21.md","hash":"4d65cac4c9ecdc9d4b587174d9452a82d5c53292","modified":1633681757320},{"_id":"themes/vexo/package.json","hash":"44e46ed458ca4351db2a773bb4c09ac814b7b1e0","modified":1648397654910},{"_id":"themes/vexo/lint.sh","hash":"f580302e4aa9ccfb95a253851da6501d145613fe","modified":1648397654910},{"_id":"source/_posts/java/thread/create-thread-3.md","hash":"98d709f46415374ebac850f1c577c042136ec0f2","modified":1633681779373},{"_id":"themes/vexo/.travis.yml","hash":"cc482f06f4ea6962058f2548dcb814b954876e76","modified":1648397654905},{"_id":"themes/vexo/layout/archive.ejs","hash":"f2480a73048bcb8673d78283090634d0857b80fb","modified":1648397654909},{"_id":"themes/vexo/layout/about.ejs","hash":"76ba7418788eb2bb9ba46844f4d750734847d0b4","modified":1648397654909},{"_id":"themes/vexo/_config.yml","hash":"2d4979be3d2795e05707c26aeb646909bf170fa9","modified":1648397654906},{"_id":"themes/vexo/layout/index.ejs","hash":"9f12f5928d68d4d68175b825e18f89f3b0dfdb69","modified":1648397654909},{"_id":"themes/vexo/layout/page.ejs","hash":"c5a6f2f18b0cf664c7a34945ff46f83c81d6924c","modified":1648397654909},{"_id":"themes/vexo/layout/layout.ejs","hash":"a7b8f1debdca12d667ecd1bcc3d4bc6e13a23d7b","modified":1648397654909},{"_id":"themes/vexo/layout/series.ejs","hash":"32010111ef27d2eefec44aba5a865064659d613a","modified":1648397654910},{"_id":"themes/vexo/layout/project.ejs","hash":"a023b833a64006989c718c8d6125978a87fa2c3e","modified":1648397654909},{"_id":"themes/vexo/layout/wikis.ejs","hash":"3fd03ae9c1226663cb2e619172eb5f1c28219e94","modified":1648397654910},{"_id":"themes/vexo/_source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1648397654907},{"_id":"themes/vexo/layout/tags.ejs","hash":"256413f3c6098eba42fce8f24319913e4b2512dc","modified":1648397654910},{"_id":"themes/vexo/_source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1648397654906},{"_id":"themes/vexo/layout/_partial/archive.ejs","hash":"9abbf14034d581569c0b6c992fe22035cb5306b3","modified":1648397654907},{"_id":"themes/vexo/_source/series/index.md","hash":"364b07ea1e0b28e792fc7bbddac0069c771dbefa","modified":1648397654907},{"_id":"themes/vexo/layout/_partial/catalog.ejs","hash":"0352ce39c28074dcfc3bd6416680195eeb384fd1","modified":1648397654907},{"_id":"themes/vexo/layout/_partial/footer.ejs","hash":"6cf6b5ddb1c4c2e219fdb56ef0ab5c984bb4e7e9","modified":1648397654907},{"_id":"themes/vexo/layout/_partial/header.ejs","hash":"2d2aadbb48d74d520f42c7134006ff5bc455e218","modified":1648397654908},{"_id":"themes/vexo/layout/_partial/nav.ejs","hash":"3d8ddc1f6e135a240d40edd157cf37f5d0a12df6","modified":1648397654908},{"_id":"themes/vexo/layout/_partial/head.ejs","hash":"f15c85b3ede16ae3c0448d6a082c172423d162ac","modified":1648397654907},{"_id":"themes/vexo/layout/_partial/pager.ejs","hash":"3a1b9680fbfa3baa76933c7c17216996381ad241","modified":1648397654908},{"_id":"themes/vexo/layout/_third-party/google_analytics.ejs","hash":"d09107a4ee5753a2fbbdb16ddf79d23ff0618c19","modified":1648397654909},{"_id":"themes/vexo/layout/_partial/top.ejs","hash":"f09dea486246a580213005b21d4b38810dd16fb3","modified":1648397654908},{"_id":"themes/vexo/layout/_partial/tag.ejs","hash":"5d2a2c3f8ca7000945ab426a0c6939421974b224","modified":1648397654908},{"_id":"themes/vexo/layout/_third-party/mathjax.ejs","hash":"aa58f0cfe22e7151c1a0521bbfa5cbd76f6dcd9d","modified":1648397654909},{"_id":"themes/vexo/source/css/_config.styl","hash":"1130b937d5744335bb77cad18eb0d73ba47f429d","modified":1648397654910},{"_id":"themes/vexo/layout/_third-party/localsearch.ejs","hash":"fdf9e9f25b673c3f66694581cf5ebb578e5393b9","modified":1648397654909},{"_id":"themes/vexo/source/css/style.styl","hash":"9dcd5509187654c29d0d908016a052fd164d257c","modified":1648397654916},{"_id":"themes/vexo/source/js/script.js","hash":"1e0a395deba4f5ae66a5758590e094d26d777421","modified":1648397654920},{"_id":"themes/vexo/source/js/local-search.js","hash":"2d4c35e67f6ae2234a220c2898534d5bcb5245a2","modified":1648397654920},{"_id":"themes/vexo/source/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1648397654920},{"_id":"themes/vexo/layout/_partial/search/localsearch_button.ejs","hash":"3cb21e8d581ee998796f3f4bf9cd00abb9a67072","modified":1648397654908},{"_id":"themes/vexo/layout/_partial/search/localsearch_view.ejs","hash":"79e5e1a159d18b9e05961a47a4607b14be447e50","modified":1648397654908},{"_id":"themes/vexo/source/css/_partial/about.styl","hash":"1fc9572052194d94f86224a860e6b52435492e57","modified":1648397654911},{"_id":"themes/vexo/source/css/_partial/archive.styl","hash":"e80ddf26f2af3523632afeabd57f81592537985a","modified":1648397654911},{"_id":"themes/vexo/source/css/_partial/footer.styl","hash":"d90207a2b25e7a7a12b94cfcd5dde070422783e7","modified":1648397654911},{"_id":"themes/vexo/source/css/_partial/categories.styl","hash":"d78cf86064428693e2173b4f23535cf311d18091","modified":1648397654911},{"_id":"themes/vexo/source/css/_partial/catalog.styl","hash":"e3fd04eb0ae723def29592a0063e0706046cb6f2","modified":1648397654911},{"_id":"themes/vexo/source/css/_partial/header.styl","hash":"6154d83977e8e725c52786b14a4d9b3bc62b1061","modified":1648397654912},{"_id":"themes/vexo/source/css/_partial/markdown.styl","hash":"2a1a99a0a8a9ffab1e64b7d7c9241ce8d5c84c39","modified":1648397654912},{"_id":"themes/vexo/source/css/_partial/nav.styl","hash":"e92c010c5cd460e75c67083df8cdd0bf4d25cde4","modified":1648397654912},{"_id":"themes/vexo/source/css/_partial/pager.styl","hash":"888384c67429c7568aa38b5ebe5acae3cc4de367","modified":1648397654912},{"_id":"themes/vexo/source/css/_partial/project.styl","hash":"e9b6faadf4852bce3a4141cba0a102a7afb81e9f","modified":1648397654912},{"_id":"themes/vexo/source/css/_partial/tags.styl","hash":"5198a7f7c221341138ae5c65185e86b6e13e8e26","modified":1648397654913},{"_id":"themes/vexo/source/css/_partial/search.styl","hash":"4fa3d5c7efd1de510719157bd7a6ab3c9f24e9fd","modified":1648397654912},{"_id":"themes/vexo/_source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1648397654906},{"_id":"themes/vexo/source/css/images/error_icon.png","hash":"efec6e759508dd02e6fa8c4facd9a25a61aae055","modified":1648397654914},{"_id":"themes/vexo/source/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1648397654914},{"_id":"themes/vexo/source/css/images/alipay.jpg","hash":"c49822ea6f06f868c2404fb00a93f913c8fff7b5","modified":1648397654914},{"_id":"themes/vexo/source/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1648397654914},{"_id":"themes/vexo/source/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1648397654914},{"_id":"themes/vexo/source/css/images/favicon.ico","hash":"983ddcbe4c676e9dc58ebbe3323ba2e9dab68b46","modified":1648397654914},{"_id":"themes/vexo/source/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1648397654914},{"_id":"themes/vexo/source/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1648397654915},{"_id":"themes/vexo/source/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1648397654916},{"_id":"themes/vexo/source/css/images/wechat.jpg","hash":"5bed6d3eb9f71b227b0ea0187c1a7ba8caf5ee64","modified":1648397654915},{"_id":"source/_posts/java/java-arraydeque-source-1.md","hash":"e142b96f8914ee1ef9275f845f0b83f51a3b899c","modified":1633681796790},{"_id":"source/_posts/java/java-linkedlist-source-1.md","hash":"9049207863c6dfa83ad15b3b0aef76315d482999","modified":1633682025209},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1648397654918},{"_id":"themes/vexo/source/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1648397654919},{"_id":"source/images/gof-factory-method/gof-factory-method-20211008153952229.jpg","hash":"6ae751aa9446122ed7e2ec0765abaa87138924e1","modified":1633679844197},{"_id":"public/baidusitemap.xml","hash":"dc20b8df445a0e770d2d88283572e15ee1e5b72a","modified":1648398954707},{"_id":"public/atom.xml","hash":"e763995eb736e66623ef021be73c5b20177aa107","modified":1648398954707},{"_id":"public/content.json","hash":"5bd73ce40f0fb876c91d5b977f59e7fbafb4c4d1","modified":1648398954707},{"_id":"public/search.xml","hash":"b61562fb4f81483820e23efe5405fe3a037e63c9","modified":1648398954707},{"_id":"public/sitemap.xml","hash":"4a3dd73fb03522f04a50111bbff6b909f1df4395","modified":1648398954707},{"_id":"public/series/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1648398954707},{"_id":"public/404.html","hash":"9c28e261301b94c6e3c34015c813f69f77cae00d","modified":1648398954707},{"_id":"public/ea667b0f708cd4ded0b79ebbdd99373a.html","hash":"727512b91444c461f4aa17353cdc2ba0d98b8439","modified":1648398954707},{"_id":"public/about/index.html","hash":"1871ec4c78d6363288eec35cf8fcc5b2c09d2e13","modified":1648398954707},{"_id":"public/books/index.html","hash":"6ba7453e3a182ca98cfebdaf84ee20f3812d824a","modified":1648398954707},{"_id":"public/categories/index.html","hash":"979424816eb68ef56392234db7409a770e48e7f6","modified":1648398954707},{"_id":"public/friends/index.html","hash":"54739539f4429e177fd0e24f7ff12ea58fcb7642","modified":1648398954707},{"_id":"public/links/index.html","hash":"dc9a0aa05cb78a16ad3b7620c3f2a89024784dfd","modified":1648398954707},{"_id":"public/project/index.html","hash":"0a558b96dc1d9ca0fdb0490d1e96536fe23b379c","modified":1648398954707},{"_id":"public/repository/index.html","hash":"b868eaf58096a6e4f83d240a11fca1b81b7e212b","modified":1648398954707},{"_id":"public/wikis/index.html","hash":"7b2ffaaebe2ca1903c194803a488b801fb780a85","modified":1648398954707},{"_id":"public/archive/FA21243A47644D98B4380AE439D2A69F/index.html","hash":"0596c7505106da6a45f62792d621d1f4449a0fc7","modified":1648398954707},{"_id":"public/archive/zookeeper/2B9475B258994C18BCC5FCFA4B6D81D2/index.html","hash":"0c5b1776ac382d2ce68d3efcda7d229f3350407e","modified":1648398954707},{"_id":"public/java/74CAAAFD610241A1B8ECDB5F3BB33EE4/index.html","hash":"5330db5fbbb30c719285bb8c96d27e071797d690","modified":1648398954707},{"_id":"public/archive/essay/A98D5EC3509F483E80919CA2E09BDA1B/index.html","hash":"6d797100e6117f7dc6428b15a86cef18e57bc82e","modified":1648398954707},{"_id":"public/tool/21324399FBDC41CBA815D2069BB62168/index.html","hash":"4a0934362c24ef92061f2ff4c3389af02164e078","modified":1648398954707},{"_id":"public/linux/9AFC3EFAEC15479BB5FBC6F670594A94/index.html","hash":"d411993e46e3ac5335e8b45ad668f853b576fad5","modified":1648398954707},{"_id":"public/golang/e1273901-26b1-4cfb-a55c-a9f5047855a5/index.html","hash":"1dd03e51fe111e6e4a693f0c28c166e9836c01cd","modified":1648398954707},{"_id":"public/java/nio/2571330c-67ef-4d4c-8717-6c96768009c7/index.html","hash":"6b99487ac3b4ffd111067ca6bb9de30f70e03700","modified":1648398954707},{"_id":"public/java/nio/8d2049e3-3eb1-46ed-a44b-57398964eb21/index.html","hash":"1cc7d1bc910b7eb41fd83d99ace3386514bfe4b7","modified":1648398954707},{"_id":"public/java/nio/0702ff46-16cd-4520-9d33-0794cfda4b09/index.html","hash":"ac69766496aa3797d42d317a9fade1588164d6e5","modified":1648398954707},{"_id":"public/java/disruptor/c16646bf-1474-42a7-a5cd-84b99669062c/index.html","hash":"2d9571731d9103de259b6bbc37cb36c8bafbb23a","modified":1648398954707},{"_id":"public/java/disruptor/18e3fbd6-ff4b-4a0a-b82f-a547dbef8d0c/index.html","hash":"25f1436cb79e55e7787bb8867690f92383e00b5b","modified":1648398954707},{"_id":"public/java/disruptor/ff51336d-70d4-449c-9214-fff2542bef1f/index.html","hash":"a9d8bfda56219f0ad086cf8a24d88f872d62de87","modified":1648398954707},{"_id":"public/dubbo/dcf9d2d8-9c11-404a-874d-57834303dcac/index.html","hash":"e068cda41d6c7119b69e5bf72645aa2000c1c465","modified":1648398954707},{"_id":"public/linux/79b5fe12-9c60-4b93-be92-dffb00fa39c7/index.html","hash":"95555b4b23ece2f6c400a5de7326f4eac6d8f07d","modified":1648398954707},{"_id":"public/recommend/git-commend-note/index.html","hash":"60124a03b269bfdddacbc62353f47120cc91f0ee","modified":1648398954707},{"_id":"public/java/mdc-test/index.html","hash":"c7d222ec3acb6ef5fa6cc5d39499ebdc1ebf1487","modified":1648398954707},{"_id":"public/java/jvm/java-class-load-1/index.html","hash":"d717e5bda3158ede9f933c10e97207a23e62ce0e","modified":1648398954707},{"_id":"public/tool/git-tool-command/index.html","hash":"b1cdd266460bbb816759fc9c0d0c65beb17edcd1","modified":1648398954707},{"_id":"public/java/jvm/jvm-object-is-alive/index.html","hash":"c715e0967d3812065387441f7650994731ae915f","modified":1648398954707},{"_id":"public/mysql/mysql-utf8mb4-error/index.html","hash":"7a7112a5bd0fef31ae86e782fbff7ee99062b0d2","modified":1648398954707},{"_id":"public/docker/docker-transfer-pit/index.html","hash":"2caa93b540795010680347f475fbe077bfb2f212","modified":1648398954707},{"_id":"public/gof/gof-abstract-factory/index.html","hash":"a4dcb50aaa8c7fa212b682901f3bf6b76a28f314","modified":1648398954707},{"_id":"public/java/java-8-stream-method/index.html","hash":"afb6711735f003ea6160c5f20d683cfc68286341","modified":1648398954707},{"_id":"public/java/nacos-post-error/index.html","hash":"1cfb2912a77ce9793bf38dfe5e472d762d984b35","modified":1648398954707},{"_id":"public/jenkins/problem-jenkins-01/index.html","hash":"a4c37313f715d6739c8b889b91aad86c3159903c","modified":1648398954707},{"_id":"public/jenkins/problem-jenkins-02/index.html","hash":"7f337620d0d5be401db4ef0fc51e43db8e79d9e5","modified":1648398954707},{"_id":"public/vue/vue-cli3-11-problem/index.html","hash":"f7a5efbe6aae18e16ea21aa3f5a76c0aac7a6465","modified":1648398954707},{"_id":"public/linux/build-docker-pi/index.html","hash":"4fa42971a0b79614b7d814b448a5d7454489bb1a","modified":1648398954707},{"_id":"public/linux/problem-jdk-timezone/index.html","hash":"8ce95efe9cc9a8645748ac28c8586564b2cffc8a","modified":1648398954707},{"_id":"public/java/java-isnull-four/index.html","hash":"6c25c5ad253bb46b4acbfd1e622b76810d65fb64","modified":1648398954707},{"_id":"public/java/problem-java-base64/index.html","hash":"311d99e2b30984afbf7ed54f0d6d08c0a6d7b07e","modified":1648398954707},{"_id":"public/index.html","hash":"745cf0ea3bcdef680401f2e5e9831982de37b5f2","modified":1648398954707},{"_id":"public/page/2/index.html","hash":"2cda7ac7893c3479166bf75eddec98e7961049e9","modified":1648398954707},{"_id":"public/page/3/index.html","hash":"88dcdb07b2e2744a43fbef50b76e7f0f8148a5e1","modified":1648398954707},{"_id":"public/page/4/index.html","hash":"c14186e51a1a2a2fc2a014fcba4cdc0cfd11d4c4","modified":1648398954707},{"_id":"public/page/6/index.html","hash":"cbe9cb65e02e9e42d068ed4fc3e61f70c0a35601","modified":1648398954707},{"_id":"public/page/9/index.html","hash":"7ae190ffa4c3c0a66be90e7bcc808dd6abb5c6b0","modified":1648398954707},{"_id":"public/page/10/index.html","hash":"eb69d2b8bae6585189770f25dab962f41cd62a30","modified":1648398954707},{"_id":"public/page/11/index.html","hash":"7bd55ee0fe15e86caa2a402c0c8975da5bf86ef9","modified":1648398954707},{"_id":"public/clock.html","hash":"2acdb57b46cfcf9e9f033d99b25154cc8af78bc2","modified":1648398954707},{"_id":"public/tags/index.html","hash":"50b383fe13a153332fa07c2aeb16487a11892291","modified":1648398954707},{"_id":"public/archive/2852F14D7D13471798CE28C544741E89/index.html","hash":"5f4a0c8311b5bc6428aa9c08cbf7fb3d481e3c28","modified":1648398954707},{"_id":"public/linux/0A5A3927BAEA4155849C174E4C613913/index.html","hash":"b29c1a1e2823b1077236dac2f0df849f0e19e7e5","modified":1648398954707},{"_id":"public/tool/775FF9A0CE4940EBBB45FED3FAD7AB5B/index.html","hash":"afa6203c005b18526c88f1c9f3a9aa42ad719d1c","modified":1648398954707},{"_id":"public/java/CA3AB1D58EA74B76A5FD69F79DD5EC79/index.html","hash":"8235c8efb455b3e17bb12d6913611fa09a897462","modified":1648398954707},{"_id":"public/archive/zookeeper/8B8235DEF437432C99C81E97D68D0644/index.html","hash":"bd88d16eee7ccc6328c70888d71ec27ee35afe24","modified":1648398954707},{"_id":"public/vue/2CA7C67D02E74713A030F09651A5F164/index.html","hash":"f9bc45c9edc65c3eb9b8dd3e540d81dbd3309620","modified":1648398954707},{"_id":"public/tool/9ACF61395A77470CA029D24AEC2CA42F/index.html","hash":"7dd7e593d57383d9bb10ecaab4624b320c4e189b","modified":1648398954707},{"_id":"public/gof/234C81B9931C44CB9B88E0E53210BB48/index.html","hash":"98ca42cb418c41ab5bb512dfe27bb5925b0ba59d","modified":1648398954707},{"_id":"public/archive/essay/8B40046C17644103BD2A256EB938884C/index.html","hash":"52ea0635d710e4bdbe39bc3c08995bcb5fb0c602","modified":1648398954707},{"_id":"public/archive/quarkus/3EC6E900CDCB4BCEBA3B0BE40C9AADBB/index.html","hash":"1d67861248df96c792809cb00b81a24f0c011f94","modified":1648398954707},{"_id":"public/archive/quarkus/5756337C1CEA4B599E678A3380DCFE00/index.html","hash":"4b12a8cf4a6c9bd4b8f4fce304b90109a859f205","modified":1648398954707},{"_id":"public/archive/quarkus/5870388109C640649633FA0BB2F5C9C1/index.html","hash":"22d60750556abae4d96a73e3b65cbf49ac47291d","modified":1648398954707},{"_id":"public/archive/code/FFC3580D7E244B5282E3FDD7F3EB8E95/index.html","hash":"1bbc6b4514492aea70b1b94f63d09ed937a85cd2","modified":1648398954707},{"_id":"public/vertx/10EF2E95447C468CB55BD7BD0675C090/index.html","hash":"3d982f301d304788871d7fd99f6b05b79ff04901","modified":1648398954707},{"_id":"public/tool/C334612CBDCE41E79F7EA6A2F3F4C10C/index.html","hash":"9d8434544f2c518171d4244b98e02f3ef5994286","modified":1648398954707},{"_id":"public/tool/0D992236EC6B4E5EAD15886D992FF84B/index.html","hash":"9ff5e7bc6ad832cacebff0c7b9d78bc1740da575","modified":1648398954707},{"_id":"public/protocol/0143CD7666CD44389FE6F565E10EEE1A/index.html","hash":"71f409496b61ae55cbfcdc335217ddd4d30ab3f8","modified":1648398954707},{"_id":"public/spring/EEF92888390B4E7C866FE7ADA6A0B42B/index.html","hash":"ba67b1d9e4c7912eb45a07071de1c3ed34dc4a43","modified":1648398954707},{"_id":"public/spring/C2E28AA517AA45768B679D93F248B5DE/index.html","hash":"73350a1e4e7319bed808dc28994cd28eb29f5592","modified":1648398954707},{"_id":"public/spring/9944CC0FEBD34A3EBD04EAA1564F4C3A/index.html","hash":"aa9e40e81dd03f3b335d353dd029357f66e4f8db","modified":1648398954707},{"_id":"public/protocol/4dd3868b-e23e-4446-b7ec-fd95e98612f4/index.html","hash":"b568c5b83bad62ddb63ec626dceb19c9f170ade3","modified":1648398954707},{"_id":"public/golang/47ca1795-f020-44a6-9847-02ef3955f6c9/index.html","hash":"a4fc21e5b6a39916f19a87509d51aecc7e939d39","modified":1648398954707},{"_id":"public/archive/33f09b03-a5a7-4d66-93d3-7063905f9b81/index.html","hash":"dcf36da50efe652ba0514d7ec5ae9e8ca78b42ef","modified":1648398954707},{"_id":"public/java/nio/534d0985-a4a0-4239-ae81-d76378f64552/index.html","hash":"863365dc07e0e0464a855b4968c8684aebf2b03e","modified":1648398954707},{"_id":"public/java/disruptor/9a1bdb74-8ed3-4905-88bc-7b3b4e0a4af2/index.html","hash":"a4b5166d7e763afc4b2ba767ecc596ddbc96f962","modified":1648398954707},{"_id":"public/java/disruptor/b3025291-ae52-4d26-a70c-66a79bda07d7/index.html","hash":"50bcdb062a7d6ccaa76db5a27962fd62f79e849e","modified":1648398954707},{"_id":"public/java/disruptor/a552f7f0-4cbe-4628-8fcf-02f8b8730b56/index.html","hash":"ea5a5e385999f9903cc964dac6c0bf6389aedb79","modified":1648398954707},{"_id":"public/java/disruptor/926f33f0-651d-471a-ad0c-b632fcce8c0f/index.html","hash":"57f8fdfcd9331a0a683e85e5d8af05a05373dffb","modified":1648398954707},{"_id":"public/linux/github-actions-build-pi-kernerl/index.html","hash":"bb92aee02d1af1509318af2d589f5a08b31fd0ad","modified":1648398954707},{"_id":"public/spring/fegin-resttemplate-addheard/index.html","hash":"b24b261ff248735dee99d8e01eb35c52dd159843","modified":1648398954707},{"_id":"public/java/jdkproxy-cglib/index.html","hash":"82f19df33d8426825132b02ca04717eb6c16a36b","modified":1648398954707},{"_id":"public/java/java-base-data-pack/index.html","hash":"840d8eadb18d54c10e11f8e7f6dc7c87a5f7b615","modified":1648398954707},{"_id":"public/java/jvm/java-jvm-stack-1/index.html","hash":"7f8cf5e8912260a31888d6c0150c8a490e6671dd","modified":1648398954707},{"_id":"public/java/jvm/java-class-load-2/index.html","hash":"157d4d3a9635372b9855ffcde18313aa4c4c5361","modified":1648398954707},{"_id":"public/java/jvm/java-class-init/index.html","hash":"26666c5ed0a63126df36ece5b9c9342533ae00a7","modified":1648398954707},{"_id":"public/java/thread/create-thread-3/index.html","hash":"5c599e68aac86848ed725bda8fa8c9b3f13abbeb","modified":1648398954707},{"_id":"public/spring/apring-aop-ann/index.html","hash":"1eabf88e992b5f7113d1d0ad46d3138126129edf","modified":1648398954707},{"_id":"public/java/jvm/jvm-gc-alg/index.html","hash":"e276e52cf1c2bb8afa3099289424fc9d32633488","modified":1648398954707},{"_id":"public/java/jvm/jvm-object-four-quote/index.html","hash":"67d4354f6561303e8cfe20b46876cfccab8186d4","modified":1648398954707},{"_id":"public/java/jvm/jvm-running-data-area/index.html","hash":"55c0d476101763599a1609b93515b2fc35244f00","modified":1648398954707},{"_id":"public/java/jvm/jvm-javastack-EscapeAnalysis/index.html","hash":"653231b01cafcf2df74e91ca50c018276c14f9a0","modified":1648398954707},{"_id":"public/archive/web-security/spring-security-oauth-server-demo/index.html","hash":"7a07802960da3a03ddec00c262f837f6495854da","modified":1648398954707},{"_id":"public/archive/web-security/sso-and-cas/index.html","hash":"c6d61078c8fbfc89d175963a9fb8543768406f04","modified":1648398954707},{"_id":"public/archive/web-security/oauth-and-jwt/index.html","hash":"b85a10543e1e27c09e850bcf6286f058b2ea82c4","modified":1648398954707},{"_id":"public/linux/linux-fastdfs-install/index.html","hash":"d1a38845198b127e2e1e561ed7082b243e8faa8a","modified":1648398954707},{"_id":"public/algorithm/algorithm-avltree-01/index.html","hash":"fbb8db02d96905f896b46a4f3d67f1f868cd420a","modified":1648398954707},{"_id":"public/recommend/recommend-tool-1/index.html","hash":"c7dc6a07658f306f9cf22468cf4bd779ce1c2046","modified":1648398954707},{"_id":"public/java/java-arraydeque-source-1/index.html","hash":"b5150a969b0b3ae9b1922ed75fc79f6de4c502d4","modified":1648398954707},{"_id":"public/java/java-linkedlist-source-1/index.html","hash":"b39821b12a1d3e928ffd7c994ddbe26581f9ae20","modified":1648398954707},{"_id":"public/java/java-arraylist-source-1/index.html","hash":"581f4770be744033bd7ad9a25aa6fc16b4123322","modified":1648398954707},{"_id":"public/java/java-base-wei/index.html","hash":"e0d6375c50d79809e97fa7352cc05be78ceb021a","modified":1648398954707},{"_id":"public/gof/gof-builder/index.html","hash":"8262042bd9454d0d9eebe829fdbdfd8f5ae2fdb6","modified":1648398954707},{"_id":"public/gof/gof-prototype/index.html","hash":"1b999abc25cb24e69e691d51613bed6cc675766e","modified":1648398954707},{"_id":"public/mysql/mysql-update-driver-connector-8/index.html","hash":"e742c24a59c1497434d4369acfead13d7d04f5cf","modified":1648398954707},{"_id":"public/gof/gof-taemplate-method/index.html","hash":"e3a5e86e2007e8b3f1dd3cb2adc539be0a8ca8f7","modified":1648398954707},{"_id":"public/algorithm/array-vs-linked/index.html","hash":"f00110e1e70140a2d8bd1eec6be6a4200493d02d","modified":1648398954707},{"_id":"public/gof/gof-factory-method/index.html","hash":"af82a0d47ecda931185218bcc290b275e118c350","modified":1648398954707},{"_id":"public/gof/gof-oop-7-all/index.html","hash":"b5a9638bf2fcf121df8913bb2fae488a6b1e2440","modified":1648398954707},{"_id":"public/jenkins/build-jenkins-sonarqube/index.html","hash":"8d0b903d9d2cad47efb6f8318ec1739842adca14","modified":1648398954707},{"_id":"public/java/java-array-init/index.html","hash":"bb3be0c3fae458d3949f7c8734a639a4d98d2663","modified":1648398954707},{"_id":"public/spring/spring-boot-resttemplate-example/index.html","hash":"b5632a0aa1a5df111a6a585288a51a26f6d4af26","modified":1648398954707},{"_id":"public/jenkins/build-jenkins-ci-cd/index.html","hash":"ae4452bff10d641071ea2d5b9c50722a85aeb5dd","modified":1648398954707},{"_id":"public/jenkins/build-jenkins-mavne/index.html","hash":"7fda1906e1c46cd112d54ecac8a5172e2def9d70","modified":1648398954707},{"_id":"public/jenkins/build-jenkins-docker/index.html","hash":"0405018f41c906ee3de5498c6b7e75ed79599719","modified":1648398954707},{"_id":"public/gof/gof-singleton/index.html","hash":"2fc530ffd98fa48db253b93343dc4dba2aa79baf","modified":1648398954707},{"_id":"public/rocketmq/rocketmq-cluster-build/index.html","hash":"15545319dc60b1b2f43b1ad005836ac275d67e6a","modified":1648398954707},{"_id":"public/docker/docker-mysql/index.html","hash":"b10b92f7192522206da6fcf9bfe77ba608f1a849","modified":1648398954707},{"_id":"public/java/java-equals/index.html","hash":"566f9337f197fedf0fca9dec6ac09282731c05e2","modified":1648398954707},{"_id":"public/algorithm/algorithm-recursive-01/index.html","hash":"dc5e60c6c0aa0b77c1af539aa6cfd15cd47ede56","modified":1648398954707},{"_id":"public/archives/page/2/index.html","hash":"cad459eab34ffaef4b4939e6eded50a8e32b0d31","modified":1648398954707},{"_id":"public/archives/index.html","hash":"d6e99be63fb48f9288b3711f4d952d904835b1c4","modified":1648398954707},{"_id":"public/archives/page/3/index.html","hash":"e4545e6fb38158f89144cfeec6fd7fbbaccc1a96","modified":1648398954707},{"_id":"public/archives/page/4/index.html","hash":"077ccbc94f247eb78c7f78d959d639288dcde505","modified":1648398954707},{"_id":"public/archives/page/5/index.html","hash":"6c97ac37644e75f4940e057efc88c2a0d4d34a4c","modified":1648398954707},{"_id":"public/archives/page/6/index.html","hash":"eafc28a89840e8e714d681751049255b77859a07","modified":1648398954707},{"_id":"public/archives/page/7/index.html","hash":"5617a49771bde1543e049bcebb417f8f8f9eaeec","modified":1648398954707},{"_id":"public/archives/page/8/index.html","hash":"cafc4af70d25c3fbec81748e8e4c340e06c517ab","modified":1648398954707},{"_id":"public/archives/page/9/index.html","hash":"05f54d3e271928faed9aab1f4f4e78233bb5f122","modified":1648398954707},{"_id":"public/archives/page/10/index.html","hash":"ff2ec6d22a28a3987524e11103a996f0aa6fb184","modified":1648398954707},{"_id":"public/archives/page/11/index.html","hash":"6b5ff419138c3cbcebeab1217d029b0ca618d6f2","modified":1648398954707},{"_id":"public/archives/2019/index.html","hash":"876b6ca0b06e961697b4a725fde4097eb255f72b","modified":1648398954707},{"_id":"public/archives/2019/page/2/index.html","hash":"5aaa609b23db15e87c2c8f2740e22a41fae74264","modified":1648398954707},{"_id":"public/archives/2019/page/3/index.html","hash":"5441171d998b62c2f9233b5294d623baff5b9e70","modified":1648398954707},{"_id":"public/archives/2019/08/index.html","hash":"30cb5b221e7fd3b81e730ed973bdfed511fb1189","modified":1648398954707},{"_id":"public/archives/2019/09/index.html","hash":"db120a97810013bd7627c49431abe9f1da74c633","modified":1648398954707},{"_id":"public/archives/2019/10/index.html","hash":"4e8f0b550468c936097d9b916c612ccb3731ceca","modified":1648398954707},{"_id":"public/archives/2019/11/index.html","hash":"7d889a4621350eea63a6d0f9e4bf598783267c28","modified":1648398954707},{"_id":"public/archives/2019/12/index.html","hash":"87c078287bbba86e61d3b16c6dbe9f1f0bb3de01","modified":1648398954707},{"_id":"public/archives/2019/12/page/2/index.html","hash":"5ec2fe890863a2c98f9e7c6410455cc2f8e73ac7","modified":1648398954707},{"_id":"public/archives/2020/index.html","hash":"fd1ee1f2c5d4cf6e663d1b5e4e7bdded8ddb9929","modified":1648398954707},{"_id":"public/archives/2020/page/2/index.html","hash":"f47e6a86c561a2a930c6628420594b59f0208d38","modified":1648398954707},{"_id":"public/archives/2020/page/3/index.html","hash":"c17cd7881edaa9c6120efb0b533d3a6f6efa22f8","modified":1648398954707},{"_id":"public/archives/2020/01/index.html","hash":"df6524213b101816915ed81e74c27448e7797ff7","modified":1648398954707},{"_id":"public/archives/2020/02/index.html","hash":"3ee5d0bd1976b99734bdda43555617ce8baa2514","modified":1648398954707},{"_id":"public/archives/2020/04/index.html","hash":"6075046d621db73d6d069d7391144665569ef6d2","modified":1648398954707},{"_id":"public/archives/2020/05/index.html","hash":"a92884b83904554962cb9e0cdcfb32b2c980b8f8","modified":1648398954707},{"_id":"public/archives/2020/06/index.html","hash":"0708f60f933b27bd4264fce3add93666b8e23830","modified":1648398954707},{"_id":"public/archives/2020/09/index.html","hash":"c91450990240a95cfe98e03970efd85c21f3d33d","modified":1648398954707},{"_id":"public/archives/2021/index.html","hash":"7ecf6bda5816102719f17c35eef2131696dffeca","modified":1648398954707},{"_id":"public/archives/2021/page/2/index.html","hash":"4e199ad6d7a4a71d01a9f646cf88492637f8fad1","modified":1648398954707},{"_id":"public/archives/2021/page/3/index.html","hash":"0cb9dda237292742a0087a2ab477ed337a458069","modified":1648398954707},{"_id":"public/archives/2021/page/4/index.html","hash":"3526b9d650d4b54dcdc193f438963733f7a192a2","modified":1648398954707},{"_id":"public/archives/2021/page/5/index.html","hash":"c1dba941cfb8eee1592e6e4b5fed5e033cc7bdf7","modified":1648398954707},{"_id":"public/archives/2021/01/index.html","hash":"fc5054ed2607f23c0aeb5c770a9b1bf7ec9d24ab","modified":1648398954707},{"_id":"public/archives/2021/02/index.html","hash":"d9225fa01f5cccaeabd93686ad4c0d2b91d7503b","modified":1648398954707},{"_id":"public/archives/2021/03/index.html","hash":"cfe80ee64ee9cfdcc33ef6d642b143cefb019cfb","modified":1648398954707},{"_id":"public/archives/2021/03/page/2/index.html","hash":"888e8f838f578d194dbf889716bb808a2b0f0a04","modified":1648398954707},{"_id":"public/archives/2021/05/index.html","hash":"976df401fc85d21956006274af2e874790cd78bf","modified":1648398954707},{"_id":"public/archives/2021/06/index.html","hash":"939e82878bb9978037e305efd8cab05d77f0e525","modified":1648398954707},{"_id":"public/archives/2021/07/index.html","hash":"b688d7b428aea9480458fce5fdef9ec90f98a14d","modified":1648398954707},{"_id":"public/archives/2021/08/index.html","hash":"ed73698e9159415537843a1128ef9b29bb3ac634","modified":1648398954707},{"_id":"public/archives/2021/09/index.html","hash":"9e852b24fa74ae804d034cf5279512cce4f16976","modified":1648398954707},{"_id":"public/archives/2022/index.html","hash":"93861d2b48a349eb230d67e03b1fe149d948e36b","modified":1648398954707},{"_id":"public/archives/2022/02/index.html","hash":"f0370bb7a16d12086996e2972c57254a6d623cfa","modified":1648398954707},{"_id":"public/archives/2022/03/index.html","hash":"5aa23b6d2e5bb433ad47d11d9590fbfe39c81d5a","modified":1648398954707},{"_id":"public/categories/Algorithm/index.html","hash":"07e829cbf992b4ac49f603ee2c8dafac59228bad","modified":1648398954707},{"_id":"public/categories/UML/index.html","hash":"43a532e8c37faf76ad8d23acd29c9787454f2eef","modified":1648398954707},{"_id":"public/categories/GOF/index.html","hash":"b585e873c7aa332352163a0c6e3f999b7d93d75a","modified":1648398954707},{"_id":"public/categories/MySQL/index.html","hash":"80cc076debd41ef9c387f1c23b979d31e0932430","modified":1648398954707},{"_id":"public/categories/网络/index.html","hash":"fd21c7f78aaa8d9df6ced21794cb981180aee5a8","modified":1648398954707},{"_id":"public/categories/Dubbo/index.html","hash":"50313ad67ef833243ff53dacf1ea52e3119d95bb","modified":1648398954707},{"_id":"public/categories/Go/index.html","hash":"668a9809b6176daac80abc7fc6ea4467433dd2b1","modified":1648398954707},{"_id":"public/categories/Docker/index.html","hash":"d898fbb6fcf10b805797416933e8ea618b794bf0","modified":1648398954707},{"_id":"public/categories/Linux/index.html","hash":"2c0268833d394de63acc426e69848d17ec9aee4c","modified":1648398954707},{"_id":"public/categories/Java/index.html","hash":"a6322e574d8195c8ffd2dc07959af29d03db1735","modified":1648398954707},{"_id":"public/categories/Java/page/2/index.html","hash":"aeb1ab34241bef13cda295de47a3402decda688b","modified":1648398954707},{"_id":"public/categories/Java/page/3/index.html","hash":"a65f067d0618bca9e0dc3424d490562d7a8f7b58","modified":1648398954707},{"_id":"public/categories/Recommend/index.html","hash":"06187e359a4e65b61c20f2c4c315dd077c27c79c","modified":1648398954707},{"_id":"public/categories/RocketMQ/index.html","hash":"b74d75d08678542c4b62eb08e8e9e8b96af0739d","modified":1648398954707},{"_id":"public/categories/Protocol/index.html","hash":"139ba9bdf7415ba489041f94d4a9c2946891821c","modified":1648398954707},{"_id":"public/categories/Spring/index.html","hash":"679629344b786c1c0f031e3c8a04f2939a424bc2","modified":1648398954707},{"_id":"public/categories/Vue/index.html","hash":"a740f6fe4be70f8b282bee5d61b4c19e52d270d3","modified":1648398954707},{"_id":"public/categories/Vert-x/index.html","hash":"63197b3b4b03867dabc4da2afb707306fd69a9be","modified":1648398954707},{"_id":"public/categories/Jenkins/index.html","hash":"88cc433e68434de519ca2c40b4fd34300ecd059b","modified":1648398954707},{"_id":"public/categories/Tool/index.html","hash":"3c68ce8f2a7c509d5e50ed1798daf2ab84b457a6","modified":1648398954707},{"_id":"public/categories/Essay/index.html","hash":"5af3668f59c409c24b01bb905008729f74bede3a","modified":1648398954707},{"_id":"public/categories/Quarkus/index.html","hash":"b7450b5e3581f83f0c7042d68955dc88e3103ba2","modified":1648398954707},{"_id":"public/categories/WebSecurity/index.html","hash":"6f67b458640f74ce785c36e1c1ec40bb8a9c96a2","modified":1648398954707},{"_id":"public/categories/ZooKeeper/index.html","hash":"a9ae4b67dc731ba3c80bcfad357b913b7f7c1c6d","modified":1648398954707},{"_id":"public/categories/JVM/index.html","hash":"9593ab7e44f506528c6ed3c5d3c53426a41e3cea","modified":1648398954707},{"_id":"public/page/5/index.html","hash":"dfbf3a446f0d67da8e0f66eb0bef4e0f73bf16fd","modified":1648398954707},{"_id":"public/page/7/index.html","hash":"63e9e17749fd5c39631652b4420665f9d14be251","modified":1648398954707},{"_id":"public/page/8/index.html","hash":"2f8e4d2cc2c3c50f74d8cbef122571140d305df4","modified":1648398954707},{"_id":"public/tags/AVL/index.html","hash":"a68f01f12b0038e1f60d77eb5aa1398912a304f2","modified":1648398954707},{"_id":"public/tags/数据结构/index.html","hash":"97880db76a82fd61bdb618c557860823b233f0c1","modified":1648398954707},{"_id":"public/tags/平衡二叉树/index.html","hash":"f7770089b75b55cfbde4b10f7fcd5c220d2a0251","modified":1648398954707},{"_id":"public/tags/二叉树/index.html","hash":"2974402f9603d8ad0f0b69bd3458a44b9101cbce","modified":1648398954707},{"_id":"public/tags/Java/index.html","hash":"7705e103af621f224a50034a295d7672d6fd2507","modified":1648398954707},{"_id":"public/tags/Java/page/2/index.html","hash":"6ecf7c9b1c1815403defd3c516d6b668fa7c4075","modified":1648398954707},{"_id":"public/tags/Java/page/3/index.html","hash":"4c0ee0875d6308dd7fc16e31b2908de4181fc19d","modified":1648398954707},{"_id":"public/tags/Java/page/4/index.html","hash":"08708ef62d92affaf5e809868fa0a5022a102612","modified":1648398954707},{"_id":"public/tags/Recursive/index.html","hash":"27b0b8530aeb6960faf695bbf22efa81133b8a22","modified":1648398954707},{"_id":"public/tags/Algorithm/index.html","hash":"277dabd38fe8c1a14ee9f64d8b76e878a77e8a55","modified":1648398954707},{"_id":"public/tags/Json/index.html","hash":"d2719c93adfbc24a7797887e3309d62ba1af8ee6","modified":1648398954707},{"_id":"public/tags/UML/index.html","hash":"604f6338fd1786c530e261e30404c99490f82ce8","modified":1648398954707},{"_id":"public/tags/设计模式/index.html","hash":"0807d167d32a65c40824ffeccf818bdbab42914f","modified":1648398954707},{"_id":"public/tags/抽象工厂模式/index.html","hash":"436360c29fd04d157f7e8862a20949503768c815","modified":1648398954707},{"_id":"public/tags/建造者模式/index.html","hash":"07ad4e35c405bd69ff3ba4954eaee9d51c2aaeda","modified":1648398954707},{"_id":"public/tags/工厂方法模式/index.html","hash":"cb5f3dcd3df7fa4c51f613127e99577ee00353c9","modified":1648398954707},{"_id":"public/tags/GOF/index.html","hash":"ff89c5670b5c71e968e05c0b1db9034c38038198","modified":1648398954707},{"_id":"public/tags/OOP/index.html","hash":"465dc8a9c892bfadf6699d6e1706f5cd1536fdb0","modified":1648398954707},{"_id":"public/tags/原型模式/index.html","hash":"4d3a3d000ee0f8102e2aa50fd0e7f2d788eee3f7","modified":1648398954707},{"_id":"public/tags/Singleton/index.html","hash":"cadf1127efbb1740e7e5e979594edc42098527a9","modified":1648398954707},{"_id":"public/tags/模板方法模式/index.html","hash":"dbcaabee52749bd0861f57d46c77f851626d6e4d","modified":1648398954707},{"_id":"public/tags/MySQL/index.html","hash":"2ec0aa0211e2a1fe9b2eaf1489607f7523911a98","modified":1648398954707},{"_id":"public/tags/协议/index.html","hash":"a4255d839c93e526c5be8122c38ef98ccdf172d2","modified":1648398954707},{"_id":"public/tags/gitalk/index.html","hash":"cbd27c325f492883dc5ed6f35c3fc5095dc79abf","modified":1648398954707},{"_id":"public/tags/P2P/index.html","hash":"ce3a9c97bec23c78a234aed392a05374ab793217","modified":1648398954707},{"_id":"public/tags/网络/index.html","hash":"1ba8b277f56a7c1630668bb24d384c562d6fecd8","modified":1648398954707},{"_id":"public/tags/Dubbo/index.html","hash":"5611b641c13f412a821a3ba59faaf92f412bade6","modified":1648398954707},{"_id":"public/tags/Go/index.html","hash":"f50e7878393f0eeaee7cbeba84e3a27437bdd878","modified":1648398954707},{"_id":"public/tags/钉钉机器人/index.html","hash":"9998bfd6e0e5a4a617b99d3aa180a16b1520b9d4","modified":1648398954707},{"_id":"public/tags/Mysql/index.html","hash":"c9b6f9e811d3250d1a93efb8767568faa8e6b421","modified":1648398954707},{"_id":"public/tags/Pit/index.html","hash":"a316d28154bef97538c5cc69fc50a8664b10ce7f","modified":1648398954707},{"_id":"public/tags/Docker/index.html","hash":"4685dfdc6b65ebf2a885b9a9ce088123194f223a","modified":1648398954707},{"_id":"public/tags/Linux/index.html","hash":"544656437dac5e181c002d69e2eb63fd511c8bdd","modified":1648398954707},{"_id":"public/tags/Linux/page/2/index.html","hash":"00aaa2dbf30c11cead92163c8543a56546b75963","modified":1648398954707},{"_id":"public/tags/Centos/index.html","hash":"d4189a38dfe9fb78b72a17fc22973b44dd325e66","modified":1648398954707},{"_id":"public/tags/Shell/index.html","hash":"62832a6d837008424ca2c7b203f78efcde4ec55c","modified":1648398954707},{"_id":"public/tags/Time/index.html","hash":"3b9790f79b78534262455a55b0df07b5da9fa125","modified":1648398954707},{"_id":"public/tags/RaspberryPi/index.html","hash":"a85a7f407013986762c0196d9eb9c53648c76c9b","modified":1648398954707},{"_id":"public/tags/Github-Actions/index.html","hash":"8355f8462e5d7152381415e4ca7b48fbdb16c6ba","modified":1648398954707},{"_id":"public/tags/fastDFS/index.html","hash":"b2275fb9f707782c198fd8cbd546d121eb601c49","modified":1648398954707},{"_id":"public/tags/表达式引擎/index.html","hash":"c2ef6903415a6716657e1a3707bfba022935bcd2","modified":1648398954707},{"_id":"public/tags/Aviator/index.html","hash":"4c9c5fe4a3300b1a6a1669a7998f3c31fbe91182","modified":1648398954707},{"_id":"public/tags/ArrayList/index.html","hash":"167568c78058025cb32d8fd89db59c2646732709","modified":1648398954707},{"_id":"public/tags/源码解析/index.html","hash":"1c8b20195ddccb6deac682b3e0348adef9bfcb70","modified":1648398954707},{"_id":"public/tags/ArrayDeque/index.html","hash":"24db63fdcfab0ab23e7015b5d5a560f9102df334","modified":1648398954707},{"_id":"public/tags/源码分析/index.html","hash":"ada4e52e2fe9282d90b52cea3453354342e9d0c7","modified":1648398954707},{"_id":"public/tags/LinkedList/index.html","hash":"372fad5837f08f56632f41600ed80dd5e23b0370","modified":1648398954707},{"_id":"public/tags/Logback/index.html","hash":"1786b09f05ffe258034b06c7b40096cb35820a95","modified":1648398954707},{"_id":"public/tags/MDC/index.html","hash":"e709e3139a87f8d21e18eee3a5614fd6434b9797","modified":1648398954707},{"_id":"public/tags/Nacos/index.html","hash":"859b0966a6262eb1dcd09c233467659e8e4933cc","modified":1648398954707},{"_id":"public/tags/Base64/index.html","hash":"04a328e7c99c5d68ae2f1e9d8f8ee04176221b1b","modified":1648398954707},{"_id":"public/tags/Git/index.html","hash":"f17c397bb0127bc69843caeeeb6a4fb50f00a56e","modified":1648398954707},{"_id":"public/tags/UI/index.html","hash":"edcb4c17a9cd70593d4cf16663f1743fc78243e1","modified":1648398954707},{"_id":"public/tags/推荐/index.html","hash":"283a8243b481b77058183520ab16f76950b0c8a1","modified":1648398954707},{"_id":"public/tags/RocketMQ/index.html","hash":"94187401ec2a3ed4a32405c2673acb07d0fab7db","modified":1648398954707},{"_id":"public/tags/HTTP协议/index.html","hash":"5614df4b0883b41440017e4903fb26a81635fc52","modified":1648398954707},{"_id":"public/tags/smtp/index.html","hash":"b4439dcdd5ca5f66d7dd5c9f5fc7a9142b07f662","modified":1648398954707},{"_id":"public/tags/telnet/index.html","hash":"acac60d926711ef5d398c1a3ef8305447c03dfaa","modified":1648398954707},{"_id":"public/tags/SpringCloud/index.html","hash":"d874ad722b1a687ff3b30c58e18436edbec92efe","modified":1648398954707},{"_id":"public/tags/Gateway/index.html","hash":"cdeb842922b5b3c0722f11e6372df75c10d9e760","modified":1648398954707},{"_id":"public/tags/Dubbbo/index.html","hash":"464c8e396de3ad8ec8a9ba7b68843ca462346e2e","modified":1648398954707},{"_id":"public/tags/Spring/index.html","hash":"b6272d856cc88f0535fca089ee8d440c0864f1ce","modified":1648398954707},{"_id":"public/tags/Spring-Cloud-Gateway/index.html","hash":"481a86bf5bcfcb8df9971ca45c792f891b5cf772","modified":1648398954707},{"_id":"public/tags/SpringBoot/index.html","hash":"49d4d608aed1bf0d84bc2fcc2573e4969983dfcc","modified":1648398954707},{"_id":"public/tags/Fegin/index.html","hash":"2e34a9b4e02d294f644ccd25c4f0f61e24ec41fd","modified":1648398954707},{"_id":"public/tags/Resttemplate/index.html","hash":"88ae0af33116f4614c0153777442cc0110a8d19e","modified":1648398954707},{"_id":"public/tags/Spring-AOP/index.html","hash":"e4e512708e274cde5e89234ee5cb9fea5f924b64","modified":1648398954707},{"_id":"public/tags/注解/index.html","hash":"1b60077e2d6fa78744188f1170d2dbe66c88d103","modified":1648398954707},{"_id":"public/tags/Vue/index.html","hash":"c8ea238d60430c07d659b6053d4831af82985aac","modified":1648398954707},{"_id":"public/tags/Vuex/index.html","hash":"52d0a08af7476fc6e259d9978704fc61a4b6d058","modified":1648398954707},{"_id":"public/tags/TypeScript/index.html","hash":"d0c54df96c6418f8230786baddd9cd5e17c6e622","modified":1648398954707},{"_id":"public/tags/Vert-x/index.html","hash":"5a5d257527daeff4992e02294b21833797d88894","modified":1648398954707},{"_id":"public/tags/Jenkins/index.html","hash":"6da1b0a7ab501aaf6bd4505f397b27e5cbcb3fb4","modified":1648398954707},{"_id":"public/tags/SonarQube/index.html","hash":"3037e29e26bb7147a2aa6707f783097bfe0beda8","modified":1648398954707},{"_id":"public/tags/Darabonba/index.html","hash":"5c770e43336234a515a8b8d087f9bc989bf35660","modified":1648398954707},{"_id":"public/tags/Json-Schema/index.html","hash":"bb67cc3d6039996e008773f59140b37fd90950f8","modified":1648398954707},{"_id":"public/tags/参数验证/index.html","hash":"79104f9b628afe176a5ce18a775b85370638b5a3","modified":1648398954707},{"_id":"public/tags/DDNS/index.html","hash":"166d5a2d26cc162d470c00ce529807d2e4c49fd1","modified":1648398954707},{"_id":"public/tags/SEO/index.html","hash":"b00872eb909228c8136b60712951930ae68e9829","modified":1648398954707},{"_id":"public/tags/抒发情感/index.html","hash":"a75114bf1bc090346938ea51425c953d72b5242b","modified":1648398954707},{"_id":"public/tags/闲谈/index.html","hash":"c87f5efa542d5a47e9dc0d6d090c7812eee30f2b","modified":1648398954707},{"_id":"public/tags/SaaS/index.html","hash":"75bb0886229c4442aadb6260524eaf99717448b1","modified":1648398954707},{"_id":"public/tags/Quarkus/index.html","hash":"a3135e37d627923e60d0b53433de548634c957c7","modified":1648398954707},{"_id":"public/tags/Graal-VM/index.html","hash":"8a18844a9544c7074b39afce86af208fd9b3f685","modified":1648398954707},{"_id":"public/tags/Maven/index.html","hash":"f3c5ddb75e7a2c40bc2f7afbf79a14596410f526","modified":1648398954707},{"_id":"public/tags/OAuth2-0/index.html","hash":"b8989906f48c72f6b742084f8e2e1b97fa94c0a3","modified":1648398954707},{"_id":"public/tags/JWT/index.html","hash":"fc1fa7c226386ae90df32a5687d0e6c3d2e0f13d","modified":1648398954707},{"_id":"public/tags/OAuth/index.html","hash":"13455ae35222a2f127390f4bb34904fd823e9de2","modified":1648398954707},{"_id":"public/tags/spring-security/index.html","hash":"821a0f76445c17294acda68210f5b82f77f17e6a","modified":1648398954707},{"_id":"public/tags/SSO/index.html","hash":"756b936dae8b838eb2ab6d3e9ed54e50bc669212","modified":1648398954707},{"_id":"public/tags/CAS框架/index.html","hash":"c0f01574717f56ed1b5285ceec04ab4788802fae","modified":1648398954707},{"_id":"public/tags/集群/index.html","hash":"2abc9f07ab4a2d7556418ae89e04cb28de36a0cc","modified":1648398954707},{"_id":"public/tags/分布式/index.html","hash":"79df29de85961e7b5a854739f9300298c810ad8e","modified":1648398954707},{"_id":"public/tags/ZooKeeper/index.html","hash":"6e2c2e9bc828518841fb9a2073ca516938cecc1b","modified":1648398954707},{"_id":"public/tags/Disruptor/index.html","hash":"56d96aa3802a058e0e45b9c70a8a141a3cae28cd","modified":1648398954707},{"_id":"public/tags/JVM/index.html","hash":"651c606f1780343153f9774a4e271cf53a36601d","modified":1648398954707},{"_id":"public/tags/Jvm/index.html","hash":"06428f3522568dac6aae5e397a9b882a3aba55b0","modified":1648398954707},{"_id":"public/tags/Nio/index.html","hash":"80d15d54741e10f997b3bb22dbb3b3846bc0344f","modified":1648398954707},{"_id":"public/tags/多线程/index.html","hash":"d70ba656e224abb978b9b0cd5c9536570927f316","modified":1648398954707},{"_id":"public/css/images/alipay.jpg","hash":"c49822ea6f06f868c2404fb00a93f913c8fff7b5","modified":1648398954707},{"_id":"public/css/images/error_icon.png","hash":"efec6e759508dd02e6fa8c4facd9a25a61aae055","modified":1648398954707},{"_id":"public/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1648398954707},{"_id":"public/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1648398954707},{"_id":"public/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1648398954707},{"_id":"public/css/images/favicon.ico","hash":"983ddcbe4c676e9dc58ebbe3323ba2e9dab68b46","modified":1648398954707},{"_id":"public/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1648398954707},{"_id":"public/css/images/wechat.jpg","hash":"5bed6d3eb9f71b227b0ea0187c1a7ba8caf5ee64","modified":1648398954707},{"_id":"public/CNAME","hash":"0e08caaee6255bfc75108ea847b152278f5d06d8","modified":1648398954707},{"_id":"public/baidu-verify-9BFFE2B7F8.txt","hash":"50cc3c23409426c3e28cf8800423ecda502f1eb8","modified":1648398954707},{"_id":"public/robots.txt","hash":"4dc86d8e587c036a47970ac0271a3fa67cfaf1c4","modified":1648398954707},{"_id":"public/root.txt","hash":"51c99f66271aedfff930264c82fdbe9b4d05b67e","modified":1648398954707},{"_id":"public/images/gof-factory-method/20191215162632-20211008153952135.gif","hash":"87e6b607287ba716aba531441fa756f0f7dfe223","modified":1648398954707},{"_id":"public/images/WechatIMG5.jpeg","hash":"31388898b2c2d032ad7be6fcba3cf90c64f39257","modified":1648398954707},{"_id":"public/images/gof-factory-method/20191215163319-20211008153952143.jpg","hash":"1948fb7e88908d9ff9246f4fafd1b0ff80e2c03a","modified":1648398954707},{"_id":"public/images/gof-factory-method/20191215170620-20211008153952135.jpg","hash":"a3f86c7d55967510c85a8ec8fb18b6795e963a81","modified":1648398954707},{"_id":"public/images/gof-factory-method/20191215163907-20211008153952183.gif","hash":"4f827c91be532cfcce26b9752ec0c995bc38e5c7","modified":1648398954707},{"_id":"public/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1648398954707},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1648398954707},{"_id":"public/js/local-search.js","hash":"2d4c35e67f6ae2234a220c2898534d5bcb5245a2","modified":1648398954707},{"_id":"public/js/script.js","hash":"1e0a395deba4f5ae66a5758590e094d26d777421","modified":1648398954707},{"_id":"public/css/style.css","hash":"c17869983db069014754fe879c149541d5ca4fd4","modified":1648398954707},{"_id":"public/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1648398954707},{"_id":"public/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1648398954707},{"_id":"public/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1648398954707},{"_id":"public/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1648398954707},{"_id":"public/images/gof-factory-method/gof-factory-method-20211008153952229.jpg","hash":"6ae751aa9446122ed7e2ec0765abaa87138924e1","modified":1648398954707}],"Category":[{"name":"Algorithm","_id":"cl19i6ef10004vpuca2jab91j"},{"name":"UML","_id":"cl19i6efm000pvpucdup1gadh"},{"name":"GOF","_id":"cl19i6efr000xvpuchgfe6w7h"},{"name":"MySQL","_id":"cl19i6ege0025vpuc45wy13fi"},{"name":"网络","_id":"cl19i6egn002dvpuc6ibbey84"},{"name":"Dubbo","_id":"cl19i6egq002jvpuc8c3a9dgy"},{"name":"Go","_id":"cl19i6egs002qvpuc4dse53ca"},{"name":"Docker","_id":"cl19i6egw0033vpucgjbjd0fv"},{"name":"Linux","_id":"cl19i6eh0003ivpucdrqsc301"},{"name":"Java","_id":"cl19i6ehd004svpuces4e57qs"},{"name":"Recommend","_id":"cl19i6ei6007fvpuce0cy7y5s"},{"name":"RocketMQ","_id":"cl19i6ei8007nvpuc9pbj7ryf"},{"name":"Protocol","_id":"cl19i6eia007uvpuc2ju7adt2"},{"name":"Spring","_id":"cl19i6eie008avpuc6zfugaqc"},{"name":"Vue","_id":"cl19i6eil0094vpuc32sg3awf"},{"name":"Vert.x","_id":"cl19i6ein009cvpucedq84wn2"},{"name":"Jenkins","_id":"cl19i6ein009ivpucenm24jyr"},{"name":"Tool","_id":"cl19i6eir00a7vpuc27dqd0br"},{"name":"Essay","_id":"cl19i6eiv00asvpucbn3egweh"},{"name":"Quarkus","_id":"cl19i6eiw00b0vpuccijo84r7"},{"name":"WebSecurity","_id":"cl19i6eiz00bdvpuc8rprd9hs"},{"name":"ZooKeeper","_id":"cl19i6ej100bpvpuc1zvs05n0"},{"name":"JVM","_id":"cl19i6ej200byvpuc6s8l2tb0"}],"Data":[{"_id":"wikis","data":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}}},{"_id":"links","data":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2021-10-08T07:57:24.155Z","path":"404.html","comments":1,"_id":"cl19i6eeo0000vpuc6719huem","content":"","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":""},{"_content":"<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>时钟</title>\n        <script src=\"https://cdn.jsdelivr.net/npm/echarts@5.0.2/dist/echarts.min.js\"></script>\n    </head>\n    <body>\n        <div id=\"main\" style=\"width: 1000px;height:1000px; margin: 0 auto;\"></div>\n        <script type=\"text/javascript\">\n            var chartDom = document.getElementById('main');\n            var myChart = echarts.init(chartDom);\n            var option;\n\n            option = {\n                series: [{\n                    name: 'hour',\n                    type: 'gauge',\n                    startAngle: 90,\n                    endAngle: -270,\n                    min: 0,\n                    max: 12,\n                    splitNumber: 12,\n                    axisLine: {\n                        lineStyle: {\n                            width: 15,\n                            color: [\n                                [1, 'rgba(0,0,0,0.7)']\n                            ],\n                            shadowColor: 'rgba(0, 0, 0, 0.5)',\n                            shadowBlur: 15\n                        }\n                    },\n                    splitLine: {\n                        lineStyle: {\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 3,\n                            shadowOffsetX: 1,\n                            shadowOffsetY: 2\n                        }\n                    },\n                    axisLabel: {\n                        fontSize: 50,\n                        distance: 25,\n                        formatter: function (value) {\n                            if (value === 0) {\n                                return '';\n                            }\n                            return value;\n                        }\n                    },\n                    anchor: {\n                        show: true,\n                        icon: 'path://M532.8,70.8C532.8,70.8,532.8,70.8,532.8,70.8L532.8,70.8C532.7,70.8,532.8,70.8,532.8,70.8z M456.1,49.6c-2.2-6.2-8.1-10.6-15-10.6h-37.5v10.6h37.5l0,0c2.9,0,5.3,2.4,5.3,5.3c0,2.9-2.4,5.3-5.3,5.3v0h-22.5c-1.5,0.1-3,0.4-4.3,0.9c-4.5,1.6-8.1,5.2-9.7,9.8c-0.6,1.7-0.9,3.4-0.9,5.3v16h10.6v-16l0,0l0,0c0-2.7,2.1-5,4.7-5.3h10.3l10.4,21.2h11.8l-10.4-21.2h0c6.9,0,12.8-4.4,15-10.6c0.6-1.7,0.9-3.5,0.9-5.3C457,53,456.7,51.2,456.1,49.6z M388.9,92.1h11.3L381,39h-3.6h-11.3L346.8,92v0h11.3l3.9-10.7h7.3h7.7l3.9-10.6h-7.7h-7.3l7.7-21.2v0L388.9,92.1z M301,38.9h-10.6v53.1H301V70.8h28.4l3.7-10.6H301V38.9zM333.2,38.9v10.6v10.7v31.9h10.6V38.9H333.2z M249.5,81.4L249.5,81.4L249.5,81.4c-2.9,0-5.3-2.4-5.3-5.3h0V54.9h0l0,0c0-2.9,2.4-5.3,5.3-5.3l0,0l0,0h33.6l3.9-10.6h-37.5c-1.9,0-3.6,0.3-5.3,0.9c-4.5,1.6-8.1,5.2-9.7,9.7c-0.6,1.7-0.9,3.5-0.9,5.3l0,0v21.3c0,1.9,0.3,3.6,0.9,5.3c1.6,4.5,5.2,8.1,9.7,9.7c1.7,0.6,3.5,0.9,5.3,0.9h33.6l3.9-10.6H249.5z M176.8,38.9v10.6h49.6l3.9-10.6H176.8z M192.7,81.4L192.7,81.4L192.7,81.4c-2.9,0-5.3-2.4-5.3-5.3l0,0v-5.3h38.9l3.9-10.6h-53.4v10.6v5.3l0,0c0,1.9,0.3,3.6,0.9,5.3c1.6,4.5,5.2,8.1,9.7,9.7c1.7,0.6,3.4,0.9,5.3,0.9h23.4h10.2l3.9-10.6l0,0H192.7z M460.1,38.9v10.6h21.4v42.5h10.6V49.6h17.5l3.8-10.6H460.1z M541.6,68.2c-0.2,0.1-0.4,0.3-0.7,0.4C541.1,68.4,541.4,68.3,541.6,68.2L541.6,68.2z M554.3,60.2h-21.6v0l0,0c-2.9,0-5.3-2.4-5.3-5.3c0-2.9,2.4-5.3,5.3-5.3l0,0l0,0h33.6l3.8-10.6h-37.5l0,0c-6.9,0-12.8,4.4-15,10.6c-0.6,1.7-0.9,3.5-0.9,5.3c0,1.9,0.3,3.7,0.9,5.3c2.2,6.2,8.1,10.6,15,10.6h21.6l0,0c2.9,0,5.3,2.4,5.3,5.3c0,2.9-2.4,5.3-5.3,5.3l0,0h-37.5v10.6h37.5c6.9,0,12.8-4.4,15-10.6c0.6-1.7,0.9-3.5,0.9-5.3c0-1.9-0.3-3.7-0.9-5.3C567.2,64.6,561.3,60.2,554.3,60.2z',\n                        showAbove: false,\n                        offsetCenter: [0, '-35%'],\n                        size: 120,\n                        keepAspect: true,\n                        itemStyle: {\n                            color: '#707177'\n                        }\n                    },\n                    pointer: {\n                        icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\n                        width: 12,\n                        length: '55%',\n                        offsetCenter: [0, '8%'],\n                        itemStyle: {\n                            color: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    detail: {\n                        show: false\n                    },\n                    title: {\n                        offsetCenter: [0, '30%']\n                    },\n                    data: [{\n                        value: 0\n                    }]\n                },\n                {\n                    name: 'minute',\n                    type: 'gauge',\n                    startAngle: 90,\n                    endAngle: -270,\n                    min: 0,\n                    max: 60,\n                    axisLine: {\n                        show: false\n                    },\n                    splitLine: {\n                        show: false\n                    },\n                    axisTick: {\n                        show: false\n                    },\n                    axisLabel: {\n                        show: false\n                    },\n                    pointer: {\n                        icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\n                        width: 8,\n                        length: '70%',\n                        offsetCenter: [0, '8%'],\n                        itemStyle: {\n                            color: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    anchor: {\n                        show: true,\n                        size: 20,\n                        showAbove: false,\n                        itemStyle: {\n                            borderWidth: 15,\n                            borderColor: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    detail: {\n                        show: false\n                    },\n                    title: {\n                        offsetCenter: ['0%', '-40%']\n                    },\n                    data: [{\n                        value: 0\n                    }]\n                },\n                {\n                    name: 'second',\n                    type: 'gauge',\n                    startAngle: 90,\n                    endAngle: -270,\n                    min: 0,\n                    max: 60,\n                    animationEasingUpdate: 'bounceOut',\n                    axisLine: {\n                        show: false\n                    },\n                    splitLine: {\n                        show: false\n                    },\n                    axisTick: {\n                        show: false\n                    },\n                    axisLabel: {\n                        show: false\n                    },\n                    pointer: {\n                        icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\n                        width: 4,\n                        length: '85%',\n                        offsetCenter: [0, '8%'],\n                        itemStyle: {\n                            color: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    anchor: {\n                        show: true,\n                        size: 15,\n                        showAbove: true,\n                        itemStyle: {\n                            color: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    detail: {\n                        show: false\n                    },\n                    title: {\n                        offsetCenter: ['0%', '-40%']\n                    },\n                    data: [{\n                        value: 0\n                    }]\n                }]\n            };\n\n            var timeUpdatedStatus = {\n                second: false,\n                minute: false,\n                hour: false\n            };\n\n            function updateSeries(time, series, type) {\n                var isCritical = (Math.floor(time) === 0) || (type === 'second' && time === 1);\n                if (isCritical && timeUpdatedStatus[type] === true) {\n                    timeUpdatedStatus[type] = false;\n                    series.data[0].value = 0;\n                    series.clockwise = true;\n                    option.animationDurationUpdate = 0;\n                    myChart.setOption(option, true);\n                }\n                series.data[0].value = time;\n                series.clockwise = true;\n                if (time === 0) {\n                    timeUpdatedStatus[type] = true;\n                    series.clockwise = false;\n                }\n            }\n\n            setInterval(function () {\n                var date = new Date();\n                var second = date.getSeconds();\n                var minute = date.getMinutes() + second / 60;\n                var hour = date.getHours() % 12 + minute / 60;\n\n                updateSeries(second, option.series[2], 'second');\n                updateSeries(minute, option.series[1], 'minute');\n                updateSeries(hour, option.series[0], 'hour');\n\n                option.animationDurationUpdate = 300;\n                myChart.setOption(option, true);\n                date = null;\n            }, 1000);\n\n            option && myChart.setOption(option);\n        </script>\n    </body>\n</html>","source":"clock.html","raw":"<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>时钟</title>\n        <script src=\"https://cdn.jsdelivr.net/npm/echarts@5.0.2/dist/echarts.min.js\"></script>\n    </head>\n    <body>\n        <div id=\"main\" style=\"width: 1000px;height:1000px; margin: 0 auto;\"></div>\n        <script type=\"text/javascript\">\n            var chartDom = document.getElementById('main');\n            var myChart = echarts.init(chartDom);\n            var option;\n\n            option = {\n                series: [{\n                    name: 'hour',\n                    type: 'gauge',\n                    startAngle: 90,\n                    endAngle: -270,\n                    min: 0,\n                    max: 12,\n                    splitNumber: 12,\n                    axisLine: {\n                        lineStyle: {\n                            width: 15,\n                            color: [\n                                [1, 'rgba(0,0,0,0.7)']\n                            ],\n                            shadowColor: 'rgba(0, 0, 0, 0.5)',\n                            shadowBlur: 15\n                        }\n                    },\n                    splitLine: {\n                        lineStyle: {\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 3,\n                            shadowOffsetX: 1,\n                            shadowOffsetY: 2\n                        }\n                    },\n                    axisLabel: {\n                        fontSize: 50,\n                        distance: 25,\n                        formatter: function (value) {\n                            if (value === 0) {\n                                return '';\n                            }\n                            return value;\n                        }\n                    },\n                    anchor: {\n                        show: true,\n                        icon: 'path://M532.8,70.8C532.8,70.8,532.8,70.8,532.8,70.8L532.8,70.8C532.7,70.8,532.8,70.8,532.8,70.8z M456.1,49.6c-2.2-6.2-8.1-10.6-15-10.6h-37.5v10.6h37.5l0,0c2.9,0,5.3,2.4,5.3,5.3c0,2.9-2.4,5.3-5.3,5.3v0h-22.5c-1.5,0.1-3,0.4-4.3,0.9c-4.5,1.6-8.1,5.2-9.7,9.8c-0.6,1.7-0.9,3.4-0.9,5.3v16h10.6v-16l0,0l0,0c0-2.7,2.1-5,4.7-5.3h10.3l10.4,21.2h11.8l-10.4-21.2h0c6.9,0,12.8-4.4,15-10.6c0.6-1.7,0.9-3.5,0.9-5.3C457,53,456.7,51.2,456.1,49.6z M388.9,92.1h11.3L381,39h-3.6h-11.3L346.8,92v0h11.3l3.9-10.7h7.3h7.7l3.9-10.6h-7.7h-7.3l7.7-21.2v0L388.9,92.1z M301,38.9h-10.6v53.1H301V70.8h28.4l3.7-10.6H301V38.9zM333.2,38.9v10.6v10.7v31.9h10.6V38.9H333.2z M249.5,81.4L249.5,81.4L249.5,81.4c-2.9,0-5.3-2.4-5.3-5.3h0V54.9h0l0,0c0-2.9,2.4-5.3,5.3-5.3l0,0l0,0h33.6l3.9-10.6h-37.5c-1.9,0-3.6,0.3-5.3,0.9c-4.5,1.6-8.1,5.2-9.7,9.7c-0.6,1.7-0.9,3.5-0.9,5.3l0,0v21.3c0,1.9,0.3,3.6,0.9,5.3c1.6,4.5,5.2,8.1,9.7,9.7c1.7,0.6,3.5,0.9,5.3,0.9h33.6l3.9-10.6H249.5z M176.8,38.9v10.6h49.6l3.9-10.6H176.8z M192.7,81.4L192.7,81.4L192.7,81.4c-2.9,0-5.3-2.4-5.3-5.3l0,0v-5.3h38.9l3.9-10.6h-53.4v10.6v5.3l0,0c0,1.9,0.3,3.6,0.9,5.3c1.6,4.5,5.2,8.1,9.7,9.7c1.7,0.6,3.4,0.9,5.3,0.9h23.4h10.2l3.9-10.6l0,0H192.7z M460.1,38.9v10.6h21.4v42.5h10.6V49.6h17.5l3.8-10.6H460.1z M541.6,68.2c-0.2,0.1-0.4,0.3-0.7,0.4C541.1,68.4,541.4,68.3,541.6,68.2L541.6,68.2z M554.3,60.2h-21.6v0l0,0c-2.9,0-5.3-2.4-5.3-5.3c0-2.9,2.4-5.3,5.3-5.3l0,0l0,0h33.6l3.8-10.6h-37.5l0,0c-6.9,0-12.8,4.4-15,10.6c-0.6,1.7-0.9,3.5-0.9,5.3c0,1.9,0.3,3.7,0.9,5.3c2.2,6.2,8.1,10.6,15,10.6h21.6l0,0c2.9,0,5.3,2.4,5.3,5.3c0,2.9-2.4,5.3-5.3,5.3l0,0h-37.5v10.6h37.5c6.9,0,12.8-4.4,15-10.6c0.6-1.7,0.9-3.5,0.9-5.3c0-1.9-0.3-3.7-0.9-5.3C567.2,64.6,561.3,60.2,554.3,60.2z',\n                        showAbove: false,\n                        offsetCenter: [0, '-35%'],\n                        size: 120,\n                        keepAspect: true,\n                        itemStyle: {\n                            color: '#707177'\n                        }\n                    },\n                    pointer: {\n                        icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\n                        width: 12,\n                        length: '55%',\n                        offsetCenter: [0, '8%'],\n                        itemStyle: {\n                            color: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    detail: {\n                        show: false\n                    },\n                    title: {\n                        offsetCenter: [0, '30%']\n                    },\n                    data: [{\n                        value: 0\n                    }]\n                },\n                {\n                    name: 'minute',\n                    type: 'gauge',\n                    startAngle: 90,\n                    endAngle: -270,\n                    min: 0,\n                    max: 60,\n                    axisLine: {\n                        show: false\n                    },\n                    splitLine: {\n                        show: false\n                    },\n                    axisTick: {\n                        show: false\n                    },\n                    axisLabel: {\n                        show: false\n                    },\n                    pointer: {\n                        icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\n                        width: 8,\n                        length: '70%',\n                        offsetCenter: [0, '8%'],\n                        itemStyle: {\n                            color: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    anchor: {\n                        show: true,\n                        size: 20,\n                        showAbove: false,\n                        itemStyle: {\n                            borderWidth: 15,\n                            borderColor: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    detail: {\n                        show: false\n                    },\n                    title: {\n                        offsetCenter: ['0%', '-40%']\n                    },\n                    data: [{\n                        value: 0\n                    }]\n                },\n                {\n                    name: 'second',\n                    type: 'gauge',\n                    startAngle: 90,\n                    endAngle: -270,\n                    min: 0,\n                    max: 60,\n                    animationEasingUpdate: 'bounceOut',\n                    axisLine: {\n                        show: false\n                    },\n                    splitLine: {\n                        show: false\n                    },\n                    axisTick: {\n                        show: false\n                    },\n                    axisLabel: {\n                        show: false\n                    },\n                    pointer: {\n                        icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\n                        width: 4,\n                        length: '85%',\n                        offsetCenter: [0, '8%'],\n                        itemStyle: {\n                            color: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    anchor: {\n                        show: true,\n                        size: 15,\n                        showAbove: true,\n                        itemStyle: {\n                            color: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    detail: {\n                        show: false\n                    },\n                    title: {\n                        offsetCenter: ['0%', '-40%']\n                    },\n                    data: [{\n                        value: 0\n                    }]\n                }]\n            };\n\n            var timeUpdatedStatus = {\n                second: false,\n                minute: false,\n                hour: false\n            };\n\n            function updateSeries(time, series, type) {\n                var isCritical = (Math.floor(time) === 0) || (type === 'second' && time === 1);\n                if (isCritical && timeUpdatedStatus[type] === true) {\n                    timeUpdatedStatus[type] = false;\n                    series.data[0].value = 0;\n                    series.clockwise = true;\n                    option.animationDurationUpdate = 0;\n                    myChart.setOption(option, true);\n                }\n                series.data[0].value = time;\n                series.clockwise = true;\n                if (time === 0) {\n                    timeUpdatedStatus[type] = true;\n                    series.clockwise = false;\n                }\n            }\n\n            setInterval(function () {\n                var date = new Date();\n                var second = date.getSeconds();\n                var minute = date.getMinutes() + second / 60;\n                var hour = date.getHours() % 12 + minute / 60;\n\n                updateSeries(second, option.series[2], 'second');\n                updateSeries(minute, option.series[1], 'minute');\n                updateSeries(hour, option.series[0], 'hour');\n\n                option.animationDurationUpdate = 300;\n                myChart.setOption(option, true);\n                date = null;\n            }, 1000);\n\n            option && myChart.setOption(option);\n        </script>\n    </body>\n</html>","date":"2021-10-08T07:57:24.193Z","updated":"2021-10-08T07:57:24.193Z","path":"clock.html","title":"","comments":1,"layout":"page","_id":"cl19i6eez0002vpucfp1pblw0","content":"<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>时钟</title>\n        <script src=\"https://cdn.jsdelivr.net/npm/echarts@5.0.2/dist/echarts.min.js\"></script>\n    </head>\n    <body>\n        <div id=\"main\" style=\"width: 1000px;height:1000px; margin: 0 auto;\"></div>\n        <script type=\"text/javascript\">\n            var chartDom = document.getElementById('main');\n            var myChart = echarts.init(chartDom);\n            var option;\n\n            option = {\n                series: [{\n                    name: 'hour',\n                    type: 'gauge',\n                    startAngle: 90,\n                    endAngle: -270,\n                    min: 0,\n                    max: 12,\n                    splitNumber: 12,\n                    axisLine: {\n                        lineStyle: {\n                            width: 15,\n                            color: [\n                                [1, 'rgba(0,0,0,0.7)']\n                            ],\n                            shadowColor: 'rgba(0, 0, 0, 0.5)',\n                            shadowBlur: 15\n                        }\n                    },\n                    splitLine: {\n                        lineStyle: {\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 3,\n                            shadowOffsetX: 1,\n                            shadowOffsetY: 2\n                        }\n                    },\n                    axisLabel: {\n                        fontSize: 50,\n                        distance: 25,\n                        formatter: function (value) {\n                            if (value === 0) {\n                                return '';\n                            }\n                            return value;\n                        }\n                    },\n                    anchor: {\n                        show: true,\n                        icon: 'path://M532.8,70.8C532.8,70.8,532.8,70.8,532.8,70.8L532.8,70.8C532.7,70.8,532.8,70.8,532.8,70.8z M456.1,49.6c-2.2-6.2-8.1-10.6-15-10.6h-37.5v10.6h37.5l0,0c2.9,0,5.3,2.4,5.3,5.3c0,2.9-2.4,5.3-5.3,5.3v0h-22.5c-1.5,0.1-3,0.4-4.3,0.9c-4.5,1.6-8.1,5.2-9.7,9.8c-0.6,1.7-0.9,3.4-0.9,5.3v16h10.6v-16l0,0l0,0c0-2.7,2.1-5,4.7-5.3h10.3l10.4,21.2h11.8l-10.4-21.2h0c6.9,0,12.8-4.4,15-10.6c0.6-1.7,0.9-3.5,0.9-5.3C457,53,456.7,51.2,456.1,49.6z M388.9,92.1h11.3L381,39h-3.6h-11.3L346.8,92v0h11.3l3.9-10.7h7.3h7.7l3.9-10.6h-7.7h-7.3l7.7-21.2v0L388.9,92.1z M301,38.9h-10.6v53.1H301V70.8h28.4l3.7-10.6H301V38.9zM333.2,38.9v10.6v10.7v31.9h10.6V38.9H333.2z M249.5,81.4L249.5,81.4L249.5,81.4c-2.9,0-5.3-2.4-5.3-5.3h0V54.9h0l0,0c0-2.9,2.4-5.3,5.3-5.3l0,0l0,0h33.6l3.9-10.6h-37.5c-1.9,0-3.6,0.3-5.3,0.9c-4.5,1.6-8.1,5.2-9.7,9.7c-0.6,1.7-0.9,3.5-0.9,5.3l0,0v21.3c0,1.9,0.3,3.6,0.9,5.3c1.6,4.5,5.2,8.1,9.7,9.7c1.7,0.6,3.5,0.9,5.3,0.9h33.6l3.9-10.6H249.5z M176.8,38.9v10.6h49.6l3.9-10.6H176.8z M192.7,81.4L192.7,81.4L192.7,81.4c-2.9,0-5.3-2.4-5.3-5.3l0,0v-5.3h38.9l3.9-10.6h-53.4v10.6v5.3l0,0c0,1.9,0.3,3.6,0.9,5.3c1.6,4.5,5.2,8.1,9.7,9.7c1.7,0.6,3.4,0.9,5.3,0.9h23.4h10.2l3.9-10.6l0,0H192.7z M460.1,38.9v10.6h21.4v42.5h10.6V49.6h17.5l3.8-10.6H460.1z M541.6,68.2c-0.2,0.1-0.4,0.3-0.7,0.4C541.1,68.4,541.4,68.3,541.6,68.2L541.6,68.2z M554.3,60.2h-21.6v0l0,0c-2.9,0-5.3-2.4-5.3-5.3c0-2.9,2.4-5.3,5.3-5.3l0,0l0,0h33.6l3.8-10.6h-37.5l0,0c-6.9,0-12.8,4.4-15,10.6c-0.6,1.7-0.9,3.5-0.9,5.3c0,1.9,0.3,3.7,0.9,5.3c2.2,6.2,8.1,10.6,15,10.6h21.6l0,0c2.9,0,5.3,2.4,5.3,5.3c0,2.9-2.4,5.3-5.3,5.3l0,0h-37.5v10.6h37.5c6.9,0,12.8-4.4,15-10.6c0.6-1.7,0.9-3.5,0.9-5.3c0-1.9-0.3-3.7-0.9-5.3C567.2,64.6,561.3,60.2,554.3,60.2z',\n                        showAbove: false,\n                        offsetCenter: [0, '-35%'],\n                        size: 120,\n                        keepAspect: true,\n                        itemStyle: {\n                            color: '#707177'\n                        }\n                    },\n                    pointer: {\n                        icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\n                        width: 12,\n                        length: '55%',\n                        offsetCenter: [0, '8%'],\n                        itemStyle: {\n                            color: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    detail: {\n                        show: false\n                    },\n                    title: {\n                        offsetCenter: [0, '30%']\n                    },\n                    data: [{\n                        value: 0\n                    }]\n                },\n                {\n                    name: 'minute',\n                    type: 'gauge',\n                    startAngle: 90,\n                    endAngle: -270,\n                    min: 0,\n                    max: 60,\n                    axisLine: {\n                        show: false\n                    },\n                    splitLine: {\n                        show: false\n                    },\n                    axisTick: {\n                        show: false\n                    },\n                    axisLabel: {\n                        show: false\n                    },\n                    pointer: {\n                        icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\n                        width: 8,\n                        length: '70%',\n                        offsetCenter: [0, '8%'],\n                        itemStyle: {\n                            color: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    anchor: {\n                        show: true,\n                        size: 20,\n                        showAbove: false,\n                        itemStyle: {\n                            borderWidth: 15,\n                            borderColor: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    detail: {\n                        show: false\n                    },\n                    title: {\n                        offsetCenter: ['0%', '-40%']\n                    },\n                    data: [{\n                        value: 0\n                    }]\n                },\n                {\n                    name: 'second',\n                    type: 'gauge',\n                    startAngle: 90,\n                    endAngle: -270,\n                    min: 0,\n                    max: 60,\n                    animationEasingUpdate: 'bounceOut',\n                    axisLine: {\n                        show: false\n                    },\n                    splitLine: {\n                        show: false\n                    },\n                    axisTick: {\n                        show: false\n                    },\n                    axisLabel: {\n                        show: false\n                    },\n                    pointer: {\n                        icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\n                        width: 4,\n                        length: '85%',\n                        offsetCenter: [0, '8%'],\n                        itemStyle: {\n                            color: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    anchor: {\n                        show: true,\n                        size: 15,\n                        showAbove: true,\n                        itemStyle: {\n                            color: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    detail: {\n                        show: false\n                    },\n                    title: {\n                        offsetCenter: ['0%', '-40%']\n                    },\n                    data: [{\n                        value: 0\n                    }]\n                }]\n            };\n\n            var timeUpdatedStatus = {\n                second: false,\n                minute: false,\n                hour: false\n            };\n\n            function updateSeries(time, series, type) {\n                var isCritical = (Math.floor(time) === 0) || (type === 'second' && time === 1);\n                if (isCritical && timeUpdatedStatus[type] === true) {\n                    timeUpdatedStatus[type] = false;\n                    series.data[0].value = 0;\n                    series.clockwise = true;\n                    option.animationDurationUpdate = 0;\n                    myChart.setOption(option, true);\n                }\n                series.data[0].value = time;\n                series.clockwise = true;\n                if (time === 0) {\n                    timeUpdatedStatus[type] = true;\n                    series.clockwise = false;\n                }\n            }\n\n            setInterval(function () {\n                var date = new Date();\n                var second = date.getSeconds();\n                var minute = date.getMinutes() + second / 60;\n                var hour = date.getHours() % 12 + minute / 60;\n\n                updateSeries(second, option.series[2], 'second');\n                updateSeries(minute, option.series[1], 'minute');\n                updateSeries(hour, option.series[0], 'hour');\n\n                option.animationDurationUpdate = 300;\n                myChart.setOption(option, true);\n                date = null;\n            }, 1000);\n\n            option && myChart.setOption(option);\n        </script>\n    </body>\n</html>","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n        <title>时钟</title>\n        <script src=\"https://cdn.jsdelivr.net/npm/echarts@5.0.2/dist/echarts.min.js\"></script>\n    </head>\n    <body>\n        <div id=\"main\" style=\"width: 1000px;height:1000px; margin: 0 auto;\"></div>\n        <script type=\"text/javascript\">\n            var chartDom = document.getElementById('main');\n            var myChart = echarts.init(chartDom);\n            var option;\n\n            option = {\n                series: [{\n                    name: 'hour',\n                    type: 'gauge',\n                    startAngle: 90,\n                    endAngle: -270,\n                    min: 0,\n                    max: 12,\n                    splitNumber: 12,\n                    axisLine: {\n                        lineStyle: {\n                            width: 15,\n                            color: [\n                                [1, 'rgba(0,0,0,0.7)']\n                            ],\n                            shadowColor: 'rgba(0, 0, 0, 0.5)',\n                            shadowBlur: 15\n                        }\n                    },\n                    splitLine: {\n                        lineStyle: {\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 3,\n                            shadowOffsetX: 1,\n                            shadowOffsetY: 2\n                        }\n                    },\n                    axisLabel: {\n                        fontSize: 50,\n                        distance: 25,\n                        formatter: function (value) {\n                            if (value === 0) {\n                                return '';\n                            }\n                            return value;\n                        }\n                    },\n                    anchor: {\n                        show: true,\n                        icon: 'path://M532.8,70.8C532.8,70.8,532.8,70.8,532.8,70.8L532.8,70.8C532.7,70.8,532.8,70.8,532.8,70.8z M456.1,49.6c-2.2-6.2-8.1-10.6-15-10.6h-37.5v10.6h37.5l0,0c2.9,0,5.3,2.4,5.3,5.3c0,2.9-2.4,5.3-5.3,5.3v0h-22.5c-1.5,0.1-3,0.4-4.3,0.9c-4.5,1.6-8.1,5.2-9.7,9.8c-0.6,1.7-0.9,3.4-0.9,5.3v16h10.6v-16l0,0l0,0c0-2.7,2.1-5,4.7-5.3h10.3l10.4,21.2h11.8l-10.4-21.2h0c6.9,0,12.8-4.4,15-10.6c0.6-1.7,0.9-3.5,0.9-5.3C457,53,456.7,51.2,456.1,49.6z M388.9,92.1h11.3L381,39h-3.6h-11.3L346.8,92v0h11.3l3.9-10.7h7.3h7.7l3.9-10.6h-7.7h-7.3l7.7-21.2v0L388.9,92.1z M301,38.9h-10.6v53.1H301V70.8h28.4l3.7-10.6H301V38.9zM333.2,38.9v10.6v10.7v31.9h10.6V38.9H333.2z M249.5,81.4L249.5,81.4L249.5,81.4c-2.9,0-5.3-2.4-5.3-5.3h0V54.9h0l0,0c0-2.9,2.4-5.3,5.3-5.3l0,0l0,0h33.6l3.9-10.6h-37.5c-1.9,0-3.6,0.3-5.3,0.9c-4.5,1.6-8.1,5.2-9.7,9.7c-0.6,1.7-0.9,3.5-0.9,5.3l0,0v21.3c0,1.9,0.3,3.6,0.9,5.3c1.6,4.5,5.2,8.1,9.7,9.7c1.7,0.6,3.5,0.9,5.3,0.9h33.6l3.9-10.6H249.5z M176.8,38.9v10.6h49.6l3.9-10.6H176.8z M192.7,81.4L192.7,81.4L192.7,81.4c-2.9,0-5.3-2.4-5.3-5.3l0,0v-5.3h38.9l3.9-10.6h-53.4v10.6v5.3l0,0c0,1.9,0.3,3.6,0.9,5.3c1.6,4.5,5.2,8.1,9.7,9.7c1.7,0.6,3.4,0.9,5.3,0.9h23.4h10.2l3.9-10.6l0,0H192.7z M460.1,38.9v10.6h21.4v42.5h10.6V49.6h17.5l3.8-10.6H460.1z M541.6,68.2c-0.2,0.1-0.4,0.3-0.7,0.4C541.1,68.4,541.4,68.3,541.6,68.2L541.6,68.2z M554.3,60.2h-21.6v0l0,0c-2.9,0-5.3-2.4-5.3-5.3c0-2.9,2.4-5.3,5.3-5.3l0,0l0,0h33.6l3.8-10.6h-37.5l0,0c-6.9,0-12.8,4.4-15,10.6c-0.6,1.7-0.9,3.5-0.9,5.3c0,1.9,0.3,3.7,0.9,5.3c2.2,6.2,8.1,10.6,15,10.6h21.6l0,0c2.9,0,5.3,2.4,5.3,5.3c0,2.9-2.4,5.3-5.3,5.3l0,0h-37.5v10.6h37.5c6.9,0,12.8-4.4,15-10.6c0.6-1.7,0.9-3.5,0.9-5.3c0-1.9-0.3-3.7-0.9-5.3C567.2,64.6,561.3,60.2,554.3,60.2z',\n                        showAbove: false,\n                        offsetCenter: [0, '-35%'],\n                        size: 120,\n                        keepAspect: true,\n                        itemStyle: {\n                            color: '#707177'\n                        }\n                    },\n                    pointer: {\n                        icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\n                        width: 12,\n                        length: '55%',\n                        offsetCenter: [0, '8%'],\n                        itemStyle: {\n                            color: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    detail: {\n                        show: false\n                    },\n                    title: {\n                        offsetCenter: [0, '30%']\n                    },\n                    data: [{\n                        value: 0\n                    }]\n                },\n                {\n                    name: 'minute',\n                    type: 'gauge',\n                    startAngle: 90,\n                    endAngle: -270,\n                    min: 0,\n                    max: 60,\n                    axisLine: {\n                        show: false\n                    },\n                    splitLine: {\n                        show: false\n                    },\n                    axisTick: {\n                        show: false\n                    },\n                    axisLabel: {\n                        show: false\n                    },\n                    pointer: {\n                        icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\n                        width: 8,\n                        length: '70%',\n                        offsetCenter: [0, '8%'],\n                        itemStyle: {\n                            color: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    anchor: {\n                        show: true,\n                        size: 20,\n                        showAbove: false,\n                        itemStyle: {\n                            borderWidth: 15,\n                            borderColor: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    detail: {\n                        show: false\n                    },\n                    title: {\n                        offsetCenter: ['0%', '-40%']\n                    },\n                    data: [{\n                        value: 0\n                    }]\n                },\n                {\n                    name: 'second',\n                    type: 'gauge',\n                    startAngle: 90,\n                    endAngle: -270,\n                    min: 0,\n                    max: 60,\n                    animationEasingUpdate: 'bounceOut',\n                    axisLine: {\n                        show: false\n                    },\n                    splitLine: {\n                        show: false\n                    },\n                    axisTick: {\n                        show: false\n                    },\n                    axisLabel: {\n                        show: false\n                    },\n                    pointer: {\n                        icon: 'path://M2.9,0.7L2.9,0.7c1.4,0,2.6,1.2,2.6,2.6v115c0,1.4-1.2,2.6-2.6,2.6l0,0c-1.4,0-2.6-1.2-2.6-2.6V3.3C0.3,1.9,1.4,0.7,2.9,0.7z',\n                        width: 4,\n                        length: '85%',\n                        offsetCenter: [0, '8%'],\n                        itemStyle: {\n                            color: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    anchor: {\n                        show: true,\n                        size: 15,\n                        showAbove: true,\n                        itemStyle: {\n                            color: '#C0911F',\n                            shadowColor: 'rgba(0, 0, 0, 0.3)',\n                            shadowBlur: 8,\n                            shadowOffsetX: 2,\n                            shadowOffsetY: 4\n                        }\n                    },\n                    detail: {\n                        show: false\n                    },\n                    title: {\n                        offsetCenter: ['0%', '-40%']\n                    },\n                    data: [{\n                        value: 0\n                    }]\n                }]\n            };\n\n            var timeUpdatedStatus = {\n                second: false,\n                minute: false,\n                hour: false\n            };\n\n            function updateSeries(time, series, type) {\n                var isCritical = (Math.floor(time) === 0) || (type === 'second' && time === 1);\n                if (isCritical && timeUpdatedStatus[type] === true) {\n                    timeUpdatedStatus[type] = false;\n                    series.data[0].value = 0;\n                    series.clockwise = true;\n                    option.animationDurationUpdate = 0;\n                    myChart.setOption(option, true);\n                }\n                series.data[0].value = time;\n                series.clockwise = true;\n                if (time === 0) {\n                    timeUpdatedStatus[type] = true;\n                    series.clockwise = false;\n                }\n            }\n\n            setInterval(function () {\n                var date = new Date();\n                var second = date.getSeconds();\n                var minute = date.getMinutes() + second / 60;\n                var hour = date.getHours() % 12 + minute / 60;\n\n                updateSeries(second, option.series[2], 'second');\n                updateSeries(minute, option.series[1], 'minute');\n                updateSeries(hour, option.series[0], 'hour');\n\n                option.animationDurationUpdate = 300;\n                myChart.setOption(option, true);\n                date = null;\n            }, 1000);\n\n            option && myChart.setOption(option);\n        </script>\n    </body>\n</html>"},{"_content":"ea667b0f708cd4ded0b79ebbdd99373a","source":"ea667b0f708cd4ded0b79ebbdd99373a.html","raw":"ea667b0f708cd4ded0b79ebbdd99373a","date":"2021-10-08T07:57:24.193Z","updated":"2021-10-08T07:57:24.193Z","path":"ea667b0f708cd4ded0b79ebbdd99373a.html","title":"","comments":1,"layout":"page","_id":"cl19i6ef50006vpuc6iwhbvuq","content":"ea667b0f708cd4ded0b79ebbdd99373a","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"ea667b0f708cd4ded0b79ebbdd99373a"},{"title":"About","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: About\nlayout: about\n---","date":"2021-10-08T07:57:24.192Z","updated":"2021-10-08T07:57:24.192Z","path":"about/index.html","comments":1,"_id":"cl19i6ef70008vpuchbtp5t6u","content":"","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":""},{"title":"书单","layout":"books","comments":0,"sidebar":"none","_content":"","source":"books/index.md","raw":"---\ntitle: 书单\nlayout: books\ncomments: false\nsidebar: none\n---","date":"2021-10-08T07:57:24.192Z","updated":"2021-10-08T07:57:24.192Z","path":"books/index.html","_id":"cl19i6efa000avpucg8rpejbw","content":"","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":""},{"title":"分类","date":"2019-08-04T14:50:38.000Z","type":"categories","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-08-04 22:50:38\ntype: \"categories\"\nlayout: \"categories\"\ncomments: false\n---\n","updated":"2021-10-08T07:57:24.193Z","path":"categories/index.html","_id":"cl19i6efd000evpuc3mbt633q","content":"","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":""},{"title":"friends","date":"2019-08-04T14:53:14.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-08-04 22:53:14\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2021-10-08T07:57:24.193Z","path":"friends/index.html","comments":1,"_id":"cl19i6eff000gvpuc9wm152dl","content":"","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":""},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\n---","date":"2021-10-08T07:57:24.198Z","updated":"2021-10-08T07:57:24.198Z","path":"links/index.html","_id":"cl19i6efj000lvpuc1s8z2f5a","content":"","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":""},{"title":"Project","layout":"project","_content":"","source":"project/index.md","raw":"---\ntitle: Project\nlayout: project\n---\n","date":"2021-10-08T07:57:24.198Z","updated":"2021-10-08T07:57:24.198Z","path":"project/index.html","comments":1,"_id":"cl19i6efl000nvpucfqy18abq","content":"","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":""},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2021-10-08T07:57:24.198Z","updated":"2021-10-08T07:57:24.198Z","path":"repository/index.html","_id":"cl19i6efn000svpucgomt70rf","content":"","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":""},{"title":"Series","layout":"series","_content":"","source":"series/index.md","raw":"---\ntitle: Series\nlayout: series\n---\n","date":"2021-10-08T07:57:24.199Z","updated":"2021-10-08T07:57:24.199Z","path":"series/index.html","comments":1,"_id":"cl19i6efq000uvpuc2ezb6qd2","content":"","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\n---\n","date":"2021-10-08T07:57:24.199Z","updated":"2021-10-08T07:57:24.199Z","path":"tags/index.html","comments":1,"_id":"cl19i6efs000zvpuc1ivqfd9o","content":"","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":""},{"title":"Wikis","layout":"wikis","_content":"","source":"wikis/index.md","raw":"---\ntitle: Wikis\nlayout: wikis\n---","date":"2021-10-08T07:57:24.200Z","updated":"2021-10-08T07:57:24.200Z","path":"wikis/index.html","comments":1,"_id":"cl19i6efu0012vpuc1fwo8cpg","content":"","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":""}],"Post":[{"title":"【数据结构】手写平衡二叉树（AVL）","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-01T07:56:00.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n# 【数据结构】手写平衡二叉树（AVL）\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/DdjSj9k-20211008161234805.jpg)\n\n> 积千里跬步，汇万里江河。每天进步一点点，终有一天将成大佬\n>\n> 本文源代码：[手写AVL树](https://github.com/z573419235/studyDemo/blob/master/BaseJava/src/dataStructure/AVLTree.java)\n\n## 什么是平衡二叉树？\n\n平衡二叉树，又称为AVL树，当树不是空树时，它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵[平衡二叉树](https://baike.baidu.com/item/平衡二叉树/10421057)。AVL树查找的时间复杂度为O(logN)。\n\n### 平衡二叉树基本特点\n\n- 左右子树深度差不能大于1\n- 左边子树永远比根节点小\n- 右边子树永远比根节点大\n\n### 平衡二叉树基本结构及操作\n\n- 左左结构——右旋\n\n![左左结构](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/7Jtj6ns.jpg)\n\n- 右右结构——左旋\n\n![右右结构](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/oJoN5kJ-20211008170036933.jpg)\n\n- 左右结构——左子先左旋，然后整体右旋\n\n![左右结构](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/mH97Bzf.jpg)\n\n- 右左结构——右子先右旋，然后整体左旋\n\n![右左结构](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/6ZSA7aq.jpg)\n\n## 代码实现\n\n先创建一个内部类Node，来表示树的每个节点\n\n```java\npublic class AVLTree {\n    private Node rootNode;\n\n    //二叉树节点\n    private class Node{\n        public Node parent; //父\n        public Node left;\t//左子树\n        public Node right;\t//右子树\n        @NotNull\n        public int data;\t//存放的数据\n        private int depth;\t//深度\n        private int balance;\t//平衡因子\n\t\t//有参构造方法\n        public Node(int data){\n            this.data=data;\n            this.depth=1;\n            this.balance=0;\n        }\n    }\n}\n```\n\n### 插入数据\n\n暴露一个方法给外部调用\n\n```java\n/**添加数据方法*/\npublic void add(int data){\n    if (this.rootNode==null){\n        this.rootNode=new Node(data);\n    }else {\n        this.insert(rootNode,data);\n        //判断根节点是否有父  有的话说明有旋转操作，更新根节点\n        if (this.rootNode.parent!=null){\n            this.rootNode=this.rootNode.parent;\n        }\n    }\n}\n```\n\n实际内部是调用另一个`insert`方法：\n\n```java\nprivate void insert(Node root,int data){\n    //插入的数据比根小\n    if (data<root.data){\n        if (root.left==null){\n            root.left=new Node(data);\n            root.left.parent=root;\n        }else {\n            this.insert(root.left,data);\n        }\n    }\n    //插入的数据比根大\n    if (data>root.data){\n        if (root.right==null) {\n            root.right=new Node(data);\n            root.right.parent=root;\n        }else{\n            this.insert(root.right,data);\n        }\n    }\n    root.balance=this.getBalance(root);\n\n    if (root.balance>1){\n        //判断左子的平衡因子\n        if (root.left.balance<0){\n            this.leftTurn(root.left);\n        }\n        this.rightTurn(root);\n    }\n    if (root.balance<-1){\n        //判断右子的平衡因子\n        if (root.right.balance>0){\n            this.rightTurn(root.right);\n        }\n        this.leftTurn(root);\n    }\n    root.depth=this.getDepth(root);\n    root.balance=this.getBalance(root);\n}\n```\n\n### 右旋\n> 右旋的操作如下\n- 我父变成左子的父\n- 左子变成我的父\n- 我变成左子的右子\n- 左子的右子变成我的左子\n- (当左子的右子存在时)我变成左子的右子的父\n- 计算左右节点的深度\n- 计算深度差\n\n```java\nprivate void rightTurn(@NotNull Node node){\n    Node parent=node.parent;\n    Node leftSon=node.left;\n    Node leftSon_rightSon=leftSon.right;\n\n    //如果父不为空，判断我是在父的左节点还是右节点\n    if (parent!=null){\n        if (node==parent.left){\n            //我在父的左节点上，把我的左子变成父的左子\n            parent.left=leftSon;\n        }\n        if (node==parent.right){\n            //我在父的右节点上，把我的左子变成父的右子\n            parent.right=leftSon;\n        }\n    }\n    leftSon.parent=parent;\n    node.parent=leftSon;\n    leftSon.right=node;\n    node.left=leftSon_rightSon;\n    //如果左子的右子确实存在的\n    if (leftSon_rightSon!=null){\n        //我变成左子的右子的父\n        leftSon_rightSon.parent=node;\n    }\n    //重新计算深度和平衡因子\n    node.depth=this.getDepth(node);\n    node.balance=this.getBalance(node);\n    leftSon.depth=this.getDepth(leftSon);\n    leftSon.balance=this.getBalance(leftSon);\n}\n```\n\n\n### 左旋\n> 左旋的操作如下\n- 我的父变右子的父\n- 右子变成我的父\n- 我变成右子的左子\n- 右子的左子变成我的右子\n- (当右子的左子存在时)我变成右子的左子的父\n- 计算左右节点的深度\n- 计算深度差\n\n```java\nprivate void leftTurn(@NotNull Node node){\n    Node parent=node.parent;\n    Node rightSon=node.right;\n    Node rightSon_leftSon=rightSon.left;\n\n    if (parent!=null){\n        if (node==parent.left){\n            parent.left=rightSon;\n        }\n        if (node==parent.right){\n            parent.right=rightSon;\n        }\n    }\n    rightSon.parent=parent;\n    node.parent=rightSon;\n    rightSon.left=node;\n    node.right=rightSon_leftSon;\n    if (rightSon_leftSon!=null){\n        rightSon_leftSon.parent=node;\n    }\n    node.depth=this.getDepth(node);\n    node.balance=this.getBalance(node);\n    rightSon.depth=this.getDepth(rightSon);\n    rightSon.balance=this.getBalance(rightSon);\n}\n```\n\n### 计算深度\n\n```java\n/**计算深度*/\nprivate int getDepth(Node node){\n    int depth = 0;\n    if(node.left==null && node.right!=null) {\n        depth=node.right.depth;\n    }\n    if(node.right==null && node.left!=null) {\n        depth=node.left.depth;\n    }\n    if (node.right!=null && node.left!=null) {\n        depth=Math.max(node.left.depth,node.right.depth);\n    }\n    depth++;\n    return depth;\n}\n```\n\n### 计算平衡因子\n\n```java\n/**计算左右深度差*/\nprivate int getBalance(Node node){\n    int leftDepth = 0;\n    int rightDepth = 0;\n    if(node.left!=null){\n        leftDepth=node.left.depth;\n    }\n    if(node.right!=null){\n        rightDepth=node.right.depth;\n    }\n    /**\n         *      左减右\n         * 为负数：右边子树高\n         * 为正数: 左边子树高\n         * */\n    return leftDepth-rightDepth;\n}\n```\n\n## 附言\n\n如果代码和静态图看不太明白的话，这边推荐几个动画演示的网站(可能需要科学上网)：\n\n- [visualgo在线](https://visualgo.net/zh)\n\n- [数据结构可视化](https://www.cs.usfca.edu/~galles/visualization/Algorithms.html)","source":"_posts/algorithm/algorithm-avltree-01.md","raw":"---\ntitle: 【数据结构】手写平衡二叉树（AVL）\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-01 15:56:00\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- AVL\n- 数据结构\n- 平衡二叉树\n- 二叉树\ncategories:\n- Algorithm\n---\n\n\n# 【数据结构】手写平衡二叉树（AVL）\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/DdjSj9k-20211008161234805.jpg)\n\n> 积千里跬步，汇万里江河。每天进步一点点，终有一天将成大佬\n>\n> 本文源代码：[手写AVL树](https://github.com/z573419235/studyDemo/blob/master/BaseJava/src/dataStructure/AVLTree.java)\n\n## 什么是平衡二叉树？\n\n平衡二叉树，又称为AVL树，当树不是空树时，它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵[平衡二叉树](https://baike.baidu.com/item/平衡二叉树/10421057)。AVL树查找的时间复杂度为O(logN)。\n\n### 平衡二叉树基本特点\n\n- 左右子树深度差不能大于1\n- 左边子树永远比根节点小\n- 右边子树永远比根节点大\n\n### 平衡二叉树基本结构及操作\n\n- 左左结构——右旋\n\n![左左结构](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/7Jtj6ns.jpg)\n\n- 右右结构——左旋\n\n![右右结构](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/oJoN5kJ-20211008170036933.jpg)\n\n- 左右结构——左子先左旋，然后整体右旋\n\n![左右结构](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/mH97Bzf.jpg)\n\n- 右左结构——右子先右旋，然后整体左旋\n\n![右左结构](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/6ZSA7aq.jpg)\n\n## 代码实现\n\n先创建一个内部类Node，来表示树的每个节点\n\n```java\npublic class AVLTree {\n    private Node rootNode;\n\n    //二叉树节点\n    private class Node{\n        public Node parent; //父\n        public Node left;\t//左子树\n        public Node right;\t//右子树\n        @NotNull\n        public int data;\t//存放的数据\n        private int depth;\t//深度\n        private int balance;\t//平衡因子\n\t\t//有参构造方法\n        public Node(int data){\n            this.data=data;\n            this.depth=1;\n            this.balance=0;\n        }\n    }\n}\n```\n\n### 插入数据\n\n暴露一个方法给外部调用\n\n```java\n/**添加数据方法*/\npublic void add(int data){\n    if (this.rootNode==null){\n        this.rootNode=new Node(data);\n    }else {\n        this.insert(rootNode,data);\n        //判断根节点是否有父  有的话说明有旋转操作，更新根节点\n        if (this.rootNode.parent!=null){\n            this.rootNode=this.rootNode.parent;\n        }\n    }\n}\n```\n\n实际内部是调用另一个`insert`方法：\n\n```java\nprivate void insert(Node root,int data){\n    //插入的数据比根小\n    if (data<root.data){\n        if (root.left==null){\n            root.left=new Node(data);\n            root.left.parent=root;\n        }else {\n            this.insert(root.left,data);\n        }\n    }\n    //插入的数据比根大\n    if (data>root.data){\n        if (root.right==null) {\n            root.right=new Node(data);\n            root.right.parent=root;\n        }else{\n            this.insert(root.right,data);\n        }\n    }\n    root.balance=this.getBalance(root);\n\n    if (root.balance>1){\n        //判断左子的平衡因子\n        if (root.left.balance<0){\n            this.leftTurn(root.left);\n        }\n        this.rightTurn(root);\n    }\n    if (root.balance<-1){\n        //判断右子的平衡因子\n        if (root.right.balance>0){\n            this.rightTurn(root.right);\n        }\n        this.leftTurn(root);\n    }\n    root.depth=this.getDepth(root);\n    root.balance=this.getBalance(root);\n}\n```\n\n### 右旋\n> 右旋的操作如下\n- 我父变成左子的父\n- 左子变成我的父\n- 我变成左子的右子\n- 左子的右子变成我的左子\n- (当左子的右子存在时)我变成左子的右子的父\n- 计算左右节点的深度\n- 计算深度差\n\n```java\nprivate void rightTurn(@NotNull Node node){\n    Node parent=node.parent;\n    Node leftSon=node.left;\n    Node leftSon_rightSon=leftSon.right;\n\n    //如果父不为空，判断我是在父的左节点还是右节点\n    if (parent!=null){\n        if (node==parent.left){\n            //我在父的左节点上，把我的左子变成父的左子\n            parent.left=leftSon;\n        }\n        if (node==parent.right){\n            //我在父的右节点上，把我的左子变成父的右子\n            parent.right=leftSon;\n        }\n    }\n    leftSon.parent=parent;\n    node.parent=leftSon;\n    leftSon.right=node;\n    node.left=leftSon_rightSon;\n    //如果左子的右子确实存在的\n    if (leftSon_rightSon!=null){\n        //我变成左子的右子的父\n        leftSon_rightSon.parent=node;\n    }\n    //重新计算深度和平衡因子\n    node.depth=this.getDepth(node);\n    node.balance=this.getBalance(node);\n    leftSon.depth=this.getDepth(leftSon);\n    leftSon.balance=this.getBalance(leftSon);\n}\n```\n\n\n### 左旋\n> 左旋的操作如下\n- 我的父变右子的父\n- 右子变成我的父\n- 我变成右子的左子\n- 右子的左子变成我的右子\n- (当右子的左子存在时)我变成右子的左子的父\n- 计算左右节点的深度\n- 计算深度差\n\n```java\nprivate void leftTurn(@NotNull Node node){\n    Node parent=node.parent;\n    Node rightSon=node.right;\n    Node rightSon_leftSon=rightSon.left;\n\n    if (parent!=null){\n        if (node==parent.left){\n            parent.left=rightSon;\n        }\n        if (node==parent.right){\n            parent.right=rightSon;\n        }\n    }\n    rightSon.parent=parent;\n    node.parent=rightSon;\n    rightSon.left=node;\n    node.right=rightSon_leftSon;\n    if (rightSon_leftSon!=null){\n        rightSon_leftSon.parent=node;\n    }\n    node.depth=this.getDepth(node);\n    node.balance=this.getBalance(node);\n    rightSon.depth=this.getDepth(rightSon);\n    rightSon.balance=this.getBalance(rightSon);\n}\n```\n\n### 计算深度\n\n```java\n/**计算深度*/\nprivate int getDepth(Node node){\n    int depth = 0;\n    if(node.left==null && node.right!=null) {\n        depth=node.right.depth;\n    }\n    if(node.right==null && node.left!=null) {\n        depth=node.left.depth;\n    }\n    if (node.right!=null && node.left!=null) {\n        depth=Math.max(node.left.depth,node.right.depth);\n    }\n    depth++;\n    return depth;\n}\n```\n\n### 计算平衡因子\n\n```java\n/**计算左右深度差*/\nprivate int getBalance(Node node){\n    int leftDepth = 0;\n    int rightDepth = 0;\n    if(node.left!=null){\n        leftDepth=node.left.depth;\n    }\n    if(node.right!=null){\n        rightDepth=node.right.depth;\n    }\n    /**\n         *      左减右\n         * 为负数：右边子树高\n         * 为正数: 左边子树高\n         * */\n    return leftDepth-rightDepth;\n}\n```\n\n## 附言\n\n如果代码和静态图看不太明白的话，这边推荐几个动画演示的网站(可能需要科学上网)：\n\n- [visualgo在线](https://visualgo.net/zh)\n\n- [数据结构可视化](https://www.cs.usfca.edu/~galles/visualization/Algorithms.html)","slug":"algorithm/algorithm-avltree-01","published":1,"updated":"2021-10-08T09:00:46.051Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eet0001vpuceln4a77e","content":"<h1 id=\"【数据结构】手写平衡二叉树（AVL）\"><a href=\"#【数据结构】手写平衡二叉树（AVL）\" class=\"headerlink\" title=\"【数据结构】手写平衡二叉树（AVL）\"></a>【数据结构】手写平衡二叉树（AVL）</h1><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/DdjSj9k-20211008161234805.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>积千里跬步，汇万里江河。每天进步一点点，终有一天将成大佬</p>\n<p>本文源代码：<a href=\"https://github.com/z573419235/studyDemo/blob/master/BaseJava/src/dataStructure/AVLTree.java\">手写AVL树</a></p>\n</blockquote>\n<h2 id=\"什么是平衡二叉树？\"><a href=\"#什么是平衡二叉树？\" class=\"headerlink\" title=\"什么是平衡二叉树？\"></a>什么是平衡二叉树？</h2><p>平衡二叉树，又称为AVL树，当树不是空树时，它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵<a href=\"https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/10421057\">平衡二叉树</a>。AVL树查找的时间复杂度为O(logN)。</p>\n<h3 id=\"平衡二叉树基本特点\"><a href=\"#平衡二叉树基本特点\" class=\"headerlink\" title=\"平衡二叉树基本特点\"></a>平衡二叉树基本特点</h3><ul>\n<li>左右子树深度差不能大于1</li>\n<li>左边子树永远比根节点小</li>\n<li>右边子树永远比根节点大</li>\n</ul>\n<h3 id=\"平衡二叉树基本结构及操作\"><a href=\"#平衡二叉树基本结构及操作\" class=\"headerlink\" title=\"平衡二叉树基本结构及操作\"></a>平衡二叉树基本结构及操作</h3><ul>\n<li>左左结构——右旋</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/7Jtj6ns.jpg\" alt=\"左左结构\"></p>\n<ul>\n<li>右右结构——左旋</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/oJoN5kJ-20211008170036933.jpg\" alt=\"右右结构\"></p>\n<ul>\n<li>左右结构——左子先左旋，然后整体右旋</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/mH97Bzf.jpg\" alt=\"左右结构\"></p>\n<ul>\n<li>右左结构——右子先右旋，然后整体左旋</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/6ZSA7aq.jpg\" alt=\"右左结构\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>先创建一个内部类Node，来表示树的每个节点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AVLTree</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node rootNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//二叉树节点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node parent; <span class=\"comment\">//父</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node left;\t<span class=\"comment\">//左子树</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node right;\t<span class=\"comment\">//右子树</span></span><br><span class=\"line\">        <span class=\"meta\">@NotNull</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> data;\t<span class=\"comment\">//存放的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> depth;\t<span class=\"comment\">//深度</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> balance;\t<span class=\"comment\">//平衡因子</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//有参构造方法</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(<span class=\"type\">int</span> data)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.data=data;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.depth=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.balance=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><p>暴露一个方法给外部调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**添加数据方法*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> data)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.rootNode==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rootNode=<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(data);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.insert(rootNode,data);</span><br><span class=\"line\">        <span class=\"comment\">//判断根节点是否有父  有的话说明有旋转操作，更新根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.rootNode.parent!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.rootNode=<span class=\"built_in\">this</span>.rootNode.parent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际内部是调用另一个<code>insert</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(Node root,<span class=\"type\">int</span> data)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//插入的数据比根小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data&lt;root.data)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            root.left=<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(data);</span><br><span class=\"line\">            root.left.parent=root;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.insert(root.left,data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//插入的数据比根大</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data&gt;root.data)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.right==<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            root.right=<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(data);</span><br><span class=\"line\">            root.right.parent=root;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.insert(root.right,data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root.balance=<span class=\"built_in\">this</span>.getBalance(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.balance&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断左子的平衡因子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left.balance&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.leftTurn(root.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rightTurn(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.balance&lt;-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断右子的平衡因子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.right.balance&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.rightTurn(root.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.leftTurn(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root.depth=<span class=\"built_in\">this</span>.getDepth(root);</span><br><span class=\"line\">    root.balance=<span class=\"built_in\">this</span>.getBalance(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"右旋\"><a href=\"#右旋\" class=\"headerlink\" title=\"右旋\"></a>右旋</h3><blockquote>\n<p>右旋的操作如下</p>\n</blockquote>\n<ul>\n<li>我父变成左子的父</li>\n<li>左子变成我的父</li>\n<li>我变成左子的右子</li>\n<li>左子的右子变成我的左子</li>\n<li>(当左子的右子存在时)我变成左子的右子的父</li>\n<li>计算左右节点的深度</li>\n<li>计算深度差</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rightTurn</span><span class=\"params\">(<span class=\"meta\">@NotNull</span> Node node)</span>&#123;</span><br><span class=\"line\">    Node parent=node.parent;</span><br><span class=\"line\">    Node leftSon=node.left;</span><br><span class=\"line\">    Node leftSon_rightSon=leftSon.right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果父不为空，判断我是在父的左节点还是右节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node==parent.left)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//我在父的左节点上，把我的左子变成父的左子</span></span><br><span class=\"line\">            parent.left=leftSon;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node==parent.right)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//我在父的右节点上，把我的左子变成父的右子</span></span><br><span class=\"line\">            parent.right=leftSon;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    leftSon.parent=parent;</span><br><span class=\"line\">    node.parent=leftSon;</span><br><span class=\"line\">    leftSon.right=node;</span><br><span class=\"line\">    node.left=leftSon_rightSon;</span><br><span class=\"line\">    <span class=\"comment\">//如果左子的右子确实存在的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftSon_rightSon!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//我变成左子的右子的父</span></span><br><span class=\"line\">        leftSon_rightSon.parent=node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重新计算深度和平衡因子</span></span><br><span class=\"line\">    node.depth=<span class=\"built_in\">this</span>.getDepth(node);</span><br><span class=\"line\">    node.balance=<span class=\"built_in\">this</span>.getBalance(node);</span><br><span class=\"line\">    leftSon.depth=<span class=\"built_in\">this</span>.getDepth(leftSon);</span><br><span class=\"line\">    leftSon.balance=<span class=\"built_in\">this</span>.getBalance(leftSon);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"左旋\"><a href=\"#左旋\" class=\"headerlink\" title=\"左旋\"></a>左旋</h3><blockquote>\n<p>左旋的操作如下</p>\n</blockquote>\n<ul>\n<li>我的父变右子的父</li>\n<li>右子变成我的父</li>\n<li>我变成右子的左子</li>\n<li>右子的左子变成我的右子</li>\n<li>(当右子的左子存在时)我变成右子的左子的父</li>\n<li>计算左右节点的深度</li>\n<li>计算深度差</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">leftTurn</span><span class=\"params\">(<span class=\"meta\">@NotNull</span> Node node)</span>&#123;</span><br><span class=\"line\">    Node parent=node.parent;</span><br><span class=\"line\">    Node rightSon=node.right;</span><br><span class=\"line\">    Node rightSon_leftSon=rightSon.left;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node==parent.left)&#123;</span><br><span class=\"line\">            parent.left=rightSon;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node==parent.right)&#123;</span><br><span class=\"line\">            parent.right=rightSon;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rightSon.parent=parent;</span><br><span class=\"line\">    node.parent=rightSon;</span><br><span class=\"line\">    rightSon.left=node;</span><br><span class=\"line\">    node.right=rightSon_leftSon;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rightSon_leftSon!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        rightSon_leftSon.parent=node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.depth=<span class=\"built_in\">this</span>.getDepth(node);</span><br><span class=\"line\">    node.balance=<span class=\"built_in\">this</span>.getBalance(node);</span><br><span class=\"line\">    rightSon.depth=<span class=\"built_in\">this</span>.getDepth(rightSon);</span><br><span class=\"line\">    rightSon.balance=<span class=\"built_in\">this</span>.getBalance(rightSon);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算深度\"><a href=\"#计算深度\" class=\"headerlink\" title=\"计算深度\"></a>计算深度</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**计算深度*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">getDepth</span><span class=\"params\">(Node node)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">depth</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.left==<span class=\"literal\">null</span> &amp;&amp; node.right!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        depth=node.right.depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.right==<span class=\"literal\">null</span> &amp;&amp; node.left!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        depth=node.left.depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.right!=<span class=\"literal\">null</span> &amp;&amp; node.left!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        depth=Math.max(node.left.depth,node.right.depth);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    depth++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算平衡因子\"><a href=\"#计算平衡因子\" class=\"headerlink\" title=\"计算平衡因子\"></a>计算平衡因子</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**计算左右深度差*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">getBalance</span><span class=\"params\">(Node node)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">leftDepth</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">rightDepth</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.left!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        leftDepth=node.left.depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.right!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        rightDepth=node.right.depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *      左减右</span></span><br><span class=\"line\"><span class=\"comment\">         * 为负数：右边子树高</span></span><br><span class=\"line\"><span class=\"comment\">         * 为正数: 左边子树高</span></span><br><span class=\"line\"><span class=\"comment\">         * */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> leftDepth-rightDepth;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"附言\"><a href=\"#附言\" class=\"headerlink\" title=\"附言\"></a>附言</h2><p>如果代码和静态图看不太明白的话，这边推荐几个动画演示的网站(可能需要科学上网)：</p>\n<ul>\n<li><p><a href=\"https://visualgo.net/zh\">visualgo在线</a></p>\n</li>\n<li><p><a href=\"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\">数据结构可视化</a></p>\n</li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h1 id=\"【数据结构】手写平衡二叉树（AVL）\"><a href=\"#【数据结构】手写平衡二叉树（AVL）\" class=\"headerlink\" title=\"【数据结构】手写平衡二叉树（AVL）\"></a>【数据结构】手写平衡二叉树（AVL）</h1><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/DdjSj9k-20211008161234805.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>积千里跬步，汇万里江河。每天进步一点点，终有一天将成大佬</p>\n<p>本文源代码：<a href=\"https://github.com/z573419235/studyDemo/blob/master/BaseJava/src/dataStructure/AVLTree.java\">手写AVL树</a></p>\n</blockquote>\n<h2 id=\"什么是平衡二叉树？\"><a href=\"#什么是平衡二叉树？\" class=\"headerlink\" title=\"什么是平衡二叉树？\"></a>什么是平衡二叉树？</h2><p>平衡二叉树，又称为AVL树，当树不是空树时，它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵<a href=\"https://baike.baidu.com/item/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/10421057\">平衡二叉树</a>。AVL树查找的时间复杂度为O(logN)。</p>\n<h3 id=\"平衡二叉树基本特点\"><a href=\"#平衡二叉树基本特点\" class=\"headerlink\" title=\"平衡二叉树基本特点\"></a>平衡二叉树基本特点</h3><ul>\n<li>左右子树深度差不能大于1</li>\n<li>左边子树永远比根节点小</li>\n<li>右边子树永远比根节点大</li>\n</ul>\n<h3 id=\"平衡二叉树基本结构及操作\"><a href=\"#平衡二叉树基本结构及操作\" class=\"headerlink\" title=\"平衡二叉树基本结构及操作\"></a>平衡二叉树基本结构及操作</h3><ul>\n<li>左左结构——右旋</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/7Jtj6ns.jpg\" alt=\"左左结构\"></p>\n<ul>\n<li>右右结构——左旋</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/oJoN5kJ-20211008170036933.jpg\" alt=\"右右结构\"></p>\n<ul>\n<li>左右结构——左子先左旋，然后整体右旋</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/mH97Bzf.jpg\" alt=\"左右结构\"></p>\n<ul>\n<li>右左结构——右子先右旋，然后整体左旋</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/6ZSA7aq.jpg\" alt=\"右左结构\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>先创建一个内部类Node，来表示树的每个节点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AVLTree</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node rootNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//二叉树节点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node parent; <span class=\"comment\">//父</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node left;\t<span class=\"comment\">//左子树</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node right;\t<span class=\"comment\">//右子树</span></span><br><span class=\"line\">        <span class=\"meta\">@NotNull</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"type\">int</span> data;\t<span class=\"comment\">//存放的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> depth;\t<span class=\"comment\">//深度</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> balance;\t<span class=\"comment\">//平衡因子</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//有参构造方法</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Node</span><span class=\"params\">(<span class=\"type\">int</span> data)</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.data=data;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.depth=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.balance=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><p>暴露一个方法给外部调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**添加数据方法*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> data)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.rootNode==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rootNode=<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(data);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.insert(rootNode,data);</span><br><span class=\"line\">        <span class=\"comment\">//判断根节点是否有父  有的话说明有旋转操作，更新根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.rootNode.parent!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.rootNode=<span class=\"built_in\">this</span>.rootNode.parent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际内部是调用另一个<code>insert</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insert</span><span class=\"params\">(Node root,<span class=\"type\">int</span> data)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//插入的数据比根小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data&lt;root.data)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            root.left=<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(data);</span><br><span class=\"line\">            root.left.parent=root;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.insert(root.left,data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//插入的数据比根大</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data&gt;root.data)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.right==<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            root.right=<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(data);</span><br><span class=\"line\">            root.right.parent=root;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.insert(root.right,data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root.balance=<span class=\"built_in\">this</span>.getBalance(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.balance&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断左子的平衡因子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left.balance&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.leftTurn(root.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rightTurn(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.balance&lt;-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断右子的平衡因子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.right.balance&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.rightTurn(root.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.leftTurn(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root.depth=<span class=\"built_in\">this</span>.getDepth(root);</span><br><span class=\"line\">    root.balance=<span class=\"built_in\">this</span>.getBalance(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"右旋\"><a href=\"#右旋\" class=\"headerlink\" title=\"右旋\"></a>右旋</h3><blockquote>\n<p>右旋的操作如下</p>\n</blockquote>\n<ul>\n<li>我父变成左子的父</li>\n<li>左子变成我的父</li>\n<li>我变成左子的右子</li>\n<li>左子的右子变成我的左子</li>\n<li>(当左子的右子存在时)我变成左子的右子的父</li>\n<li>计算左右节点的深度</li>\n<li>计算深度差</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rightTurn</span><span class=\"params\">(<span class=\"meta\">@NotNull</span> Node node)</span>&#123;</span><br><span class=\"line\">    Node parent=node.parent;</span><br><span class=\"line\">    Node leftSon=node.left;</span><br><span class=\"line\">    Node leftSon_rightSon=leftSon.right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果父不为空，判断我是在父的左节点还是右节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node==parent.left)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//我在父的左节点上，把我的左子变成父的左子</span></span><br><span class=\"line\">            parent.left=leftSon;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node==parent.right)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//我在父的右节点上，把我的左子变成父的右子</span></span><br><span class=\"line\">            parent.right=leftSon;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    leftSon.parent=parent;</span><br><span class=\"line\">    node.parent=leftSon;</span><br><span class=\"line\">    leftSon.right=node;</span><br><span class=\"line\">    node.left=leftSon_rightSon;</span><br><span class=\"line\">    <span class=\"comment\">//如果左子的右子确实存在的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftSon_rightSon!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//我变成左子的右子的父</span></span><br><span class=\"line\">        leftSon_rightSon.parent=node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重新计算深度和平衡因子</span></span><br><span class=\"line\">    node.depth=<span class=\"built_in\">this</span>.getDepth(node);</span><br><span class=\"line\">    node.balance=<span class=\"built_in\">this</span>.getBalance(node);</span><br><span class=\"line\">    leftSon.depth=<span class=\"built_in\">this</span>.getDepth(leftSon);</span><br><span class=\"line\">    leftSon.balance=<span class=\"built_in\">this</span>.getBalance(leftSon);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"左旋\"><a href=\"#左旋\" class=\"headerlink\" title=\"左旋\"></a>左旋</h3><blockquote>\n<p>左旋的操作如下</p>\n</blockquote>\n<ul>\n<li>我的父变右子的父</li>\n<li>右子变成我的父</li>\n<li>我变成右子的左子</li>\n<li>右子的左子变成我的右子</li>\n<li>(当右子的左子存在时)我变成右子的左子的父</li>\n<li>计算左右节点的深度</li>\n<li>计算深度差</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">leftTurn</span><span class=\"params\">(<span class=\"meta\">@NotNull</span> Node node)</span>&#123;</span><br><span class=\"line\">    Node parent=node.parent;</span><br><span class=\"line\">    Node rightSon=node.right;</span><br><span class=\"line\">    Node rightSon_leftSon=rightSon.left;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node==parent.left)&#123;</span><br><span class=\"line\">            parent.left=rightSon;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node==parent.right)&#123;</span><br><span class=\"line\">            parent.right=rightSon;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rightSon.parent=parent;</span><br><span class=\"line\">    node.parent=rightSon;</span><br><span class=\"line\">    rightSon.left=node;</span><br><span class=\"line\">    node.right=rightSon_leftSon;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rightSon_leftSon!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        rightSon_leftSon.parent=node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.depth=<span class=\"built_in\">this</span>.getDepth(node);</span><br><span class=\"line\">    node.balance=<span class=\"built_in\">this</span>.getBalance(node);</span><br><span class=\"line\">    rightSon.depth=<span class=\"built_in\">this</span>.getDepth(rightSon);</span><br><span class=\"line\">    rightSon.balance=<span class=\"built_in\">this</span>.getBalance(rightSon);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算深度\"><a href=\"#计算深度\" class=\"headerlink\" title=\"计算深度\"></a>计算深度</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**计算深度*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">getDepth</span><span class=\"params\">(Node node)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">depth</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.left==<span class=\"literal\">null</span> &amp;&amp; node.right!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        depth=node.right.depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.right==<span class=\"literal\">null</span> &amp;&amp; node.left!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        depth=node.left.depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.right!=<span class=\"literal\">null</span> &amp;&amp; node.left!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        depth=Math.max(node.left.depth,node.right.depth);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    depth++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算平衡因子\"><a href=\"#计算平衡因子\" class=\"headerlink\" title=\"计算平衡因子\"></a>计算平衡因子</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**计算左右深度差*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">getBalance</span><span class=\"params\">(Node node)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">leftDepth</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">rightDepth</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.left!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        leftDepth=node.left.depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.right!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        rightDepth=node.right.depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *      左减右</span></span><br><span class=\"line\"><span class=\"comment\">         * 为负数：右边子树高</span></span><br><span class=\"line\"><span class=\"comment\">         * 为正数: 左边子树高</span></span><br><span class=\"line\"><span class=\"comment\">         * */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> leftDepth-rightDepth;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"附言\"><a href=\"#附言\" class=\"headerlink\" title=\"附言\"></a>附言</h2><p>如果代码和静态图看不太明白的话，这边推荐几个动画演示的网站(可能需要科学上网)：</p>\n<ul>\n<li><p><a href=\"https://visualgo.net/zh\">visualgo在线</a></p>\n</li>\n<li><p><a href=\"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\">数据结构可视化</a></p>\n</li>\n</ul>\n"},{"title":"递归算法-获取json中指定key的所有值","top":true,"cover":true,"toc":true,"mathjax":true,"date":"2019-08-17T04:38:52.000Z","password":null,"summary":null,"_content":"\n今天在工作中遇到要解析json并获取json里所有指定key的值，再把key的值插入对应的数据映射表。于是写了一个递归算法来取值。\n\n## 1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\n```java\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.58</version>\n</dependency>\n```\n## 2.创建两个工具类方法，用来判断传入的是不是json对象或json数组\n```java\npublic static boolean isJSONObj(Object json){\n   return json instanceof JSONObject;\n}\npublic static boolean isJSONArray(Object json){\n   return json instanceof JSONArray;\n}\n```\n> java中的instanceof也称为类型比较运算符，因为它将实例与类型进行比较。它返回true或false。\n\n## 3.建立核心重载方法\n```java\n    public static void getJSONValue(JSONObject json,String k,List<String> list){\n        for (Object j:json.keySet()){\n            if(isJSONObj(json.get(j))){\n                //是对象\n                JSONObject j2= JSON.parseObject(json.get(j).toString());\n                getJSONValue(j2,k,list);\n            }else if(isJSONArray(json.get(j))){\n                JSONArray j3=JSON.parseArray(json.get(j).toString());\n                //是数组\n                getJSONValue(j3,k,list);\n            }else if(j==k){\n                //是字符串\n                list.add(json.get(j).toString());\n            }\n        }\n    }\n\n    public static void getJSONValue(JSONArray json,String k,List<String> list){\n        for (Object j:json){\n            if(isJSONObj(j)){\n                //是对象\n                JSONObject j2= JSON.parseObject(j.toString());\n                getJSONValue(j2,k,list);\n            }else if(isJSONArray(j)){\n                //是数组\n                JSONArray j3=JSON.parseArray(j.toString());\n                getJSONValue(j3,k,list);\n            }\n        }\n    }\n\n```\n## 4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\n[示例json](http://xhh.dengzii.com/blog/demojson.txt)\n\n## 5.调用方法\n```java\ntry {\n    File file=new File(demo1.class.getResource(\"/2.json\").getPath());\n    FileInputStream fileInputStream=new FileInputStream(file);\n    InputStreamReader inputStreamReader=new InputStreamReader(fileInputStream);\n    BufferedReader bufferedReader=new BufferedReader(inputStreamReader);\n    String line=\"\";\n    StringBuffer json=new StringBuffer();\n    while ((line=bufferedReader.readLine())!=null){\n        json.append(line);\n    }\n\n    JSONObject j3=JSON.parseObject(json.toString());\n    List<String> mid=new ArrayList<>();\n    getJSONValue(j3,\"interfaceId\",mid);\n    System.out.println(mid.toString());\n}catch (Exception e){\n    System.out.println(e.getMessage());\n}\n```\n## 6.成功获取\n![控制台返回](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/vLZi5z5.png)\n\n>demo源码地址：https://github.com/z573419235/studyDemo","source":"_posts/algorithm/algorithm-recursive-01.md","raw":"---\ntitle: 递归算法-获取json中指定key的所有值\ntop: true\ncover: true\ntoc: true\nmathjax: true\ntags:\n  - Java\n  - Recursive\n  - Algorithm\n  - Json\ncategories:\n  - Algorithm\ndate: 2019-08-17 12:38:52\npassword:\nsummary:\n---\n\n今天在工作中遇到要解析json并获取json里所有指定key的值，再把key的值插入对应的数据映射表。于是写了一个递归算法来取值。\n\n## 1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\n```java\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.58</version>\n</dependency>\n```\n## 2.创建两个工具类方法，用来判断传入的是不是json对象或json数组\n```java\npublic static boolean isJSONObj(Object json){\n   return json instanceof JSONObject;\n}\npublic static boolean isJSONArray(Object json){\n   return json instanceof JSONArray;\n}\n```\n> java中的instanceof也称为类型比较运算符，因为它将实例与类型进行比较。它返回true或false。\n\n## 3.建立核心重载方法\n```java\n    public static void getJSONValue(JSONObject json,String k,List<String> list){\n        for (Object j:json.keySet()){\n            if(isJSONObj(json.get(j))){\n                //是对象\n                JSONObject j2= JSON.parseObject(json.get(j).toString());\n                getJSONValue(j2,k,list);\n            }else if(isJSONArray(json.get(j))){\n                JSONArray j3=JSON.parseArray(json.get(j).toString());\n                //是数组\n                getJSONValue(j3,k,list);\n            }else if(j==k){\n                //是字符串\n                list.add(json.get(j).toString());\n            }\n        }\n    }\n\n    public static void getJSONValue(JSONArray json,String k,List<String> list){\n        for (Object j:json){\n            if(isJSONObj(j)){\n                //是对象\n                JSONObject j2= JSON.parseObject(j.toString());\n                getJSONValue(j2,k,list);\n            }else if(isJSONArray(j)){\n                //是数组\n                JSONArray j3=JSON.parseArray(j.toString());\n                getJSONValue(j3,k,list);\n            }\n        }\n    }\n\n```\n## 4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\n[示例json](http://xhh.dengzii.com/blog/demojson.txt)\n\n## 5.调用方法\n```java\ntry {\n    File file=new File(demo1.class.getResource(\"/2.json\").getPath());\n    FileInputStream fileInputStream=new FileInputStream(file);\n    InputStreamReader inputStreamReader=new InputStreamReader(fileInputStream);\n    BufferedReader bufferedReader=new BufferedReader(inputStreamReader);\n    String line=\"\";\n    StringBuffer json=new StringBuffer();\n    while ((line=bufferedReader.readLine())!=null){\n        json.append(line);\n    }\n\n    JSONObject j3=JSON.parseObject(json.toString());\n    List<String> mid=new ArrayList<>();\n    getJSONValue(j3,\"interfaceId\",mid);\n    System.out.println(mid.toString());\n}catch (Exception e){\n    System.out.println(e.getMessage());\n}\n```\n## 6.成功获取\n![控制台返回](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/vLZi5z5.png)\n\n>demo源码地址：https://github.com/z573419235/studyDemo","slug":"algorithm/algorithm-recursive-01","published":1,"updated":"2021-10-08T08:13:05.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eez0003vpuc6i3vgi23","content":"<p>今天在工作中遇到要解析json并获取json里所有指定key的值，再把key的值插入对应的数据映射表。于是写了一个递归算法来取值。</p>\n<h2 id=\"1-首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\"><a href=\"#1-首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\" class=\"headerlink\" title=\"1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\"></a>1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">1.2</span><span class=\"number\">.58</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建两个工具类方法，用来判断传入的是不是json对象或json数组\"><a href=\"#2-创建两个工具类方法，用来判断传入的是不是json对象或json数组\" class=\"headerlink\" title=\"2.创建两个工具类方法，用来判断传入的是不是json对象或json数组\"></a>2.创建两个工具类方法，用来判断传入的是不是json对象或json数组</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isJSONObj</span><span class=\"params\">(Object json)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> json <span class=\"keyword\">instanceof</span> JSONObject;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isJSONArray</span><span class=\"params\">(Object json)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> json <span class=\"keyword\">instanceof</span> JSONArray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>java中的instanceof也称为类型比较运算符，因为它将实例与类型进行比较。它返回true或false。</p>\n</blockquote>\n<h2 id=\"3-建立核心重载方法\"><a href=\"#3-建立核心重载方法\" class=\"headerlink\" title=\"3.建立核心重载方法\"></a>3.建立核心重载方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getJSONValue</span><span class=\"params\">(JSONObject json,String k,List&lt;String&gt; list)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object j:json.keySet())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isJSONObj(json.get(j)))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是对象</span></span><br><span class=\"line\">            JSONObject j2= JSON.parseObject(json.get(j).toString());</span><br><span class=\"line\">            getJSONValue(j2,k,list);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isJSONArray(json.get(j)))&#123;</span><br><span class=\"line\">            JSONArray j3=JSON.parseArray(json.get(j).toString());</span><br><span class=\"line\">            <span class=\"comment\">//是数组</span></span><br><span class=\"line\">            getJSONValue(j3,k,list);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j==k)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是字符串</span></span><br><span class=\"line\">            list.add(json.get(j).toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getJSONValue</span><span class=\"params\">(JSONArray json,String k,List&lt;String&gt; list)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object j:json)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isJSONObj(j))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是对象</span></span><br><span class=\"line\">            JSONObject j2= JSON.parseObject(j.toString());</span><br><span class=\"line\">            getJSONValue(j2,k,list);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isJSONArray(j))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是数组</span></span><br><span class=\"line\">            JSONArray j3=JSON.parseArray(j.toString());</span><br><span class=\"line\">            getJSONValue(j3,k,list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\"><a href=\"#4-接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\" class=\"headerlink\" title=\"4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\"></a>4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的</h2><p><a href=\"http://xhh.dengzii.com/blog/demojson.txt\">示例json</a></p>\n<h2 id=\"5-调用方法\"><a href=\"#5-调用方法\" class=\"headerlink\" title=\"5.调用方法\"></a>5.调用方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    File file=<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(demo1.class.getResource(<span class=\"string\">&quot;/2.json&quot;</span>).getPath());</span><br><span class=\"line\">    FileInputStream fileInputStream=<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">    InputStreamReader inputStreamReader=<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(fileInputStream);</span><br><span class=\"line\">    BufferedReader bufferedReader=<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(inputStreamReader);</span><br><span class=\"line\">    String line=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    StringBuffer json=<span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((line=bufferedReader.readLine())!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        json.append(line);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    JSONObject j3=JSON.parseObject(json.toString());</span><br><span class=\"line\">    List&lt;String&gt; mid=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    getJSONValue(j3,<span class=\"string\">&quot;interfaceId&quot;</span>,mid);</span><br><span class=\"line\">    System.out.println(mid.toString());</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">    System.out.println(e.getMessage());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-成功获取\"><a href=\"#6-成功获取\" class=\"headerlink\" title=\"6.成功获取\"></a>6.成功获取</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/vLZi5z5.png\" alt=\"控制台返回\"></p>\n<blockquote>\n<p>demo源码地址：<a href=\"https://github.com/z573419235/studyDemo\">https://github.com/z573419235/studyDemo</a></p>\n</blockquote>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p>今天在工作中遇到要解析json并获取json里所有指定key的值，再把key的值插入对应的数据映射表。于是写了一个递归算法来取值。</p>\n<h2 id=\"1-首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\"><a href=\"#1-首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\" class=\"headerlink\" title=\"1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\"></a>1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">1.2</span><span class=\"number\">.58</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-创建两个工具类方法，用来判断传入的是不是json对象或json数组\"><a href=\"#2-创建两个工具类方法，用来判断传入的是不是json对象或json数组\" class=\"headerlink\" title=\"2.创建两个工具类方法，用来判断传入的是不是json对象或json数组\"></a>2.创建两个工具类方法，用来判断传入的是不是json对象或json数组</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isJSONObj</span><span class=\"params\">(Object json)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> json <span class=\"keyword\">instanceof</span> JSONObject;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isJSONArray</span><span class=\"params\">(Object json)</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> json <span class=\"keyword\">instanceof</span> JSONArray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>java中的instanceof也称为类型比较运算符，因为它将实例与类型进行比较。它返回true或false。</p>\n</blockquote>\n<h2 id=\"3-建立核心重载方法\"><a href=\"#3-建立核心重载方法\" class=\"headerlink\" title=\"3.建立核心重载方法\"></a>3.建立核心重载方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getJSONValue</span><span class=\"params\">(JSONObject json,String k,List&lt;String&gt; list)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object j:json.keySet())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isJSONObj(json.get(j)))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是对象</span></span><br><span class=\"line\">            JSONObject j2= JSON.parseObject(json.get(j).toString());</span><br><span class=\"line\">            getJSONValue(j2,k,list);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isJSONArray(json.get(j)))&#123;</span><br><span class=\"line\">            JSONArray j3=JSON.parseArray(json.get(j).toString());</span><br><span class=\"line\">            <span class=\"comment\">//是数组</span></span><br><span class=\"line\">            getJSONValue(j3,k,list);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j==k)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是字符串</span></span><br><span class=\"line\">            list.add(json.get(j).toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">getJSONValue</span><span class=\"params\">(JSONArray json,String k,List&lt;String&gt; list)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object j:json)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isJSONObj(j))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是对象</span></span><br><span class=\"line\">            JSONObject j2= JSON.parseObject(j.toString());</span><br><span class=\"line\">            getJSONValue(j2,k,list);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isJSONArray(j))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是数组</span></span><br><span class=\"line\">            JSONArray j3=JSON.parseArray(j.toString());</span><br><span class=\"line\">            getJSONValue(j3,k,list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\"><a href=\"#4-接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\" class=\"headerlink\" title=\"4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\"></a>4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的</h2><p><a href=\"http://xhh.dengzii.com/blog/demojson.txt\">示例json</a></p>\n<h2 id=\"5-调用方法\"><a href=\"#5-调用方法\" class=\"headerlink\" title=\"5.调用方法\"></a>5.调用方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    File file=<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(demo1.class.getResource(<span class=\"string\">&quot;/2.json&quot;</span>).getPath());</span><br><span class=\"line\">    FileInputStream fileInputStream=<span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">    InputStreamReader inputStreamReader=<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(fileInputStream);</span><br><span class=\"line\">    BufferedReader bufferedReader=<span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(inputStreamReader);</span><br><span class=\"line\">    String line=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    StringBuffer json=<span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((line=bufferedReader.readLine())!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        json.append(line);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    JSONObject j3=JSON.parseObject(json.toString());</span><br><span class=\"line\">    List&lt;String&gt; mid=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    getJSONValue(j3,<span class=\"string\">&quot;interfaceId&quot;</span>,mid);</span><br><span class=\"line\">    System.out.println(mid.toString());</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">    System.out.println(e.getMessage());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"6-成功获取\"><a href=\"#6-成功获取\" class=\"headerlink\" title=\"6.成功获取\"></a>6.成功获取</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/vLZi5z5.png\" alt=\"控制台返回\"></p>\n<blockquote>\n<p>demo源码地址：<a href=\"https://github.com/z573419235/studyDemo\">https://github.com/z573419235/studyDemo</a></p>\n</blockquote>\n"},{"title":"恍然大悟，数组和链表的区别","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-18T05:50:52.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/hlwzTv8.jpg)\n\n> 积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬\n\n## 文前发言\n\n　　在Java中，很多地方都使用了数组和链表，还有两种组合的叫<font color=orange>数组链表</font>结构，就是常说的<font color=orange>哈希表</font>，HashMap底层的数据结构就是哈希表．远了，远了，这里不讲HashMap,这里讲数组和链表；\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/WgIKkpg.jpg)\n\n## 数组\n\n> 数组是我们平时用的最多的数据结构，它的特点是<font color=orange>查询数据快，插入数据慢</font>，查询的时间复杂度是<font color=orange>O(1)</font>,插入的时间复杂度是<font color=orange>O(n)</font>.\n\n\n\n牛＊一族去学校读书，学校有四人寝和五人寝，大牛，二牛，三牛，四牛一同住进了四人寝里，每天都五缺一；有一天，他们在游戏里认识了小牛，得知小牛也是他们学校的，于是邀请小牛和他们一起住，可是他们们寝室只能住四个人，这个怎么办呢？于是他们向学校(<font color=orange>系统</font>)申请，要求学校给他们一个新的六人寝(<font color=orange>新的内存空间</font>)，于是学校就给了他们新的六人寝，于是他们全部都搬去了六人寝里，小牛也办了进去，之后每天五黑，好不快活；\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/HZUC84m.png)\n\n> 之后有其他学生看到牛＊他们的做法，于是也通通向学校申请；最后学校发现了一个问题：就是学生们为了住进新寝室，花费了大量的时间在从旧寝室到新寝室的路上(<font color=orange>插入数据慢</font>)\n\n \n\n有的人会说，那一开始就安排大牛，二牛，三牛，四牛住５人寝不就好了吗？这样他们就不用搬了(这就相当于我们初始化数组时，给数组指定了一个大小)；这样的想法是好的，但是如果他们没有没有认识小牛，小牛也不会搬进去，这样他们四个人就一直住着５人寝，就造成了空间资源浪费；\n\n\n\n有一天，老师去找进入新寝室的小牛谈话，一看得知小牛在４号床，一下就找到了小牛（<font color=orange>查询数据快</font>），问他在这个寝室住的习不习惯，小牛心想，每天都五黑，你说我习不习惯！！\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/WxdNOVF.gif)\n\n## 链表\n\n> 链表我们平时用的比较少，它的特点是:<font color=orange>插入数据快，查询数据慢</font>，查询的时间复杂度是：<font color=orange>O(n)</font>，插入的时间复杂度是：<font color=orange>O(1)</font>，它的特点是和数组相反的；\n\n\n\n　　经过无数日夜的奋战，牛＊一寝人觉得是时候该出去玩玩了，自从小牛搬过来后，就一直没日没夜的五黑，都快不知道外面的世界长什么样子了；他们一行人准备去游乐园转转．\n\n　　来到游乐园后，一群人像刚放出来的一样，对一切都充满了新鲜感，到处转悠．就在转悠的时候，细心的大牛发现了地上有一张纸条，打开一看，上面写着：<font color=orange>＂少年，你渴望力量吗？想获得力量就来海盗船找我！＂</font>，大牛赶紧找来其他小伙伴，一同前往；到了海盗船的地方，发现船上写着：<font color=orange>＂力量源自摩天轮，请前往摩天轮＂</font>，于是一群人就又前往摩天轮，在那里，终于过得了神秘力量－－－<font color=orange>毒鸡汤：你的内心有多强大，你的力量就有多强大</font>；小牛他们为了寻找这个力量，可谓费尽九牛二虎之力啊（<font color=orange>查询数据慢</font>）；\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Hwi1Car.png)\n\n> 可以发现，<font color=orange>每个元素存着下个元素的地址</font>，所以如果要查找其中某个元素，就必须要从头开始，才能找到．这就比较慢了．但是，他们<font color=orange>添加元素很快</font>,元素可以随机出现在游乐园的某个地方，只要在新添加元素的前一个元素指明新元素的地址在哪里就可以了；\n\n\n\n## 发个对比表格吧\n\n### 时间复杂度对比表\n\n|      |  数组   | 链表    |\n| :--: | :-----: | ------- |\n| 插入 | O(n) 慢 | O(1) 快 |\n| 删除 | O(n) 慢 | O(1) 快 |\n| 查询 | O(1) 快 | O(n) 慢 |","source":"_posts/algorithm/array-vs-linked.md","raw":"---\ntitle: 恍然大悟，数组和链表的区别\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-18 13:50:52\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 数据结构\ncategories:\n- Algorithm\n---\n\n\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/hlwzTv8.jpg)\n\n> 积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬\n\n## 文前发言\n\n　　在Java中，很多地方都使用了数组和链表，还有两种组合的叫<font color=orange>数组链表</font>结构，就是常说的<font color=orange>哈希表</font>，HashMap底层的数据结构就是哈希表．远了，远了，这里不讲HashMap,这里讲数组和链表；\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/WgIKkpg.jpg)\n\n## 数组\n\n> 数组是我们平时用的最多的数据结构，它的特点是<font color=orange>查询数据快，插入数据慢</font>，查询的时间复杂度是<font color=orange>O(1)</font>,插入的时间复杂度是<font color=orange>O(n)</font>.\n\n\n\n牛＊一族去学校读书，学校有四人寝和五人寝，大牛，二牛，三牛，四牛一同住进了四人寝里，每天都五缺一；有一天，他们在游戏里认识了小牛，得知小牛也是他们学校的，于是邀请小牛和他们一起住，可是他们们寝室只能住四个人，这个怎么办呢？于是他们向学校(<font color=orange>系统</font>)申请，要求学校给他们一个新的六人寝(<font color=orange>新的内存空间</font>)，于是学校就给了他们新的六人寝，于是他们全部都搬去了六人寝里，小牛也办了进去，之后每天五黑，好不快活；\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/HZUC84m.png)\n\n> 之后有其他学生看到牛＊他们的做法，于是也通通向学校申请；最后学校发现了一个问题：就是学生们为了住进新寝室，花费了大量的时间在从旧寝室到新寝室的路上(<font color=orange>插入数据慢</font>)\n\n \n\n有的人会说，那一开始就安排大牛，二牛，三牛，四牛住５人寝不就好了吗？这样他们就不用搬了(这就相当于我们初始化数组时，给数组指定了一个大小)；这样的想法是好的，但是如果他们没有没有认识小牛，小牛也不会搬进去，这样他们四个人就一直住着５人寝，就造成了空间资源浪费；\n\n\n\n有一天，老师去找进入新寝室的小牛谈话，一看得知小牛在４号床，一下就找到了小牛（<font color=orange>查询数据快</font>），问他在这个寝室住的习不习惯，小牛心想，每天都五黑，你说我习不习惯！！\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/WxdNOVF.gif)\n\n## 链表\n\n> 链表我们平时用的比较少，它的特点是:<font color=orange>插入数据快，查询数据慢</font>，查询的时间复杂度是：<font color=orange>O(n)</font>，插入的时间复杂度是：<font color=orange>O(1)</font>，它的特点是和数组相反的；\n\n\n\n　　经过无数日夜的奋战，牛＊一寝人觉得是时候该出去玩玩了，自从小牛搬过来后，就一直没日没夜的五黑，都快不知道外面的世界长什么样子了；他们一行人准备去游乐园转转．\n\n　　来到游乐园后，一群人像刚放出来的一样，对一切都充满了新鲜感，到处转悠．就在转悠的时候，细心的大牛发现了地上有一张纸条，打开一看，上面写着：<font color=orange>＂少年，你渴望力量吗？想获得力量就来海盗船找我！＂</font>，大牛赶紧找来其他小伙伴，一同前往；到了海盗船的地方，发现船上写着：<font color=orange>＂力量源自摩天轮，请前往摩天轮＂</font>，于是一群人就又前往摩天轮，在那里，终于过得了神秘力量－－－<font color=orange>毒鸡汤：你的内心有多强大，你的力量就有多强大</font>；小牛他们为了寻找这个力量，可谓费尽九牛二虎之力啊（<font color=orange>查询数据慢</font>）；\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Hwi1Car.png)\n\n> 可以发现，<font color=orange>每个元素存着下个元素的地址</font>，所以如果要查找其中某个元素，就必须要从头开始，才能找到．这就比较慢了．但是，他们<font color=orange>添加元素很快</font>,元素可以随机出现在游乐园的某个地方，只要在新添加元素的前一个元素指明新元素的地址在哪里就可以了；\n\n\n\n## 发个对比表格吧\n\n### 时间复杂度对比表\n\n|      |  数组   | 链表    |\n| :--: | :-----: | ------- |\n| 插入 | O(n) 慢 | O(1) 快 |\n| 删除 | O(n) 慢 | O(1) 快 |\n| 查询 | O(1) 快 | O(n) 慢 |","slug":"algorithm/array-vs-linked","published":1,"updated":"2021-10-08T08:13:56.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ef60007vpuccpog7ro5","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/hlwzTv8.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p>\n</blockquote>\n<h2 id=\"文前发言\"><a href=\"#文前发言\" class=\"headerlink\" title=\"文前发言\"></a>文前发言</h2><p>　　在Java中，很多地方都使用了数组和链表，还有两种组合的叫<font color=orange>数组链表</font>结构，就是常说的<font color=orange>哈希表</font>，HashMap底层的数据结构就是哈希表．远了，远了，这里不讲HashMap,这里讲数组和链表；</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/WgIKkpg.jpg\" alt=\"图片\"></p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><blockquote>\n<p>数组是我们平时用的最多的数据结构，它的特点是<font color=orange>查询数据快，插入数据慢</font>，查询的时间复杂度是<font color=orange>O(1)</font>,插入的时间复杂度是<font color=orange>O(n)</font>.</p>\n</blockquote>\n<p>牛＊一族去学校读书，学校有四人寝和五人寝，大牛，二牛，三牛，四牛一同住进了四人寝里，每天都五缺一；有一天，他们在游戏里认识了小牛，得知小牛也是他们学校的，于是邀请小牛和他们一起住，可是他们们寝室只能住四个人，这个怎么办呢？于是他们向学校(<font color=orange>系统</font>)申请，要求学校给他们一个新的六人寝(<font color=orange>新的内存空间</font>)，于是学校就给了他们新的六人寝，于是他们全部都搬去了六人寝里，小牛也办了进去，之后每天五黑，好不快活；</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/HZUC84m.png\" alt=\"图片\"></p>\n<blockquote>\n<p>之后有其他学生看到牛＊他们的做法，于是也通通向学校申请；最后学校发现了一个问题：就是学生们为了住进新寝室，花费了大量的时间在从旧寝室到新寝室的路上(<font color=orange>插入数据慢</font>)</p>\n</blockquote>\n<p>有的人会说，那一开始就安排大牛，二牛，三牛，四牛住５人寝不就好了吗？这样他们就不用搬了(这就相当于我们初始化数组时，给数组指定了一个大小)；这样的想法是好的，但是如果他们没有没有认识小牛，小牛也不会搬进去，这样他们四个人就一直住着５人寝，就造成了空间资源浪费；</p>\n<p>有一天，老师去找进入新寝室的小牛谈话，一看得知小牛在４号床，一下就找到了小牛（<font color=orange>查询数据快</font>），问他在这个寝室住的习不习惯，小牛心想，每天都五黑，你说我习不习惯！！</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/WxdNOVF.gif\" alt=\"图片\"></p>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><blockquote>\n<p>链表我们平时用的比较少，它的特点是:<font color=orange>插入数据快，查询数据慢</font>，查询的时间复杂度是：<font color=orange>O(n)</font>，插入的时间复杂度是：<font color=orange>O(1)</font>，它的特点是和数组相反的；</p>\n</blockquote>\n<p>　　经过无数日夜的奋战，牛＊一寝人觉得是时候该出去玩玩了，自从小牛搬过来后，就一直没日没夜的五黑，都快不知道外面的世界长什么样子了；他们一行人准备去游乐园转转．</p>\n<p>　　来到游乐园后，一群人像刚放出来的一样，对一切都充满了新鲜感，到处转悠．就在转悠的时候，细心的大牛发现了地上有一张纸条，打开一看，上面写着：<font color=orange>＂少年，你渴望力量吗？想获得力量就来海盗船找我！＂</font>，大牛赶紧找来其他小伙伴，一同前往；到了海盗船的地方，发现船上写着：<font color=orange>＂力量源自摩天轮，请前往摩天轮＂</font>，于是一群人就又前往摩天轮，在那里，终于过得了神秘力量－－－<font color=orange>毒鸡汤：你的内心有多强大，你的力量就有多强大</font>；小牛他们为了寻找这个力量，可谓费尽九牛二虎之力啊（<font color=orange>查询数据慢</font>）；</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Hwi1Car.png\" alt=\"图片\"></p>\n<blockquote>\n<p>可以发现，<font color=orange>每个元素存着下个元素的地址</font>，所以如果要查找其中某个元素，就必须要从头开始，才能找到．这就比较慢了．但是，他们<font color=orange>添加元素很快</font>,元素可以随机出现在游乐园的某个地方，只要在新添加元素的前一个元素指明新元素的地址在哪里就可以了；</p>\n</blockquote>\n<h2 id=\"发个对比表格吧\"><a href=\"#发个对比表格吧\" class=\"headerlink\" title=\"发个对比表格吧\"></a>发个对比表格吧</h2><h3 id=\"时间复杂度对比表\"><a href=\"#时间复杂度对比表\" class=\"headerlink\" title=\"时间复杂度对比表\"></a>时间复杂度对比表</h3><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">数组</th>\n<th>链表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">插入</td>\n<td align=\"center\">O(n) 慢</td>\n<td>O(1) 快</td>\n</tr>\n<tr>\n<td align=\"center\">删除</td>\n<td align=\"center\">O(n) 慢</td>\n<td>O(1) 快</td>\n</tr>\n<tr>\n<td align=\"center\">查询</td>\n<td align=\"center\">O(1) 快</td>\n<td>O(n) 慢</td>\n</tr>\n</tbody></table>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/hlwzTv8.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p>\n</blockquote>\n<h2 id=\"文前发言\"><a href=\"#文前发言\" class=\"headerlink\" title=\"文前发言\"></a>文前发言</h2><p>　　在Java中，很多地方都使用了数组和链表，还有两种组合的叫<font color=orange>数组链表</font>结构，就是常说的<font color=orange>哈希表</font>，HashMap底层的数据结构就是哈希表．远了，远了，这里不讲HashMap,这里讲数组和链表；</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/WgIKkpg.jpg\" alt=\"图片\"></p>\n<h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><blockquote>\n<p>数组是我们平时用的最多的数据结构，它的特点是<font color=orange>查询数据快，插入数据慢</font>，查询的时间复杂度是<font color=orange>O(1)</font>,插入的时间复杂度是<font color=orange>O(n)</font>.</p>\n</blockquote>\n<p>牛＊一族去学校读书，学校有四人寝和五人寝，大牛，二牛，三牛，四牛一同住进了四人寝里，每天都五缺一；有一天，他们在游戏里认识了小牛，得知小牛也是他们学校的，于是邀请小牛和他们一起住，可是他们们寝室只能住四个人，这个怎么办呢？于是他们向学校(<font color=orange>系统</font>)申请，要求学校给他们一个新的六人寝(<font color=orange>新的内存空间</font>)，于是学校就给了他们新的六人寝，于是他们全部都搬去了六人寝里，小牛也办了进去，之后每天五黑，好不快活；</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/HZUC84m.png\" alt=\"图片\"></p>\n<blockquote>\n<p>之后有其他学生看到牛＊他们的做法，于是也通通向学校申请；最后学校发现了一个问题：就是学生们为了住进新寝室，花费了大量的时间在从旧寝室到新寝室的路上(<font color=orange>插入数据慢</font>)</p>\n</blockquote>\n<p>有的人会说，那一开始就安排大牛，二牛，三牛，四牛住５人寝不就好了吗？这样他们就不用搬了(这就相当于我们初始化数组时，给数组指定了一个大小)；这样的想法是好的，但是如果他们没有没有认识小牛，小牛也不会搬进去，这样他们四个人就一直住着５人寝，就造成了空间资源浪费；</p>\n<p>有一天，老师去找进入新寝室的小牛谈话，一看得知小牛在４号床，一下就找到了小牛（<font color=orange>查询数据快</font>），问他在这个寝室住的习不习惯，小牛心想，每天都五黑，你说我习不习惯！！</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/WxdNOVF.gif\" alt=\"图片\"></p>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><blockquote>\n<p>链表我们平时用的比较少，它的特点是:<font color=orange>插入数据快，查询数据慢</font>，查询的时间复杂度是：<font color=orange>O(n)</font>，插入的时间复杂度是：<font color=orange>O(1)</font>，它的特点是和数组相反的；</p>\n</blockquote>\n<p>　　经过无数日夜的奋战，牛＊一寝人觉得是时候该出去玩玩了，自从小牛搬过来后，就一直没日没夜的五黑，都快不知道外面的世界长什么样子了；他们一行人准备去游乐园转转．</p>\n<p>　　来到游乐园后，一群人像刚放出来的一样，对一切都充满了新鲜感，到处转悠．就在转悠的时候，细心的大牛发现了地上有一张纸条，打开一看，上面写着：<font color=orange>＂少年，你渴望力量吗？想获得力量就来海盗船找我！＂</font>，大牛赶紧找来其他小伙伴，一同前往；到了海盗船的地方，发现船上写着：<font color=orange>＂力量源自摩天轮，请前往摩天轮＂</font>，于是一群人就又前往摩天轮，在那里，终于过得了神秘力量－－－<font color=orange>毒鸡汤：你的内心有多强大，你的力量就有多强大</font>；小牛他们为了寻找这个力量，可谓费尽九牛二虎之力啊（<font color=orange>查询数据慢</font>）；</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Hwi1Car.png\" alt=\"图片\"></p>\n<blockquote>\n<p>可以发现，<font color=orange>每个元素存着下个元素的地址</font>，所以如果要查找其中某个元素，就必须要从头开始，才能找到．这就比较慢了．但是，他们<font color=orange>添加元素很快</font>,元素可以随机出现在游乐园的某个地方，只要在新添加元素的前一个元素指明新元素的地址在哪里就可以了；</p>\n</blockquote>\n<h2 id=\"发个对比表格吧\"><a href=\"#发个对比表格吧\" class=\"headerlink\" title=\"发个对比表格吧\"></a>发个对比表格吧</h2><h3 id=\"时间复杂度对比表\"><a href=\"#时间复杂度对比表\" class=\"headerlink\" title=\"时间复杂度对比表\"></a>时间复杂度对比表</h3><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">数组</th>\n<th>链表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">插入</td>\n<td align=\"center\">O(n) 慢</td>\n<td>O(1) 快</td>\n</tr>\n<tr>\n<td align=\"center\">删除</td>\n<td align=\"center\">O(n) 慢</td>\n<td>O(1) 快</td>\n</tr>\n<tr>\n<td align=\"center\">查询</td>\n<td align=\"center\">O(1) 快</td>\n<td>O(n) 慢</td>\n</tr>\n</tbody></table>\n"},{"title":"UML箭头在Java中的含义","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-07-18T12:17:38.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"## 泛化\n\n> 在 Java 中表示继承关系，空心箭头指向父类\n\n![image-20210717181253414](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/fi3SUYimage-20210717181253414-20211008162305145.png)\n\n**示例：**\n\n![image-20210718173428923](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/CWFFnaimage-20210718173428923-20211008162258404.png)\n\n```java\nclass Parent {\n    \n}\n\nclass Son extends Parent {\n    \n}\n```\n\n\n## 实现\n\n> 表示实现接口，箭头指向接口类\n\n![image-20210717181304829](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XoAFNsimage-20210717181304829-20211008162246523.png)\n\n**示例：**\n\n![image-20210718173938989](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/OlaaSSimage-20210718173938989-20211008162251101.png)\n\n```java\ninterface Iter {\n\n}\n\nclass TerImpl implements Iter {\n\n}\n```\n\n\n## 依赖\n\n> 表示依赖关系，某个类的方法必须依赖另一个类才可以执行，箭头指向被依赖的类\n\n![image-20210718171936788](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/9ULJU5image-20210718171936788.png)\n\n**示例：**\n\n![image-20210718174817997](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/YEh93vimage-20210718174817997.png)\n\n```java\nclass A {\n    public void testA(){\n        System.out.println(\"这是 A 类\");\n    }\n}\n\nclass B {\n    public void testB(A a){\n        a.testA();\n    }\n}\n```\n\n\n\n## 关联关系\n\n### 关联\n\n> 表示关联关系，两个类的关系是平等的\n>\n> **可以双向关联，A 可以关联 B，B 也可以关联 A**\n>\n> 箭头指向被关联的类\n\n![image-20210717181329532](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/effJpHimage-20210717181329532-20211008162235439.png)\n\n**示例：**\n\n![image-20210718201348840](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/p17PX4image-20210718201348840.png)\n\n```java\nclass A {\n    public void testA(){\n        System.out.println(\"这是 A 类\");\n    }\n}\n\nclass B {\n    private A a;\n\n    public B(A a) {\n        this.a = a;\n    }\n\n    public void testB(){\n        a.testA();\n    }\n}\n```\n\n\n\n### 聚合\n\n> 表示聚合关系，**聚合是关联的一种特例，在代码上两者没有什么区别**。\n>\n> **单向关联，A 能关联 B，B 不能关联 A**\n>\n> 尾部为空棱形，也可以是直线\n\n![image-20210718195546287](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/fKgWIFimage-20210718195546287.png)\n\n**示例：**\n\n![image-20210718200435303](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/DvBzVKimage-20210718200435303-20211008162227330.png)\n\n```java\nclass A {\n\n}\n\nclass B {\n    private List<A> a;\n    \n}\n```\n\n\n\n### 组合\n\n> 表示组合关系，也是**关联关系的一种**\n>\n> 表示强关联关系，被关联的类的生命周期会随关联类的生命周期一起产生和消失\n\n![image-20210718195556115](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/15FMoXimage-20210718195556115-20211008162219555.png)\n\n**示例：**\n\n![image-20210718201118928](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/1jOTPHimage-20210718201118928-20211008162213446.png)\n\n```java\nclass A {\n\n}\n\nclass B {\n    private A a;\n\n    public B() {\n        this.a = new A();\n    }\n}\n```\n\n\n\n## 总结\n\n聚合和组合的区别：聚合是个体离开了整体，依然可以存在.\n                                       组合是个体和整体不可以分开，个体不能离开整体单独存在。\n\n依赖，关联 和聚合，组合的区别：依赖，关联 : 类之间的关系是在同一层次上.\n                                                               聚合，组合: 类之间的关系表现为整体和部分。\n\n### 参考资料\n\n- https://blog.csdn.net/zhuyu714997369/article/details/51983871\n- https://zhuanlan.zhihu.com/p/109655171\n- https://blog.csdn.net/qq_31655965/article/details/54645220","source":"_posts/gof/234C81B9931C44CB9B88E0E53210BB48.md","raw":"---\ntitle: UML箭头在Java中的含义\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-07-18 20:17:38\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- UML\ncategories:\n- UML\n---\n## 泛化\n\n> 在 Java 中表示继承关系，空心箭头指向父类\n\n![image-20210717181253414](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/fi3SUYimage-20210717181253414-20211008162305145.png)\n\n**示例：**\n\n![image-20210718173428923](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/CWFFnaimage-20210718173428923-20211008162258404.png)\n\n```java\nclass Parent {\n    \n}\n\nclass Son extends Parent {\n    \n}\n```\n\n\n## 实现\n\n> 表示实现接口，箭头指向接口类\n\n![image-20210717181304829](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XoAFNsimage-20210717181304829-20211008162246523.png)\n\n**示例：**\n\n![image-20210718173938989](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/OlaaSSimage-20210718173938989-20211008162251101.png)\n\n```java\ninterface Iter {\n\n}\n\nclass TerImpl implements Iter {\n\n}\n```\n\n\n## 依赖\n\n> 表示依赖关系，某个类的方法必须依赖另一个类才可以执行，箭头指向被依赖的类\n\n![image-20210718171936788](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/9ULJU5image-20210718171936788.png)\n\n**示例：**\n\n![image-20210718174817997](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/YEh93vimage-20210718174817997.png)\n\n```java\nclass A {\n    public void testA(){\n        System.out.println(\"这是 A 类\");\n    }\n}\n\nclass B {\n    public void testB(A a){\n        a.testA();\n    }\n}\n```\n\n\n\n## 关联关系\n\n### 关联\n\n> 表示关联关系，两个类的关系是平等的\n>\n> **可以双向关联，A 可以关联 B，B 也可以关联 A**\n>\n> 箭头指向被关联的类\n\n![image-20210717181329532](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/effJpHimage-20210717181329532-20211008162235439.png)\n\n**示例：**\n\n![image-20210718201348840](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/p17PX4image-20210718201348840.png)\n\n```java\nclass A {\n    public void testA(){\n        System.out.println(\"这是 A 类\");\n    }\n}\n\nclass B {\n    private A a;\n\n    public B(A a) {\n        this.a = a;\n    }\n\n    public void testB(){\n        a.testA();\n    }\n}\n```\n\n\n\n### 聚合\n\n> 表示聚合关系，**聚合是关联的一种特例，在代码上两者没有什么区别**。\n>\n> **单向关联，A 能关联 B，B 不能关联 A**\n>\n> 尾部为空棱形，也可以是直线\n\n![image-20210718195546287](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/fKgWIFimage-20210718195546287.png)\n\n**示例：**\n\n![image-20210718200435303](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/DvBzVKimage-20210718200435303-20211008162227330.png)\n\n```java\nclass A {\n\n}\n\nclass B {\n    private List<A> a;\n    \n}\n```\n\n\n\n### 组合\n\n> 表示组合关系，也是**关联关系的一种**\n>\n> 表示强关联关系，被关联的类的生命周期会随关联类的生命周期一起产生和消失\n\n![image-20210718195556115](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/15FMoXimage-20210718195556115-20211008162219555.png)\n\n**示例：**\n\n![image-20210718201118928](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/1jOTPHimage-20210718201118928-20211008162213446.png)\n\n```java\nclass A {\n\n}\n\nclass B {\n    private A a;\n\n    public B() {\n        this.a = new A();\n    }\n}\n```\n\n\n\n## 总结\n\n聚合和组合的区别：聚合是个体离开了整体，依然可以存在.\n                                       组合是个体和整体不可以分开，个体不能离开整体单独存在。\n\n依赖，关联 和聚合，组合的区别：依赖，关联 : 类之间的关系是在同一层次上.\n                                                               聚合，组合: 类之间的关系表现为整体和部分。\n\n### 参考资料\n\n- https://blog.csdn.net/zhuyu714997369/article/details/51983871\n- https://zhuanlan.zhihu.com/p/109655171\n- https://blog.csdn.net/qq_31655965/article/details/54645220","slug":"gof/234C81B9931C44CB9B88E0E53210BB48","published":1,"updated":"2021-10-08T08:23:12.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ef80009vpucem3vboym","content":"<h2 id=\"泛化\"><a href=\"#泛化\" class=\"headerlink\" title=\"泛化\"></a>泛化</h2><blockquote>\n<p>在 Java 中表示继承关系，空心箭头指向父类</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/fi3SUYimage-20210717181253414-20211008162305145.png\" alt=\"image-20210717181253414\"></p>\n<p><strong>示例：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/CWFFnaimage-20210718173428923-20211008162258404.png\" alt=\"image-20210718173428923\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Parent</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><blockquote>\n<p>表示实现接口，箭头指向接口类</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XoAFNsimage-20210717181304829-20211008162246523.png\" alt=\"image-20210717181304829\"></p>\n<p><strong>示例：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/OlaaSSimage-20210718173938989-20211008162251101.png\" alt=\"image-20210718173938989\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Iter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Iter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><blockquote>\n<p>表示依赖关系，某个类的方法必须依赖另一个类才可以执行，箭头指向被依赖的类</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/9ULJU5image-20210718171936788.png\" alt=\"image-20210718171936788\"></p>\n<p><strong>示例：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/YEh93vimage-20210718174817997.png\" alt=\"image-20210718174817997\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testA</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;这是 A 类&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testB</span><span class=\"params\">(A a)</span>&#123;</span><br><span class=\"line\">        a.testA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"关联关系\"><a href=\"#关联关系\" class=\"headerlink\" title=\"关联关系\"></a>关联关系</h2><h3 id=\"关联\"><a href=\"#关联\" class=\"headerlink\" title=\"关联\"></a>关联</h3><blockquote>\n<p>表示关联关系，两个类的关系是平等的</p>\n<p><strong>可以双向关联，A 可以关联 B，B 也可以关联 A</strong></p>\n<p>箭头指向被关联的类</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/effJpHimage-20210717181329532-20211008162235439.png\" alt=\"image-20210717181329532\"></p>\n<p><strong>示例：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/p17PX4image-20210718201348840.png\" alt=\"image-20210718201348840\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testA</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;这是 A 类&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> A a;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">B</span><span class=\"params\">(A a)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.a = a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testB</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        a.testA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h3><blockquote>\n<p>表示聚合关系，<strong>聚合是关联的一种特例，在代码上两者没有什么区别</strong>。</p>\n<p><strong>单向关联，A 能关联 B，B 不能关联 A</strong></p>\n<p>尾部为空棱形，也可以是直线</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/fKgWIFimage-20210718195546287.png\" alt=\"image-20210718195546287\"></p>\n<p><strong>示例：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/DvBzVKimage-20210718200435303-20211008162227330.png\" alt=\"image-20210718200435303\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;A&gt; a;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"组合\"><a href=\"#组合\" class=\"headerlink\" title=\"组合\"></a>组合</h3><blockquote>\n<p>表示组合关系，也是<strong>关联关系的一种</strong></p>\n<p>表示强关联关系，被关联的类的生命周期会随关联类的生命周期一起产生和消失</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/15FMoXimage-20210718195556115-20211008162219555.png\" alt=\"image-20210718195556115\"></p>\n<p><strong>示例：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/1jOTPHimage-20210718201118928-20211008162213446.png\" alt=\"image-20210718201118928\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> A a;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">B</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.a = <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>聚合和组合的区别：聚合是个体离开了整体，依然可以存在.<br>                                       组合是个体和整体不可以分开，个体不能离开整体单独存在。</p>\n<p>依赖，关联 和聚合，组合的区别：依赖，关联 : 类之间的关系是在同一层次上.<br>                                                               聚合，组合: 类之间的关系表现为整体和部分。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://blog.csdn.net/zhuyu714997369/article/details/51983871\">https://blog.csdn.net/zhuyu714997369/article/details/51983871</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/109655171\">https://zhuanlan.zhihu.com/p/109655171</a></li>\n<li><a href=\"https://blog.csdn.net/qq_31655965/article/details/54645220\">https://blog.csdn.net/qq_31655965/article/details/54645220</a></li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"泛化\"><a href=\"#泛化\" class=\"headerlink\" title=\"泛化\"></a>泛化</h2><blockquote>\n<p>在 Java 中表示继承关系，空心箭头指向父类</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/fi3SUYimage-20210717181253414-20211008162305145.png\" alt=\"image-20210717181253414\"></p>\n<p><strong>示例：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/CWFFnaimage-20210718173428923-20211008162258404.png\" alt=\"image-20210718173428923\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Parent</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Parent</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><blockquote>\n<p>表示实现接口，箭头指向接口类</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XoAFNsimage-20210717181304829-20211008162246523.png\" alt=\"image-20210717181304829\"></p>\n<p><strong>示例：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/OlaaSSimage-20210718173938989-20211008162251101.png\" alt=\"image-20210718173938989\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Iter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TerImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Iter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><blockquote>\n<p>表示依赖关系，某个类的方法必须依赖另一个类才可以执行，箭头指向被依赖的类</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/9ULJU5image-20210718171936788.png\" alt=\"image-20210718171936788\"></p>\n<p><strong>示例：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/YEh93vimage-20210718174817997.png\" alt=\"image-20210718174817997\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testA</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;这是 A 类&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testB</span><span class=\"params\">(A a)</span>&#123;</span><br><span class=\"line\">        a.testA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"关联关系\"><a href=\"#关联关系\" class=\"headerlink\" title=\"关联关系\"></a>关联关系</h2><h3 id=\"关联\"><a href=\"#关联\" class=\"headerlink\" title=\"关联\"></a>关联</h3><blockquote>\n<p>表示关联关系，两个类的关系是平等的</p>\n<p><strong>可以双向关联，A 可以关联 B，B 也可以关联 A</strong></p>\n<p>箭头指向被关联的类</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/effJpHimage-20210717181329532-20211008162235439.png\" alt=\"image-20210717181329532\"></p>\n<p><strong>示例：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/p17PX4image-20210718201348840.png\" alt=\"image-20210718201348840\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testA</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;这是 A 类&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> A a;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">B</span><span class=\"params\">(A a)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.a = a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">testB</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        a.testA();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a>聚合</h3><blockquote>\n<p>表示聚合关系，<strong>聚合是关联的一种特例，在代码上两者没有什么区别</strong>。</p>\n<p><strong>单向关联，A 能关联 B，B 不能关联 A</strong></p>\n<p>尾部为空棱形，也可以是直线</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/fKgWIFimage-20210718195546287.png\" alt=\"image-20210718195546287\"></p>\n<p><strong>示例：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/DvBzVKimage-20210718200435303-20211008162227330.png\" alt=\"image-20210718200435303\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;A&gt; a;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"组合\"><a href=\"#组合\" class=\"headerlink\" title=\"组合\"></a>组合</h3><blockquote>\n<p>表示组合关系，也是<strong>关联关系的一种</strong></p>\n<p>表示强关联关系，被关联的类的生命周期会随关联类的生命周期一起产生和消失</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/15FMoXimage-20210718195556115-20211008162219555.png\" alt=\"image-20210718195556115\"></p>\n<p><strong>示例：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/1jOTPHimage-20210718201118928-20211008162213446.png\" alt=\"image-20210718201118928\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">A</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">B</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> A a;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">B</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.a = <span class=\"keyword\">new</span> <span class=\"title class_\">A</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>聚合和组合的区别：聚合是个体离开了整体，依然可以存在.<br>                                       组合是个体和整体不可以分开，个体不能离开整体单独存在。</p>\n<p>依赖，关联 和聚合，组合的区别：依赖，关联 : 类之间的关系是在同一层次上.<br>                                                               聚合，组合: 类之间的关系表现为整体和部分。</p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://blog.csdn.net/zhuyu714997369/article/details/51983871\">https://blog.csdn.net/zhuyu714997369/article/details/51983871</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/109655171\">https://zhuanlan.zhihu.com/p/109655171</a></li>\n<li><a href=\"https://blog.csdn.net/qq_31655965/article/details/54645220\">https://blog.csdn.net/qq_31655965/article/details/54645220</a></li>\n</ul>\n"},{"title":"设计模式系列-抽象工厂模式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-16T13:17:23.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216212929-20211008161813876.jpg)\n\n> 积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬\n\n## 突然开始的正文\n\n紧接着上一章的[工厂方法模式](https://mjava.top/gof/gof-factory-method)，其实抽象工厂的概念和工厂方法的概念都是差不多的，抽象工厂模式是对工厂方法模式的更高级，比如上次我们说的那个汽车工厂总部类<font color=orange>AllCarFactory</font>，本来他只定义了生产汽车这个方法，下面的各个品牌的汽车厂也只能生产这个汽车，现在由于市场需求，需要生产摩托车，然后<font color=orange>AllCarFactory</font>定义了一个生产摩托车的接口，这样这个接口下面的汽车厂就可以生产摩托车了．就在这时他们的生产模式也从<font color=orange>工厂方法模式</font>升级到了<font color=orange>抽象工厂模式</font>；\n\n\n\n话不多说，看两个模式的类图你就明白了：\n\n### 原本的工厂方法模式类图：\n\n![工厂方法模式](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216202720-20211008161813952.png)\n\n### 升级后的抽象工厂模式：\n\n![抽象工厂模式](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216203329-20211008161814048.png)\n\n可以看到，抽象工厂只是比工厂方法模式多生产了一个产品，当<font color=orange>抽象工厂模式</font>的产品减到<font color=orange>只有一个</font>的时候，他就又回到了<font color=orange>工厂方法模式</font>；\n\n## 好色的朋友买车了\n\n上次我朋友看见我买车之后，得知是个小姐姐带我区买车的，于是他叫我联系了下那个小姐姐，说他也要买车，点名要叫小姐姐带他去，由于资金有限，他只卖了奔驰和五菱系列的产品，没有买莱斯莱斯的；看看他是怎么买的吧：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216205803-20211008161814196.png)\n\n可以看到，由于要在一个工厂买两个东西，他是先找到了工厂，然后再一件一件的从工厂买．我们上次是一个工厂买一件东西，所以是直接去工厂买的；\n\n## 措不及防的结束了\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216205427-20211008161830697.gif)\n\n不是我不想讲，而是抽象工厂就是这样的东西．从上面可以看出，抽象工厂每当增加一个产品时，后面相关的的<font color=orange>品牌工厂</font>也全部要实现他这个产品，这就违背了开闭原则了．所以，在实际设计中，一个<font color=orange>业务场景是稳定的</font>,用抽象工厂是比较好的，因为一次设计,后面就不用改了,这样就不会违反开闭原则了．但是如果一个<font color=orange>业务场景是稳定的</font>是不稳定的，那么就不适合使用这个模式了，因为后期需要多次修改，这就违反了开闭原则，同时也及其难维护，应为你不知道修改了代码，到底会影响哪些功能；","source":"_posts/gof/gof-abstract-factory.md","raw":"---\ntitle: 设计模式系列-抽象工厂模式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-16 21:17:23\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 设计模式\n- 抽象工厂模式\ncategories:\n- GOF\n---\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216212929-20211008161813876.jpg)\n\n> 积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬\n\n## 突然开始的正文\n\n紧接着上一章的[工厂方法模式](https://mjava.top/gof/gof-factory-method)，其实抽象工厂的概念和工厂方法的概念都是差不多的，抽象工厂模式是对工厂方法模式的更高级，比如上次我们说的那个汽车工厂总部类<font color=orange>AllCarFactory</font>，本来他只定义了生产汽车这个方法，下面的各个品牌的汽车厂也只能生产这个汽车，现在由于市场需求，需要生产摩托车，然后<font color=orange>AllCarFactory</font>定义了一个生产摩托车的接口，这样这个接口下面的汽车厂就可以生产摩托车了．就在这时他们的生产模式也从<font color=orange>工厂方法模式</font>升级到了<font color=orange>抽象工厂模式</font>；\n\n\n\n话不多说，看两个模式的类图你就明白了：\n\n### 原本的工厂方法模式类图：\n\n![工厂方法模式](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216202720-20211008161813952.png)\n\n### 升级后的抽象工厂模式：\n\n![抽象工厂模式](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216203329-20211008161814048.png)\n\n可以看到，抽象工厂只是比工厂方法模式多生产了一个产品，当<font color=orange>抽象工厂模式</font>的产品减到<font color=orange>只有一个</font>的时候，他就又回到了<font color=orange>工厂方法模式</font>；\n\n## 好色的朋友买车了\n\n上次我朋友看见我买车之后，得知是个小姐姐带我区买车的，于是他叫我联系了下那个小姐姐，说他也要买车，点名要叫小姐姐带他去，由于资金有限，他只卖了奔驰和五菱系列的产品，没有买莱斯莱斯的；看看他是怎么买的吧：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216205803-20211008161814196.png)\n\n可以看到，由于要在一个工厂买两个东西，他是先找到了工厂，然后再一件一件的从工厂买．我们上次是一个工厂买一件东西，所以是直接去工厂买的；\n\n## 措不及防的结束了\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216205427-20211008161830697.gif)\n\n不是我不想讲，而是抽象工厂就是这样的东西．从上面可以看出，抽象工厂每当增加一个产品时，后面相关的的<font color=orange>品牌工厂</font>也全部要实现他这个产品，这就违背了开闭原则了．所以，在实际设计中，一个<font color=orange>业务场景是稳定的</font>,用抽象工厂是比较好的，因为一次设计,后面就不用改了,这样就不会违反开闭原则了．但是如果一个<font color=orange>业务场景是稳定的</font>是不稳定的，那么就不适合使用这个模式了，因为后期需要多次修改，这就违反了开闭原则，同时也及其难维护，应为你不知道修改了代码，到底会影响哪些功能；","slug":"gof/gof-abstract-factory","published":1,"updated":"2021-10-08T08:18:34.240Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6efa000bvpuc2obhbpqs","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216212929-20211008161813876.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p>\n</blockquote>\n<h2 id=\"突然开始的正文\"><a href=\"#突然开始的正文\" class=\"headerlink\" title=\"突然开始的正文\"></a>突然开始的正文</h2><p>紧接着上一章的<a href=\"https://mjava.top/gof/gof-factory-method\">工厂方法模式</a>，其实抽象工厂的概念和工厂方法的概念都是差不多的，抽象工厂模式是对工厂方法模式的更高级，比如上次我们说的那个汽车工厂总部类<font color=orange>AllCarFactory</font>，本来他只定义了生产汽车这个方法，下面的各个品牌的汽车厂也只能生产这个汽车，现在由于市场需求，需要生产摩托车，然后<font color=orange>AllCarFactory</font>定义了一个生产摩托车的接口，这样这个接口下面的汽车厂就可以生产摩托车了．就在这时他们的生产模式也从<font color=orange>工厂方法模式</font>升级到了<font color=orange>抽象工厂模式</font>；</p>\n<p>话不多说，看两个模式的类图你就明白了：</p>\n<h3 id=\"原本的工厂方法模式类图：\"><a href=\"#原本的工厂方法模式类图：\" class=\"headerlink\" title=\"原本的工厂方法模式类图：\"></a>原本的工厂方法模式类图：</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216202720-20211008161813952.png\" alt=\"工厂方法模式\"></p>\n<h3 id=\"升级后的抽象工厂模式：\"><a href=\"#升级后的抽象工厂模式：\" class=\"headerlink\" title=\"升级后的抽象工厂模式：\"></a>升级后的抽象工厂模式：</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216203329-20211008161814048.png\" alt=\"抽象工厂模式\"></p>\n<p>可以看到，抽象工厂只是比工厂方法模式多生产了一个产品，当<font color=orange>抽象工厂模式</font>的产品减到<font color=orange>只有一个</font>的时候，他就又回到了<font color=orange>工厂方法模式</font>；</p>\n<h2 id=\"好色的朋友买车了\"><a href=\"#好色的朋友买车了\" class=\"headerlink\" title=\"好色的朋友买车了\"></a>好色的朋友买车了</h2><p>上次我朋友看见我买车之后，得知是个小姐姐带我区买车的，于是他叫我联系了下那个小姐姐，说他也要买车，点名要叫小姐姐带他去，由于资金有限，他只卖了奔驰和五菱系列的产品，没有买莱斯莱斯的；看看他是怎么买的吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216205803-20211008161814196.png\" alt=\"图片\"></p>\n<p>可以看到，由于要在一个工厂买两个东西，他是先找到了工厂，然后再一件一件的从工厂买．我们上次是一个工厂买一件东西，所以是直接去工厂买的；</p>\n<h2 id=\"措不及防的结束了\"><a href=\"#措不及防的结束了\" class=\"headerlink\" title=\"措不及防的结束了\"></a>措不及防的结束了</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216205427-20211008161830697.gif\" alt=\"图片\"></p>\n<p>不是我不想讲，而是抽象工厂就是这样的东西．从上面可以看出，抽象工厂每当增加一个产品时，后面相关的的<font color=orange>品牌工厂</font>也全部要实现他这个产品，这就违背了开闭原则了．所以，在实际设计中，一个<font color=orange>业务场景是稳定的</font>,用抽象工厂是比较好的，因为一次设计,后面就不用改了,这样就不会违反开闭原则了．但是如果一个<font color=orange>业务场景是稳定的</font>是不稳定的，那么就不适合使用这个模式了，因为后期需要多次修改，这就违反了开闭原则，同时也及其难维护，应为你不知道修改了代码，到底会影响哪些功能；</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216212929-20211008161813876.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p>\n</blockquote>\n<h2 id=\"突然开始的正文\"><a href=\"#突然开始的正文\" class=\"headerlink\" title=\"突然开始的正文\"></a>突然开始的正文</h2><p>紧接着上一章的<a href=\"https://mjava.top/gof/gof-factory-method\">工厂方法模式</a>，其实抽象工厂的概念和工厂方法的概念都是差不多的，抽象工厂模式是对工厂方法模式的更高级，比如上次我们说的那个汽车工厂总部类<font color=orange>AllCarFactory</font>，本来他只定义了生产汽车这个方法，下面的各个品牌的汽车厂也只能生产这个汽车，现在由于市场需求，需要生产摩托车，然后<font color=orange>AllCarFactory</font>定义了一个生产摩托车的接口，这样这个接口下面的汽车厂就可以生产摩托车了．就在这时他们的生产模式也从<font color=orange>工厂方法模式</font>升级到了<font color=orange>抽象工厂模式</font>；</p>\n<p>话不多说，看两个模式的类图你就明白了：</p>\n<h3 id=\"原本的工厂方法模式类图：\"><a href=\"#原本的工厂方法模式类图：\" class=\"headerlink\" title=\"原本的工厂方法模式类图：\"></a>原本的工厂方法模式类图：</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216202720-20211008161813952.png\" alt=\"工厂方法模式\"></p>\n<h3 id=\"升级后的抽象工厂模式：\"><a href=\"#升级后的抽象工厂模式：\" class=\"headerlink\" title=\"升级后的抽象工厂模式：\"></a>升级后的抽象工厂模式：</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216203329-20211008161814048.png\" alt=\"抽象工厂模式\"></p>\n<p>可以看到，抽象工厂只是比工厂方法模式多生产了一个产品，当<font color=orange>抽象工厂模式</font>的产品减到<font color=orange>只有一个</font>的时候，他就又回到了<font color=orange>工厂方法模式</font>；</p>\n<h2 id=\"好色的朋友买车了\"><a href=\"#好色的朋友买车了\" class=\"headerlink\" title=\"好色的朋友买车了\"></a>好色的朋友买车了</h2><p>上次我朋友看见我买车之后，得知是个小姐姐带我区买车的，于是他叫我联系了下那个小姐姐，说他也要买车，点名要叫小姐姐带他去，由于资金有限，他只卖了奔驰和五菱系列的产品，没有买莱斯莱斯的；看看他是怎么买的吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216205803-20211008161814196.png\" alt=\"图片\"></p>\n<p>可以看到，由于要在一个工厂买两个东西，他是先找到了工厂，然后再一件一件的从工厂买．我们上次是一个工厂买一件东西，所以是直接去工厂买的；</p>\n<h2 id=\"措不及防的结束了\"><a href=\"#措不及防的结束了\" class=\"headerlink\" title=\"措不及防的结束了\"></a>措不及防的结束了</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191216205427-20211008161830697.gif\" alt=\"图片\"></p>\n<p>不是我不想讲，而是抽象工厂就是这样的东西．从上面可以看出，抽象工厂每当增加一个产品时，后面相关的的<font color=orange>品牌工厂</font>也全部要实现他这个产品，这就违背了开闭原则了．所以，在实际设计中，一个<font color=orange>业务场景是稳定的</font>,用抽象工厂是比较好的，因为一次设计,后面就不用改了,这样就不会违反开闭原则了．但是如果一个<font color=orange>业务场景是稳定的</font>是不稳定的，那么就不适合使用这个模式了，因为后期需要多次修改，这就违反了开闭原则，同时也及其难维护，应为你不知道修改了代码，到底会影响哪些功能；</p>\n"},{"title":"设计模式之建造者模式【用好玩的故事讲清楚设计模式】","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-26T22:50:31.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/6aL0UN5-20211008161857935.jpg)\n\n> 积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬\n>\n> 所有源代码都在这:[https://github.com/z573419235/GofDemo](https://github.com/z573419235/GofDemo)\n>\n> 各位大佬记得点个星星哦\n\n## 前言\n\n建造者模式用于实例化一个比较复杂的实体类,<font color=orange>当你实例化一个类时,它的构造参数比较多时,就可以用建造者模式来简化实例化过程</font>;前几篇工厂模式的文章我们说道买车,那只是简单的区工厂买车,我们不关系工厂是怎么造出来的.可是实际工厂造一辆车需要有方向盘、发动机、车架、轮胎等部件,而且不同品牌的车的部件都是不同的,<font color=orange>部件虽然不同,但是造车的方式基本都是差不多的步骤</font>,这时候就可以用建造者模式来造一辆车了;\n\n建造者（Builder）模式由产品、抽象建造者、具体建造者、指挥者等 4 个要素构成\n\n## 土豪朋友开车厂\n\n        土豪朋友上次买了车之后,发现造车卖还挺赚钱,于是决定涉足汽车领域,真是很有商业头脑啊,不愧是我的玉树临风,疯言疯语,语速惊人,人模狗样的土豪朋友啊.\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/uLylNOc.jpg)\n\n一天,前去向他讨教汽车的知识,他给我讲了汽车的大致构成:\n\n```java\n/**\n * 汽车 产品类 定义汽车的构成\n * */\n@Data\npublic class Car {\n    /**\n     * 方向盘\n     * */\n    private String steering;\n    /**\n     * 发动机\n     * */\n    private String engine;\n    /**\n     * 车架\n     * */\n    private String frame;\n    /**\n     * 轮胎\n     * */\n    private String tire;\n    /**\n     * 展示一下汽车配置\n     * */\n    public String show() {\n        return \"{\" +\n                \"steering='\" + steering + '\\'' +\n                \", engine='\" + engine + '\\'' +\n                \", frame='\" + frame + '\\'' +\n                \", tire='\" + tire + '\\'' +\n                '}';\n    }\n}\n```\n\n果真是大致啊,忽悠我不懂车是吧,就给我讲4个东西,这谁不知道啊,哼!土豪朋友忙解释到:这不是为了通俗易懂嘛!!哈哈哈---土豪朋友尴尬而不失礼貌的笑着!\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/nG187Zz.jpg)\n\n算了算了,不和你计较了,你再和我讲下你们车厂的造车模式吧!!他说,一开始他造车自己累的半死,什么都要亲力亲为,后来招了两个专家,<font color=orange>一个负责宝马的制造,一个负责奔驰的制造</font>,我现在要什么车,只要指挥谁造车就好了.轻松的很;\n\n他给我介绍了一下他的两个专家:\n\n```java\n/**\n * 宝马车建造者\n * */\npublic class BMWBuilder extends AbstractBuild {\n    @Override\n    void buildEngine() {\n        car.setEngine(\"宝马的发动机\");\n    }\n\n    @Override\n    void buildSteering() {\n        car.setSteering(\"宝马的方向盘\");\n    }\n\n    @Override\n    void buildFrame() {\n        car.setFrame(\"宝马的车架\");\n    }\n\n    @Override\n    void buildTire() {\n        car.setTire(\"宝马的轮胎\");\n    }\n}\n```\n\n```java\n/**\n * 奔驰车建造者\n * */\npublic class BenzBuilder extends AbstractBuild {\n    @Override\n    void buildEngine() {\n        car.setEngine(\"奔驰的发动机\");\n    }\n\n    @Override\n    void buildSteering() {\n        car.setSteering(\"奔驰的方向盘\");\n    }\n\n    @Override\n    void buildFrame() {\n        car.setFrame(\"奔驰的车架\");\n    }\n\n    @Override\n    void buildTire() {\n        car.setTire(\"奔驰的轮胎\");\n    }\n}\n```\n\n<font color=orange>他们两个都遵循下面这个`AbstractBuild`汽车的建造规则:</font>\n\n```java\n/**\n * 抽象建造者 定义造车的方法\n * */\nabstract class AbstractBuild {\n    /**\n     * 造的产品是车\n     * */\n    protected Car car=new Car();\n    /**\n     * 造发动机\n     * */\n    abstract void buildEngine();\n    /**\n     * 造轮胎\n     * */\n    abstract void buildSteering();\n    /**\n     * 造车架\n     * */\n    abstract void buildFrame();\n    /**\n     * 造轮胎\n     * */\n    abstract void buildTire();\n    /**\n     * 得到造好的车\n     * */\n    public Car getCar(){\n        return this.car;\n    }\n}\n```\n\n土豪朋友还跟我讲了是怎么指挥他们造车的:\n\n```java\n/**\n * 所有的建造者要听这个包工头的话,叫你造什么就造什么\n * */\npublic class Boss {\n\n    public static Car builderCar(AbstractBuild build){\n        build.buildEngine();\n        build.buildFrame();\n        build.buildSteering();\n        build.buildTire();\n        return build.getCar();\n    }\n}\n```\n\n经过他这一翻显摆之后,感觉虽然长的人摸狗样的,干起事来还真是一套一套的,哈哈哈哈!!\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/hbg0zDY.jpg)\n\n说完,还向我展示了汽车是怎样造成的...........\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/JDX2qIc.png)\n\n## 总结\n\n其实建造者模式和<font color=orange>工厂模式</font>还是挺像的,<font color=orange>建造者模式里的建造者就相当于工厂模式里的工厂</font>,不过建造者的核心是可以<font color=orange>控制顺序</font>,比如上面的土豪老板可以控制建造工人的建造顺序,可以控制他们是先造轮胎还是先造发动机,这才是建造者模式意义;\n\n> 建造者模式如果和<font color=orange>模板方法模式</font>搭配起来,<font color=orange>建造工人那个类封装一个模板方法</font>开放给老板,老板就可以直接控制这个类就可以了,那这就和工厂模式没什么两样了","source":"_posts/gof/gof-builder.md","raw":"---\ntitle: 设计模式之建造者模式【用好玩的故事讲清楚设计模式】\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-27 06:50:31\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 设计模式\n- 建造者模式\ncategories:\n- GOF\n---\n\n\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/6aL0UN5-20211008161857935.jpg)\n\n> 积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬\n>\n> 所有源代码都在这:[https://github.com/z573419235/GofDemo](https://github.com/z573419235/GofDemo)\n>\n> 各位大佬记得点个星星哦\n\n## 前言\n\n建造者模式用于实例化一个比较复杂的实体类,<font color=orange>当你实例化一个类时,它的构造参数比较多时,就可以用建造者模式来简化实例化过程</font>;前几篇工厂模式的文章我们说道买车,那只是简单的区工厂买车,我们不关系工厂是怎么造出来的.可是实际工厂造一辆车需要有方向盘、发动机、车架、轮胎等部件,而且不同品牌的车的部件都是不同的,<font color=orange>部件虽然不同,但是造车的方式基本都是差不多的步骤</font>,这时候就可以用建造者模式来造一辆车了;\n\n建造者（Builder）模式由产品、抽象建造者、具体建造者、指挥者等 4 个要素构成\n\n## 土豪朋友开车厂\n\n        土豪朋友上次买了车之后,发现造车卖还挺赚钱,于是决定涉足汽车领域,真是很有商业头脑啊,不愧是我的玉树临风,疯言疯语,语速惊人,人模狗样的土豪朋友啊.\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/uLylNOc.jpg)\n\n一天,前去向他讨教汽车的知识,他给我讲了汽车的大致构成:\n\n```java\n/**\n * 汽车 产品类 定义汽车的构成\n * */\n@Data\npublic class Car {\n    /**\n     * 方向盘\n     * */\n    private String steering;\n    /**\n     * 发动机\n     * */\n    private String engine;\n    /**\n     * 车架\n     * */\n    private String frame;\n    /**\n     * 轮胎\n     * */\n    private String tire;\n    /**\n     * 展示一下汽车配置\n     * */\n    public String show() {\n        return \"{\" +\n                \"steering='\" + steering + '\\'' +\n                \", engine='\" + engine + '\\'' +\n                \", frame='\" + frame + '\\'' +\n                \", tire='\" + tire + '\\'' +\n                '}';\n    }\n}\n```\n\n果真是大致啊,忽悠我不懂车是吧,就给我讲4个东西,这谁不知道啊,哼!土豪朋友忙解释到:这不是为了通俗易懂嘛!!哈哈哈---土豪朋友尴尬而不失礼貌的笑着!\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/nG187Zz.jpg)\n\n算了算了,不和你计较了,你再和我讲下你们车厂的造车模式吧!!他说,一开始他造车自己累的半死,什么都要亲力亲为,后来招了两个专家,<font color=orange>一个负责宝马的制造,一个负责奔驰的制造</font>,我现在要什么车,只要指挥谁造车就好了.轻松的很;\n\n他给我介绍了一下他的两个专家:\n\n```java\n/**\n * 宝马车建造者\n * */\npublic class BMWBuilder extends AbstractBuild {\n    @Override\n    void buildEngine() {\n        car.setEngine(\"宝马的发动机\");\n    }\n\n    @Override\n    void buildSteering() {\n        car.setSteering(\"宝马的方向盘\");\n    }\n\n    @Override\n    void buildFrame() {\n        car.setFrame(\"宝马的车架\");\n    }\n\n    @Override\n    void buildTire() {\n        car.setTire(\"宝马的轮胎\");\n    }\n}\n```\n\n```java\n/**\n * 奔驰车建造者\n * */\npublic class BenzBuilder extends AbstractBuild {\n    @Override\n    void buildEngine() {\n        car.setEngine(\"奔驰的发动机\");\n    }\n\n    @Override\n    void buildSteering() {\n        car.setSteering(\"奔驰的方向盘\");\n    }\n\n    @Override\n    void buildFrame() {\n        car.setFrame(\"奔驰的车架\");\n    }\n\n    @Override\n    void buildTire() {\n        car.setTire(\"奔驰的轮胎\");\n    }\n}\n```\n\n<font color=orange>他们两个都遵循下面这个`AbstractBuild`汽车的建造规则:</font>\n\n```java\n/**\n * 抽象建造者 定义造车的方法\n * */\nabstract class AbstractBuild {\n    /**\n     * 造的产品是车\n     * */\n    protected Car car=new Car();\n    /**\n     * 造发动机\n     * */\n    abstract void buildEngine();\n    /**\n     * 造轮胎\n     * */\n    abstract void buildSteering();\n    /**\n     * 造车架\n     * */\n    abstract void buildFrame();\n    /**\n     * 造轮胎\n     * */\n    abstract void buildTire();\n    /**\n     * 得到造好的车\n     * */\n    public Car getCar(){\n        return this.car;\n    }\n}\n```\n\n土豪朋友还跟我讲了是怎么指挥他们造车的:\n\n```java\n/**\n * 所有的建造者要听这个包工头的话,叫你造什么就造什么\n * */\npublic class Boss {\n\n    public static Car builderCar(AbstractBuild build){\n        build.buildEngine();\n        build.buildFrame();\n        build.buildSteering();\n        build.buildTire();\n        return build.getCar();\n    }\n}\n```\n\n经过他这一翻显摆之后,感觉虽然长的人摸狗样的,干起事来还真是一套一套的,哈哈哈哈!!\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/hbg0zDY.jpg)\n\n说完,还向我展示了汽车是怎样造成的...........\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/JDX2qIc.png)\n\n## 总结\n\n其实建造者模式和<font color=orange>工厂模式</font>还是挺像的,<font color=orange>建造者模式里的建造者就相当于工厂模式里的工厂</font>,不过建造者的核心是可以<font color=orange>控制顺序</font>,比如上面的土豪老板可以控制建造工人的建造顺序,可以控制他们是先造轮胎还是先造发动机,这才是建造者模式意义;\n\n> 建造者模式如果和<font color=orange>模板方法模式</font>搭配起来,<font color=orange>建造工人那个类封装一个模板方法</font>开放给老板,老板就可以直接控制这个类就可以了,那这就和工厂模式没什么两样了","slug":"gof/gof-builder","published":1,"updated":"2021-10-08T08:19:01.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6efe000fvpucbb5p2ygr","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/6aL0UN5-20211008161857935.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬</p>\n<p>所有源代码都在这:<a href=\"https://github.com/z573419235/GofDemo\">https://github.com/z573419235/GofDemo</a></p>\n<p>各位大佬记得点个星星哦</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>建造者模式用于实例化一个比较复杂的实体类,<font color=orange>当你实例化一个类时,它的构造参数比较多时,就可以用建造者模式来简化实例化过程</font>;前几篇工厂模式的文章我们说道买车,那只是简单的区工厂买车,我们不关系工厂是怎么造出来的.可是实际工厂造一辆车需要有方向盘、发动机、车架、轮胎等部件,而且不同品牌的车的部件都是不同的,<font color=orange>部件虽然不同,但是造车的方式基本都是差不多的步骤</font>,这时候就可以用建造者模式来造一辆车了;</p>\n<p>建造者（Builder）模式由产品、抽象建造者、具体建造者、指挥者等 4 个要素构成</p>\n<h2 id=\"土豪朋友开车厂\"><a href=\"#土豪朋友开车厂\" class=\"headerlink\" title=\"土豪朋友开车厂\"></a>土豪朋友开车厂</h2><pre><code>    土豪朋友上次买了车之后,发现造车卖还挺赚钱,于是决定涉足汽车领域,真是很有商业头脑啊,不愧是我的玉树临风,疯言疯语,语速惊人,人模狗样的土豪朋友啊.\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/uLylNOc.jpg\" alt=\"图片\"></p>\n<p>一天,前去向他讨教汽车的知识,他给我讲了汽车的大致构成:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 汽车 产品类 定义汽车的构成</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 方向盘</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String steering;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发动机</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String engine;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 车架</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String frame;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 轮胎</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tire;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 展示一下汽车配置</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">show</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;steering=&#x27;&quot;</span> + steering + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, engine=&#x27;&quot;</span> + engine + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, frame=&#x27;&quot;</span> + frame + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, tire=&#x27;&quot;</span> + tire + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>果真是大致啊,忽悠我不懂车是吧,就给我讲4个东西,这谁不知道啊,哼!土豪朋友忙解释到:这不是为了通俗易懂嘛!!哈哈哈—土豪朋友尴尬而不失礼貌的笑着!</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/nG187Zz.jpg\" alt=\"图片\"></p>\n<p>算了算了,不和你计较了,你再和我讲下你们车厂的造车模式吧!!他说,一开始他造车自己累的半死,什么都要亲力亲为,后来招了两个专家,<font color=orange>一个负责宝马的制造,一个负责奔驰的制造</font>,我现在要什么车,只要指挥谁造车就好了.轻松的很;</p>\n<p>他给我介绍了一下他的两个专家:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 宝马车建造者</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BMWBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractBuild</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildEngine</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        car.setEngine(<span class=\"string\">&quot;宝马的发动机&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildSteering</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        car.setSteering(<span class=\"string\">&quot;宝马的方向盘&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildFrame</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        car.setFrame(<span class=\"string\">&quot;宝马的车架&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildTire</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        car.setTire(<span class=\"string\">&quot;宝马的轮胎&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 奔驰车建造者</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BenzBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractBuild</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildEngine</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        car.setEngine(<span class=\"string\">&quot;奔驰的发动机&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildSteering</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        car.setSteering(<span class=\"string\">&quot;奔驰的方向盘&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildFrame</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        car.setFrame(<span class=\"string\">&quot;奔驰的车架&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildTire</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        car.setTire(<span class=\"string\">&quot;奔驰的轮胎&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font color=orange>他们两个都遵循下面这个<code>AbstractBuild</code>汽车的建造规则:</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象建造者 定义造车的方法</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractBuild</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造的产品是车</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Car car=<span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造发动机</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildEngine</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造轮胎</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildSteering</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造车架</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildFrame</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造轮胎</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildTire</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 得到造好的车</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">getCar</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.car;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>土豪朋友还跟我讲了是怎么指挥他们造车的:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有的建造者要听这个包工头的话,叫你造什么就造什么</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Boss</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Car <span class=\"title function_\">builderCar</span><span class=\"params\">(AbstractBuild build)</span>&#123;</span><br><span class=\"line\">        build.buildEngine();</span><br><span class=\"line\">        build.buildFrame();</span><br><span class=\"line\">        build.buildSteering();</span><br><span class=\"line\">        build.buildTire();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> build.getCar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过他这一翻显摆之后,感觉虽然长的人摸狗样的,干起事来还真是一套一套的,哈哈哈哈!!</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/hbg0zDY.jpg\" alt=\"图片\"></p>\n<p>说完,还向我展示了汽车是怎样造成的………..</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/JDX2qIc.png\" alt=\"图片\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实建造者模式和<font color=orange>工厂模式</font>还是挺像的,<font color=orange>建造者模式里的建造者就相当于工厂模式里的工厂</font>,不过建造者的核心是可以<font color=orange>控制顺序</font>,比如上面的土豪老板可以控制建造工人的建造顺序,可以控制他们是先造轮胎还是先造发动机,这才是建造者模式意义;</p>\n<blockquote>\n<p>建造者模式如果和<font color=orange>模板方法模式</font>搭配起来,<font color=orange>建造工人那个类封装一个模板方法</font>开放给老板,老板就可以直接控制这个类就可以了,那这就和工厂模式没什么两样了</p>\n</blockquote>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/6aL0UN5-20211008161857935.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬</p>\n<p>所有源代码都在这:<a href=\"https://github.com/z573419235/GofDemo\">https://github.com/z573419235/GofDemo</a></p>\n<p>各位大佬记得点个星星哦</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>建造者模式用于实例化一个比较复杂的实体类,<font color=orange>当你实例化一个类时,它的构造参数比较多时,就可以用建造者模式来简化实例化过程</font>;前几篇工厂模式的文章我们说道买车,那只是简单的区工厂买车,我们不关系工厂是怎么造出来的.可是实际工厂造一辆车需要有方向盘、发动机、车架、轮胎等部件,而且不同品牌的车的部件都是不同的,<font color=orange>部件虽然不同,但是造车的方式基本都是差不多的步骤</font>,这时候就可以用建造者模式来造一辆车了;</p>\n<p>建造者（Builder）模式由产品、抽象建造者、具体建造者、指挥者等 4 个要素构成</p>\n<h2 id=\"土豪朋友开车厂\"><a href=\"#土豪朋友开车厂\" class=\"headerlink\" title=\"土豪朋友开车厂\"></a>土豪朋友开车厂</h2><pre><code>    土豪朋友上次买了车之后,发现造车卖还挺赚钱,于是决定涉足汽车领域,真是很有商业头脑啊,不愧是我的玉树临风,疯言疯语,语速惊人,人模狗样的土豪朋友啊.\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/uLylNOc.jpg\" alt=\"图片\"></p>\n<p>一天,前去向他讨教汽车的知识,他给我讲了汽车的大致构成:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 汽车 产品类 定义汽车的构成</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 方向盘</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String steering;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发动机</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String engine;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 车架</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String frame;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 轮胎</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tire;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 展示一下汽车配置</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">show</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;steering=&#x27;&quot;</span> + steering + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, engine=&#x27;&quot;</span> + engine + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, frame=&#x27;&quot;</span> + frame + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, tire=&#x27;&quot;</span> + tire + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>果真是大致啊,忽悠我不懂车是吧,就给我讲4个东西,这谁不知道啊,哼!土豪朋友忙解释到:这不是为了通俗易懂嘛!!哈哈哈—土豪朋友尴尬而不失礼貌的笑着!</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/nG187Zz.jpg\" alt=\"图片\"></p>\n<p>算了算了,不和你计较了,你再和我讲下你们车厂的造车模式吧!!他说,一开始他造车自己累的半死,什么都要亲力亲为,后来招了两个专家,<font color=orange>一个负责宝马的制造,一个负责奔驰的制造</font>,我现在要什么车,只要指挥谁造车就好了.轻松的很;</p>\n<p>他给我介绍了一下他的两个专家:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 宝马车建造者</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BMWBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractBuild</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildEngine</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        car.setEngine(<span class=\"string\">&quot;宝马的发动机&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildSteering</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        car.setSteering(<span class=\"string\">&quot;宝马的方向盘&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildFrame</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        car.setFrame(<span class=\"string\">&quot;宝马的车架&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildTire</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        car.setTire(<span class=\"string\">&quot;宝马的轮胎&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 奔驰车建造者</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BenzBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractBuild</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildEngine</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        car.setEngine(<span class=\"string\">&quot;奔驰的发动机&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildSteering</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        car.setSteering(<span class=\"string\">&quot;奔驰的方向盘&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildFrame</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        car.setFrame(<span class=\"string\">&quot;奔驰的车架&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">buildTire</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        car.setTire(<span class=\"string\">&quot;奔驰的轮胎&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font color=orange>他们两个都遵循下面这个<code>AbstractBuild</code>汽车的建造规则:</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象建造者 定义造车的方法</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AbstractBuild</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造的产品是车</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Car car=<span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造发动机</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildEngine</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造轮胎</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildSteering</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造车架</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildFrame</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造轮胎</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">buildTire</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 得到造好的车</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">getCar</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.car;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>土豪朋友还跟我讲了是怎么指挥他们造车的:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有的建造者要听这个包工头的话,叫你造什么就造什么</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Boss</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Car <span class=\"title function_\">builderCar</span><span class=\"params\">(AbstractBuild build)</span>&#123;</span><br><span class=\"line\">        build.buildEngine();</span><br><span class=\"line\">        build.buildFrame();</span><br><span class=\"line\">        build.buildSteering();</span><br><span class=\"line\">        build.buildTire();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> build.getCar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过他这一翻显摆之后,感觉虽然长的人摸狗样的,干起事来还真是一套一套的,哈哈哈哈!!</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/hbg0zDY.jpg\" alt=\"图片\"></p>\n<p>说完,还向我展示了汽车是怎样造成的………..</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/JDX2qIc.png\" alt=\"图片\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实建造者模式和<font color=orange>工厂模式</font>还是挺像的,<font color=orange>建造者模式里的建造者就相当于工厂模式里的工厂</font>,不过建造者的核心是可以<font color=orange>控制顺序</font>,比如上面的土豪老板可以控制建造工人的建造顺序,可以控制他们是先造轮胎还是先造发动机,这才是建造者模式意义;</p>\n<blockquote>\n<p>建造者模式如果和<font color=orange>模板方法模式</font>搭配起来,<font color=orange>建造工人那个类封装一个模板方法</font>开放给老板,老板就可以直接控制这个类就可以了,那这就和工厂模式没什么两样了</p>\n</blockquote>\n"},{"title":"设计模式系列-工厂模式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-15T09:25:00.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/gof-factory-method-20211008153952229.jpg)\n\n\n> 积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬\n\n## 前言\n\n工厂模式有一下三种\n\n- 简单工厂模式\n- 工厂方法模式\n- 抽象工厂模式\n\n其中简单工厂模式不在23中模式之中，更多的是一种编程习惯，而我们平常所说的工厂模式一般指的是工厂方法模式，抽象工厂在实际的业务开发中也用的比较少，因为它有时候违背了开闭原则．由于篇幅有限，抽象工厂本文就不讲了，以后单独讲；\n\n## 简单工厂模式\n\n简单工厂到底有多简单呢？简单到只有一个工厂，这个工厂相当于是万能工厂，你想要什么，只要和它说一声，它就会想方设法的去抱你创建，然后给你；举个买车的简单的例子：\n\n当我要买车的时候，我选了这两种车．\n\n```java\n/**\n * 创建一个汽车接口\n * */\npublic interface Car {\n    /**\n     * 汽车能动\n     * */\n    void run();\n}\n```\n\n```java\n/**\n * 奔驰车\n * */\npublic class Benz implements Car {\n    @Override\n    public void run() {\n        System.out.println(\"大奔开动了\");\n    }\n}\n```\n\n```java\n/**\n * 五菱神车\n * */\npublic class Wuling implements Car {\n    @Override\n    public void run() {\n        System.out.println(\"五菱神车开动了\");\n    }\n}\n\n```\n\n选是选好了，可是要怎么得到呢？是不是下意识的<font color=orange>new</font>一个出来？\n\n```java\n//我要奔驰车\nBenz　myCar=new Benz();\n```\n\n如果是这样的话，就相当于自己亲手造了一辆奔驰车出来，因为是你自己<font color=orange>new</font>出来的嘛！！！！！\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191215162632-20211008153952135.gif)\n\n这种事情当然是交给工厂去做嘛，叫工厂去<font color=orange>new</font>就可以了，我只要交钱给工厂就可以了．诶，有钱真好！\n\n```java\n/**\n * 汽车工厂\n *\n * 静态工厂\n *\n * 简单工厂\n * */\npublic class CarFactory {\n    public static Car getCar(String type){\n        if(\"我要五菱神车\".equals(type)){\n            return new Wuling();\n        }\n        if (\"我要大奔驰\".equals(type)){\n            return new Benz();\n        }\n        return null;\n    }\n}\n```\n\n找到了这个工厂之后，我只要直接告诉它我要什么车就可以了，工厂就会帮我造好给我；\n\n```java\n/**\n * 买车\n * */\npublic class CostumerMain {\n    public static void main(String[] args) {\n        //跟车厂说一声我要五菱神车\n        Car wuling=CarFactory.getCar(\"我要五菱神车\");\n        //跟车厂说一声我要大奔驰\n        Car Benz=CarFactory.getCar(\"我要大奔驰\");\n\n        //开着五菱神车去兜兜风\n        wuling.run();\n        //开着大奔去兜兜风\n        Benz.run();\n    }\n}\n\n//五菱神车开动了\n//大奔开动了\n```\n\n这样子，买车就结束了，果然钱可以解决一切，哈哈，开个玩笑～\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191215163319-20211008153952143.jpg)\n\n## 工厂方法模式\n\n上次买了两辆车之后，白天开着大奔去街上撩妹，晚上开着五菱神车去秋名山飙车，从此走向了人生巅峰．可是好景不长，大奔开着开着就漏油了，五菱神车终于也翻车了．\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191215163907-20211008153952183.gif)\n\n找到了上次买车的工厂，准备换个低调点的劳斯莱斯．可是那家工厂竟然告诉我说他们那边还没有造过劳斯莱斯，需要改造一下工厂，然后才能生产劳斯莱斯，叫我等他们改造好之后再来买．听他们这麽说后，我心想，我这分分钟几百万上下的人，时间就是金钱．我可等不了．\n\n\n\n于是几番寻找之后，发现英国有个劳斯莱斯车场，专门来生产劳斯莱斯．于是和接待我的中介小姐姐聊了一下，发现他们的生产模式是这样的：\n\n```java\n/**\n * 他们有个汽车工厂总部，用来定义车厂该干什么\n * */\npublic interface AllCarFactory {\n    /**\n    * 生产汽车\n    */\n    Car getCar();\n}\n```\n\n```java\n/**\n*　有个汽车规则，用来定义汽车能干什么\n*/\npublic interface Car {\n    /**\n    *　汽车能跑\n    */\n    void run();\n}\n```\n\n```java\n/**\n * 劳斯莱斯汽车\n * */\npublic class RollsRoyce implements Car {\n    /**\n    * 劳斯莱斯能跑起来\n    */\n    @Override\n    public void run() {\n        System.out.println(\"劳斯莱斯开起来了！！\");\n    }\n}\n\n```\n\n```java\n/**\n * 劳斯莱斯汽车工厂\n * */\npublic class RollsRoyceFactory implements AllCarFactory {\n    /**\n    * 生产一辆劳斯莱斯\n    */\n    @Override\n    public Car getCar() {\n        return new RollsRoyce();\n    }\n}\n```\n\n找到车厂后，我毫不犹豫和接待我的小姐姐说给我来一辆，小姐姐见我这么豪爽，准备再忽悠我买几辆车，不推荐我几辆车．．．．她知道我之前买了奔驰和五菱神车,和我说他们这边还有还有五菱车厂和奔驰车厂，都是专门用来造同一种车的．于是我就去参观了一下：\n\n```java\n/**\n* 五菱神车\n*/\npublic class Wuling implements Car {\n    /**\n    * 五菱神车能飙车\n    */\n    @Override\n    public void run() {\n        System.out.println(\"五菱神车开动了\");\n    }\n}\n```\n\n```java\n/**\n * 五菱神车工厂\n * */\npublic class WulingFactory implements AllCarFactory {\n    /**\n    * 生产一辆五菱神车\n    */\n    @Override\n    public Car getCar() {\n        return new Wuling();\n    }\n}\n```\n\n再区看看奔驰车厂：\n\n```java\n/**\n* 奔驰汽车\n*/\npublic class Benz implements Car {\n    /**\n    * 奔驰汽车能跑\n    */\n    @Override\n    public void run() {\n        System.out.println(\"大奔开动了\");\n    }\n}\n```\n\n```java\n/**\n * 奔驰汽车工厂\n * */\npublic class BenzFactory implements AllCarFactory {\n    /**\n    * 生产一辆奔驰汽车\n    */\n    @Override\n    public Car getCar() {\n        return new Benz();\n    }\n}\n```\n\n看完之后，感觉还可以，于是分别到三个工厂买了三辆车，然后高高兴兴的回家了：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191215170620-20211008153952135.jpg)\n\n看看我买车的过程：\n\n```java\n/**\n * 土豪买车记\n * */\npublic class CostumerMain {\n    public static void main(String[] args) {\n        //去五菱车厂买车\n        Car wuling=new WulingFactory().getCar();\n        //去奔驰车厂买车\n        Car benz=new BenzFactory().getCar();\n        //去劳斯莱斯车厂买车\n        Car rollsRoyce=new RollsRoyceFactory().getCar();\n        \n        //开着三辆车去兜兜风\n        wuling.run();\n        benz.run();\n        rollsRoyce.run();\n    }\n}\n\n\n//五菱神车开动了\n//大奔开动了\n//劳斯莱斯开起来了！！\n```\n\n\n\n## 总结\n\n\t买完车后，小姐姐还和我说他们这样的模式生产车的话有好多好处，比如一个车厂只要负责一种车的生产和售后，这样的话，生产效率就会比较高，赚的钱自然也多，同时每个车厂还可以举行不同活动，来吸引消费者，同时，你如果哪个品牌的车出现了问题了，直接去那辆车的工厂，基本上都能帮你解决问题，毕竟<font color=orange>术业有专攻</font>，对比前一个工厂什么都造的万金油来说，深入一项技术比什么技术都懂好；\n\t\n\t不过有时候，万金油工厂也挺好的，就是一站式服务，你要什么它都有，不用到处乱跑，省心省力．所以还是要根据什么行业来执行什么模式，这样才能利益最大化；","source":"_posts/gof/gof-factory-method.md","raw":"---\ntitle: 设计模式系列-工厂模式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-15 17:25:00\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 设计模式\n- 工厂方法模式\ncategories:\n- GOF\n---\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/gof-factory-method-20211008153952229.jpg)\n\n\n> 积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬\n\n## 前言\n\n工厂模式有一下三种\n\n- 简单工厂模式\n- 工厂方法模式\n- 抽象工厂模式\n\n其中简单工厂模式不在23中模式之中，更多的是一种编程习惯，而我们平常所说的工厂模式一般指的是工厂方法模式，抽象工厂在实际的业务开发中也用的比较少，因为它有时候违背了开闭原则．由于篇幅有限，抽象工厂本文就不讲了，以后单独讲；\n\n## 简单工厂模式\n\n简单工厂到底有多简单呢？简单到只有一个工厂，这个工厂相当于是万能工厂，你想要什么，只要和它说一声，它就会想方设法的去抱你创建，然后给你；举个买车的简单的例子：\n\n当我要买车的时候，我选了这两种车．\n\n```java\n/**\n * 创建一个汽车接口\n * */\npublic interface Car {\n    /**\n     * 汽车能动\n     * */\n    void run();\n}\n```\n\n```java\n/**\n * 奔驰车\n * */\npublic class Benz implements Car {\n    @Override\n    public void run() {\n        System.out.println(\"大奔开动了\");\n    }\n}\n```\n\n```java\n/**\n * 五菱神车\n * */\npublic class Wuling implements Car {\n    @Override\n    public void run() {\n        System.out.println(\"五菱神车开动了\");\n    }\n}\n\n```\n\n选是选好了，可是要怎么得到呢？是不是下意识的<font color=orange>new</font>一个出来？\n\n```java\n//我要奔驰车\nBenz　myCar=new Benz();\n```\n\n如果是这样的话，就相当于自己亲手造了一辆奔驰车出来，因为是你自己<font color=orange>new</font>出来的嘛！！！！！\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191215162632-20211008153952135.gif)\n\n这种事情当然是交给工厂去做嘛，叫工厂去<font color=orange>new</font>就可以了，我只要交钱给工厂就可以了．诶，有钱真好！\n\n```java\n/**\n * 汽车工厂\n *\n * 静态工厂\n *\n * 简单工厂\n * */\npublic class CarFactory {\n    public static Car getCar(String type){\n        if(\"我要五菱神车\".equals(type)){\n            return new Wuling();\n        }\n        if (\"我要大奔驰\".equals(type)){\n            return new Benz();\n        }\n        return null;\n    }\n}\n```\n\n找到了这个工厂之后，我只要直接告诉它我要什么车就可以了，工厂就会帮我造好给我；\n\n```java\n/**\n * 买车\n * */\npublic class CostumerMain {\n    public static void main(String[] args) {\n        //跟车厂说一声我要五菱神车\n        Car wuling=CarFactory.getCar(\"我要五菱神车\");\n        //跟车厂说一声我要大奔驰\n        Car Benz=CarFactory.getCar(\"我要大奔驰\");\n\n        //开着五菱神车去兜兜风\n        wuling.run();\n        //开着大奔去兜兜风\n        Benz.run();\n    }\n}\n\n//五菱神车开动了\n//大奔开动了\n```\n\n这样子，买车就结束了，果然钱可以解决一切，哈哈，开个玩笑～\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191215163319-20211008153952143.jpg)\n\n## 工厂方法模式\n\n上次买了两辆车之后，白天开着大奔去街上撩妹，晚上开着五菱神车去秋名山飙车，从此走向了人生巅峰．可是好景不长，大奔开着开着就漏油了，五菱神车终于也翻车了．\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191215163907-20211008153952183.gif)\n\n找到了上次买车的工厂，准备换个低调点的劳斯莱斯．可是那家工厂竟然告诉我说他们那边还没有造过劳斯莱斯，需要改造一下工厂，然后才能生产劳斯莱斯，叫我等他们改造好之后再来买．听他们这麽说后，我心想，我这分分钟几百万上下的人，时间就是金钱．我可等不了．\n\n\n\n于是几番寻找之后，发现英国有个劳斯莱斯车场，专门来生产劳斯莱斯．于是和接待我的中介小姐姐聊了一下，发现他们的生产模式是这样的：\n\n```java\n/**\n * 他们有个汽车工厂总部，用来定义车厂该干什么\n * */\npublic interface AllCarFactory {\n    /**\n    * 生产汽车\n    */\n    Car getCar();\n}\n```\n\n```java\n/**\n*　有个汽车规则，用来定义汽车能干什么\n*/\npublic interface Car {\n    /**\n    *　汽车能跑\n    */\n    void run();\n}\n```\n\n```java\n/**\n * 劳斯莱斯汽车\n * */\npublic class RollsRoyce implements Car {\n    /**\n    * 劳斯莱斯能跑起来\n    */\n    @Override\n    public void run() {\n        System.out.println(\"劳斯莱斯开起来了！！\");\n    }\n}\n\n```\n\n```java\n/**\n * 劳斯莱斯汽车工厂\n * */\npublic class RollsRoyceFactory implements AllCarFactory {\n    /**\n    * 生产一辆劳斯莱斯\n    */\n    @Override\n    public Car getCar() {\n        return new RollsRoyce();\n    }\n}\n```\n\n找到车厂后，我毫不犹豫和接待我的小姐姐说给我来一辆，小姐姐见我这么豪爽，准备再忽悠我买几辆车，不推荐我几辆车．．．．她知道我之前买了奔驰和五菱神车,和我说他们这边还有还有五菱车厂和奔驰车厂，都是专门用来造同一种车的．于是我就去参观了一下：\n\n```java\n/**\n* 五菱神车\n*/\npublic class Wuling implements Car {\n    /**\n    * 五菱神车能飙车\n    */\n    @Override\n    public void run() {\n        System.out.println(\"五菱神车开动了\");\n    }\n}\n```\n\n```java\n/**\n * 五菱神车工厂\n * */\npublic class WulingFactory implements AllCarFactory {\n    /**\n    * 生产一辆五菱神车\n    */\n    @Override\n    public Car getCar() {\n        return new Wuling();\n    }\n}\n```\n\n再区看看奔驰车厂：\n\n```java\n/**\n* 奔驰汽车\n*/\npublic class Benz implements Car {\n    /**\n    * 奔驰汽车能跑\n    */\n    @Override\n    public void run() {\n        System.out.println(\"大奔开动了\");\n    }\n}\n```\n\n```java\n/**\n * 奔驰汽车工厂\n * */\npublic class BenzFactory implements AllCarFactory {\n    /**\n    * 生产一辆奔驰汽车\n    */\n    @Override\n    public Car getCar() {\n        return new Benz();\n    }\n}\n```\n\n看完之后，感觉还可以，于是分别到三个工厂买了三辆车，然后高高兴兴的回家了：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191215170620-20211008153952135.jpg)\n\n看看我买车的过程：\n\n```java\n/**\n * 土豪买车记\n * */\npublic class CostumerMain {\n    public static void main(String[] args) {\n        //去五菱车厂买车\n        Car wuling=new WulingFactory().getCar();\n        //去奔驰车厂买车\n        Car benz=new BenzFactory().getCar();\n        //去劳斯莱斯车厂买车\n        Car rollsRoyce=new RollsRoyceFactory().getCar();\n        \n        //开着三辆车去兜兜风\n        wuling.run();\n        benz.run();\n        rollsRoyce.run();\n    }\n}\n\n\n//五菱神车开动了\n//大奔开动了\n//劳斯莱斯开起来了！！\n```\n\n\n\n## 总结\n\n\t买完车后，小姐姐还和我说他们这样的模式生产车的话有好多好处，比如一个车厂只要负责一种车的生产和售后，这样的话，生产效率就会比较高，赚的钱自然也多，同时每个车厂还可以举行不同活动，来吸引消费者，同时，你如果哪个品牌的车出现了问题了，直接去那辆车的工厂，基本上都能帮你解决问题，毕竟<font color=orange>术业有专攻</font>，对比前一个工厂什么都造的万金油来说，深入一项技术比什么技术都懂好；\n\t\n\t不过有时候，万金油工厂也挺好的，就是一站式服务，你要什么它都有，不用到处乱跑，省心省力．所以还是要根据什么行业来执行什么模式，这样才能利益最大化；","slug":"gof/gof-factory-method","published":1,"updated":"2021-10-08T08:19:35.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6efg000hvpuc6nbz9h5v","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/gof-factory-method-20211008153952229.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>工厂模式有一下三种</p>\n<ul>\n<li>简单工厂模式</li>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n</ul>\n<p>其中简单工厂模式不在23中模式之中，更多的是一种编程习惯，而我们平常所说的工厂模式一般指的是工厂方法模式，抽象工厂在实际的业务开发中也用的比较少，因为它有时候违背了开闭原则．由于篇幅有限，抽象工厂本文就不讲了，以后单独讲；</p>\n<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><p>简单工厂到底有多简单呢？简单到只有一个工厂，这个工厂相当于是万能工厂，你想要什么，只要和它说一声，它就会想方设法的去抱你创建，然后给你；举个买车的简单的例子：</p>\n<p>当我要买车的时候，我选了这两种车．</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个汽车接口</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 汽车能动</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 奔驰车</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Benz</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;大奔开动了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 五菱神车</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Wuling</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;五菱神车开动了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>选是选好了，可是要怎么得到呢？是不是下意识的<font color=orange>new</font>一个出来？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我要奔驰车</span></span><br><span class=\"line\">Benz　myCar=<span class=\"keyword\">new</span> <span class=\"title class_\">Benz</span>();</span><br></pre></td></tr></table></figure>\n\n<p>如果是这样的话，就相当于自己亲手造了一辆奔驰车出来，因为是你自己<font color=orange>new</font>出来的嘛！！！！！</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191215162632-20211008153952135.gif\" alt=\"图片\"></p>\n<p>这种事情当然是交给工厂去做嘛，叫工厂去<font color=orange>new</font>就可以了，我只要交钱给工厂就可以了．诶，有钱真好！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 汽车工厂</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 静态工厂</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 简单工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Car <span class=\"title function_\">getCar</span><span class=\"params\">(String type)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;我要五菱神车&quot;</span>.equals(type))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Wuling</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;我要大奔驰&quot;</span>.equals(type))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Benz</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>找到了这个工厂之后，我只要直接告诉它我要什么车就可以了，工厂就会帮我造好给我；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 买车</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CostumerMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//跟车厂说一声我要五菱神车</span></span><br><span class=\"line\">        Car wuling=CarFactory.getCar(<span class=\"string\">&quot;我要五菱神车&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//跟车厂说一声我要大奔驰</span></span><br><span class=\"line\">        Car Benz=CarFactory.getCar(<span class=\"string\">&quot;我要大奔驰&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开着五菱神车去兜兜风</span></span><br><span class=\"line\">        wuling.run();</span><br><span class=\"line\">        <span class=\"comment\">//开着大奔去兜兜风</span></span><br><span class=\"line\">        Benz.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//五菱神车开动了</span></span><br><span class=\"line\"><span class=\"comment\">//大奔开动了</span></span><br></pre></td></tr></table></figure>\n\n<p>这样子，买车就结束了，果然钱可以解决一切，哈哈，开个玩笑～</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191215163319-20211008153952143.jpg\" alt=\"图片\"></p>\n<h2 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h2><p>上次买了两辆车之后，白天开着大奔去街上撩妹，晚上开着五菱神车去秋名山飙车，从此走向了人生巅峰．可是好景不长，大奔开着开着就漏油了，五菱神车终于也翻车了．</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191215163907-20211008153952183.gif\" alt=\"图片\"></p>\n<p>找到了上次买车的工厂，准备换个低调点的劳斯莱斯．可是那家工厂竟然告诉我说他们那边还没有造过劳斯莱斯，需要改造一下工厂，然后才能生产劳斯莱斯，叫我等他们改造好之后再来买．听他们这麽说后，我心想，我这分分钟几百万上下的人，时间就是金钱．我可等不了．</p>\n<p>于是几番寻找之后，发现英国有个劳斯莱斯车场，专门来生产劳斯莱斯．于是和接待我的中介小姐姐聊了一下，发现他们的生产模式是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 他们有个汽车工厂总部，用来定义车厂该干什么</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AllCarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生产汽车</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    Car <span class=\"title function_\">getCar</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*　有个汽车规则，用来定义汽车能干什么</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    *　汽车能跑</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 劳斯莱斯汽车</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RollsRoyce</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 劳斯莱斯能跑起来</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;劳斯莱斯开起来了！！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 劳斯莱斯汽车工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RollsRoyceFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AllCarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生产一辆劳斯莱斯</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">getCar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RollsRoyce</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>找到车厂后，我毫不犹豫和接待我的小姐姐说给我来一辆，小姐姐见我这么豪爽，准备再忽悠我买几辆车，不推荐我几辆车．．．．她知道我之前买了奔驰和五菱神车,和我说他们这边还有还有五菱车厂和奔驰车厂，都是专门用来造同一种车的．于是我就去参观了一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 五菱神车</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Wuling</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 五菱神车能飙车</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;五菱神车开动了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 五菱神车工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WulingFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AllCarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生产一辆五菱神车</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">getCar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Wuling</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再区看看奔驰车厂：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 奔驰汽车</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Benz</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 奔驰汽车能跑</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;大奔开动了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 奔驰汽车工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BenzFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AllCarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生产一辆奔驰汽车</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">getCar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Benz</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看完之后，感觉还可以，于是分别到三个工厂买了三辆车，然后高高兴兴的回家了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191215170620-20211008153952135.jpg\" alt=\"图片\"></p>\n<p>看看我买车的过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 土豪买车记</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CostumerMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//去五菱车厂买车</span></span><br><span class=\"line\">        Car wuling=<span class=\"keyword\">new</span> <span class=\"title class_\">WulingFactory</span>().getCar();</span><br><span class=\"line\">        <span class=\"comment\">//去奔驰车厂买车</span></span><br><span class=\"line\">        Car benz=<span class=\"keyword\">new</span> <span class=\"title class_\">BenzFactory</span>().getCar();</span><br><span class=\"line\">        <span class=\"comment\">//去劳斯莱斯车厂买车</span></span><br><span class=\"line\">        Car rollsRoyce=<span class=\"keyword\">new</span> <span class=\"title class_\">RollsRoyceFactory</span>().getCar();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//开着三辆车去兜兜风</span></span><br><span class=\"line\">        wuling.run();</span><br><span class=\"line\">        benz.run();</span><br><span class=\"line\">        rollsRoyce.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//五菱神车开动了</span></span><br><span class=\"line\"><span class=\"comment\">//大奔开动了</span></span><br><span class=\"line\"><span class=\"comment\">//劳斯莱斯开起来了！！</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><pre><code>买完车后，小姐姐还和我说他们这样的模式生产车的话有好多好处，比如一个车厂只要负责一种车的生产和售后，这样的话，生产效率就会比较高，赚的钱自然也多，同时每个车厂还可以举行不同活动，来吸引消费者，同时，你如果哪个品牌的车出现了问题了，直接去那辆车的工厂，基本上都能帮你解决问题，毕竟&lt;font color=orange&gt;术业有专攻&lt;/font&gt;，对比前一个工厂什么都造的万金油来说，深入一项技术比什么技术都懂好；\n\n不过有时候，万金油工厂也挺好的，就是一站式服务，你要什么它都有，不用到处乱跑，省心省力．所以还是要根据什么行业来执行什么模式，这样才能利益最大化；\n</code></pre>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/gof-factory-method-20211008153952229.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>工厂模式有一下三种</p>\n<ul>\n<li>简单工厂模式</li>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n</ul>\n<p>其中简单工厂模式不在23中模式之中，更多的是一种编程习惯，而我们平常所说的工厂模式一般指的是工厂方法模式，抽象工厂在实际的业务开发中也用的比较少，因为它有时候违背了开闭原则．由于篇幅有限，抽象工厂本文就不讲了，以后单独讲；</p>\n<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><p>简单工厂到底有多简单呢？简单到只有一个工厂，这个工厂相当于是万能工厂，你想要什么，只要和它说一声，它就会想方设法的去抱你创建，然后给你；举个买车的简单的例子：</p>\n<p>当我要买车的时候，我选了这两种车．</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个汽车接口</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 汽车能动</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 奔驰车</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Benz</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;大奔开动了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 五菱神车</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Wuling</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;五菱神车开动了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>选是选好了，可是要怎么得到呢？是不是下意识的<font color=orange>new</font>一个出来？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我要奔驰车</span></span><br><span class=\"line\">Benz　myCar=<span class=\"keyword\">new</span> <span class=\"title class_\">Benz</span>();</span><br></pre></td></tr></table></figure>\n\n<p>如果是这样的话，就相当于自己亲手造了一辆奔驰车出来，因为是你自己<font color=orange>new</font>出来的嘛！！！！！</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191215162632-20211008153952135.gif\" alt=\"图片\"></p>\n<p>这种事情当然是交给工厂去做嘛，叫工厂去<font color=orange>new</font>就可以了，我只要交钱给工厂就可以了．诶，有钱真好！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 汽车工厂</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 静态工厂</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 简单工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Car <span class=\"title function_\">getCar</span><span class=\"params\">(String type)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;我要五菱神车&quot;</span>.equals(type))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Wuling</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;我要大奔驰&quot;</span>.equals(type))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Benz</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>找到了这个工厂之后，我只要直接告诉它我要什么车就可以了，工厂就会帮我造好给我；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 买车</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CostumerMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//跟车厂说一声我要五菱神车</span></span><br><span class=\"line\">        Car wuling=CarFactory.getCar(<span class=\"string\">&quot;我要五菱神车&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//跟车厂说一声我要大奔驰</span></span><br><span class=\"line\">        Car Benz=CarFactory.getCar(<span class=\"string\">&quot;我要大奔驰&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开着五菱神车去兜兜风</span></span><br><span class=\"line\">        wuling.run();</span><br><span class=\"line\">        <span class=\"comment\">//开着大奔去兜兜风</span></span><br><span class=\"line\">        Benz.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//五菱神车开动了</span></span><br><span class=\"line\"><span class=\"comment\">//大奔开动了</span></span><br></pre></td></tr></table></figure>\n\n<p>这样子，买车就结束了，果然钱可以解决一切，哈哈，开个玩笑～</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191215163319-20211008153952143.jpg\" alt=\"图片\"></p>\n<h2 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h2><p>上次买了两辆车之后，白天开着大奔去街上撩妹，晚上开着五菱神车去秋名山飙车，从此走向了人生巅峰．可是好景不长，大奔开着开着就漏油了，五菱神车终于也翻车了．</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191215163907-20211008153952183.gif\" alt=\"图片\"></p>\n<p>找到了上次买车的工厂，准备换个低调点的劳斯莱斯．可是那家工厂竟然告诉我说他们那边还没有造过劳斯莱斯，需要改造一下工厂，然后才能生产劳斯莱斯，叫我等他们改造好之后再来买．听他们这麽说后，我心想，我这分分钟几百万上下的人，时间就是金钱．我可等不了．</p>\n<p>于是几番寻找之后，发现英国有个劳斯莱斯车场，专门来生产劳斯莱斯．于是和接待我的中介小姐姐聊了一下，发现他们的生产模式是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 他们有个汽车工厂总部，用来定义车厂该干什么</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">AllCarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生产汽车</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    Car <span class=\"title function_\">getCar</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*　有个汽车规则，用来定义汽车能干什么</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    *　汽车能跑</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 劳斯莱斯汽车</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RollsRoyce</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 劳斯莱斯能跑起来</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;劳斯莱斯开起来了！！&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 劳斯莱斯汽车工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RollsRoyceFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AllCarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生产一辆劳斯莱斯</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">getCar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RollsRoyce</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>找到车厂后，我毫不犹豫和接待我的小姐姐说给我来一辆，小姐姐见我这么豪爽，准备再忽悠我买几辆车，不推荐我几辆车．．．．她知道我之前买了奔驰和五菱神车,和我说他们这边还有还有五菱车厂和奔驰车厂，都是专门用来造同一种车的．于是我就去参观了一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 五菱神车</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Wuling</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 五菱神车能飙车</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;五菱神车开动了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 五菱神车工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WulingFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AllCarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生产一辆五菱神车</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">getCar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Wuling</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再区看看奔驰车厂：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 奔驰汽车</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Benz</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Car</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 奔驰汽车能跑</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;大奔开动了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 奔驰汽车工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BenzFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AllCarFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生产一辆奔驰汽车</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Car <span class=\"title function_\">getCar</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Benz</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看完之后，感觉还可以，于是分别到三个工厂买了三辆车，然后高高兴兴的回家了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191215170620-20211008153952135.jpg\" alt=\"图片\"></p>\n<p>看看我买车的过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 土豪买车记</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CostumerMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//去五菱车厂买车</span></span><br><span class=\"line\">        Car wuling=<span class=\"keyword\">new</span> <span class=\"title class_\">WulingFactory</span>().getCar();</span><br><span class=\"line\">        <span class=\"comment\">//去奔驰车厂买车</span></span><br><span class=\"line\">        Car benz=<span class=\"keyword\">new</span> <span class=\"title class_\">BenzFactory</span>().getCar();</span><br><span class=\"line\">        <span class=\"comment\">//去劳斯莱斯车厂买车</span></span><br><span class=\"line\">        Car rollsRoyce=<span class=\"keyword\">new</span> <span class=\"title class_\">RollsRoyceFactory</span>().getCar();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//开着三辆车去兜兜风</span></span><br><span class=\"line\">        wuling.run();</span><br><span class=\"line\">        benz.run();</span><br><span class=\"line\">        rollsRoyce.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//五菱神车开动了</span></span><br><span class=\"line\"><span class=\"comment\">//大奔开动了</span></span><br><span class=\"line\"><span class=\"comment\">//劳斯莱斯开起来了！！</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><pre><code>买完车后，小姐姐还和我说他们这样的模式生产车的话有好多好处，比如一个车厂只要负责一种车的生产和售后，这样的话，生产效率就会比较高，赚的钱自然也多，同时每个车厂还可以举行不同活动，来吸引消费者，同时，你如果哪个品牌的车出现了问题了，直接去那辆车的工厂，基本上都能帮你解决问题，毕竟&lt;font color=orange&gt;术业有专攻&lt;/font&gt;，对比前一个工厂什么都造的万金油来说，深入一项技术比什么技术都懂好；\n\n不过有时候，万金油工厂也挺好的，就是一站式服务，你要什么它都有，不用到处乱跑，省心省力．所以还是要根据什么行业来执行什么模式，这样才能利益最大化；\n</code></pre>\n"},{"title":"OOP程序七大原则","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-15T02:45:04.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/autumn-4656877_1920.png)\n\n\n\n## 开闭原则\n\n开闭原则相当于所有原则的祖先，主张对修改关闭，对拓展开放．\n\n\n\n## 里氏替换原则\n\n<font color=orange>当两个类有继承关系时，子类不能修改父类的方法和变量.  </font>里氏替换中的<font color=orange>替换</font>指的是：当有父类出现的地方，这个父类可以<font color=orange>替换</font>成子类，而且对程序没有影响，这就遵循了里氏替换原则；当替换成子类时对程序有影响，说明子类修改了父类的方法，就没有遵循里氏替换原则了；\n\n## 依赖倒置原则\n\n依赖倒置原则是对开闭原则的一个实现，也是主张对拓展开放，对修改关闭．它的核心思想是<font color=orange>面对接口编程，不要面对具体实现编程</font>．\n\n![来自C语言中文网](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/3-1Q113131610L7.gif)\n\n这是一个遵守依赖倒置原则的UML图，原来的话当客户购买商品时,shopping这个方法要传入相应的网店进去，当要更改店铺时，就要修改Cusromer这个类里的shopping方法，而现在，只要定义一个Shop接口，所有的店铺都实现这个接口的方法，顾客类的shopping方法只要传入Shop这个接口类就可以了．然后具体实现的时候，要到哪里买，就传入哪一个网店就可以了，而不用修改Cusromer这个类的方法；\n\n```java\n//代码来之＇C语言中文网＇\npublic class DIPtest\n{\n    public static void main(String[] args)\n    {\n        Customer wang=new Customer();\n        System.out.println(\"顾客购买以下商品：\"); \n        wang.shopping(new ShaoguanShop()); \n        wang.shopping(new WuyuanShop());\n    }\n}\n//商店\ninterface Shop\n{\n    public String sell(); //卖\n}\n//韶关网店\nclass ShaoguanShop implements Shop\n{\n    public String sell()\n    {\n        return \"韶关土特产：香菇、木耳……\"; \n    } \n}\n//婺源网店\nclass WuyuanShop implements Shop\n{\n    public String sell()\n    {\n        return \"婺源土特产：绿茶、酒糟鱼……\"; \n    }\n} \n//顾客\nclass Customer\n{\n    public void shopping(Shop shop)\n    {\n        //购物\n        System.out.println(shop.sell()); \n    }\n}\n\n//输出\n顾客购买以下商品：\n韶关土特产：香菇、木耳……\n婺源土特产：绿茶、酒糟鱼……\n```\n\n## 单一职责\n\n<font color=orange>单一职责要求一个类只负责一项职责.  </font>这个听起来很简单，但是实际应用上却非常的难把握．因为这个职责在中国是非常抽象的概念，中国是一个文化底蕴非常丰富的国家，就像<<设计模式之禅>> 这本书里所说的例子：比如说中国的筷子，他既可以当刀来分割食物，也可以当叉子来叉取食物，而在国外，叉子就是叉子，用来取食物的，刀就是用来分割食物的；所以这个单一职责要求软件开发人员有非常丰富的实践经验．不然很难把握；\n\n## 迪米特法则\n\n<font color=orange>迪米特法则也称最小知道原则，一个类对外暴露的东西越少越好．</font>\n\n1. 从依赖者的角度来说，只依赖应该依赖的对象。\n2. 从被依赖者的角度说，只暴露应该暴露的方法。\n\n个人理解：当A类需要调用B类的三个方法才能实现的功能时,B类可以对这三个方法进行一个封装，然后只暴露封装的这个方法给A,这样A就只需要调用B的这个封装的方法就可以了，当B的三个方法中有修改的时候，只要修改B这个对外封装的方法就可以，而Ａ调用者却不用改变，因为Ａ只知道调用这个方法可以实现功能，而不用具体管Ｂ内部是怎么实现的，降低了程序的耦合度；\n\n## 接口隔离原则\n\n这个和单一职责有点类似，不过还是不一样的．\n\n- 单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。\n- 单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。\n\n官方定义：<font color=orange>要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法，降低程序耦合度。</font>\n\n这个法则也要根据实际的业务场景来应用，如果粒度控制的太小，就会导致类的急剧增加，明明一个功能只要三四个类，如果粒度小的话，就会变成十几个，甚至几十个，虽然这样程序耦合度低，比较灵活，但是维护难啊．如果粒度大，耦合度就会高，程序不灵活．所以这个原则要求技术人员有足够的实践，经验和领悟；\n\n## 合成复用原则\n\n它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。如果要使用继承关系，则必须严格遵循<font color=orange>里氏替换原则</font>。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。\n\n如果不了解什么是组合和聚合的话可以看看这个篇文章[<<组合、聚合与继承的爱恨情仇>>](https://blog.csdn.net/qq_31655965/article/details/54645220),讲的挺好的\n\n\n\n## 总结\n\n在程序设计中，尽量遵循OOP七大原则．不过有句话说的好，<font color=orange>规则是死的，人是活的</font>．意思是这七大原则有时候也不是万能的，有时候有的业务场景如果遵循了这些原则，反而变得难维护，所以一切都要从实际出发，23种设计模式也是一样，不要按死规则来．","source":"_posts/gof/gof-oop-7-all.md","raw":"---\ntitle: OOP程序七大原则\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-15 10:45:04\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- GOF\n- OOP\ncategories:\n- GOF\n---\n\n\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/autumn-4656877_1920.png)\n\n\n\n## 开闭原则\n\n开闭原则相当于所有原则的祖先，主张对修改关闭，对拓展开放．\n\n\n\n## 里氏替换原则\n\n<font color=orange>当两个类有继承关系时，子类不能修改父类的方法和变量.  </font>里氏替换中的<font color=orange>替换</font>指的是：当有父类出现的地方，这个父类可以<font color=orange>替换</font>成子类，而且对程序没有影响，这就遵循了里氏替换原则；当替换成子类时对程序有影响，说明子类修改了父类的方法，就没有遵循里氏替换原则了；\n\n## 依赖倒置原则\n\n依赖倒置原则是对开闭原则的一个实现，也是主张对拓展开放，对修改关闭．它的核心思想是<font color=orange>面对接口编程，不要面对具体实现编程</font>．\n\n![来自C语言中文网](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/3-1Q113131610L7.gif)\n\n这是一个遵守依赖倒置原则的UML图，原来的话当客户购买商品时,shopping这个方法要传入相应的网店进去，当要更改店铺时，就要修改Cusromer这个类里的shopping方法，而现在，只要定义一个Shop接口，所有的店铺都实现这个接口的方法，顾客类的shopping方法只要传入Shop这个接口类就可以了．然后具体实现的时候，要到哪里买，就传入哪一个网店就可以了，而不用修改Cusromer这个类的方法；\n\n```java\n//代码来之＇C语言中文网＇\npublic class DIPtest\n{\n    public static void main(String[] args)\n    {\n        Customer wang=new Customer();\n        System.out.println(\"顾客购买以下商品：\"); \n        wang.shopping(new ShaoguanShop()); \n        wang.shopping(new WuyuanShop());\n    }\n}\n//商店\ninterface Shop\n{\n    public String sell(); //卖\n}\n//韶关网店\nclass ShaoguanShop implements Shop\n{\n    public String sell()\n    {\n        return \"韶关土特产：香菇、木耳……\"; \n    } \n}\n//婺源网店\nclass WuyuanShop implements Shop\n{\n    public String sell()\n    {\n        return \"婺源土特产：绿茶、酒糟鱼……\"; \n    }\n} \n//顾客\nclass Customer\n{\n    public void shopping(Shop shop)\n    {\n        //购物\n        System.out.println(shop.sell()); \n    }\n}\n\n//输出\n顾客购买以下商品：\n韶关土特产：香菇、木耳……\n婺源土特产：绿茶、酒糟鱼……\n```\n\n## 单一职责\n\n<font color=orange>单一职责要求一个类只负责一项职责.  </font>这个听起来很简单，但是实际应用上却非常的难把握．因为这个职责在中国是非常抽象的概念，中国是一个文化底蕴非常丰富的国家，就像<<设计模式之禅>> 这本书里所说的例子：比如说中国的筷子，他既可以当刀来分割食物，也可以当叉子来叉取食物，而在国外，叉子就是叉子，用来取食物的，刀就是用来分割食物的；所以这个单一职责要求软件开发人员有非常丰富的实践经验．不然很难把握；\n\n## 迪米特法则\n\n<font color=orange>迪米特法则也称最小知道原则，一个类对外暴露的东西越少越好．</font>\n\n1. 从依赖者的角度来说，只依赖应该依赖的对象。\n2. 从被依赖者的角度说，只暴露应该暴露的方法。\n\n个人理解：当A类需要调用B类的三个方法才能实现的功能时,B类可以对这三个方法进行一个封装，然后只暴露封装的这个方法给A,这样A就只需要调用B的这个封装的方法就可以了，当B的三个方法中有修改的时候，只要修改B这个对外封装的方法就可以，而Ａ调用者却不用改变，因为Ａ只知道调用这个方法可以实现功能，而不用具体管Ｂ内部是怎么实现的，降低了程序的耦合度；\n\n## 接口隔离原则\n\n这个和单一职责有点类似，不过还是不一样的．\n\n- 单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。\n- 单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。\n\n官方定义：<font color=orange>要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法，降低程序耦合度。</font>\n\n这个法则也要根据实际的业务场景来应用，如果粒度控制的太小，就会导致类的急剧增加，明明一个功能只要三四个类，如果粒度小的话，就会变成十几个，甚至几十个，虽然这样程序耦合度低，比较灵活，但是维护难啊．如果粒度大，耦合度就会高，程序不灵活．所以这个原则要求技术人员有足够的实践，经验和领悟；\n\n## 合成复用原则\n\n它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。如果要使用继承关系，则必须严格遵循<font color=orange>里氏替换原则</font>。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。\n\n如果不了解什么是组合和聚合的话可以看看这个篇文章[<<组合、聚合与继承的爱恨情仇>>](https://blog.csdn.net/qq_31655965/article/details/54645220),讲的挺好的\n\n\n\n## 总结\n\n在程序设计中，尽量遵循OOP七大原则．不过有句话说的好，<font color=orange>规则是死的，人是活的</font>．意思是这七大原则有时候也不是万能的，有时候有的业务场景如果遵循了这些原则，反而变得难维护，所以一切都要从实际出发，23种设计模式也是一样，不要按死规则来．","slug":"gof/gof-oop-7-all","published":1,"updated":"2021-10-08T08:19:51.644Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6efj000mvpuc8ef28v58","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/autumn-4656877_1920.png\" alt=\"图片\"></p>\n<h2 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h2><p>开闭原则相当于所有原则的祖先，主张对修改关闭，对拓展开放．</p>\n<h2 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h2><p><font color=orange>当两个类有继承关系时，子类不能修改父类的方法和变量.  </font>里氏替换中的<font color=orange>替换</font>指的是：当有父类出现的地方，这个父类可以<font color=orange>替换</font>成子类，而且对程序没有影响，这就遵循了里氏替换原则；当替换成子类时对程序有影响，说明子类修改了父类的方法，就没有遵循里氏替换原则了；</p>\n<h2 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h2><p>依赖倒置原则是对开闭原则的一个实现，也是主张对拓展开放，对修改关闭．它的核心思想是<font color=orange>面对接口编程，不要面对具体实现编程</font>．</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/3-1Q113131610L7.gif\" alt=\"来自C语言中文网\"></p>\n<p>这是一个遵守依赖倒置原则的UML图，原来的话当客户购买商品时,shopping这个方法要传入相应的网店进去，当要更改店铺时，就要修改Cusromer这个类里的shopping方法，而现在，只要定义一个Shop接口，所有的店铺都实现这个接口的方法，顾客类的shopping方法只要传入Shop这个接口类就可以了．然后具体实现的时候，要到哪里买，就传入哪一个网店就可以了，而不用修改Cusromer这个类的方法；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码来之＇C语言中文网＇</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DIPtest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Customer wang=<span class=\"keyword\">new</span> <span class=\"title class_\">Customer</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;顾客购买以下商品：&quot;</span>); </span><br><span class=\"line\">        wang.shopping(<span class=\"keyword\">new</span> <span class=\"title class_\">ShaoguanShop</span>()); </span><br><span class=\"line\">        wang.shopping(<span class=\"keyword\">new</span> <span class=\"title class_\">WuyuanShop</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//商店</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Shop</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">sell</span><span class=\"params\">()</span>; <span class=\"comment\">//卖</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//韶关网店</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ShaoguanShop</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Shop</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">sell</span><span class=\"params\">()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;韶关土特产：香菇、木耳……&quot;</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//婺源网店</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WuyuanShop</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Shop</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">sell</span><span class=\"params\">()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;婺源土特产：绿茶、酒糟鱼……&quot;</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//顾客</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Customer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shopping</span><span class=\"params\">(Shop shop)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//购物</span></span><br><span class=\"line\">        System.out.println(shop.sell()); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">顾客购买以下商品：</span><br><span class=\"line\">韶关土特产：香菇、木耳……</span><br><span class=\"line\">婺源土特产：绿茶、酒糟鱼……</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"单一职责\"><a href=\"#单一职责\" class=\"headerlink\" title=\"单一职责\"></a>单一职责</h2><p><font color=orange>单一职责要求一个类只负责一项职责.  </font>这个听起来很简单，但是实际应用上却非常的难把握．因为这个职责在中国是非常抽象的概念，中国是一个文化底蕴非常丰富的国家，就像&lt;&lt;设计模式之禅&gt;&gt; 这本书里所说的例子：比如说中国的筷子，他既可以当刀来分割食物，也可以当叉子来叉取食物，而在国外，叉子就是叉子，用来取食物的，刀就是用来分割食物的；所以这个单一职责要求软件开发人员有非常丰富的实践经验．不然很难把握；</p>\n<h2 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h2><p><font color=orange>迪米特法则也称最小知道原则，一个类对外暴露的东西越少越好．</font></p>\n<ol>\n<li>从依赖者的角度来说，只依赖应该依赖的对象。</li>\n<li>从被依赖者的角度说，只暴露应该暴露的方法。</li>\n</ol>\n<p>个人理解：当A类需要调用B类的三个方法才能实现的功能时,B类可以对这三个方法进行一个封装，然后只暴露封装的这个方法给A,这样A就只需要调用B的这个封装的方法就可以了，当B的三个方法中有修改的时候，只要修改B这个对外封装的方法就可以，而Ａ调用者却不用改变，因为Ａ只知道调用这个方法可以实现功能，而不用具体管Ｂ内部是怎么实现的，降低了程序的耦合度；</p>\n<h2 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h2><p>这个和单一职责有点类似，不过还是不一样的．</p>\n<ul>\n<li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。</li>\n<li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。</li>\n</ul>\n<p>官方定义：<font color=orange>要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法，降低程序耦合度。</font></p>\n<p>这个法则也要根据实际的业务场景来应用，如果粒度控制的太小，就会导致类的急剧增加，明明一个功能只要三四个类，如果粒度小的话，就会变成十几个，甚至几十个，虽然这样程序耦合度低，比较灵活，但是维护难啊．如果粒度大，耦合度就会高，程序不灵活．所以这个原则要求技术人员有足够的实践，经验和领悟；</p>\n<h2 id=\"合成复用原则\"><a href=\"#合成复用原则\" class=\"headerlink\" title=\"合成复用原则\"></a>合成复用原则</h2><p>它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。如果要使用继承关系，则必须严格遵循<font color=orange>里氏替换原则</font>。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。</p>\n<p>如果不了解什么是组合和聚合的话可以看看这个篇文章<a href=\"https://blog.csdn.net/qq_31655965/article/details/54645220\">&lt;&lt;组合、聚合与继承的爱恨情仇&gt;&gt;</a>,讲的挺好的</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在程序设计中，尽量遵循OOP七大原则．不过有句话说的好，<font color=orange>规则是死的，人是活的</font>．意思是这七大原则有时候也不是万能的，有时候有的业务场景如果遵循了这些原则，反而变得难维护，所以一切都要从实际出发，23种设计模式也是一样，不要按死规则来．</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/autumn-4656877_1920.png\" alt=\"图片\"></p>\n<h2 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h2><p>开闭原则相当于所有原则的祖先，主张对修改关闭，对拓展开放．</p>\n<h2 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h2><p><font color=orange>当两个类有继承关系时，子类不能修改父类的方法和变量.  </font>里氏替换中的<font color=orange>替换</font>指的是：当有父类出现的地方，这个父类可以<font color=orange>替换</font>成子类，而且对程序没有影响，这就遵循了里氏替换原则；当替换成子类时对程序有影响，说明子类修改了父类的方法，就没有遵循里氏替换原则了；</p>\n<h2 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h2><p>依赖倒置原则是对开闭原则的一个实现，也是主张对拓展开放，对修改关闭．它的核心思想是<font color=orange>面对接口编程，不要面对具体实现编程</font>．</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/3-1Q113131610L7.gif\" alt=\"来自C语言中文网\"></p>\n<p>这是一个遵守依赖倒置原则的UML图，原来的话当客户购买商品时,shopping这个方法要传入相应的网店进去，当要更改店铺时，就要修改Cusromer这个类里的shopping方法，而现在，只要定义一个Shop接口，所有的店铺都实现这个接口的方法，顾客类的shopping方法只要传入Shop这个接口类就可以了．然后具体实现的时候，要到哪里买，就传入哪一个网店就可以了，而不用修改Cusromer这个类的方法；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码来之＇C语言中文网＇</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DIPtest</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Customer wang=<span class=\"keyword\">new</span> <span class=\"title class_\">Customer</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;顾客购买以下商品：&quot;</span>); </span><br><span class=\"line\">        wang.shopping(<span class=\"keyword\">new</span> <span class=\"title class_\">ShaoguanShop</span>()); </span><br><span class=\"line\">        wang.shopping(<span class=\"keyword\">new</span> <span class=\"title class_\">WuyuanShop</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//商店</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Shop</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">sell</span><span class=\"params\">()</span>; <span class=\"comment\">//卖</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//韶关网店</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ShaoguanShop</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Shop</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">sell</span><span class=\"params\">()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;韶关土特产：香菇、木耳……&quot;</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//婺源网店</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">WuyuanShop</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Shop</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">sell</span><span class=\"params\">()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;婺源土特产：绿茶、酒糟鱼……&quot;</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//顾客</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Customer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">shopping</span><span class=\"params\">(Shop shop)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//购物</span></span><br><span class=\"line\">        System.out.println(shop.sell()); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">顾客购买以下商品：</span><br><span class=\"line\">韶关土特产：香菇、木耳……</span><br><span class=\"line\">婺源土特产：绿茶、酒糟鱼……</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"单一职责\"><a href=\"#单一职责\" class=\"headerlink\" title=\"单一职责\"></a>单一职责</h2><p><font color=orange>单一职责要求一个类只负责一项职责.  </font>这个听起来很简单，但是实际应用上却非常的难把握．因为这个职责在中国是非常抽象的概念，中国是一个文化底蕴非常丰富的国家，就像&lt;&lt;设计模式之禅&gt;&gt; 这本书里所说的例子：比如说中国的筷子，他既可以当刀来分割食物，也可以当叉子来叉取食物，而在国外，叉子就是叉子，用来取食物的，刀就是用来分割食物的；所以这个单一职责要求软件开发人员有非常丰富的实践经验．不然很难把握；</p>\n<h2 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h2><p><font color=orange>迪米特法则也称最小知道原则，一个类对外暴露的东西越少越好．</font></p>\n<ol>\n<li>从依赖者的角度来说，只依赖应该依赖的对象。</li>\n<li>从被依赖者的角度说，只暴露应该暴露的方法。</li>\n</ol>\n<p>个人理解：当A类需要调用B类的三个方法才能实现的功能时,B类可以对这三个方法进行一个封装，然后只暴露封装的这个方法给A,这样A就只需要调用B的这个封装的方法就可以了，当B的三个方法中有修改的时候，只要修改B这个对外封装的方法就可以，而Ａ调用者却不用改变，因为Ａ只知道调用这个方法可以实现功能，而不用具体管Ｂ内部是怎么实现的，降低了程序的耦合度；</p>\n<h2 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h2><p>这个和单一职责有点类似，不过还是不一样的．</p>\n<ul>\n<li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。</li>\n<li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。</li>\n</ul>\n<p>官方定义：<font color=orange>要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法，降低程序耦合度。</font></p>\n<p>这个法则也要根据实际的业务场景来应用，如果粒度控制的太小，就会导致类的急剧增加，明明一个功能只要三四个类，如果粒度小的话，就会变成十几个，甚至几十个，虽然这样程序耦合度低，比较灵活，但是维护难啊．如果粒度大，耦合度就会高，程序不灵活．所以这个原则要求技术人员有足够的实践，经验和领悟；</p>\n<h2 id=\"合成复用原则\"><a href=\"#合成复用原则\" class=\"headerlink\" title=\"合成复用原则\"></a>合成复用原则</h2><p>它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。如果要使用继承关系，则必须严格遵循<font color=orange>里氏替换原则</font>。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。</p>\n<p>如果不了解什么是组合和聚合的话可以看看这个篇文章<a href=\"https://blog.csdn.net/qq_31655965/article/details/54645220\">&lt;&lt;组合、聚合与继承的爱恨情仇&gt;&gt;</a>,讲的挺好的</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在程序设计中，尽量遵循OOP七大原则．不过有句话说的好，<font color=orange>规则是死的，人是活的</font>．意思是这七大原则有时候也不是万能的，有时候有的业务场景如果遵循了这些原则，反而变得难维护，所以一切都要从实际出发，23种设计模式也是一样，不要按死规则来．</p>\n"},{"title":"一个故事一个模式-原型模式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-25T15:34:48.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191226084321.jpg)\n\n> 积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬\n>\n> 所有源代码都在这:https://github.com/z573419235/GofDemo\n>\n> 各位大佬记得点个星星哦\n\n## 前言\n\n        前几天生病了,每天头昏脑胀的,诶,生病的时候才知道身体健康的重要性,以后还是要加强锻炼,身体是革命的本钱;\n    \n        隔了差不多有五六天没写日志了,罪过罪过;好了,今天要说的是原型模式,原型模式在`Java`中核心秘密就是`clone`这个方法,通过重新`Object`中的`clone`方法.来达到原型模式;而要重新`clone`方法就必须要实现`Cloneable`这个接口,不实现这个接口的话就会报`java.lang.CloneNotSupportedException`异常;\n\n\n\n\n\n## 我是鸣人\n\n        鸣人最喜欢的就是吃拉面,就算是上课的时候也是心心念念的想着一乐大叔的拉面\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191225222050.gif)\n\n先来看看鸣人的原型实体类:\n\n```java\n/**\n * @author zheng\n *\n * 我是鸣人实体类\n */\n@Data\npublic class Naruto implements Cloneable{\n    /**\n     * 姓名\n     * */\n    private String name=\"鸣人\";\n    /**\n     * 年龄\n     * */\n    private int age=13;\n    /**\n     * 任务\n     * */\n    private String task;\n    /**\n     *爱好\n     * */\n    private ArrayList<String> hobby=new ArrayList<>();\n    /**\n     * 构造方法\n     * */\n    public Naruto(){\n        this.hobby.add(\"吃拉面\");\n        this.hobby.add(\"泡温泉\");\n    }\n\n    /**\n     * 重写Object类的clone方法\n     * */\n    @Override\n    public Naruto clone(){\n        Naruto naruto=null;\n        try {\n            naruto=(Naruto)super.clone();\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        return naruto;\n    }\n\n    @Override\n    public String toString() {\n        return \"Naruto{\" +\n                \"name='\" + name + '\\'' +\n                \", age='\" + age + '\\'' +\n                \", task='\" + task + '\\'' +\n                \", hobby=\" + hobby +\n                '}';\n    }\n}\n```\n\n> 为了代码整洁,我安装了lombok插件,所以不用写get/set方法,直接加个`@Data`注解就可以了;\n\n\n\n一天,鸣人上着伊鲁卡老师的课,可是心里还是念念不忘一乐大叔的拉面,想着前几天刚学了影分身之术,想着用分身术逃出去吃拉面.于是他就有变了一个分身留着这上课,自己却跑去吃拉面了;\n\n```java\n/**\n * 原型模式\n * @author zheng\n * */\npublic class Main {\n    public static void main(String[] args) {\n        //我是鸣人本人\n        Naruto naruto=new Naruto();\n        //我是影分身\n        Naruto narutoYin=naruto.clone();\n\n        narutoYin.setTask(\"上课\");\n        naruto.setTask(\"吃拉面\");\n\n        System.out.println(\"鸣人本人:\"+naruto.toString());\n        System.out.println(\"影分身:\"+narutoYin.toString());\n\n    }\n}\n\n//控制台输出\n鸣人本人:Naruto{name='鸣人', age='13', task='吃拉面', hobby=[吃拉面, 泡温泉]}\n影分身:Naruto{name='鸣人', age='13', task='上课', hobby=[吃拉面, 泡温泉]}\n```\n\n可以看到,鸣人本人的任务是去<font color=orange>吃拉面</font>,他的影分身的任务是留着教室<font color=orange>上课</font>;当然鸣人可以通过他本人创建无数个影分身,同时执行多个任务;这就是<font color=orange>原型模式</font>;\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191225222314.gif)\n\n## 浅拷贝和深拷贝\n\n原型模式就是通过一个原型clone出多个和原型一样的类,但是拷贝也分<font color=orange>浅拷贝</font>和<font color=orange>深拷贝</font>;\n\n### 浅拷贝\n\n> 浅拷贝有多浅,浅到就相当于没有给你拷贝,他就是让你<font color=orange>和原型共用一个空间,没有给你分配新的内存</font>;\n\n比如上面的鸣人本人有爱好,但是隐分身一般是没有爱好的,所以创建隐分身要吧爱好给清除调:\n\n```java\n/**\n * 原型模式\n * @author zheng\n * */\npublic class Main {\n    public static void main(String[] args) {\n        //我是鸣人本人\n        Naruto naruto=new Naruto();\n        //我是影分身\n        Naruto narutoYin=naruto.clone();\n\n        narutoYin.setTask(\"上课\");\n        //影分身不配有爱好\n        narutoYin.getHobby().clear();\n        naruto.setTask(\"吃拉面\");\n\n        System.out.println(\"鸣人本人:\"+naruto.toString());\n        System.out.println(\"影分身:\"+narutoYin.toString());\n\n    }\n}\n//控制台输出\n鸣人本人:Naruto{name='鸣人', age='13', task='吃拉面', hobby=[]}\n影分身:Naruto{name='鸣人', age='13', task='上课', hobby=[]}\n```\n\nWTF,竟然把本人的爱好也清除调了,那还去吃啥拉面啊,算了算了,安安心心上课吧,诶;叫你上影分身课是时候不认真,失败了吧!!!\n\n### 深拷贝\n\n> 深拷贝就是在`clone`方法里除了克隆类之外,还要克隆引用对象,这样才会重新给引用对象<font color=orange>分配新的内存空间</font>\n\n进过上次的教训,鸣人苦练影分身之术,终于学得核心所在,看看他新的影分身技能吧:\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191225220944.png)\n\n在变一个看看:\n\n```java\n/**\n * 原型模式\n * @author zheng\n * */\npublic class Main {\n    public static void main(String[] args) {\n        //我是鸣人本人\n        Naruto naruto=new Naruto();\n        //我是影分身\n        Naruto narutoYin=naruto.clone();\n\n        narutoYin.setTask(\"上课\");\n        //影分身不配有爱好\n        narutoYin.getHobby().clear();\n        naruto.setTask(\"吃拉面\");\n\n        System.out.println(\"鸣人本人:\"+naruto.toString());\n        System.out.println(\"影分身:\"+narutoYin.toString());\n\n    }\n}\n//控制台输出\n鸣人本人:Naruto{name='鸣人', age='13', task='吃拉面', hobby=[吃拉面, 泡温泉]}\n影分身:Naruto{name='鸣人', age='13', task='上课', hobby=[]}\n```\n\n哈哈,成功了,这下可以安安心心的区吃拉面了吧;\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191225222402-20211008162003582.gif)\n\n## 总结\n\n        引用设计模式之禅的一句话:内部的数组和引用对象才不拷贝，其他的原始类型比如`int`、`long`、`char`等都会被拷贝，但是对于`String`类型，`Java`就希望你把它认为是基本类型，它是没有clone方法的，处理机制也比较特殊，通过字符串池（stringpool）在需要的时候才在内存中创建新的字符串，在使用的时候就把`String`当做基本类使用即可。注意:<font color=orange>使用clone方法，在类的成员变量上就不要增加final关键字,否则当你重新设置这个成员变量的值时是不能设置的,因为final的不可变的,只能引用原来的值</font>","source":"_posts/gof/gof-prototype.md","raw":"---\ntitle: 一个故事一个模式-原型模式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-25 23:34:48\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 设计模式\n- 原型模式\ncategories:\n- GOF\n---\n\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191226084321.jpg)\n\n> 积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬\n>\n> 所有源代码都在这:https://github.com/z573419235/GofDemo\n>\n> 各位大佬记得点个星星哦\n\n## 前言\n\n        前几天生病了,每天头昏脑胀的,诶,生病的时候才知道身体健康的重要性,以后还是要加强锻炼,身体是革命的本钱;\n    \n        隔了差不多有五六天没写日志了,罪过罪过;好了,今天要说的是原型模式,原型模式在`Java`中核心秘密就是`clone`这个方法,通过重新`Object`中的`clone`方法.来达到原型模式;而要重新`clone`方法就必须要实现`Cloneable`这个接口,不实现这个接口的话就会报`java.lang.CloneNotSupportedException`异常;\n\n\n\n\n\n## 我是鸣人\n\n        鸣人最喜欢的就是吃拉面,就算是上课的时候也是心心念念的想着一乐大叔的拉面\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191225222050.gif)\n\n先来看看鸣人的原型实体类:\n\n```java\n/**\n * @author zheng\n *\n * 我是鸣人实体类\n */\n@Data\npublic class Naruto implements Cloneable{\n    /**\n     * 姓名\n     * */\n    private String name=\"鸣人\";\n    /**\n     * 年龄\n     * */\n    private int age=13;\n    /**\n     * 任务\n     * */\n    private String task;\n    /**\n     *爱好\n     * */\n    private ArrayList<String> hobby=new ArrayList<>();\n    /**\n     * 构造方法\n     * */\n    public Naruto(){\n        this.hobby.add(\"吃拉面\");\n        this.hobby.add(\"泡温泉\");\n    }\n\n    /**\n     * 重写Object类的clone方法\n     * */\n    @Override\n    public Naruto clone(){\n        Naruto naruto=null;\n        try {\n            naruto=(Naruto)super.clone();\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        return naruto;\n    }\n\n    @Override\n    public String toString() {\n        return \"Naruto{\" +\n                \"name='\" + name + '\\'' +\n                \", age='\" + age + '\\'' +\n                \", task='\" + task + '\\'' +\n                \", hobby=\" + hobby +\n                '}';\n    }\n}\n```\n\n> 为了代码整洁,我安装了lombok插件,所以不用写get/set方法,直接加个`@Data`注解就可以了;\n\n\n\n一天,鸣人上着伊鲁卡老师的课,可是心里还是念念不忘一乐大叔的拉面,想着前几天刚学了影分身之术,想着用分身术逃出去吃拉面.于是他就有变了一个分身留着这上课,自己却跑去吃拉面了;\n\n```java\n/**\n * 原型模式\n * @author zheng\n * */\npublic class Main {\n    public static void main(String[] args) {\n        //我是鸣人本人\n        Naruto naruto=new Naruto();\n        //我是影分身\n        Naruto narutoYin=naruto.clone();\n\n        narutoYin.setTask(\"上课\");\n        naruto.setTask(\"吃拉面\");\n\n        System.out.println(\"鸣人本人:\"+naruto.toString());\n        System.out.println(\"影分身:\"+narutoYin.toString());\n\n    }\n}\n\n//控制台输出\n鸣人本人:Naruto{name='鸣人', age='13', task='吃拉面', hobby=[吃拉面, 泡温泉]}\n影分身:Naruto{name='鸣人', age='13', task='上课', hobby=[吃拉面, 泡温泉]}\n```\n\n可以看到,鸣人本人的任务是去<font color=orange>吃拉面</font>,他的影分身的任务是留着教室<font color=orange>上课</font>;当然鸣人可以通过他本人创建无数个影分身,同时执行多个任务;这就是<font color=orange>原型模式</font>;\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191225222314.gif)\n\n## 浅拷贝和深拷贝\n\n原型模式就是通过一个原型clone出多个和原型一样的类,但是拷贝也分<font color=orange>浅拷贝</font>和<font color=orange>深拷贝</font>;\n\n### 浅拷贝\n\n> 浅拷贝有多浅,浅到就相当于没有给你拷贝,他就是让你<font color=orange>和原型共用一个空间,没有给你分配新的内存</font>;\n\n比如上面的鸣人本人有爱好,但是隐分身一般是没有爱好的,所以创建隐分身要吧爱好给清除调:\n\n```java\n/**\n * 原型模式\n * @author zheng\n * */\npublic class Main {\n    public static void main(String[] args) {\n        //我是鸣人本人\n        Naruto naruto=new Naruto();\n        //我是影分身\n        Naruto narutoYin=naruto.clone();\n\n        narutoYin.setTask(\"上课\");\n        //影分身不配有爱好\n        narutoYin.getHobby().clear();\n        naruto.setTask(\"吃拉面\");\n\n        System.out.println(\"鸣人本人:\"+naruto.toString());\n        System.out.println(\"影分身:\"+narutoYin.toString());\n\n    }\n}\n//控制台输出\n鸣人本人:Naruto{name='鸣人', age='13', task='吃拉面', hobby=[]}\n影分身:Naruto{name='鸣人', age='13', task='上课', hobby=[]}\n```\n\nWTF,竟然把本人的爱好也清除调了,那还去吃啥拉面啊,算了算了,安安心心上课吧,诶;叫你上影分身课是时候不认真,失败了吧!!!\n\n### 深拷贝\n\n> 深拷贝就是在`clone`方法里除了克隆类之外,还要克隆引用对象,这样才会重新给引用对象<font color=orange>分配新的内存空间</font>\n\n进过上次的教训,鸣人苦练影分身之术,终于学得核心所在,看看他新的影分身技能吧:\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191225220944.png)\n\n在变一个看看:\n\n```java\n/**\n * 原型模式\n * @author zheng\n * */\npublic class Main {\n    public static void main(String[] args) {\n        //我是鸣人本人\n        Naruto naruto=new Naruto();\n        //我是影分身\n        Naruto narutoYin=naruto.clone();\n\n        narutoYin.setTask(\"上课\");\n        //影分身不配有爱好\n        narutoYin.getHobby().clear();\n        naruto.setTask(\"吃拉面\");\n\n        System.out.println(\"鸣人本人:\"+naruto.toString());\n        System.out.println(\"影分身:\"+narutoYin.toString());\n\n    }\n}\n//控制台输出\n鸣人本人:Naruto{name='鸣人', age='13', task='吃拉面', hobby=[吃拉面, 泡温泉]}\n影分身:Naruto{name='鸣人', age='13', task='上课', hobby=[]}\n```\n\n哈哈,成功了,这下可以安安心心的区吃拉面了吧;\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191225222402-20211008162003582.gif)\n\n## 总结\n\n        引用设计模式之禅的一句话:内部的数组和引用对象才不拷贝，其他的原始类型比如`int`、`long`、`char`等都会被拷贝，但是对于`String`类型，`Java`就希望你把它认为是基本类型，它是没有clone方法的，处理机制也比较特殊，通过字符串池（stringpool）在需要的时候才在内存中创建新的字符串，在使用的时候就把`String`当做基本类使用即可。注意:<font color=orange>使用clone方法，在类的成员变量上就不要增加final关键字,否则当你重新设置这个成员变量的值时是不能设置的,因为final的不可变的,只能引用原来的值</font>","slug":"gof/gof-prototype","published":1,"updated":"2021-10-08T08:20:16.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6efl000ovpuce1hx0a6f","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191226084321.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬</p>\n<p>所有源代码都在这:<a href=\"https://github.com/z573419235/GofDemo\">https://github.com/z573419235/GofDemo</a></p>\n<p>各位大佬记得点个星星哦</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><pre><code>    前几天生病了,每天头昏脑胀的,诶,生病的时候才知道身体健康的重要性,以后还是要加强锻炼,身体是革命的本钱;\n\n    隔了差不多有五六天没写日志了,罪过罪过;好了,今天要说的是原型模式,原型模式在`Java`中核心秘密就是`clone`这个方法,通过重新`Object`中的`clone`方法.来达到原型模式;而要重新`clone`方法就必须要实现`Cloneable`这个接口,不实现这个接口的话就会报`java.lang.CloneNotSupportedException`异常;\n</code></pre>\n<h2 id=\"我是鸣人\"><a href=\"#我是鸣人\" class=\"headerlink\" title=\"我是鸣人\"></a>我是鸣人</h2><pre><code>    鸣人最喜欢的就是吃拉面,就算是上课的时候也是心心念念的想着一乐大叔的拉面\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191225222050.gif\" alt=\"图片\"></p>\n<p>先来看看鸣人的原型实体类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zheng</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 我是鸣人实体类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Naruto</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Cloneable</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 姓名</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name=<span class=\"string\">&quot;鸣人&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 年龄</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age=<span class=\"number\">13</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 任务</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String task;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *爱好</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;String&gt; hobby=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Naruto</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hobby.add(<span class=\"string\">&quot;吃拉面&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hobby.add(<span class=\"string\">&quot;泡温泉&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 重写Object类的clone方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Naruto <span class=\"title function_\">clone</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        Naruto naruto=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            naruto=(Naruto)<span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> naruto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Naruto&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&#x27;&quot;</span> + age + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, task=&#x27;&quot;</span> + task + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, hobby=&quot;</span> + hobby +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为了代码整洁,我安装了lombok插件,所以不用写get&#x2F;set方法,直接加个<code>@Data</code>注解就可以了;</p>\n</blockquote>\n<p>一天,鸣人上着伊鲁卡老师的课,可是心里还是念念不忘一乐大叔的拉面,想着前几天刚学了影分身之术,想着用分身术逃出去吃拉面.于是他就有变了一个分身留着这上课,自己却跑去吃拉面了;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 原型模式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//我是鸣人本人</span></span><br><span class=\"line\">        Naruto naruto=<span class=\"keyword\">new</span> <span class=\"title class_\">Naruto</span>();</span><br><span class=\"line\">        <span class=\"comment\">//我是影分身</span></span><br><span class=\"line\">        Naruto narutoYin=naruto.clone();</span><br><span class=\"line\"></span><br><span class=\"line\">        narutoYin.setTask(<span class=\"string\">&quot;上课&quot;</span>);</span><br><span class=\"line\">        naruto.setTask(<span class=\"string\">&quot;吃拉面&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;鸣人本人:&quot;</span>+naruto.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;影分身:&quot;</span>+narutoYin.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制台输出</span></span><br><span class=\"line\">鸣人本人:Naruto&#123;name=<span class=\"string\">&#x27;鸣人&#x27;</span>, age=<span class=\"string\">&#x27;13&#x27;</span>, task=<span class=\"string\">&#x27;吃拉面&#x27;</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br><span class=\"line\">影分身:Naruto&#123;name=<span class=\"string\">&#x27;鸣人&#x27;</span>, age=<span class=\"string\">&#x27;13&#x27;</span>, task=<span class=\"string\">&#x27;上课&#x27;</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到,鸣人本人的任务是去<font color=orange>吃拉面</font>,他的影分身的任务是留着教室<font color=orange>上课</font>;当然鸣人可以通过他本人创建无数个影分身,同时执行多个任务;这就是<font color=orange>原型模式</font>;</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191225222314.gif\" alt=\"图片\"></p>\n<h2 id=\"浅拷贝和深拷贝\"><a href=\"#浅拷贝和深拷贝\" class=\"headerlink\" title=\"浅拷贝和深拷贝\"></a>浅拷贝和深拷贝</h2><p>原型模式就是通过一个原型clone出多个和原型一样的类,但是拷贝也分<font color=orange>浅拷贝</font>和<font color=orange>深拷贝</font>;</p>\n<h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><blockquote>\n<p>浅拷贝有多浅,浅到就相当于没有给你拷贝,他就是让你<font color=orange>和原型共用一个空间,没有给你分配新的内存</font>;</p>\n</blockquote>\n<p>比如上面的鸣人本人有爱好,但是隐分身一般是没有爱好的,所以创建隐分身要吧爱好给清除调:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 原型模式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//我是鸣人本人</span></span><br><span class=\"line\">        Naruto naruto=<span class=\"keyword\">new</span> <span class=\"title class_\">Naruto</span>();</span><br><span class=\"line\">        <span class=\"comment\">//我是影分身</span></span><br><span class=\"line\">        Naruto narutoYin=naruto.clone();</span><br><span class=\"line\"></span><br><span class=\"line\">        narutoYin.setTask(<span class=\"string\">&quot;上课&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//影分身不配有爱好</span></span><br><span class=\"line\">        narutoYin.getHobby().clear();</span><br><span class=\"line\">        naruto.setTask(<span class=\"string\">&quot;吃拉面&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;鸣人本人:&quot;</span>+naruto.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;影分身:&quot;</span>+narutoYin.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//控制台输出</span></span><br><span class=\"line\">鸣人本人:Naruto&#123;name=<span class=\"string\">&#x27;鸣人&#x27;</span>, age=<span class=\"string\">&#x27;13&#x27;</span>, task=<span class=\"string\">&#x27;吃拉面&#x27;</span>, hobby=[]&#125;</span><br><span class=\"line\">影分身:Naruto&#123;name=<span class=\"string\">&#x27;鸣人&#x27;</span>, age=<span class=\"string\">&#x27;13&#x27;</span>, task=<span class=\"string\">&#x27;上课&#x27;</span>, hobby=[]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>WTF,竟然把本人的爱好也清除调了,那还去吃啥拉面啊,算了算了,安安心心上课吧,诶;叫你上影分身课是时候不认真,失败了吧!!!</p>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><blockquote>\n<p>深拷贝就是在<code>clone</code>方法里除了克隆类之外,还要克隆引用对象,这样才会重新给引用对象<font color=orange>分配新的内存空间</font></p>\n</blockquote>\n<p>进过上次的教训,鸣人苦练影分身之术,终于学得核心所在,看看他新的影分身技能吧:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191225220944.png\" alt=\"图片\"></p>\n<p>在变一个看看:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 原型模式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//我是鸣人本人</span></span><br><span class=\"line\">        Naruto naruto=<span class=\"keyword\">new</span> <span class=\"title class_\">Naruto</span>();</span><br><span class=\"line\">        <span class=\"comment\">//我是影分身</span></span><br><span class=\"line\">        Naruto narutoYin=naruto.clone();</span><br><span class=\"line\"></span><br><span class=\"line\">        narutoYin.setTask(<span class=\"string\">&quot;上课&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//影分身不配有爱好</span></span><br><span class=\"line\">        narutoYin.getHobby().clear();</span><br><span class=\"line\">        naruto.setTask(<span class=\"string\">&quot;吃拉面&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;鸣人本人:&quot;</span>+naruto.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;影分身:&quot;</span>+narutoYin.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//控制台输出</span></span><br><span class=\"line\">鸣人本人:Naruto&#123;name=<span class=\"string\">&#x27;鸣人&#x27;</span>, age=<span class=\"string\">&#x27;13&#x27;</span>, task=<span class=\"string\">&#x27;吃拉面&#x27;</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br><span class=\"line\">影分身:Naruto&#123;name=<span class=\"string\">&#x27;鸣人&#x27;</span>, age=<span class=\"string\">&#x27;13&#x27;</span>, task=<span class=\"string\">&#x27;上课&#x27;</span>, hobby=[]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>哈哈,成功了,这下可以安安心心的区吃拉面了吧;</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191225222402-20211008162003582.gif\" alt=\"图片\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><pre><code>    引用设计模式之禅的一句话:内部的数组和引用对象才不拷贝，其他的原始类型比如`int`、`long`、`char`等都会被拷贝，但是对于`String`类型，`Java`就希望你把它认为是基本类型，它是没有clone方法的，处理机制也比较特殊，通过字符串池（stringpool）在需要的时候才在内存中创建新的字符串，在使用的时候就把`String`当做基本类使用即可。注意:&lt;font color=orange&gt;使用clone方法，在类的成员变量上就不要增加final关键字,否则当你重新设置这个成员变量的值时是不能设置的,因为final的不可变的,只能引用原来的值&lt;/font&gt;\n</code></pre>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191226084321.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬</p>\n<p>所有源代码都在这:<a href=\"https://github.com/z573419235/GofDemo\">https://github.com/z573419235/GofDemo</a></p>\n<p>各位大佬记得点个星星哦</p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><pre><code>    前几天生病了,每天头昏脑胀的,诶,生病的时候才知道身体健康的重要性,以后还是要加强锻炼,身体是革命的本钱;\n\n    隔了差不多有五六天没写日志了,罪过罪过;好了,今天要说的是原型模式,原型模式在`Java`中核心秘密就是`clone`这个方法,通过重新`Object`中的`clone`方法.来达到原型模式;而要重新`clone`方法就必须要实现`Cloneable`这个接口,不实现这个接口的话就会报`java.lang.CloneNotSupportedException`异常;\n</code></pre>\n<h2 id=\"我是鸣人\"><a href=\"#我是鸣人\" class=\"headerlink\" title=\"我是鸣人\"></a>我是鸣人</h2><pre><code>    鸣人最喜欢的就是吃拉面,就算是上课的时候也是心心念念的想着一乐大叔的拉面\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191225222050.gif\" alt=\"图片\"></p>\n<p>先来看看鸣人的原型实体类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zheng</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 我是鸣人实体类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Naruto</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Cloneable</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 姓名</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name=<span class=\"string\">&quot;鸣人&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 年龄</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age=<span class=\"number\">13</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 任务</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String task;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *爱好</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;String&gt; hobby=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Naruto</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hobby.add(<span class=\"string\">&quot;吃拉面&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.hobby.add(<span class=\"string\">&quot;泡温泉&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 重写Object类的clone方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Naruto <span class=\"title function_\">clone</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        Naruto naruto=<span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            naruto=(Naruto)<span class=\"built_in\">super</span>.clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> naruto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Naruto&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&#x27;&quot;</span> + age + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, task=&#x27;&quot;</span> + task + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, hobby=&quot;</span> + hobby +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为了代码整洁,我安装了lombok插件,所以不用写get&#x2F;set方法,直接加个<code>@Data</code>注解就可以了;</p>\n</blockquote>\n<p>一天,鸣人上着伊鲁卡老师的课,可是心里还是念念不忘一乐大叔的拉面,想着前几天刚学了影分身之术,想着用分身术逃出去吃拉面.于是他就有变了一个分身留着这上课,自己却跑去吃拉面了;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 原型模式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//我是鸣人本人</span></span><br><span class=\"line\">        Naruto naruto=<span class=\"keyword\">new</span> <span class=\"title class_\">Naruto</span>();</span><br><span class=\"line\">        <span class=\"comment\">//我是影分身</span></span><br><span class=\"line\">        Naruto narutoYin=naruto.clone();</span><br><span class=\"line\"></span><br><span class=\"line\">        narutoYin.setTask(<span class=\"string\">&quot;上课&quot;</span>);</span><br><span class=\"line\">        naruto.setTask(<span class=\"string\">&quot;吃拉面&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;鸣人本人:&quot;</span>+naruto.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;影分身:&quot;</span>+narutoYin.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制台输出</span></span><br><span class=\"line\">鸣人本人:Naruto&#123;name=<span class=\"string\">&#x27;鸣人&#x27;</span>, age=<span class=\"string\">&#x27;13&#x27;</span>, task=<span class=\"string\">&#x27;吃拉面&#x27;</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br><span class=\"line\">影分身:Naruto&#123;name=<span class=\"string\">&#x27;鸣人&#x27;</span>, age=<span class=\"string\">&#x27;13&#x27;</span>, task=<span class=\"string\">&#x27;上课&#x27;</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到,鸣人本人的任务是去<font color=orange>吃拉面</font>,他的影分身的任务是留着教室<font color=orange>上课</font>;当然鸣人可以通过他本人创建无数个影分身,同时执行多个任务;这就是<font color=orange>原型模式</font>;</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191225222314.gif\" alt=\"图片\"></p>\n<h2 id=\"浅拷贝和深拷贝\"><a href=\"#浅拷贝和深拷贝\" class=\"headerlink\" title=\"浅拷贝和深拷贝\"></a>浅拷贝和深拷贝</h2><p>原型模式就是通过一个原型clone出多个和原型一样的类,但是拷贝也分<font color=orange>浅拷贝</font>和<font color=orange>深拷贝</font>;</p>\n<h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><blockquote>\n<p>浅拷贝有多浅,浅到就相当于没有给你拷贝,他就是让你<font color=orange>和原型共用一个空间,没有给你分配新的内存</font>;</p>\n</blockquote>\n<p>比如上面的鸣人本人有爱好,但是隐分身一般是没有爱好的,所以创建隐分身要吧爱好给清除调:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 原型模式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//我是鸣人本人</span></span><br><span class=\"line\">        Naruto naruto=<span class=\"keyword\">new</span> <span class=\"title class_\">Naruto</span>();</span><br><span class=\"line\">        <span class=\"comment\">//我是影分身</span></span><br><span class=\"line\">        Naruto narutoYin=naruto.clone();</span><br><span class=\"line\"></span><br><span class=\"line\">        narutoYin.setTask(<span class=\"string\">&quot;上课&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//影分身不配有爱好</span></span><br><span class=\"line\">        narutoYin.getHobby().clear();</span><br><span class=\"line\">        naruto.setTask(<span class=\"string\">&quot;吃拉面&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;鸣人本人:&quot;</span>+naruto.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;影分身:&quot;</span>+narutoYin.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//控制台输出</span></span><br><span class=\"line\">鸣人本人:Naruto&#123;name=<span class=\"string\">&#x27;鸣人&#x27;</span>, age=<span class=\"string\">&#x27;13&#x27;</span>, task=<span class=\"string\">&#x27;吃拉面&#x27;</span>, hobby=[]&#125;</span><br><span class=\"line\">影分身:Naruto&#123;name=<span class=\"string\">&#x27;鸣人&#x27;</span>, age=<span class=\"string\">&#x27;13&#x27;</span>, task=<span class=\"string\">&#x27;上课&#x27;</span>, hobby=[]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>WTF,竟然把本人的爱好也清除调了,那还去吃啥拉面啊,算了算了,安安心心上课吧,诶;叫你上影分身课是时候不认真,失败了吧!!!</p>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><blockquote>\n<p>深拷贝就是在<code>clone</code>方法里除了克隆类之外,还要克隆引用对象,这样才会重新给引用对象<font color=orange>分配新的内存空间</font></p>\n</blockquote>\n<p>进过上次的教训,鸣人苦练影分身之术,终于学得核心所在,看看他新的影分身技能吧:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191225220944.png\" alt=\"图片\"></p>\n<p>在变一个看看:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 原型模式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//我是鸣人本人</span></span><br><span class=\"line\">        Naruto naruto=<span class=\"keyword\">new</span> <span class=\"title class_\">Naruto</span>();</span><br><span class=\"line\">        <span class=\"comment\">//我是影分身</span></span><br><span class=\"line\">        Naruto narutoYin=naruto.clone();</span><br><span class=\"line\"></span><br><span class=\"line\">        narutoYin.setTask(<span class=\"string\">&quot;上课&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//影分身不配有爱好</span></span><br><span class=\"line\">        narutoYin.getHobby().clear();</span><br><span class=\"line\">        naruto.setTask(<span class=\"string\">&quot;吃拉面&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;鸣人本人:&quot;</span>+naruto.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;影分身:&quot;</span>+narutoYin.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//控制台输出</span></span><br><span class=\"line\">鸣人本人:Naruto&#123;name=<span class=\"string\">&#x27;鸣人&#x27;</span>, age=<span class=\"string\">&#x27;13&#x27;</span>, task=<span class=\"string\">&#x27;吃拉面&#x27;</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br><span class=\"line\">影分身:Naruto&#123;name=<span class=\"string\">&#x27;鸣人&#x27;</span>, age=<span class=\"string\">&#x27;13&#x27;</span>, task=<span class=\"string\">&#x27;上课&#x27;</span>, hobby=[]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>哈哈,成功了,这下可以安安心心的区吃拉面了吧;</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191225222402-20211008162003582.gif\" alt=\"图片\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><pre><code>    引用设计模式之禅的一句话:内部的数组和引用对象才不拷贝，其他的原始类型比如`int`、`long`、`char`等都会被拷贝，但是对于`String`类型，`Java`就希望你把它认为是基本类型，它是没有clone方法的，处理机制也比较特殊，通过字符串池（stringpool）在需要的时候才在内存中创建新的字符串，在使用的时候就把`String`当做基本类使用即可。注意:&lt;font color=orange&gt;使用clone方法，在类的成员变量上就不要增加final关键字,否则当你重新设置这个成员变量的值时是不能设置的,因为final的不可变的,只能引用原来的值&lt;/font&gt;\n</code></pre>\n"},{"title":"设计模式系例-单例模式","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2019-10-22T13:16:37.000Z","password":null,"summary":null,"_content":"\n   \n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/gof-singleton.jpg)\n\n> 积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬 \n\n\n\n## 前言\n\n网上说单例模式是所有模式中最简单的一种模式，巧的是我也这么认为。不过越简单的东西，往往坑就隐藏的越深，这边文章我会把我知道的几个坑所出来。\n\n\n\n## 一.什么是单例模式\n\n​    就如同他的名字一样，'单例'-就是只有一个实例。也就是说一个类在全局中最多只有一个实例存在，不能在多了，在多就不叫单例模式了。\n\n\n\n### 1.白话小故事\n\n​    程序员小H单身已久，每天不是对着电脑，就是抱着手机这样来维持生活。某日，坐在电脑前，突然感觉一切都索然无味。谋生想找一个对象来一起度过人生美好的每一天。\n\n​    于是精心打扮出门找对象，由于小H很帅，很快就找到了心仪的另一半--小K。小H的心中永远只有小K一个人，而且发誓永远不会在找新对象。\n\n> 小H和小K的关系就是单例模式，在小H的全局中只有一个小K对象，且无第二个，如果有第二个的话，他们之间的关系就出问题了。哈哈\n\n\n\n## 2.用在哪里\n\n​    单例模式一般用在对实例数量有严格要求的地方，比如数据池，线程池，缓存，session回话等等。\n\n\n\n## 3.在Java中构成的条件\n\n- 静态变量\n- 静态方法\n- 私有构造器\n\n## 二.单例模式的两种形态\n\n### 1.懒汉模式\n\n> 线程不安全\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        if(unsingleton==null){\n            unsingleton=new Singleton();\n        }\n        return unsingleton;\n    }\n}\n```\n\n\n\n### 2.饿汉模式\n\n> 线程安全\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton=new Singleton();\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        return unsingleton;\n    }\n}\n```\n\n\n\n#### 调用\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        Singleton singleton1=Singleton.getInstance();\n    }\n}\n```\n\n## 三.懒汉模式优化成线程安全\n\n  懒汉模式要变成线程安全的除了用饿汉模式之外，还有两种方法。\n\n### 1.加synchronized关键字\n\n> 此方法是最简单又有效的方法，不过对性能上会有所损失。比如两个线程同时调用这个实例，其中一个线程要等另一个线程调用完才可以继续调用。而线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的，所以加synchronized就显得有些浪费性能。\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static synchronized Singleton getInstance(){\n        if(unsingleton==null){\n            unsingleton=new Singleton();\n        }\n        return unsingleton;\n    }\n}\n```\n\n### 2.用\"双重检查加锁\"\n\n> 上个方法说到，线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的。那有没有方法只有在第一次调用的时候才用synchronized关键字，而第一次后就不用synchronized关键字呢？答案是当然有的，就是用volatile来修饰静态变量，保持其可见性。\n\n```java\npublic class Singleton {\n\n    private static volatile Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        if(unsingleton==null){\n            //只有当第一次访问的时候才会使用synchronized关键字\n            synchronized (Singleton.class){\n                unsingleton=new Singleton();\n            }\n        }\n        return unsingleton;\n    }\n}\n```\n\n\n\n## 三种线程安全的单例模式比较\n\n- 饿汉模式：性能好，写法简单，个人比较推荐用这个\n\n- 加synchronized关键字：性能差，不过对懒汉模式的盖章比较直接有效。\n\n- volatile-双重验证加锁：性能好，对Java版本有要求，要求Java5以上版本\n\n  ","source":"_posts/gof/gof-singleton.md","raw":"---\ntitle: 设计模式系例-单例模式\ntop: true\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - GOF\n  - Singleton\ncategories:\n  - GOF\ndate: 2019-10-22 21:16:37\npassword:\nsummary:\n---\n\n   \n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/gof-singleton.jpg)\n\n> 积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬 \n\n\n\n## 前言\n\n网上说单例模式是所有模式中最简单的一种模式，巧的是我也这么认为。不过越简单的东西，往往坑就隐藏的越深，这边文章我会把我知道的几个坑所出来。\n\n\n\n## 一.什么是单例模式\n\n​    就如同他的名字一样，'单例'-就是只有一个实例。也就是说一个类在全局中最多只有一个实例存在，不能在多了，在多就不叫单例模式了。\n\n\n\n### 1.白话小故事\n\n​    程序员小H单身已久，每天不是对着电脑，就是抱着手机这样来维持生活。某日，坐在电脑前，突然感觉一切都索然无味。谋生想找一个对象来一起度过人生美好的每一天。\n\n​    于是精心打扮出门找对象，由于小H很帅，很快就找到了心仪的另一半--小K。小H的心中永远只有小K一个人，而且发誓永远不会在找新对象。\n\n> 小H和小K的关系就是单例模式，在小H的全局中只有一个小K对象，且无第二个，如果有第二个的话，他们之间的关系就出问题了。哈哈\n\n\n\n## 2.用在哪里\n\n​    单例模式一般用在对实例数量有严格要求的地方，比如数据池，线程池，缓存，session回话等等。\n\n\n\n## 3.在Java中构成的条件\n\n- 静态变量\n- 静态方法\n- 私有构造器\n\n## 二.单例模式的两种形态\n\n### 1.懒汉模式\n\n> 线程不安全\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        if(unsingleton==null){\n            unsingleton=new Singleton();\n        }\n        return unsingleton;\n    }\n}\n```\n\n\n\n### 2.饿汉模式\n\n> 线程安全\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton=new Singleton();\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        return unsingleton;\n    }\n}\n```\n\n\n\n#### 调用\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        Singleton singleton1=Singleton.getInstance();\n    }\n}\n```\n\n## 三.懒汉模式优化成线程安全\n\n  懒汉模式要变成线程安全的除了用饿汉模式之外，还有两种方法。\n\n### 1.加synchronized关键字\n\n> 此方法是最简单又有效的方法，不过对性能上会有所损失。比如两个线程同时调用这个实例，其中一个线程要等另一个线程调用完才可以继续调用。而线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的，所以加synchronized就显得有些浪费性能。\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static synchronized Singleton getInstance(){\n        if(unsingleton==null){\n            unsingleton=new Singleton();\n        }\n        return unsingleton;\n    }\n}\n```\n\n### 2.用\"双重检查加锁\"\n\n> 上个方法说到，线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的。那有没有方法只有在第一次调用的时候才用synchronized关键字，而第一次后就不用synchronized关键字呢？答案是当然有的，就是用volatile来修饰静态变量，保持其可见性。\n\n```java\npublic class Singleton {\n\n    private static volatile Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        if(unsingleton==null){\n            //只有当第一次访问的时候才会使用synchronized关键字\n            synchronized (Singleton.class){\n                unsingleton=new Singleton();\n            }\n        }\n        return unsingleton;\n    }\n}\n```\n\n\n\n## 三种线程安全的单例模式比较\n\n- 饿汉模式：性能好，写法简单，个人比较推荐用这个\n\n- 加synchronized关键字：性能差，不过对懒汉模式的盖章比较直接有效。\n\n- volatile-双重验证加锁：性能好，对Java版本有要求，要求Java5以上版本\n\n  ","slug":"gof/gof-singleton","published":1,"updated":"2021-10-08T08:20:27.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6efo000tvpuc8f2n7w0j","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/gof-singleton.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬 </p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>网上说单例模式是所有模式中最简单的一种模式，巧的是我也这么认为。不过越简单的东西，往往坑就隐藏的越深，这边文章我会把我知道的几个坑所出来。</p>\n<h2 id=\"一-什么是单例模式\"><a href=\"#一-什么是单例模式\" class=\"headerlink\" title=\"一.什么是单例模式\"></a>一.什么是单例模式</h2><p>​    就如同他的名字一样，’单例’-就是只有一个实例。也就是说一个类在全局中最多只有一个实例存在，不能在多了，在多就不叫单例模式了。</p>\n<h3 id=\"1-白话小故事\"><a href=\"#1-白话小故事\" class=\"headerlink\" title=\"1.白话小故事\"></a>1.白话小故事</h3><p>​    程序员小H单身已久，每天不是对着电脑，就是抱着手机这样来维持生活。某日，坐在电脑前，突然感觉一切都索然无味。谋生想找一个对象来一起度过人生美好的每一天。</p>\n<p>​    于是精心打扮出门找对象，由于小H很帅，很快就找到了心仪的另一半–小K。小H的心中永远只有小K一个人，而且发誓永远不会在找新对象。</p>\n<blockquote>\n<p>小H和小K的关系就是单例模式，在小H的全局中只有一个小K对象，且无第二个，如果有第二个的话，他们之间的关系就出问题了。哈哈</p>\n</blockquote>\n<h2 id=\"2-用在哪里\"><a href=\"#2-用在哪里\" class=\"headerlink\" title=\"2.用在哪里\"></a>2.用在哪里</h2><p>​    单例模式一般用在对实例数量有严格要求的地方，比如数据池，线程池，缓存，session回话等等。</p>\n<h2 id=\"3-在Java中构成的条件\"><a href=\"#3-在Java中构成的条件\" class=\"headerlink\" title=\"3.在Java中构成的条件\"></a>3.在Java中构成的条件</h2><ul>\n<li>静态变量</li>\n<li>静态方法</li>\n<li>私有构造器</li>\n</ul>\n<h2 id=\"二-单例模式的两种形态\"><a href=\"#二-单例模式的两种形态\" class=\"headerlink\" title=\"二.单例模式的两种形态\"></a>二.单例模式的两种形态</h2><h3 id=\"1-懒汉模式\"><a href=\"#1-懒汉模式\" class=\"headerlink\" title=\"1.懒汉模式\"></a>1.懒汉模式</h3><blockquote>\n<p>线程不安全</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton unsingleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(unsingleton==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            unsingleton=<span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-饿汉模式\"><a href=\"#2-饿汉模式\" class=\"headerlink\" title=\"2.饿汉模式\"></a>2.饿汉模式</h3><blockquote>\n<p>线程安全</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton unsingleton=<span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Singleton singleton1=Singleton.getInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三-懒汉模式优化成线程安全\"><a href=\"#三-懒汉模式优化成线程安全\" class=\"headerlink\" title=\"三.懒汉模式优化成线程安全\"></a>三.懒汉模式优化成线程安全</h2><p>  懒汉模式要变成线程安全的除了用饿汉模式之外，还有两种方法。</p>\n<h3 id=\"1-加synchronized关键字\"><a href=\"#1-加synchronized关键字\" class=\"headerlink\" title=\"1.加synchronized关键字\"></a>1.加synchronized关键字</h3><blockquote>\n<p>此方法是最简单又有效的方法，不过对性能上会有所损失。比如两个线程同时调用这个实例，其中一个线程要等另一个线程调用完才可以继续调用。而线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的，所以加synchronized就显得有些浪费性能。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton unsingleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(unsingleton==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            unsingleton=<span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-用”双重检查加锁”\"><a href=\"#2-用”双重检查加锁”\" class=\"headerlink\" title=\"2.用”双重检查加锁”\"></a>2.用”双重检查加锁”</h3><blockquote>\n<p>上个方法说到，线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的。那有没有方法只有在第一次调用的时候才用synchronized关键字，而第一次后就不用synchronized关键字呢？答案是当然有的，就是用volatile来修饰静态变量，保持其可见性。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton unsingleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(unsingleton==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//只有当第一次访问的时候才会使用synchronized关键字</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class)&#123;</span><br><span class=\"line\">                unsingleton=<span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三种线程安全的单例模式比较\"><a href=\"#三种线程安全的单例模式比较\" class=\"headerlink\" title=\"三种线程安全的单例模式比较\"></a>三种线程安全的单例模式比较</h2><ul>\n<li><p>饿汉模式：性能好，写法简单，个人比较推荐用这个</p>\n</li>\n<li><p>加synchronized关键字：性能差，不过对懒汉模式的盖章比较直接有效。</p>\n</li>\n<li><p>volatile-双重验证加锁：性能好，对Java版本有要求，要求Java5以上版本</p>\n</li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/gof-singleton.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬 </p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>网上说单例模式是所有模式中最简单的一种模式，巧的是我也这么认为。不过越简单的东西，往往坑就隐藏的越深，这边文章我会把我知道的几个坑所出来。</p>\n<h2 id=\"一-什么是单例模式\"><a href=\"#一-什么是单例模式\" class=\"headerlink\" title=\"一.什么是单例模式\"></a>一.什么是单例模式</h2><p>​    就如同他的名字一样，’单例’-就是只有一个实例。也就是说一个类在全局中最多只有一个实例存在，不能在多了，在多就不叫单例模式了。</p>\n<h3 id=\"1-白话小故事\"><a href=\"#1-白话小故事\" class=\"headerlink\" title=\"1.白话小故事\"></a>1.白话小故事</h3><p>​    程序员小H单身已久，每天不是对着电脑，就是抱着手机这样来维持生活。某日，坐在电脑前，突然感觉一切都索然无味。谋生想找一个对象来一起度过人生美好的每一天。</p>\n<p>​    于是精心打扮出门找对象，由于小H很帅，很快就找到了心仪的另一半–小K。小H的心中永远只有小K一个人，而且发誓永远不会在找新对象。</p>\n<blockquote>\n<p>小H和小K的关系就是单例模式，在小H的全局中只有一个小K对象，且无第二个，如果有第二个的话，他们之间的关系就出问题了。哈哈</p>\n</blockquote>\n<h2 id=\"2-用在哪里\"><a href=\"#2-用在哪里\" class=\"headerlink\" title=\"2.用在哪里\"></a>2.用在哪里</h2><p>​    单例模式一般用在对实例数量有严格要求的地方，比如数据池，线程池，缓存，session回话等等。</p>\n<h2 id=\"3-在Java中构成的条件\"><a href=\"#3-在Java中构成的条件\" class=\"headerlink\" title=\"3.在Java中构成的条件\"></a>3.在Java中构成的条件</h2><ul>\n<li>静态变量</li>\n<li>静态方法</li>\n<li>私有构造器</li>\n</ul>\n<h2 id=\"二-单例模式的两种形态\"><a href=\"#二-单例模式的两种形态\" class=\"headerlink\" title=\"二.单例模式的两种形态\"></a>二.单例模式的两种形态</h2><h3 id=\"1-懒汉模式\"><a href=\"#1-懒汉模式\" class=\"headerlink\" title=\"1.懒汉模式\"></a>1.懒汉模式</h3><blockquote>\n<p>线程不安全</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton unsingleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(unsingleton==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            unsingleton=<span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"2-饿汉模式\"><a href=\"#2-饿汉模式\" class=\"headerlink\" title=\"2.饿汉模式\"></a>2.饿汉模式</h3><blockquote>\n<p>线程安全</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton unsingleton=<span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Singleton singleton1=Singleton.getInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三-懒汉模式优化成线程安全\"><a href=\"#三-懒汉模式优化成线程安全\" class=\"headerlink\" title=\"三.懒汉模式优化成线程安全\"></a>三.懒汉模式优化成线程安全</h2><p>  懒汉模式要变成线程安全的除了用饿汉模式之外，还有两种方法。</p>\n<h3 id=\"1-加synchronized关键字\"><a href=\"#1-加synchronized关键字\" class=\"headerlink\" title=\"1.加synchronized关键字\"></a>1.加synchronized关键字</h3><blockquote>\n<p>此方法是最简单又有效的方法，不过对性能上会有所损失。比如两个线程同时调用这个实例，其中一个线程要等另一个线程调用完才可以继续调用。而线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的，所以加synchronized就显得有些浪费性能。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton unsingleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(unsingleton==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            unsingleton=<span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-用”双重检查加锁”\"><a href=\"#2-用”双重检查加锁”\" class=\"headerlink\" title=\"2.用”双重检查加锁”\"></a>2.用”双重检查加锁”</h3><blockquote>\n<p>上个方法说到，线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的。那有没有方法只有在第一次调用的时候才用synchronized关键字，而第一次后就不用synchronized关键字呢？答案是当然有的，就是用volatile来修饰静态变量，保持其可见性。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Singleton</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton unsingleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Singleton</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(unsingleton==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//只有当第一次访问的时候才会使用synchronized关键字</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class)&#123;</span><br><span class=\"line\">                unsingleton=<span class=\"keyword\">new</span> <span class=\"title class_\">Singleton</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"三种线程安全的单例模式比较\"><a href=\"#三种线程安全的单例模式比较\" class=\"headerlink\" title=\"三种线程安全的单例模式比较\"></a>三种线程安全的单例模式比较</h2><ul>\n<li><p>饿汉模式：性能好，写法简单，个人比较推荐用这个</p>\n</li>\n<li><p>加synchronized关键字：性能差，不过对懒汉模式的盖章比较直接有效。</p>\n</li>\n<li><p>volatile-双重验证加锁：性能好，对Java版本有要求，要求Java5以上版本</p>\n</li>\n</ul>\n"},{"title":"设计模式系列-模板方法模式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-19T16:04:28.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191220000613-20211008162150348.jpg)\n\n> 积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬\n\n\n\n## 文前常规发言\n\n　　模板方法的设计<font color=orange>符合迪米特法则</font>，也就是最少知道原则，他通过对一些重复方法的封装，减少类之间的耦合，让调用者也更省心，原来要调两三个方法才能实现的功能，现在调一个就可以了；就像我们伟大的祖国，现在也在推行这种模式呢．以前区办一些证明什么的，要跑三四个地方，还要保证这三四个地方都正常帮你办理，如果其中一个地方没办理，那么整个流程就都作废了．现在好了，提倡最多跑一次，只要去一个地方办<font color=orange>一次</font>手续就可以了，你只要知道这个地方能办好就行，其他的就不用烦心了；\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219215431.gif)\n\n## 阿狗卖电脑\n\n　　阿狗是一个三十五岁没了头发的年轻小伙，当问及为什么没了头发，阿狗摸摸头，眼里充满了悔恨的泪水；要不是小时候没听大人的话，长大了也不至于做程序员啊－－－阿狗唉声叹气的说道．听到这里，我仿佛已经知道了答案．当我问他为什么现在改行卖电脑了，他说外面的世界很大，想趁年轻，多闯闯（<font color=orange>实则是被公司裁员，被迫来卖电脑了</font>）；\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219220453-20211008162142649.gif)\n\n看看他的电脑店里都有什么\n\n```java\n/**\n * 阿狗电脑店\n * */\nabstract class AGouShop {\n    /**\n     *显卡\n     * */\n    abstract void xianKa();\n    /**\n     *cpu\n     * */\n    abstract void cpu();\n    /**\n     *电源\n     * */\n    abstract void dianYuan();\n    /**\n     *主板\n     * */\n    abstract void zhuBan();\n    /**\n     *硬盘\n     * */\n    abstract void yingPan();\n    /**\n     *内存条\n     * */\n    abstract void neiCun();\n    /**\n     *机箱\n     * */\n    abstract void jiXiang();\n}\n```\n\n还不错，该有的都有了．当我们正在店里逛着时，来了两个顾客，<font color=orange>阿猫</font>和<font color=orange>大牛</font>，他们都来到阿狗店电脑店，挑选的电脑配件，准备组装电脑．\n\n\n\n看看阿猫：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219222853.png)\n\n\n\n在看看大牛的：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219222925.png)\n\n\n\n再看看他们怎么组装的吧：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219223122.png)\n\n## 有想法的阿狗\n\n　　阿狗自从卖电脑后，发现头上的头发也慢慢的长了出来了，每天也更加自信了．一天，他发现客户有个痛点，就是买电脑要分别买好配件，然后再自己组装，有时候买的配件有问题，又要拿去换，导致费时费力．这时，阿狗头脑灵光一闪，想到了当年做程序员时的<font color=orange>模板方法模式</font>；何不把客户组装电脑的步骤自己承包，这样客户只要来买电脑时选下<font color=orange>配件</font>，我就帮他组装好给他．客户省心省力，到时候生意肯定好；于是他改造了他的电脑店：\n\n```java\n/**\n * 阿狗电脑店\n * */\nabstract class AGouShop {\n    /**\n     *显卡\n     * */\n    abstract void xianKa();\n    /**\n     *cpu\n     * */\n    abstract void cpu();\n    /**\n     *电源\n     * */\n    abstract void dianYuan();\n    /**\n     *主板\n     * */\n    abstract void zhuBan();\n    /**\n     *硬盘\n     * */\n    abstract void yingPan();\n    /**\n     *内存条\n     * */\n    abstract void neiCun();\n    /**\n     *机箱\n     * */\n    abstract void jiXiang();\n\n    /**\n     * 阿狗帮客户装电脑\n     * 模板方法\n     * */\n    public void zhuZHuang(){\n        System.out.println(\"阿狗开始组装电脑＝＝＝＝＝＝\");\n        this.cpu();\n        this.dianYuan();\n        this.neiCun();\n        this.xianKa();\n        this.yingPan();\n        this.zhuBan();\n        this.jiXiang();\n        System.out.println(\"阿狗电脑组装完成＝＝＝＝＝＝\");\n    }\n}\n```\n\n上次的阿猫又来买电脑了：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219232821-20211008162122034.png)\n\n看看结果：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219232931.png)\n\n\n\n## 客户反馈\n\n　　阿狗按照上面的模式运行后，缺少增加了不少客户，可是有的顾客却反应说，为什么一定要我选显卡啊，我又不玩游戏，而且我买的cpu有核显，可以不要我选显卡嘛？阿狗一听，这是个问题啊，遵照客户就是上帝的原则(<font color=orange>有钱就赚原则</font>)，于是他又改了他店铺的模式：\n\n```java\n/**\n * 阿狗电脑店\n * */\nabstract class AGouShop {\n    /**\n     *　显卡\n     * ＂具体方法＂\n     * */\n    protected void xianKa(){\n        System.out.println(\"客户选了显卡\");\n    }\n    /**\n     * 是否要显卡　　默认是要显卡的\n     * ＂钩子方法＂\n     * */\n    public boolean isTrue(){\n        return true;\n    }\n    /**\n     *cpu\n     * */\n    abstract void cpu();\n    /**\n     *电源\n     * */\n    abstract void dianYuan();\n    /**\n     *主板\n     * */\n    abstract void zhuBan();\n    /**\n     *硬盘\n     * */\n    abstract void yingPan();\n    /**\n     *内存条\n     * */\n    abstract void neiCun();\n    /**\n     *机箱\n     * */\n    abstract void jiXiang();\n\n    /**\n     * 阿狗帮客户装电脑\n     * 模板方法\n     * */\n    public void zhuZHuang(){\n        System.out.println(\"阿狗开始组装电脑＝＝＝＝＝＝\");\n        this.cpu();\n        this.dianYuan();\n        this.neiCun();\n        //判断要不要显卡\n        if(this.isTrue()) {\n            this.xianKa();\n        }\n        this.yingPan();\n        this.zhuBan();\n        this.jiXiang();\n        System.out.println(\"阿狗电脑组装完成＝＝＝＝＝＝\");\n    }\n}\n```\n\n> 可以看到上加了<font color=orange>具体方法</font>和<font color=orange>钩子方法</font>\n\n上上次的阿猫和大牛，又双来买电脑了－－－－－有钱真好：\n\n阿猫默认要显卡：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219234521-20211008162055559.png)\n\n大牛不要显卡：![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219234630.png)\n\n看看他们的电脑吧：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219234803.png)\n\n\n\n## 总结一下下\n\n  上面对比了阿牛的三种买电脑模式\n\n- 普通模式：自己只提供最基础的东西，所有的由客户自己去完成\n- 自己帮客户完成组装电脑：这里就用到了<font color=orange>模板方法模式</font>，通过对自身方法的封装，使客户买电脑更轻松了\n- 客户有选择显卡的权利：这里用到了<font color=orange>模板方法模式</font>中的<font color=orange>钩子方法</font>，通过客户暴露钩子方法，使其可以控制阿狗在装电脑是要不要装显卡这个步骤方法，<font color=orange>钩子方法</font>是<font color=orange>模板方法模式</font>的灵魂，有了它，这个模式才有更大的意义；","source":"_posts/gof/gof-taemplate-method.md","raw":"---\ntitle: 设计模式系列-模板方法模式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-20 00:04:28\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 设计模式\n- 模板方法模式\ncategories:\n- GOF\n---\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191220000613-20211008162150348.jpg)\n\n> 积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬\n\n\n\n## 文前常规发言\n\n　　模板方法的设计<font color=orange>符合迪米特法则</font>，也就是最少知道原则，他通过对一些重复方法的封装，减少类之间的耦合，让调用者也更省心，原来要调两三个方法才能实现的功能，现在调一个就可以了；就像我们伟大的祖国，现在也在推行这种模式呢．以前区办一些证明什么的，要跑三四个地方，还要保证这三四个地方都正常帮你办理，如果其中一个地方没办理，那么整个流程就都作废了．现在好了，提倡最多跑一次，只要去一个地方办<font color=orange>一次</font>手续就可以了，你只要知道这个地方能办好就行，其他的就不用烦心了；\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219215431.gif)\n\n## 阿狗卖电脑\n\n　　阿狗是一个三十五岁没了头发的年轻小伙，当问及为什么没了头发，阿狗摸摸头，眼里充满了悔恨的泪水；要不是小时候没听大人的话，长大了也不至于做程序员啊－－－阿狗唉声叹气的说道．听到这里，我仿佛已经知道了答案．当我问他为什么现在改行卖电脑了，他说外面的世界很大，想趁年轻，多闯闯（<font color=orange>实则是被公司裁员，被迫来卖电脑了</font>）；\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219220453-20211008162142649.gif)\n\n看看他的电脑店里都有什么\n\n```java\n/**\n * 阿狗电脑店\n * */\nabstract class AGouShop {\n    /**\n     *显卡\n     * */\n    abstract void xianKa();\n    /**\n     *cpu\n     * */\n    abstract void cpu();\n    /**\n     *电源\n     * */\n    abstract void dianYuan();\n    /**\n     *主板\n     * */\n    abstract void zhuBan();\n    /**\n     *硬盘\n     * */\n    abstract void yingPan();\n    /**\n     *内存条\n     * */\n    abstract void neiCun();\n    /**\n     *机箱\n     * */\n    abstract void jiXiang();\n}\n```\n\n还不错，该有的都有了．当我们正在店里逛着时，来了两个顾客，<font color=orange>阿猫</font>和<font color=orange>大牛</font>，他们都来到阿狗店电脑店，挑选的电脑配件，准备组装电脑．\n\n\n\n看看阿猫：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219222853.png)\n\n\n\n在看看大牛的：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219222925.png)\n\n\n\n再看看他们怎么组装的吧：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219223122.png)\n\n## 有想法的阿狗\n\n　　阿狗自从卖电脑后，发现头上的头发也慢慢的长了出来了，每天也更加自信了．一天，他发现客户有个痛点，就是买电脑要分别买好配件，然后再自己组装，有时候买的配件有问题，又要拿去换，导致费时费力．这时，阿狗头脑灵光一闪，想到了当年做程序员时的<font color=orange>模板方法模式</font>；何不把客户组装电脑的步骤自己承包，这样客户只要来买电脑时选下<font color=orange>配件</font>，我就帮他组装好给他．客户省心省力，到时候生意肯定好；于是他改造了他的电脑店：\n\n```java\n/**\n * 阿狗电脑店\n * */\nabstract class AGouShop {\n    /**\n     *显卡\n     * */\n    abstract void xianKa();\n    /**\n     *cpu\n     * */\n    abstract void cpu();\n    /**\n     *电源\n     * */\n    abstract void dianYuan();\n    /**\n     *主板\n     * */\n    abstract void zhuBan();\n    /**\n     *硬盘\n     * */\n    abstract void yingPan();\n    /**\n     *内存条\n     * */\n    abstract void neiCun();\n    /**\n     *机箱\n     * */\n    abstract void jiXiang();\n\n    /**\n     * 阿狗帮客户装电脑\n     * 模板方法\n     * */\n    public void zhuZHuang(){\n        System.out.println(\"阿狗开始组装电脑＝＝＝＝＝＝\");\n        this.cpu();\n        this.dianYuan();\n        this.neiCun();\n        this.xianKa();\n        this.yingPan();\n        this.zhuBan();\n        this.jiXiang();\n        System.out.println(\"阿狗电脑组装完成＝＝＝＝＝＝\");\n    }\n}\n```\n\n上次的阿猫又来买电脑了：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219232821-20211008162122034.png)\n\n看看结果：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219232931.png)\n\n\n\n## 客户反馈\n\n　　阿狗按照上面的模式运行后，缺少增加了不少客户，可是有的顾客却反应说，为什么一定要我选显卡啊，我又不玩游戏，而且我买的cpu有核显，可以不要我选显卡嘛？阿狗一听，这是个问题啊，遵照客户就是上帝的原则(<font color=orange>有钱就赚原则</font>)，于是他又改了他店铺的模式：\n\n```java\n/**\n * 阿狗电脑店\n * */\nabstract class AGouShop {\n    /**\n     *　显卡\n     * ＂具体方法＂\n     * */\n    protected void xianKa(){\n        System.out.println(\"客户选了显卡\");\n    }\n    /**\n     * 是否要显卡　　默认是要显卡的\n     * ＂钩子方法＂\n     * */\n    public boolean isTrue(){\n        return true;\n    }\n    /**\n     *cpu\n     * */\n    abstract void cpu();\n    /**\n     *电源\n     * */\n    abstract void dianYuan();\n    /**\n     *主板\n     * */\n    abstract void zhuBan();\n    /**\n     *硬盘\n     * */\n    abstract void yingPan();\n    /**\n     *内存条\n     * */\n    abstract void neiCun();\n    /**\n     *机箱\n     * */\n    abstract void jiXiang();\n\n    /**\n     * 阿狗帮客户装电脑\n     * 模板方法\n     * */\n    public void zhuZHuang(){\n        System.out.println(\"阿狗开始组装电脑＝＝＝＝＝＝\");\n        this.cpu();\n        this.dianYuan();\n        this.neiCun();\n        //判断要不要显卡\n        if(this.isTrue()) {\n            this.xianKa();\n        }\n        this.yingPan();\n        this.zhuBan();\n        this.jiXiang();\n        System.out.println(\"阿狗电脑组装完成＝＝＝＝＝＝\");\n    }\n}\n```\n\n> 可以看到上加了<font color=orange>具体方法</font>和<font color=orange>钩子方法</font>\n\n上上次的阿猫和大牛，又双来买电脑了－－－－－有钱真好：\n\n阿猫默认要显卡：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219234521-20211008162055559.png)\n\n大牛不要显卡：![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219234630.png)\n\n看看他们的电脑吧：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219234803.png)\n\n\n\n## 总结一下下\n\n  上面对比了阿牛的三种买电脑模式\n\n- 普通模式：自己只提供最基础的东西，所有的由客户自己去完成\n- 自己帮客户完成组装电脑：这里就用到了<font color=orange>模板方法模式</font>，通过对自身方法的封装，使客户买电脑更轻松了\n- 客户有选择显卡的权利：这里用到了<font color=orange>模板方法模式</font>中的<font color=orange>钩子方法</font>，通过客户暴露钩子方法，使其可以控制阿狗在装电脑是要不要装显卡这个步骤方法，<font color=orange>钩子方法</font>是<font color=orange>模板方法模式</font>的灵魂，有了它，这个模式才有更大的意义；","slug":"gof/gof-taemplate-method","published":1,"updated":"2021-10-08T08:21:57.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6efq000vvpuc3swd8g5t","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191220000613-20211008162150348.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p>\n</blockquote>\n<h2 id=\"文前常规发言\"><a href=\"#文前常规发言\" class=\"headerlink\" title=\"文前常规发言\"></a>文前常规发言</h2><p>　　模板方法的设计<font color=orange>符合迪米特法则</font>，也就是最少知道原则，他通过对一些重复方法的封装，减少类之间的耦合，让调用者也更省心，原来要调两三个方法才能实现的功能，现在调一个就可以了；就像我们伟大的祖国，现在也在推行这种模式呢．以前区办一些证明什么的，要跑三四个地方，还要保证这三四个地方都正常帮你办理，如果其中一个地方没办理，那么整个流程就都作废了．现在好了，提倡最多跑一次，只要去一个地方办<font color=orange>一次</font>手续就可以了，你只要知道这个地方能办好就行，其他的就不用烦心了；</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219215431.gif\" alt=\"图片\"></p>\n<h2 id=\"阿狗卖电脑\"><a href=\"#阿狗卖电脑\" class=\"headerlink\" title=\"阿狗卖电脑\"></a>阿狗卖电脑</h2><p>　　阿狗是一个三十五岁没了头发的年轻小伙，当问及为什么没了头发，阿狗摸摸头，眼里充满了悔恨的泪水；要不是小时候没听大人的话，长大了也不至于做程序员啊－－－阿狗唉声叹气的说道．听到这里，我仿佛已经知道了答案．当我问他为什么现在改行卖电脑了，他说外面的世界很大，想趁年轻，多闯闯（<font color=orange>实则是被公司裁员，被迫来卖电脑了</font>）；</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219220453-20211008162142649.gif\" alt=\"图片\"></p>\n<p>看看他的电脑店里都有什么</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 阿狗电脑店</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AGouShop</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *显卡</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">xianKa</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *cpu</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cpu</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *电源</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dianYuan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *主板</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">zhuBan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *硬盘</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">yingPan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *内存条</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">neiCun</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *机箱</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">jiXiang</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还不错，该有的都有了．当我们正在店里逛着时，来了两个顾客，<font color=orange>阿猫</font>和<font color=orange>大牛</font>，他们都来到阿狗店电脑店，挑选的电脑配件，准备组装电脑．</p>\n<p>看看阿猫：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219222853.png\" alt=\"图片\"></p>\n<p>在看看大牛的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219222925.png\" alt=\"图片\"></p>\n<p>再看看他们怎么组装的吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219223122.png\" alt=\"图片\"></p>\n<h2 id=\"有想法的阿狗\"><a href=\"#有想法的阿狗\" class=\"headerlink\" title=\"有想法的阿狗\"></a>有想法的阿狗</h2><p>　　阿狗自从卖电脑后，发现头上的头发也慢慢的长了出来了，每天也更加自信了．一天，他发现客户有个痛点，就是买电脑要分别买好配件，然后再自己组装，有时候买的配件有问题，又要拿去换，导致费时费力．这时，阿狗头脑灵光一闪，想到了当年做程序员时的<font color=orange>模板方法模式</font>；何不把客户组装电脑的步骤自己承包，这样客户只要来买电脑时选下<font color=orange>配件</font>，我就帮他组装好给他．客户省心省力，到时候生意肯定好；于是他改造了他的电脑店：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 阿狗电脑店</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AGouShop</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *显卡</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">xianKa</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *cpu</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cpu</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *电源</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dianYuan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *主板</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">zhuBan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *硬盘</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">yingPan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *内存条</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">neiCun</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *机箱</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">jiXiang</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 阿狗帮客户装电脑</span></span><br><span class=\"line\"><span class=\"comment\">     * 模板方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">zhuZHuang</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;阿狗开始组装电脑＝＝＝＝＝＝&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cpu();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.dianYuan();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.neiCun();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.xianKa();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.yingPan();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.zhuBan();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.jiXiang();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;阿狗电脑组装完成＝＝＝＝＝＝&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上次的阿猫又来买电脑了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219232821-20211008162122034.png\" alt=\"图片\"></p>\n<p>看看结果：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219232931.png\" alt=\"图片\"></p>\n<h2 id=\"客户反馈\"><a href=\"#客户反馈\" class=\"headerlink\" title=\"客户反馈\"></a>客户反馈</h2><p>　　阿狗按照上面的模式运行后，缺少增加了不少客户，可是有的顾客却反应说，为什么一定要我选显卡啊，我又不玩游戏，而且我买的cpu有核显，可以不要我选显卡嘛？阿狗一听，这是个问题啊，遵照客户就是上帝的原则(<font color=orange>有钱就赚原则</font>)，于是他又改了他店铺的模式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 阿狗电脑店</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AGouShop</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *　显卡</span></span><br><span class=\"line\"><span class=\"comment\">     * ＂具体方法＂</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">xianKa</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户选了显卡&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否要显卡　　默认是要显卡的</span></span><br><span class=\"line\"><span class=\"comment\">     * ＂钩子方法＂</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isTrue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *cpu</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cpu</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *电源</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dianYuan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *主板</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">zhuBan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *硬盘</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">yingPan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *内存条</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">neiCun</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *机箱</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">jiXiang</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 阿狗帮客户装电脑</span></span><br><span class=\"line\"><span class=\"comment\">     * 模板方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">zhuZHuang</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;阿狗开始组装电脑＝＝＝＝＝＝&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cpu();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.dianYuan();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.neiCun();</span><br><span class=\"line\">        <span class=\"comment\">//判断要不要显卡</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.isTrue()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.xianKa();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.yingPan();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.zhuBan();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.jiXiang();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;阿狗电脑组装完成＝＝＝＝＝＝&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以看到上加了<font color=orange>具体方法</font>和<font color=orange>钩子方法</font></p>\n</blockquote>\n<p>上上次的阿猫和大牛，又双来买电脑了－－－－－有钱真好：</p>\n<p>阿猫默认要显卡：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219234521-20211008162055559.png\" alt=\"图片\"></p>\n<p>大牛不要显卡：<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219234630.png\" alt=\"图片\"></p>\n<p>看看他们的电脑吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219234803.png\" alt=\"图片\"></p>\n<h2 id=\"总结一下下\"><a href=\"#总结一下下\" class=\"headerlink\" title=\"总结一下下\"></a>总结一下下</h2><p>  上面对比了阿牛的三种买电脑模式</p>\n<ul>\n<li>普通模式：自己只提供最基础的东西，所有的由客户自己去完成</li>\n<li>自己帮客户完成组装电脑：这里就用到了<font color=orange>模板方法模式</font>，通过对自身方法的封装，使客户买电脑更轻松了</li>\n<li>客户有选择显卡的权利：这里用到了<font color=orange>模板方法模式</font>中的<font color=orange>钩子方法</font>，通过客户暴露钩子方法，使其可以控制阿狗在装电脑是要不要装显卡这个步骤方法，<font color=orange>钩子方法</font>是<font color=orange>模板方法模式</font>的灵魂，有了它，这个模式才有更大的意义；</li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191220000613-20211008162150348.jpg\" alt=\"图片\"></p>\n<blockquote>\n<p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p>\n</blockquote>\n<h2 id=\"文前常规发言\"><a href=\"#文前常规发言\" class=\"headerlink\" title=\"文前常规发言\"></a>文前常规发言</h2><p>　　模板方法的设计<font color=orange>符合迪米特法则</font>，也就是最少知道原则，他通过对一些重复方法的封装，减少类之间的耦合，让调用者也更省心，原来要调两三个方法才能实现的功能，现在调一个就可以了；就像我们伟大的祖国，现在也在推行这种模式呢．以前区办一些证明什么的，要跑三四个地方，还要保证这三四个地方都正常帮你办理，如果其中一个地方没办理，那么整个流程就都作废了．现在好了，提倡最多跑一次，只要去一个地方办<font color=orange>一次</font>手续就可以了，你只要知道这个地方能办好就行，其他的就不用烦心了；</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219215431.gif\" alt=\"图片\"></p>\n<h2 id=\"阿狗卖电脑\"><a href=\"#阿狗卖电脑\" class=\"headerlink\" title=\"阿狗卖电脑\"></a>阿狗卖电脑</h2><p>　　阿狗是一个三十五岁没了头发的年轻小伙，当问及为什么没了头发，阿狗摸摸头，眼里充满了悔恨的泪水；要不是小时候没听大人的话，长大了也不至于做程序员啊－－－阿狗唉声叹气的说道．听到这里，我仿佛已经知道了答案．当我问他为什么现在改行卖电脑了，他说外面的世界很大，想趁年轻，多闯闯（<font color=orange>实则是被公司裁员，被迫来卖电脑了</font>）；</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219220453-20211008162142649.gif\" alt=\"图片\"></p>\n<p>看看他的电脑店里都有什么</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 阿狗电脑店</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AGouShop</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *显卡</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">xianKa</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *cpu</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cpu</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *电源</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dianYuan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *主板</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">zhuBan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *硬盘</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">yingPan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *内存条</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">neiCun</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *机箱</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">jiXiang</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还不错，该有的都有了．当我们正在店里逛着时，来了两个顾客，<font color=orange>阿猫</font>和<font color=orange>大牛</font>，他们都来到阿狗店电脑店，挑选的电脑配件，准备组装电脑．</p>\n<p>看看阿猫：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219222853.png\" alt=\"图片\"></p>\n<p>在看看大牛的：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219222925.png\" alt=\"图片\"></p>\n<p>再看看他们怎么组装的吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219223122.png\" alt=\"图片\"></p>\n<h2 id=\"有想法的阿狗\"><a href=\"#有想法的阿狗\" class=\"headerlink\" title=\"有想法的阿狗\"></a>有想法的阿狗</h2><p>　　阿狗自从卖电脑后，发现头上的头发也慢慢的长了出来了，每天也更加自信了．一天，他发现客户有个痛点，就是买电脑要分别买好配件，然后再自己组装，有时候买的配件有问题，又要拿去换，导致费时费力．这时，阿狗头脑灵光一闪，想到了当年做程序员时的<font color=orange>模板方法模式</font>；何不把客户组装电脑的步骤自己承包，这样客户只要来买电脑时选下<font color=orange>配件</font>，我就帮他组装好给他．客户省心省力，到时候生意肯定好；于是他改造了他的电脑店：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 阿狗电脑店</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AGouShop</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *显卡</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">xianKa</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *cpu</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cpu</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *电源</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dianYuan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *主板</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">zhuBan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *硬盘</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">yingPan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *内存条</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">neiCun</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *机箱</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">jiXiang</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 阿狗帮客户装电脑</span></span><br><span class=\"line\"><span class=\"comment\">     * 模板方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">zhuZHuang</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;阿狗开始组装电脑＝＝＝＝＝＝&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cpu();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.dianYuan();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.neiCun();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.xianKa();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.yingPan();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.zhuBan();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.jiXiang();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;阿狗电脑组装完成＝＝＝＝＝＝&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上次的阿猫又来买电脑了：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219232821-20211008162122034.png\" alt=\"图片\"></p>\n<p>看看结果：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219232931.png\" alt=\"图片\"></p>\n<h2 id=\"客户反馈\"><a href=\"#客户反馈\" class=\"headerlink\" title=\"客户反馈\"></a>客户反馈</h2><p>　　阿狗按照上面的模式运行后，缺少增加了不少客户，可是有的顾客却反应说，为什么一定要我选显卡啊，我又不玩游戏，而且我买的cpu有核显，可以不要我选显卡嘛？阿狗一听，这是个问题啊，遵照客户就是上帝的原则(<font color=orange>有钱就赚原则</font>)，于是他又改了他店铺的模式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 阿狗电脑店</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AGouShop</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *　显卡</span></span><br><span class=\"line\"><span class=\"comment\">     * ＂具体方法＂</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">xianKa</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;客户选了显卡&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否要显卡　　默认是要显卡的</span></span><br><span class=\"line\"><span class=\"comment\">     * ＂钩子方法＂</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isTrue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *cpu</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">cpu</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *电源</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">dianYuan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *主板</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">zhuBan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *硬盘</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">yingPan</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *内存条</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">neiCun</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *机箱</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">jiXiang</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 阿狗帮客户装电脑</span></span><br><span class=\"line\"><span class=\"comment\">     * 模板方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">zhuZHuang</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;阿狗开始组装电脑＝＝＝＝＝＝&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.cpu();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.dianYuan();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.neiCun();</span><br><span class=\"line\">        <span class=\"comment\">//判断要不要显卡</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">this</span>.isTrue()) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.xianKa();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.yingPan();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.zhuBan();</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.jiXiang();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;阿狗电脑组装完成＝＝＝＝＝＝&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以看到上加了<font color=orange>具体方法</font>和<font color=orange>钩子方法</font></p>\n</blockquote>\n<p>上上次的阿猫和大牛，又双来买电脑了－－－－－有钱真好：</p>\n<p>阿猫默认要显卡：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219234521-20211008162055559.png\" alt=\"图片\"></p>\n<p>大牛不要显卡：<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219234630.png\" alt=\"图片\"></p>\n<p>看看他们的电脑吧：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191219234803.png\" alt=\"图片\"></p>\n<h2 id=\"总结一下下\"><a href=\"#总结一下下\" class=\"headerlink\" title=\"总结一下下\"></a>总结一下下</h2><p>  上面对比了阿牛的三种买电脑模式</p>\n<ul>\n<li>普通模式：自己只提供最基础的东西，所有的由客户自己去完成</li>\n<li>自己帮客户完成组装电脑：这里就用到了<font color=orange>模板方法模式</font>，通过对自身方法的封装，使客户买电脑更轻松了</li>\n<li>客户有选择显卡的权利：这里用到了<font color=orange>模板方法模式</font>中的<font color=orange>钩子方法</font>，通过客户暴露钩子方法，使其可以控制阿狗在装电脑是要不要装显卡这个步骤方法，<font color=orange>钩子方法</font>是<font color=orange>模板方法模式</font>的灵魂，有了它，这个模式才有更大的意义；</li>\n</ul>\n"},{"title":"MySQL是怎么样通讯的？","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-03-27T15:51:51.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 前言\n我们平常使用数据库的场景一般是程序里面代码直接连接使用，然后进行 CRUD 操作。或者使用有 GUI 界面的数据库软件来手动操作数据库， 这类软件有 DataGrip、Navicat等等...。平常很少关心它们的底层数据交互是怎么样的，相信你看了这篇文章一定能有大概的了解。本篇文章的代码使用 Go 语言来实现 MySQL 的协议。\n## 协议简介\nMySQL 协议一般分为两个阶段，一个是连接阶段，一个是命令阶段。\n连接阶段主要是客户端和服务端进行相互认证的阶段，就像我们平常登陆某个网站的一个操作。\n命令阶段主要是客户端向服务端进行的一些指令的发送，然后服务端处理指令并返回结果的一个过程。\n在客户端和服务端发送的数据包中，前 3 个字节表示这个数据包的大小，所以这里就有一个问题，就是它有一个大小的限制，数据包大小不能超过16777215 ($2^{24}-1$) bytes，也就是 16M 大小（16进制表示：ff ff ff，刚刚 3 个字节）。这就会有三种情况出现，一种是数据包小于 16M，一种是等于，一种是大于。所以在 MySQL 协议中是这样处理的：\n\n- 小于 16M：发送一个数据包就可以了\n- 等于 16M：发送两个数据包，第二个包为空包\n- 大于 16M：发送多个数据包，每个数据包大小最大为 16M，当最后一个数据包等于 16M 时，再多发送一个空数据包\n\n每个数据包中的第 4 个字节表示这个数据包的序号ID，这个 ID 在不同阶段会递增，比如在连接阶段，这个 ID 会随着包的数量而递增，当连接阶段完成后进入命令阶段，这个 ID 又会从 0 开始递增，直到这个命令的生命周期结束。\n## 初始握手包\n当客户端进行尝试使用 TCP 连接 MySQL 服务端时，服务端就会响应一个初始的握手包，这个握手包有 V9、V10 两个版本。不过现在一般用的都是 V10 版本，如果 MySQL 的版本在 3.21.0 之前，那么服务端响应的是 V9 版本的初始握手包。本篇文章就讲讲现在常用的 V10 版本的初始握手包。\n\n我们可以使用以下代码来尝试连接我们本地的 MySQL 服务:\n```go\npackage main\n\nimport \"net\"\n\nfunc main()  {\n\tconn, err := net.Dial(\"tcp\",\"127.0.0.1:3306\")\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer func(conn net.Conn) {\n\t\terr := conn.Close()\n\t\tif err != nil {\n\n\t\t}\n\t}(conn)\n}\n\n```\n运作程序后，服务端就会响应一个初始握手包给我们，那么怎么清楚明了的查看这个数据包呢？此时我们可以用 Wireshark 这个软件来查看 MySQL 服务端返回的数据包\n![image.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2022/03/27/e9eef1979e07465bb18236a94b2e3ba8~tplv-k3u1fbpfcp-zoom-1.image)\n可以看到前 4 个字节为 16 进制的数据: 4e 00 00 00 ，表示了这个数据包大小为 78 字节，序号 ID 为 0。具体的字段字节大小和描述如下表示：\n\n| 字段名 | 字节数据长度(byte) | 描述 |\n| --- | --- | --- |\n| Protocol | 1 | 初始握手包协议版本，可以根据这个字节数据来判断握手包的协议版本，然后按不同版本来处理接下来的数据 |\n| Version | 直到遇到字节数据为 0 的时候停止 | MySQL 服务端版本描述字符串 |\n| Thread ID | 4 | 连接 ID |\n| Slat（第一段） | 8 | 用于处理后续客户端的密码加密 |\n| filler | 1 | 填充一个字节，默认为 0 |\n| Service Capability（Low） | 2 | 服务端能力标志，一共有 4 个字节，这里表示的是低 2 位字节的数据 |\n| Server Language | 1 | 服务端字符编码 |\n| Server Status | 2 | 服务端状态 |\n| Service Capability（Upper） | 2 | 服务端能力标志，这里表示的是高 2 位字节的数据 |\n| Authentication Plugin Length | 1 | 身份验证插件长度 |\n| Unused | 10 | 预留的 10 个字节数据，默认全部为 0 |\n| Slat（第二段） | 计算公式：MAX(13, 身份验证插件长度 - 8) | 用于处理后续客户端的密码加密 |\n| Authentication Plugin | 直到遇到字节数据为 0 的时候停止 | 身份验证插件 |\n\n这个初始握手包里包含了很多的数据，在后续的整个连接阶段需要用到里面的大部分数据。\n## 能力标志\n上面服务端响应端初始握手包中包含了一个能力标志，这个能力标志一共有 4 个字节来表示，我们知道 1 个字节有 8 个 bit，所以 4 个字节一共有 32 个 bit，其中除了最高的 7 个 bit，另外的每一个 bit 都代表着一个能力标志的状态（0 为不支持，1 为支持）,就像下面这样表示\n```\n# Capabilities 字节数据中的低 2 位\nServer Capabilities: 0xffff\n.... .... .... ...1 = Long Password: Set\n.... .... .... ..1. = Found Rows: Set\n.... .... .... .1.. = Long Column Flags: Set\n.... .... .... 1... = Connect With Database: Set\n.... .... ...1 .... = Don't Allow database.table.column: Set\n.... .... ..1. .... = Can use compression protocol: Set\n.... .... .1.. .... = ODBC Client: Set\n.... .... 1... .... = Can Use LOAD DATA LOCAL: Set\n.... ...1 .... .... = Ignore Spaces before '(': Set\n.... ..1. .... .... = Speaks 4.1 protocol (new flag): Set\n.... .1.. .... .... = Interactive Client: Set\n.... 1... .... .... = Switch to SSL after handshake: Set\n...1 .... .... .... = Ignore sigpipes: Set\n..1. .... .... .... = Knows about transactions: Set\n.1.. .... .... .... = Speaks 4.1 protocol (old flag): Set\n1... .... .... .... = Can do 4.1 authentication: Set\n\n# Capabilities 字节数据中的高 2 位\nExtended Server Capabilities: 0xc1ff\n.... .... .... ...1 = Multiple statements: Set\n.... .... .... ..1. = Multiple results: Set\n.... .... .... .1.. = PS Multiple results: Set\n.... .... .... 1... = Plugin Auth: Set\n.... .... ...1 .... = Connect attrs: Set\n.... .... ..1. .... = Plugin Auth LENENC Client Data: Set\n.... .... .1.. .... = Client can handle expired passwords: Set\n.... .... 1... .... = Session variable tracking: Set\n.... ...1 .... .... = Deprecate EOF: Set\n1100 000. .... .... = Unused: 0x60\n```\n除了服务端响应的初始握手包会返回这个能力标志，后续我们发送给服务端的 **HandshakeResponse** 数据包中也包含这个能力标志数据，那么我们该怎么发送这个能力标志数据呢？官方给出力各个能力的值，如下表：\n\n| 序号 | **Capability Flags** | **值【16进制】** |\n| --- | --- | --- |\n| 1 | CLIENT_LONG_PASSWORD | 0x1 |\n| 2 | CLIENT_FOUND_ROWS | 0x2 |\n| 3 | CLIENT_LONG_FLAG | 0x4 |\n| 4 | CLIENT_CONNECT_WITH_DB | 0x8 |\n| 5 | CLIENT_NO_SCHEMA | 0x10 |\n| 6 | CLIENT_COMPRESS | 0x20 |\n| 7 | CLIENT_ODBC | 0x40 |\n| 8 | CLIENT_LOCAL_FILES | 0x80 |\n| 9 | CLIENT_IGNORE_SPACE | 0x100 |\n| 10 | CLIENT_PROTOCOL_41 | 0x200 |\n| 11 | CLIENT_INTERACTIVE | 0x400 |\n| 12 | CLIENT_SSL | 0x800 |\n| 13 | CLIENT_IGNORE_SIGPIPE | 0x1000 |\n| 14 | CLIENT_TRANSACTIONS | 0x2000 |\n| 15 | CLIENT_RESERVED | 0x4000 |\n| 16 | CLIENT_SECURE_CONNECTION | 0x8000 |\n| 17 | CLIENT_MULTI_STATEMENTS | 0x10000 |\n| 18 | CLIENT_MULTI_RESULTS | 0x20000 |\n| 19 | CLIENT_PS_MULTI_RESULTS | 0x40000 |\n| 20 | CLIENT_PLUGIN_AUTH | 0x80000 |\n| 21 | CLIENT_CONNECT_ATTRS | 0x100000 |\n| 22 | CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA | 0x200000 |\n| 23 | CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS | 0x400000 |\n| 24 | CLIENT_SESSION_TRACK | 0x800000 |\n| 25 | CLIENT_DEPRECATE_EOF | 0x1000000 |\n\n当我们要发送客户端支持的能力标志时，只要把所有支持的能力标志的值相加，然后转换为 4 字节大小的数据。\n例如我们要发送个给服务端说明我们支持 **CLIENT_PROTOCOL_41** 这个能力，那么我们就可以把这个 16 进制的值转换为 4 个字节的数据来表示，转换后的数据为：[0 0 16 0]。HEX 表示法为：[00 00 10 00]\n> 注意：上面转换的字节数据为小端数据，这方面端知识具体可以查询字节序的大小端\n\n## 字符编码\n初始握手包还有一个字节表示了支持的字符编码，后续我们响应的 **HandshakeResponse **数据包中也要发送客户端支持的字符编码，相对应的字符编码对应的 ID 如下表，当我们支持什么字符编码时，只要发送对应编码的 ID\n就可以了。\n```go\n+--------------------+---------------------+-----+\n| CHARACTER_SET_NAME | COLLATION_NAME      | ID  |\n+--------------------+---------------------+-----+\n| big5               | big5_chinese_ci     |   1 |\n| dec8               | dec8_swedish_ci     |   3 |\n| cp850              | cp850_general_ci    |   4 |\n| hp8                | hp8_english_ci      |   6 |\n| koi8r              | koi8r_general_ci    |   7 |\n| latin1             | latin1_swedish_ci   |   8 |\n| latin2             | latin2_general_ci   |   9 |\n| swe7               | swe7_swedish_ci     |  10 |\n| ascii              | ascii_general_ci    |  11 |\n| ujis               | ujis_japanese_ci    |  12 |\n| sjis               | sjis_japanese_ci    |  13 |\n| hebrew             | hebrew_general_ci   |  16 |\n| tis620             | tis620_thai_ci      |  18 |\n| euckr              | euckr_korean_ci     |  19 |\n| koi8u              | koi8u_general_ci    |  22 |\n| gb2312             | gb2312_chinese_ci   |  24 |\n| greek              | greek_general_ci    |  25 |\n| cp1250             | cp1250_general_ci   |  26 |\n| gbk                | gbk_chinese_ci      |  28 |\n| latin5             | latin5_turkish_ci   |  30 |\n| armscii8           | armscii8_general_ci |  32 |\n| utf8               | utf8_general_ci     |  33 |\n| ucs2               | ucs2_general_ci     |  35 |\n| cp866              | cp866_general_ci    |  36 |\n| keybcs2            | keybcs2_general_ci  |  37 |\n| macce              | macce_general_ci    |  38 |\n| macroman           | macroman_general_ci |  39 |\n| cp852              | cp852_general_ci    |  40 |\n| latin7             | latin7_general_ci   |  41 |\n| cp1251             | cp1251_general_ci   |  51 |\n| utf16              | utf16_general_ci    |  54 |\n| utf16le            | utf16le_general_ci  |  56 |\n| cp1256             | cp1256_general_ci   |  57 |\n| cp1257             | cp1257_general_ci   |  59 |\n| utf32              | utf32_general_ci    |  60 |\n| binary             | binary              |  63 |\n| geostd8            | geostd8_general_ci  |  92 |\n| cp932              | cp932_japanese_ci   |  95 |\n| eucjpms            | eucjpms_japanese_ci |  97 |\n| gb18030            | gb18030_chinese_ci  | 248 |\n| utf8mb4            | utf8mb4_0900_ai_ci  | 255 |\n+--------------------+---------------------+-----+\n```\n## **客户端握手响应包（HandshakeResponse）**\n客户端和 MySQL 服务端进行数据交互时，有明文数据交互和SSL加密数据交互，这里贴一张 MySQL 官网给出的一张图，这张图大致的描述了客户端和服务端连接的流程\n![image.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2022/03/27/6e65f83b1bcc4b5296d913bf0ac830b1~tplv-k3u1fbpfcp-zoom-1.image)\n本篇文章就讲下简单的明文连接，不管是明文连接和加密连接，客户端都必须返回 **HandshakeResponse **这个数据包给服务端。\n这个数据包也有两个版本，一个是 **HandshakeResponse41，**另一个是** HandshakeResponse320。**现在一般都是用 **HandshakeResponse41 **这个版本的数据包。那么服务端要怎么知道客户端发送的数据包到底是什么版本呢？\n这个就要用到上面的 **CLIENT_PROTOCOL_41 **这个能力标志了，服务端只要解析客户端发来的 **HandshakeResponse **数据包中的 Capability Flags 数据中是否支持 **CLIENT_PROTOCOL_41 **这个能力，来判断客户端握手响应包的版本。当 **CLIENT_PROTOCOL_41 **这个能力为支持状态，说明版本是** HandshakeResponse41，否则就是 HandshakeResponse320。**\n\n### **HandshakeResponse41**\n现在常用的就是 **HandshakeResponse41 **这个握手响应包，本篇文章就讲一讲这个握手响应包吧。这个包的描述如下：\n```cpp\n4              capability flags, CLIENT_PROTOCOL_41 always set\n4              max-packet size\n1              character set\nstring[23]\t   reserved (all [0])\nstring[NUL]    username\n\n\nif capabilities & CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA {\n  // 如果支持 CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA 标志就返回这些数据\n  lenenc-int     length of auth-response\n  string[n]      auth-response\n} else if capabilities & CLIENT_SECURE_CONNECTION {\n  // 如果支持 CLIENT_SECURE_CONNECTION 标志就返回这些数据\n  1              length of auth-response\n  string[n]      auth-response\n} else {\n  // 否则就返回这个数据\n  string[NUL]    auth-response\n}\n\nif capabilities & CLIENT_CONNECT_WITH_DB {\n  // 如果支持 CLIENT_CONNECT_WITH_DB 标志就返回这些数据\n  string[NUL]    database\n}\n\nif capabilities & CLIENT_PLUGIN_AUTH {\n  // 如果支持 CLIENT_PLUGIN_AUTH 标志就返回这些数据\n  string[NUL]    auth plugin name\n}\n\nif capabilities & CLIENT_CONNECT_ATTRS {\n  // 如果支持 CLIENT_CONNECT_ATTRS 标志就返回这些数据\n  lenenc-int     length of all key-values\n  lenenc-str     key\n  lenenc-str     value\n  if-more data in 'length of all key-values', more keys and value pairs\n }\n```\n\n- **capability_flags** -- 客户端的能力标志，占用 4 个字节\n- **max_packet_size**  -- 客户端要发送到服务器的命令包的最大大小，占用 4 个字节\n- **character_set** - 连接的默认字符集，占用 1 个字节\n- username -- 客户端要登录的 SQL 帐户的名称 -- 此字符串应使用character set字段指示的字符集进行编码。\n- **auth-response**  --由 auth plugin name 字段指示的 [Authentication Method](https://dev.mysql.com/doc/internals/en/authentication-method.html) 生成的加密的身份验证响应数据。\n- **database**  -- 用于连接的初始数据库 -- 此字符串应使用 character set字段指示的字符集进行编码。\n- auth plugin name  -- 客户端用此加密方法加密密码然后赋值给 auth-response 返回给服务端\n### 密码加密方式\n客户端传输给服务端的 MySQL 账户的密码加密方式采用插件的形式，就是 auth plugin name 这个字段的数据，一般支持以下几种加密方式\n\n| **名称** | **Auth Plugin Name** | **能力标志** |\n| --- | --- | --- |\n| 旧密码认证 | mysql_old_password | 不能使用，无能力标志 |\n| 安全密码认证 | mysql_native_password | [CLIENT_SECURE_CONNECTION](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_SECURE_CONNECTION) |\n| 明文认证 | mysql_clear_password | [CLIENT_PLUGIN_AUTH](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PLUGIN_AUTH) |\n| Windows 原生身份验证 | authentication_windows_client | [CLIENT_PLUGIN_AUTH](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PLUGIN_AUTH) |\n| SHA256 | sha256_password | [CLIENT_PLUGIN_AUTH](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PLUGIN_AUTH) |\n\n现在一般常用的是安全密码认证，就是 **Auth Plugin Name **为 mysql_native_password 的认证加密方式。这个方法的加密方式如下\n```bash\nSHA1( password ) XOR SHA1( \"20-bytes random data from server\" <concat> SHA1( SHA1( password ) ) )\n```\n它先对明文密码进行一次 SHA1 的散列运算生成密码 1，然后再将服务端初始握手包中的 20 位 Slat 数据和对明文密码进行两次 SHA1 散列的结果进行连接，然后对连接的结果再进行一次散列运算生成密码 2，最后密码 1 和密码 2 进行异或运算，得到来最终发送给服务端的数据。\n## 响应数据包\n当我们发送响应握手包 **HandshakeResponse** 后，服务端就会返回一个通用的响应包给我们，这个响应包可以是以下其中一个：\n\n- OK_Packet\n- ERR_Packet\n- EOF_Packet\n\n那么我们要怎么区分这三个包呢？区分的关键在于包的第一个字节的数据，如果第一个字节数据为 0x00，则代表这是一个 OK_Packet 。如果第一个字节数据为 0xff，则表示这是一个 ERR_Packet。如果第一个字节为 0xfe，则代表这是一个 EOF_Packet。\n从 MySQL 5.7.5 开始，OK_Packet 包也用于指示 EOF_Packet，并且不推荐使用 EOF_Packet 包。为了确保 MySQL 的旧版本（5.7.5 之前）和新版本（5.7.5 及更高版本）之间的向后兼容性，新客户端会向服务端该送 [CLIENT_DEPRECATE_EOF](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_DEPRECATE_EOF) 能力标志。如果没有传送这个能力标志，服务端返回端数据结果集中还是会以 EOF_Packet 包结尾，如果传送了这个能力标志的话，服务端返回端结果集中会以 OK_Packet 包结尾，并且第一个字节数据会是 0xfe。\n那么我们怎么区分新版 OK_Packet 包在什么时候代表 OK_Packet，在什么时候代表 EOF_Packet 呢？主要可以通过以下几点来判断：\n\n- 一个是判断客户端刚才是否传送了 [CLIENT_DEPRECATE_EOF](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_DEPRECATE_EOF) 能力标志\n- OK_Packet: 第一个字节数据为 0x00，且数据包长度 > 7\n- EOF_Packet: 第一个字节数据为 0xfe，且数据包长度 < 9\n### OK_Packet 格式\n```cpp\nint<1>\t\t\theader\t\t\t\t[00] or [fe] the OK packet header\nint<lenenc>\taffected_rows\t\t受影响行数\nint<lenenc>\tlast_insert_id\t\t最后插入 ID\n\nif capabilities & CLIENT_PROTOCOL_41 {\n    int<2>\t\tstatus_flags\t状态标志\n    int<2>\t\twarnings\t\t警告数\n} elseif capabilities & CLIENT_TRANSACTIONS {\n    int<2>\t\tstatus_flags\tStatus Flags\n}\n\nif capabilities & CLIENT_SESSION_TRACK {\n    string<lenenc>\tinfo\t人类可读的状态信息\n    \n    if status_flags & SERVER_SESSION_STATE_CHANGED {\n        string<lenenc>\tsession_state_changes\t会话状态信息\n    }\n    \n} else {\n    string<EOF>\tinfo\t\t人类可读的状态信息\n}\n```\n### ERR_Packet 格式\n```cpp\nint<1>\t\theader\t\t\t\t[ff] header of the ERR packet\nint<2>\t\terror_code\t\t\t错误代码\n\nif capabilities & CLIENT_PROTOCOL_41 {\n  string<1>\tsql_state_marker\tSQL 状态的标记\n  string<5>\tsql_state\t\t\tSQL 状态\n}\n\nstring<EOF>\terror_message\t\t人类可读的错误信息\n```\n### EOF_Packet 格式\n```cpp\nint<1>\t\theader\t\t\t\t[fe] EOF header\n\nif capabilities & CLIENT_PROTOCOL_41 {\n  int<2>\twarnings\t\t\t警告数\n  int<2>\tstatus_flags\t\t状态标志\n}\n```\n## 数据包数据类型介绍\n在上面的数据包格式中，你是不是看到例如 int<1>、string<EOF>、int<lenenc> 等等这些一头雾水？这个是 MySQL 官网文档中表示协议数据类型和长度的。主要数据类型如下表：\n\n| **数据类型** | **字节长度** |\n| --- | --- |\n| int<1> | 1 字节 |\n| int<2> | 2 字节 |\n| int<3> | 3 字节 |\n| int<4> | 4 字节 |\n| int<6> | 6 字节 |\n| int<8> | 8 字节 |\n| int\\<lenenc> | 见下文详细介绍 |\n| string\\<lenenc> | 见下文详细介绍 |\n| string\\<fix> | 固定字节长度的字符串，其中 fix 代表一个指定的数值，例如 string<5>，其中 fix 就等于 5 |\n| string\\<var> | 字符串的长度由另一个字段确定或在运行时计算 |\n| string\\<EOF> | 如果字符串是数据包的最后一个组成部分，则它的长度可以从整个数据包长度减去当前位置来计算。 |\n| string\\<NUL> | 以 [00] 字节结尾的字符串。 |\n\n在上面的表格中，大部分的数据类型的长度基本上都可以直接得知，但是其中 int\\<lenenc>、string\\<lenenc> 这两个类型的长度需要通过稍微复杂一点的计算来得到最终的数据长度。\n### int\\<lenenc>\n当要解析这个长度的数据时，它一般开头的第一个字节有 4 中表现形式\n\n- 第一个字节的值小于 0xfb：代表这个数据就是这一个字节长度，并且第一个字节的值就是对应字段的值\n- 第一个字节的值等于 0xfc：代表这个字节往后的两个字节就是这个字段的数据，就是说这个字段一个占用 3 个字节长度，其中第 1 个字节表示该字段占用的字节长度数据，第 2 和第 3 个字节表示的是这个字段的数据\n-  第一个字节的值等于 0xfd：和上面类似，只是字段数据字节一共占用 4 个字节，其中后 3 个字节表示这个字段的数据\n- 第一个字节的值等于 0xfe：字段数据字节一共占用 9 个字节，其中后 8 个字节表示这个字段的数据\n> 注意：在 MySQL 3.22 版本以前，0xfe 表示的这个字段只有 4 个字节长度。\n> 如果数据包的第一个字节是长度编码的整数并且其字节值为 0xfe，则必须检查数据包的长度以验证它是否有足够的空间容纳 8 字节整数。\n> 如果不是，它可能是一个 [EOF_Packet](https://dev.mysql.com/doc/internals/en/packet-EOF_Packet.html) 替代。\n\n\n所以要得到这个字段对应的字节长度时，只要判断第一个字节的数据，然后就可以轻松获得这个字段的长度了\n### string\\<lenenc>\n这个数据类型分为两部分\n\n- **length** ([int<lenenc>](https://dev.mysql.com/doc/internals/en/describing-packets.html#type-lenenc_int)) -- string 数据的占用字节长度\n- **string** ([string<fix>](https://dev.mysql.com/doc/internals/en/describing-packets.html#type-string.fix_len)) -- [len=$length] string\n\n其中 length 这个数据通过上面 int\\<lenenc> 的方法获得，然后 string 的数据的字节长度就是 length 的值\n## 发送命令\n当我们连接成功后，这时就可以向服务端发送命令了，命令如下表：\n\n| **HEX 值** | **NAME** |\n| --- | --- |\n| 00 | [COM_SLEEP](https://dev.mysql.com/doc/internals/en/com-sleep.html#packet-COM_SLEEP) |\n| 01 | [COM_QUIT](https://dev.mysql.com/doc/internals/en/com-quit.html#packet-COM_QUIT) |\n| 02 | [COM_INIT_DB](https://dev.mysql.com/doc/internals/en/com-init-db.html#packet-COM_INIT_DB) |\n| 03 | [COM_QUERY](https://dev.mysql.com/doc/internals/en/com-query.html#packet-COM_QUERY) |\n| 04 | [COM_FIELD_LIST](https://dev.mysql.com/doc/internals/en/com-field-list.html#packet-COM_FIELD_LIST) |\n| 05 | [COM_CREATE_DB](https://dev.mysql.com/doc/internals/en/com-create-db.html#packet-COM_CREATE_DB) |\n| 06 | [COM_DROP_DB](https://dev.mysql.com/doc/internals/en/com-drop-db.html#packet-COM_DROP_DB) |\n| 07 | [COM_REFRESH](https://dev.mysql.com/doc/internals/en/com-refresh.html#packet-COM_REFRESH) |\n| 08 | [COM_SHUTDOWN](https://dev.mysql.com/doc/internals/en/com-shutdown.html#packet-COM_SHUTDOWN) |\n| 09 | [COM_STATISTICS](https://dev.mysql.com/doc/internals/en/com-statistics.html#packet-COM_STATISTICS) |\n| 0a | [COM_PROCESS_INFO](https://dev.mysql.com/doc/internals/en/com-process-info.html#packet-COM_PROCESS_INFO) |\n| 0b | [COM_CONNECT](https://dev.mysql.com/doc/internals/en/com-connect.html#packet-COM_CONNECT) |\n| 0c | [COM_PROCESS_KILL](https://dev.mysql.com/doc/internals/en/com-process-kill.html#packet-COM_PROCESS_KILL) |\n| 0d | [COM_DEBUG](https://dev.mysql.com/doc/internals/en/com-debug.html#packet-COM_DEBUG) |\n| 0e | [COM_PING](https://dev.mysql.com/doc/internals/en/com-ping.html#packet-COM_PING) |\n| 0f | [COM_TIME](https://dev.mysql.com/doc/internals/en/com-time.html#packet-COM_TIME) |\n| 10 | [COM_DELAYED_INSERT](https://dev.mysql.com/doc/internals/en/com-delayed-insert.html#packet-COM_DELAYED_INSERT) |\n| 11 | [COM_CHANGE_USER](https://dev.mysql.com/doc/internals/en/com-change-user.html#packet-COM_CHANGE_USER) |\n| 12 | [COM_BINLOG_DUMP](https://dev.mysql.com/doc/internals/en/com-binlog-dump.html#packet-COM_BINLOG_DUMP) |\n| 13 | [COM_TABLE_DUMP](https://dev.mysql.com/doc/internals/en/com-table-dump.html#packet-COM_TABLE_DUMP) |\n| 14 | [COM_CONNECT_OUT](https://dev.mysql.com/doc/internals/en/com-connect-out.html#packet-COM_CONNECT_OUT) |\n| 15 | [COM_REGISTER_SLAVE](https://dev.mysql.com/doc/internals/en/com-register-slave.html#packet-COM_REGISTER_SLAVE) |\n| 16 | [COM_STMT_PREPARE](https://dev.mysql.com/doc/internals/en/com-stmt-prepare.html#packet-COM_STMT_PREPARE) |\n| 17 | [COM_STMT_EXECUTE](https://dev.mysql.com/doc/internals/en/com-stmt-execute.html#packet-COM_STMT_EXECUTE) |\n| 18 | [COM_STMT_SEND_LONG_DATA](https://dev.mysql.com/doc/internals/en/com-stmt-send-long-data.html#packet-COM_STMT_SEND_LONG_DATA) |\n| 19 | [COM_STMT_CLOSE](https://dev.mysql.com/doc/internals/en/com-stmt-close.html#packet-COM_STMT_CLOSE) |\n| 1a | [COM_STMT_RESET](https://dev.mysql.com/doc/internals/en/com-stmt-reset.html#packet-COM_STMT_RESET) |\n| 1b | [COM_SET_OPTION](https://dev.mysql.com/doc/internals/en/com-set-option.html#packet-COM_SET_OPTION) |\n| 1c | [COM_STMT_FETCH](https://dev.mysql.com/doc/internals/en/com-stmt-fetch.html#packet-COM_STMT_FETCH) |\n| 1d | [COM_DAEMON](https://dev.mysql.com/doc/internals/en/com-daemon.html#packet-COM_DAEMON) |\n| 1e | [COM_BINLOG_DUMP_GTID](https://dev.mysql.com/doc/internals/en/com-binlog-dump-gtid.html#packet-COM_BINLOG_DUMP_GTID) |\n| 1f | [COM_RESET_CONNECTION](https://dev.mysql.com/doc/internals/en/com-reset-connection.html#packet-COM_RESET_CONNECTION) |\n\n一般我们用的最多的就是 COM_QUERY 这个命令，像 CRUD 都可以通过这个命令来发送，例如我们发送一个查询当前数据库，就可以发送下面的字节数据给服务端\n```bash\n0f 00 00 00 \t03 73 68 6f 77 20 64 61 74 61 62 61\n73 65 73\n```\n其中前 4 个字节代表这个包的大小和序号 ID，后面的字节数据就是我们发送的命令。\n03 代表这个命令是 COM_QUERY。 \n后面所有的字节数据都是 show databses 转换 byte 后的字节数据\n## 结果集\n当你发送的 COM_QUERY 命令时，它返回三种数据包的其中一种。我们可以通过第一个字节来判断它：\n\n- 当第一个字节数据等于 0x00：返回的是 OK_Packet\n- 当第一个字节的数据等于 0xff：返回的是 ERR_Packet\n- 当第一个字节的数据不是以上两个值时：返回一个结果集，并且第一个字节的值代表返回结果集中列（columns）的总数。\n\n**结果集分 3 个部分来读取：**\n\n- 第一个数据包表示返回结果集中列（columns）的总数。\n- 然后通过第一个数据包获取的列总数来读取相关列的所有数据包，一列有一个数据包，比如说上面得到列总数为 3，那么接下来的 3 个数据包就是这 3 列的说明。\n- 读完列的所有数据包后，紧接着就是没行数据的数据包了，一个数据包代表一行数据，每个数据包中有所有列的字段值。其中，如果值长度的值为 0xfe 时，则代表这行中这列的数据为 NULL。行数据直到读取到 OK_Packet/EOF_Packet 包出现为止。\n### COM_QUERY_Response 格式\n```cpp\n// 字节长度计算方法见上面的 int<lenenc> 介绍\nint<lenenc>     结果集中列（columns）的总数。\n```\n### 列数据包格式\n列数据包格式也分为两种格式，也是通过客户端上传的 [CLIENT_PROTOCOL_41](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PROTOCOL_41) 能力标志来觉得的。\n如果客户端支持 [CLIENT_PROTOCOL_41](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PROTOCOL_41) 这个能力标志，服务端返回 **ColumnDefinition41** 这个列数据包。\n如果客户端不支持  [CLIENT_PROTOCOL_41](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PROTOCOL_41)  这个能力标志的话，服务端就返回 **ColumnDefinition320** 这个版本的列数据包。\n现在一般都使用 **ColumnDefinition41** 这个数据包，这个数据包描述如下：\n```cpp\nstring<lenenc>      catalog\t\t\t\t目录 (固定为 \"def\")\nstring<lenenc>      schema\t\t\t\t数据库\nstring<lenenc>      table\t\t\t\t虚拟表\nstring<lenenc>      org_table\t\t\t源表\nstring<lenenc>      name\t\t\t\t虚拟名称\nstring<lenenc>      org_name\t\t\t源名称\nstring<lenenc>      length of fixed-length fields [0c]\n2              \t\tcharacter set\t\t字符集\n4              \t\tcolumn length\t\t字段的最大长度\n1              \t\ttype\t\t\t\t列类型\n2              \t\tflags\t\t\t\t标志\n1              \t\tdecimals\t\t\t显示的小数位数\n2              \t\tfiller [00] [00]\t两个空占位符\n\nif command was COM_FIELD_LIST {\n    int<lenenc>     length of default-values\n    string[$len]   \tdefault values\n}\n```\n### 行数据包格式\n行数据包里面包含了所有列的字段数据，每个列的字段的数据可以通过 string\\<lenenc> 数据类型的计算的方式获得，其中要注意的是，如果字段长度描述字节的数据等于 0xfe 时，代表这行中这列的数据为 NULL。\n下图是行数据包的表现形式：\n\n![image.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2022/03/27/5ee42af3f32e41739eb78d61b027987d~tplv-k3u1fbpfcp-zoom-1.image)\n## 代码实现\n通过以上的介绍，现在我们可以用代码来实现不用第三方驱动的情况下手动连接 MySQL 服务器，然后发送一条查询 databses 的命令。下面的是代码片段，完整代码连接：[https://gist.github.com/greycodee/22f98464fece7792a83433a1fba58e2a](https://gist.github.com/greycodee/22f98464fece7792a83433a1fba58e2a)\n### 连接 MySQL 服务器\n```go\ntype MySQLClient struct {\n\tconn net.Conn\n\taddr string\n\tusername string\n\tpassword\tstring\n}\n\nfunc (m *MySQLClient) init()  {\n\t// 连接阶段\n\thandshake := m.startConn()\n\tm.sendHandshakeResponse41(handshake)\n}\n\n\n/*\n\t连接 MySQL 服务器\n*/\nfunc (m *MySQLClient) startConn() *HandshakeV10 {\n\tm.conn, _ = net.Dial(\"tcp\",m.addr)\n\tinitResp := make([]byte,1024)\n\treadLen, _ := m.conn.Read(initResp)\n\treturn ReadHandShakeV10(initResp[:readLen])\n}\n```\n### 解析初始握手数据包\n```go\n/*\n\t解析初始握手包 HandShakeV10\n*/\nfunc ReadHandShakeV10(data []byte) *HandshakeV10 {\n\tindex := 0\n\tvar h = &HandshakeV10{}\n\tindex+=4\n\th.ProtocolVersion= int32(data[index])\n\tindex++\n\tvar serverVersion []byte\n\tfor data[index]!=0 {\n\t\tserverVersion = append(serverVersion,data[index])\n\t\tindex++\n\t}\n\th.ServerVersion = string(serverVersion)\n\tindex++\n\tconnectByte := data[index:index+4]\n\tfor i :=range connectByte{\n\t\th.ConnectionId+=int32(connectByte[i])\n\t}\n\tindex+=4\n\tvar apdp1 []byte\n\tapdp1Byte := data[index:index+8]\n\tfor i := range apdp1Byte {\n\t\tapdp1 = append(apdp1, apdp1Byte[i])\n\t}\n\th.AuthPluginDataPart_1 = string(apdp1)\n\tindex+=9\n\t// 能力低2位\n\tc_flag_low_1 := strings.Split(fmt.Sprintf(\"%b\\n\",data[index+1]),\"\")\n\tc_flag_low_2 := strings.Split(fmt.Sprintf(\"%b\\n\",data[index]),\"\")\n\n\tindex+=2\n\t// 编码获取\n\th.CharacterSet = int32(data[index])\n\tindex++\n\t// 服务器状态\n\tindex+=2\n\t// 能力高2位\n\tc_flag_up_1 := strings.Split(fmt.Sprintf(\"%b\\n\",data[index+1]),\"\")\n\tc_flag_up_2 := strings.Split(fmt.Sprintf(\"%b\\n\",data[index]),\"\")\n\tvar capabilityFlags []string\n\tcapabilityFlags = append(capabilityFlags,c_flag_up_1...)\n\tcapabilityFlags = append(capabilityFlags,c_flag_up_2...)\n\tcapabilityFlags = append(capabilityFlags,c_flag_low_1...)\n\tcapabilityFlags = append(capabilityFlags,c_flag_low_2...)\n\tindex+=2\n\tif strings.EqualFold(\"1\",capabilityFlags[19]){\n\t\th.AuthPluginDataLen= int32(data[index])\n\t}\n\tindex++\n\tindex+=10\n\tif strings.EqualFold(\"1\",capabilityFlags[15]){\n\t\tp2Len := 13\n\t\tp2len1 := int(h.AuthPluginDataLen-8)\n\t\tif p2Len < p2len1 {\n\t\t\tp2Len = p2len1\n\t\t}\n\t\th.AuthPluginDataPart_2 = string(data[index:index+p2Len])\n\t\tindex+=p2Len\n\t}\n\tif strings.EqualFold(\"1\",capabilityFlags[19]) {\n\t\tvar authPlugName []byte\n\t\tfor data[index] != 0 {\n\t\t\tauthPlugName = append(authPlugName,data[index])\n\t\t\tindex++\n\t\t}\n\t\th.AuthPluginName = string(authPlugName)\n\t}\n\n\treturn h\n}\ntype HandshakeV10 struct {\n\tProtocolVersion      int32  `protobuf:\"varint,1,opt,name=protocol_version,json=protocolVersion,proto3\" json:\"protocol_version,omitempty\"`\n\tServerVersion        string `protobuf:\"bytes,2,opt,name=server_version,json=serverVersion,proto3\" json:\"server_version,omitempty\"`\n\tConnectionId         int32  `protobuf:\"varint,3,opt,name=connection_id,json=connectionId,proto3\" json:\"connection_id,omitempty\"`\n\tAuthPluginDataPart_1 string `protobuf:\"bytes,4,opt,name=auth_plugin_data_part_1,json=authPluginDataPart1,proto3\" json:\"auth_plugin_data_part_1,omitempty\"`\n\tCharacterSet         int32  `protobuf:\"varint,6,opt,name=character_set,json=characterSet,proto3\" json:\"character_set,omitempty\"`\n\tStatusFlags          int32  `protobuf:\"varint,7,opt,name=status_flags,json=statusFlags,proto3\" json:\"status_flags,omitempty\"`\n\tAuthPluginDataLen    int32  `protobuf:\"varint,8,opt,name=auth_plugin_data_len,json=authPluginDataLen,proto3\" json:\"auth_plugin_data_len,omitempty\"`\n\tAuthPluginDataPart_2 string `protobuf:\"bytes,9,opt,name=auth_plugin_data_part_2,json=authPluginDataPart2,proto3\" json:\"auth_plugin_data_part_2,omitempty\"`\n\tAuthPluginName       string `protobuf:\"bytes,10,opt,name=auth_plugin_name,json=authPluginName,proto3\" json:\"auth_plugin_name,omitempty\"`\n}\n```\n### 发送初始响应数据包\n```go\n/*\n\t发送初始响应数据包 HandshakeResponse41，包含登陆信息\n*/\nfunc (m *MySQLClient) sendHandshakeResponse41(serverResp *HandshakeV10) {\n\tresp := make([]byte,0)\n\tresp = append(resp, Int32ToBytesOfLittle(19833351)...)\n\tresp = append(resp, Int32ToBytesOfLittle(16777215)...)\n\tresp = append(resp, 33)\n\treserved := make([]byte,23)\n\tresp = append(resp, reserved...)\n\tresp = append(resp, []byte(m.username)...)\n\tresp = append(resp, 0)\n\tresp = append(resp, 20)\n\tresp = append(resp, CalcPassword([]byte(serverResp.AuthPluginDataPart_1+serverResp.AuthPluginDataPart_2)[:20],[]byte(m.password))...)\n\tresp = append(resp, []byte(\"mysql_native_password\")...)\n\tresp = append(resp, 0)\n\n\t_, _ = m.conn.Write(Pack(resp,1))\n\tflag := m.handleResponse()\n\tif flag == 0xff {\n\t\tpanic(\"连接失败\")\n\t}\n\treturn\n}\n```\n### 判断连接结果\n```go\n/*\n\t解析通用响应数据包 OK_Packet、ERR_Packet、数据集\n*/\nfunc (m *MySQLClient) handleResponse() uint8 {\n\tresp := make([]byte,1024)\n\treadLen, _ := m.conn.Read(resp)\n\tdata := resp[:readLen]\n\tdata = data[4:]\n\tswitch data[0] {\n\tcase 0x00:\n\t\tfmt.Println(\"成功\")\n\t\treturn 0x00\n\tcase 0xff:\n\t\tfmt.Println(\"失败\")\n\t\treturn 0xff\n\tdefault:\n\t\tparseResultSet(data)\n\t\treturn 0xfe\n\t}\n}\n```\n### 发送命令\n```go\n/*\n\tCommandQuery\n\t发送 COM_QUERY 命令，并读取数据\n*/\nfunc (m *MySQLClient) CommandQuery(sql string) {\n\tresp := make([]byte,0)\n\tresp = append(resp, 3)\n\tresp = append(resp, []byte(sql)...)\n\t_, _ = m.conn.Write(Pack(resp,0))\n\tm.handleResponse()\n}\n```\n### 解析结果集\n```go\nfunc parseResultSet(resp []byte)  {\n\tindex := 0\n\tfieldLen := resp[0]\n\tindex+=1\n\theadRows := make([]string,0)\n\theadIndex := 1\n\t// 读取列数据\n\tfor headIndex <= int(fieldLen){\n\t\tn,l := readColumn(resp,index)\n\t\tindex+=l\n\t\theadRows = append(headRows, n)\n\t\theadIndex++\n\t}\n\ttable, err := gotable.Create(headRows...)\n\tif err != nil {\n\t\tfmt.Println(\"Create table failed: \", err.Error())\n\t\treturn\n\t}\n\n\t// 读取行内容\n\tfor  {\n\t\t// 判断是否是 EOF 数据包\n\t\tif resp[index+4] == 0xfe{\n\t\t\tpackLen := 0\n\t\t\tfor _,v :=range resp[index:index+3]{\n\t\t\t\tpackLen+=int(v)\n\t\t\t}\n\t\t\tif packLen<9 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\trows,ll := readRow(resp,index, int(fieldLen))\n\t\ttable.AddRow(rows)\n\t\tindex+=ll\n\t}\n\t// 打印\n\tfmt.Println(table)\n}\nfunc readColumn(data []byte, startIndex int) (name string,length int) {\n\tpackLen := data[startIndex:startIndex+3]\n\tfor i :=range packLen{\n\t\tlength+=int(packLen[i])\n\t}\n\tlength += 4\n\n\tstartIndex+=4\n\tstartIndex+=int(data[startIndex]+1)\n\tstartIndex+=int(data[startIndex]+1)\n\tstartIndex+=int(data[startIndex]+1)\n\tstartIndex+=int(data[startIndex]+1)\n\tnameLen := int(data[startIndex])\n\tname = string(data[startIndex+1:startIndex+nameLen+1])\n\treturn\n}\nfunc readRow(data []byte, startIndex int, fieldNum int) (name []string,length int) {\n\tpackLen := data[startIndex:startIndex+3]\n\tfor i :=range packLen{\n\t\tlength+=int(packLen[i])\n\t}\n\tlength += 4\n\tstartIndex+=4\n\tf:=0\n\tfor f < fieldNum{\n\t\tdataLen := 0\n\t\t// 计算字节数据长度\n\t\tif data[startIndex] < 0xfb {\n\t\t\t// NULL\n\t\t\tdataLen = int(data[startIndex])\n\t\t}else if data[startIndex] == 0xfc {\n\t\t\tfor _,v := range data[startIndex+1:startIndex+3]{\n\t\t\t\tdataLen+=int(v)\n\t\t\t}\n\t\t}else if data[startIndex] == 0xfd {\n\t\t\tfor _,v :=range data[startIndex+1:startIndex+5]{\n\t\t\t\tdataLen+=int(v)\n\t\t\t}\n\t\t}else if data[startIndex] == 0xfe {\n\t\t\tfor _,v :=range data[startIndex+1:startIndex+9]{\n\t\t\t\tdataLen+=int(v)\n\t\t\t}\n\t\t}\n\t\tname = append(name, string(data[startIndex+1:startIndex+dataLen+1]))\n\t\tstartIndex += dataLen+1\n\t\tf++\n\t}\n\treturn\n}\n\n```\n### 控制台结果输出\n执行上面的代码后，控制台就会输出所有的数据库名字\n```bash\n+--------------------+\n|      Database      |\n+--------------------+\n| information_schema |\n|      greycode      |\n|       mysql        |\n| performance_schema |\n|        sys         |\n+--------------------+\n```\n## 参考资料\n[https://dev.mysql.com/doc/internals/en/client-server-protocol.html](https://dev.mysql.com/doc/internals/en/client-server-protocol.html)\n","source":"_posts/archive/2852F14D7D13471798CE28C544741E89.md","raw":"---\ntitle: MySQL是怎么样通讯的？\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-03-27 23:51:51\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- MySQL\n- 协议\ncategories:\n- MySQL\n---\n\n## 前言\n我们平常使用数据库的场景一般是程序里面代码直接连接使用，然后进行 CRUD 操作。或者使用有 GUI 界面的数据库软件来手动操作数据库， 这类软件有 DataGrip、Navicat等等...。平常很少关心它们的底层数据交互是怎么样的，相信你看了这篇文章一定能有大概的了解。本篇文章的代码使用 Go 语言来实现 MySQL 的协议。\n## 协议简介\nMySQL 协议一般分为两个阶段，一个是连接阶段，一个是命令阶段。\n连接阶段主要是客户端和服务端进行相互认证的阶段，就像我们平常登陆某个网站的一个操作。\n命令阶段主要是客户端向服务端进行的一些指令的发送，然后服务端处理指令并返回结果的一个过程。\n在客户端和服务端发送的数据包中，前 3 个字节表示这个数据包的大小，所以这里就有一个问题，就是它有一个大小的限制，数据包大小不能超过16777215 ($2^{24}-1$) bytes，也就是 16M 大小（16进制表示：ff ff ff，刚刚 3 个字节）。这就会有三种情况出现，一种是数据包小于 16M，一种是等于，一种是大于。所以在 MySQL 协议中是这样处理的：\n\n- 小于 16M：发送一个数据包就可以了\n- 等于 16M：发送两个数据包，第二个包为空包\n- 大于 16M：发送多个数据包，每个数据包大小最大为 16M，当最后一个数据包等于 16M 时，再多发送一个空数据包\n\n每个数据包中的第 4 个字节表示这个数据包的序号ID，这个 ID 在不同阶段会递增，比如在连接阶段，这个 ID 会随着包的数量而递增，当连接阶段完成后进入命令阶段，这个 ID 又会从 0 开始递增，直到这个命令的生命周期结束。\n## 初始握手包\n当客户端进行尝试使用 TCP 连接 MySQL 服务端时，服务端就会响应一个初始的握手包，这个握手包有 V9、V10 两个版本。不过现在一般用的都是 V10 版本，如果 MySQL 的版本在 3.21.0 之前，那么服务端响应的是 V9 版本的初始握手包。本篇文章就讲讲现在常用的 V10 版本的初始握手包。\n\n我们可以使用以下代码来尝试连接我们本地的 MySQL 服务:\n```go\npackage main\n\nimport \"net\"\n\nfunc main()  {\n\tconn, err := net.Dial(\"tcp\",\"127.0.0.1:3306\")\n\tif err != nil {\n\t\treturn\n\t}\n\tdefer func(conn net.Conn) {\n\t\terr := conn.Close()\n\t\tif err != nil {\n\n\t\t}\n\t}(conn)\n}\n\n```\n运作程序后，服务端就会响应一个初始握手包给我们，那么怎么清楚明了的查看这个数据包呢？此时我们可以用 Wireshark 这个软件来查看 MySQL 服务端返回的数据包\n![image.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2022/03/27/e9eef1979e07465bb18236a94b2e3ba8~tplv-k3u1fbpfcp-zoom-1.image)\n可以看到前 4 个字节为 16 进制的数据: 4e 00 00 00 ，表示了这个数据包大小为 78 字节，序号 ID 为 0。具体的字段字节大小和描述如下表示：\n\n| 字段名 | 字节数据长度(byte) | 描述 |\n| --- | --- | --- |\n| Protocol | 1 | 初始握手包协议版本，可以根据这个字节数据来判断握手包的协议版本，然后按不同版本来处理接下来的数据 |\n| Version | 直到遇到字节数据为 0 的时候停止 | MySQL 服务端版本描述字符串 |\n| Thread ID | 4 | 连接 ID |\n| Slat（第一段） | 8 | 用于处理后续客户端的密码加密 |\n| filler | 1 | 填充一个字节，默认为 0 |\n| Service Capability（Low） | 2 | 服务端能力标志，一共有 4 个字节，这里表示的是低 2 位字节的数据 |\n| Server Language | 1 | 服务端字符编码 |\n| Server Status | 2 | 服务端状态 |\n| Service Capability（Upper） | 2 | 服务端能力标志，这里表示的是高 2 位字节的数据 |\n| Authentication Plugin Length | 1 | 身份验证插件长度 |\n| Unused | 10 | 预留的 10 个字节数据，默认全部为 0 |\n| Slat（第二段） | 计算公式：MAX(13, 身份验证插件长度 - 8) | 用于处理后续客户端的密码加密 |\n| Authentication Plugin | 直到遇到字节数据为 0 的时候停止 | 身份验证插件 |\n\n这个初始握手包里包含了很多的数据，在后续的整个连接阶段需要用到里面的大部分数据。\n## 能力标志\n上面服务端响应端初始握手包中包含了一个能力标志，这个能力标志一共有 4 个字节来表示，我们知道 1 个字节有 8 个 bit，所以 4 个字节一共有 32 个 bit，其中除了最高的 7 个 bit，另外的每一个 bit 都代表着一个能力标志的状态（0 为不支持，1 为支持）,就像下面这样表示\n```\n# Capabilities 字节数据中的低 2 位\nServer Capabilities: 0xffff\n.... .... .... ...1 = Long Password: Set\n.... .... .... ..1. = Found Rows: Set\n.... .... .... .1.. = Long Column Flags: Set\n.... .... .... 1... = Connect With Database: Set\n.... .... ...1 .... = Don't Allow database.table.column: Set\n.... .... ..1. .... = Can use compression protocol: Set\n.... .... .1.. .... = ODBC Client: Set\n.... .... 1... .... = Can Use LOAD DATA LOCAL: Set\n.... ...1 .... .... = Ignore Spaces before '(': Set\n.... ..1. .... .... = Speaks 4.1 protocol (new flag): Set\n.... .1.. .... .... = Interactive Client: Set\n.... 1... .... .... = Switch to SSL after handshake: Set\n...1 .... .... .... = Ignore sigpipes: Set\n..1. .... .... .... = Knows about transactions: Set\n.1.. .... .... .... = Speaks 4.1 protocol (old flag): Set\n1... .... .... .... = Can do 4.1 authentication: Set\n\n# Capabilities 字节数据中的高 2 位\nExtended Server Capabilities: 0xc1ff\n.... .... .... ...1 = Multiple statements: Set\n.... .... .... ..1. = Multiple results: Set\n.... .... .... .1.. = PS Multiple results: Set\n.... .... .... 1... = Plugin Auth: Set\n.... .... ...1 .... = Connect attrs: Set\n.... .... ..1. .... = Plugin Auth LENENC Client Data: Set\n.... .... .1.. .... = Client can handle expired passwords: Set\n.... .... 1... .... = Session variable tracking: Set\n.... ...1 .... .... = Deprecate EOF: Set\n1100 000. .... .... = Unused: 0x60\n```\n除了服务端响应的初始握手包会返回这个能力标志，后续我们发送给服务端的 **HandshakeResponse** 数据包中也包含这个能力标志数据，那么我们该怎么发送这个能力标志数据呢？官方给出力各个能力的值，如下表：\n\n| 序号 | **Capability Flags** | **值【16进制】** |\n| --- | --- | --- |\n| 1 | CLIENT_LONG_PASSWORD | 0x1 |\n| 2 | CLIENT_FOUND_ROWS | 0x2 |\n| 3 | CLIENT_LONG_FLAG | 0x4 |\n| 4 | CLIENT_CONNECT_WITH_DB | 0x8 |\n| 5 | CLIENT_NO_SCHEMA | 0x10 |\n| 6 | CLIENT_COMPRESS | 0x20 |\n| 7 | CLIENT_ODBC | 0x40 |\n| 8 | CLIENT_LOCAL_FILES | 0x80 |\n| 9 | CLIENT_IGNORE_SPACE | 0x100 |\n| 10 | CLIENT_PROTOCOL_41 | 0x200 |\n| 11 | CLIENT_INTERACTIVE | 0x400 |\n| 12 | CLIENT_SSL | 0x800 |\n| 13 | CLIENT_IGNORE_SIGPIPE | 0x1000 |\n| 14 | CLIENT_TRANSACTIONS | 0x2000 |\n| 15 | CLIENT_RESERVED | 0x4000 |\n| 16 | CLIENT_SECURE_CONNECTION | 0x8000 |\n| 17 | CLIENT_MULTI_STATEMENTS | 0x10000 |\n| 18 | CLIENT_MULTI_RESULTS | 0x20000 |\n| 19 | CLIENT_PS_MULTI_RESULTS | 0x40000 |\n| 20 | CLIENT_PLUGIN_AUTH | 0x80000 |\n| 21 | CLIENT_CONNECT_ATTRS | 0x100000 |\n| 22 | CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA | 0x200000 |\n| 23 | CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS | 0x400000 |\n| 24 | CLIENT_SESSION_TRACK | 0x800000 |\n| 25 | CLIENT_DEPRECATE_EOF | 0x1000000 |\n\n当我们要发送客户端支持的能力标志时，只要把所有支持的能力标志的值相加，然后转换为 4 字节大小的数据。\n例如我们要发送个给服务端说明我们支持 **CLIENT_PROTOCOL_41** 这个能力，那么我们就可以把这个 16 进制的值转换为 4 个字节的数据来表示，转换后的数据为：[0 0 16 0]。HEX 表示法为：[00 00 10 00]\n> 注意：上面转换的字节数据为小端数据，这方面端知识具体可以查询字节序的大小端\n\n## 字符编码\n初始握手包还有一个字节表示了支持的字符编码，后续我们响应的 **HandshakeResponse **数据包中也要发送客户端支持的字符编码，相对应的字符编码对应的 ID 如下表，当我们支持什么字符编码时，只要发送对应编码的 ID\n就可以了。\n```go\n+--------------------+---------------------+-----+\n| CHARACTER_SET_NAME | COLLATION_NAME      | ID  |\n+--------------------+---------------------+-----+\n| big5               | big5_chinese_ci     |   1 |\n| dec8               | dec8_swedish_ci     |   3 |\n| cp850              | cp850_general_ci    |   4 |\n| hp8                | hp8_english_ci      |   6 |\n| koi8r              | koi8r_general_ci    |   7 |\n| latin1             | latin1_swedish_ci   |   8 |\n| latin2             | latin2_general_ci   |   9 |\n| swe7               | swe7_swedish_ci     |  10 |\n| ascii              | ascii_general_ci    |  11 |\n| ujis               | ujis_japanese_ci    |  12 |\n| sjis               | sjis_japanese_ci    |  13 |\n| hebrew             | hebrew_general_ci   |  16 |\n| tis620             | tis620_thai_ci      |  18 |\n| euckr              | euckr_korean_ci     |  19 |\n| koi8u              | koi8u_general_ci    |  22 |\n| gb2312             | gb2312_chinese_ci   |  24 |\n| greek              | greek_general_ci    |  25 |\n| cp1250             | cp1250_general_ci   |  26 |\n| gbk                | gbk_chinese_ci      |  28 |\n| latin5             | latin5_turkish_ci   |  30 |\n| armscii8           | armscii8_general_ci |  32 |\n| utf8               | utf8_general_ci     |  33 |\n| ucs2               | ucs2_general_ci     |  35 |\n| cp866              | cp866_general_ci    |  36 |\n| keybcs2            | keybcs2_general_ci  |  37 |\n| macce              | macce_general_ci    |  38 |\n| macroman           | macroman_general_ci |  39 |\n| cp852              | cp852_general_ci    |  40 |\n| latin7             | latin7_general_ci   |  41 |\n| cp1251             | cp1251_general_ci   |  51 |\n| utf16              | utf16_general_ci    |  54 |\n| utf16le            | utf16le_general_ci  |  56 |\n| cp1256             | cp1256_general_ci   |  57 |\n| cp1257             | cp1257_general_ci   |  59 |\n| utf32              | utf32_general_ci    |  60 |\n| binary             | binary              |  63 |\n| geostd8            | geostd8_general_ci  |  92 |\n| cp932              | cp932_japanese_ci   |  95 |\n| eucjpms            | eucjpms_japanese_ci |  97 |\n| gb18030            | gb18030_chinese_ci  | 248 |\n| utf8mb4            | utf8mb4_0900_ai_ci  | 255 |\n+--------------------+---------------------+-----+\n```\n## **客户端握手响应包（HandshakeResponse）**\n客户端和 MySQL 服务端进行数据交互时，有明文数据交互和SSL加密数据交互，这里贴一张 MySQL 官网给出的一张图，这张图大致的描述了客户端和服务端连接的流程\n![image.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2022/03/27/6e65f83b1bcc4b5296d913bf0ac830b1~tplv-k3u1fbpfcp-zoom-1.image)\n本篇文章就讲下简单的明文连接，不管是明文连接和加密连接，客户端都必须返回 **HandshakeResponse **这个数据包给服务端。\n这个数据包也有两个版本，一个是 **HandshakeResponse41，**另一个是** HandshakeResponse320。**现在一般都是用 **HandshakeResponse41 **这个版本的数据包。那么服务端要怎么知道客户端发送的数据包到底是什么版本呢？\n这个就要用到上面的 **CLIENT_PROTOCOL_41 **这个能力标志了，服务端只要解析客户端发来的 **HandshakeResponse **数据包中的 Capability Flags 数据中是否支持 **CLIENT_PROTOCOL_41 **这个能力，来判断客户端握手响应包的版本。当 **CLIENT_PROTOCOL_41 **这个能力为支持状态，说明版本是** HandshakeResponse41，否则就是 HandshakeResponse320。**\n\n### **HandshakeResponse41**\n现在常用的就是 **HandshakeResponse41 **这个握手响应包，本篇文章就讲一讲这个握手响应包吧。这个包的描述如下：\n```cpp\n4              capability flags, CLIENT_PROTOCOL_41 always set\n4              max-packet size\n1              character set\nstring[23]\t   reserved (all [0])\nstring[NUL]    username\n\n\nif capabilities & CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA {\n  // 如果支持 CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA 标志就返回这些数据\n  lenenc-int     length of auth-response\n  string[n]      auth-response\n} else if capabilities & CLIENT_SECURE_CONNECTION {\n  // 如果支持 CLIENT_SECURE_CONNECTION 标志就返回这些数据\n  1              length of auth-response\n  string[n]      auth-response\n} else {\n  // 否则就返回这个数据\n  string[NUL]    auth-response\n}\n\nif capabilities & CLIENT_CONNECT_WITH_DB {\n  // 如果支持 CLIENT_CONNECT_WITH_DB 标志就返回这些数据\n  string[NUL]    database\n}\n\nif capabilities & CLIENT_PLUGIN_AUTH {\n  // 如果支持 CLIENT_PLUGIN_AUTH 标志就返回这些数据\n  string[NUL]    auth plugin name\n}\n\nif capabilities & CLIENT_CONNECT_ATTRS {\n  // 如果支持 CLIENT_CONNECT_ATTRS 标志就返回这些数据\n  lenenc-int     length of all key-values\n  lenenc-str     key\n  lenenc-str     value\n  if-more data in 'length of all key-values', more keys and value pairs\n }\n```\n\n- **capability_flags** -- 客户端的能力标志，占用 4 个字节\n- **max_packet_size**  -- 客户端要发送到服务器的命令包的最大大小，占用 4 个字节\n- **character_set** - 连接的默认字符集，占用 1 个字节\n- username -- 客户端要登录的 SQL 帐户的名称 -- 此字符串应使用character set字段指示的字符集进行编码。\n- **auth-response**  --由 auth plugin name 字段指示的 [Authentication Method](https://dev.mysql.com/doc/internals/en/authentication-method.html) 生成的加密的身份验证响应数据。\n- **database**  -- 用于连接的初始数据库 -- 此字符串应使用 character set字段指示的字符集进行编码。\n- auth plugin name  -- 客户端用此加密方法加密密码然后赋值给 auth-response 返回给服务端\n### 密码加密方式\n客户端传输给服务端的 MySQL 账户的密码加密方式采用插件的形式，就是 auth plugin name 这个字段的数据，一般支持以下几种加密方式\n\n| **名称** | **Auth Plugin Name** | **能力标志** |\n| --- | --- | --- |\n| 旧密码认证 | mysql_old_password | 不能使用，无能力标志 |\n| 安全密码认证 | mysql_native_password | [CLIENT_SECURE_CONNECTION](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_SECURE_CONNECTION) |\n| 明文认证 | mysql_clear_password | [CLIENT_PLUGIN_AUTH](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PLUGIN_AUTH) |\n| Windows 原生身份验证 | authentication_windows_client | [CLIENT_PLUGIN_AUTH](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PLUGIN_AUTH) |\n| SHA256 | sha256_password | [CLIENT_PLUGIN_AUTH](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PLUGIN_AUTH) |\n\n现在一般常用的是安全密码认证，就是 **Auth Plugin Name **为 mysql_native_password 的认证加密方式。这个方法的加密方式如下\n```bash\nSHA1( password ) XOR SHA1( \"20-bytes random data from server\" <concat> SHA1( SHA1( password ) ) )\n```\n它先对明文密码进行一次 SHA1 的散列运算生成密码 1，然后再将服务端初始握手包中的 20 位 Slat 数据和对明文密码进行两次 SHA1 散列的结果进行连接，然后对连接的结果再进行一次散列运算生成密码 2，最后密码 1 和密码 2 进行异或运算，得到来最终发送给服务端的数据。\n## 响应数据包\n当我们发送响应握手包 **HandshakeResponse** 后，服务端就会返回一个通用的响应包给我们，这个响应包可以是以下其中一个：\n\n- OK_Packet\n- ERR_Packet\n- EOF_Packet\n\n那么我们要怎么区分这三个包呢？区分的关键在于包的第一个字节的数据，如果第一个字节数据为 0x00，则代表这是一个 OK_Packet 。如果第一个字节数据为 0xff，则表示这是一个 ERR_Packet。如果第一个字节为 0xfe，则代表这是一个 EOF_Packet。\n从 MySQL 5.7.5 开始，OK_Packet 包也用于指示 EOF_Packet，并且不推荐使用 EOF_Packet 包。为了确保 MySQL 的旧版本（5.7.5 之前）和新版本（5.7.5 及更高版本）之间的向后兼容性，新客户端会向服务端该送 [CLIENT_DEPRECATE_EOF](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_DEPRECATE_EOF) 能力标志。如果没有传送这个能力标志，服务端返回端数据结果集中还是会以 EOF_Packet 包结尾，如果传送了这个能力标志的话，服务端返回端结果集中会以 OK_Packet 包结尾，并且第一个字节数据会是 0xfe。\n那么我们怎么区分新版 OK_Packet 包在什么时候代表 OK_Packet，在什么时候代表 EOF_Packet 呢？主要可以通过以下几点来判断：\n\n- 一个是判断客户端刚才是否传送了 [CLIENT_DEPRECATE_EOF](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_DEPRECATE_EOF) 能力标志\n- OK_Packet: 第一个字节数据为 0x00，且数据包长度 > 7\n- EOF_Packet: 第一个字节数据为 0xfe，且数据包长度 < 9\n### OK_Packet 格式\n```cpp\nint<1>\t\t\theader\t\t\t\t[00] or [fe] the OK packet header\nint<lenenc>\taffected_rows\t\t受影响行数\nint<lenenc>\tlast_insert_id\t\t最后插入 ID\n\nif capabilities & CLIENT_PROTOCOL_41 {\n    int<2>\t\tstatus_flags\t状态标志\n    int<2>\t\twarnings\t\t警告数\n} elseif capabilities & CLIENT_TRANSACTIONS {\n    int<2>\t\tstatus_flags\tStatus Flags\n}\n\nif capabilities & CLIENT_SESSION_TRACK {\n    string<lenenc>\tinfo\t人类可读的状态信息\n    \n    if status_flags & SERVER_SESSION_STATE_CHANGED {\n        string<lenenc>\tsession_state_changes\t会话状态信息\n    }\n    \n} else {\n    string<EOF>\tinfo\t\t人类可读的状态信息\n}\n```\n### ERR_Packet 格式\n```cpp\nint<1>\t\theader\t\t\t\t[ff] header of the ERR packet\nint<2>\t\terror_code\t\t\t错误代码\n\nif capabilities & CLIENT_PROTOCOL_41 {\n  string<1>\tsql_state_marker\tSQL 状态的标记\n  string<5>\tsql_state\t\t\tSQL 状态\n}\n\nstring<EOF>\terror_message\t\t人类可读的错误信息\n```\n### EOF_Packet 格式\n```cpp\nint<1>\t\theader\t\t\t\t[fe] EOF header\n\nif capabilities & CLIENT_PROTOCOL_41 {\n  int<2>\twarnings\t\t\t警告数\n  int<2>\tstatus_flags\t\t状态标志\n}\n```\n## 数据包数据类型介绍\n在上面的数据包格式中，你是不是看到例如 int<1>、string<EOF>、int<lenenc> 等等这些一头雾水？这个是 MySQL 官网文档中表示协议数据类型和长度的。主要数据类型如下表：\n\n| **数据类型** | **字节长度** |\n| --- | --- |\n| int<1> | 1 字节 |\n| int<2> | 2 字节 |\n| int<3> | 3 字节 |\n| int<4> | 4 字节 |\n| int<6> | 6 字节 |\n| int<8> | 8 字节 |\n| int\\<lenenc> | 见下文详细介绍 |\n| string\\<lenenc> | 见下文详细介绍 |\n| string\\<fix> | 固定字节长度的字符串，其中 fix 代表一个指定的数值，例如 string<5>，其中 fix 就等于 5 |\n| string\\<var> | 字符串的长度由另一个字段确定或在运行时计算 |\n| string\\<EOF> | 如果字符串是数据包的最后一个组成部分，则它的长度可以从整个数据包长度减去当前位置来计算。 |\n| string\\<NUL> | 以 [00] 字节结尾的字符串。 |\n\n在上面的表格中，大部分的数据类型的长度基本上都可以直接得知，但是其中 int\\<lenenc>、string\\<lenenc> 这两个类型的长度需要通过稍微复杂一点的计算来得到最终的数据长度。\n### int\\<lenenc>\n当要解析这个长度的数据时，它一般开头的第一个字节有 4 中表现形式\n\n- 第一个字节的值小于 0xfb：代表这个数据就是这一个字节长度，并且第一个字节的值就是对应字段的值\n- 第一个字节的值等于 0xfc：代表这个字节往后的两个字节就是这个字段的数据，就是说这个字段一个占用 3 个字节长度，其中第 1 个字节表示该字段占用的字节长度数据，第 2 和第 3 个字节表示的是这个字段的数据\n-  第一个字节的值等于 0xfd：和上面类似，只是字段数据字节一共占用 4 个字节，其中后 3 个字节表示这个字段的数据\n- 第一个字节的值等于 0xfe：字段数据字节一共占用 9 个字节，其中后 8 个字节表示这个字段的数据\n> 注意：在 MySQL 3.22 版本以前，0xfe 表示的这个字段只有 4 个字节长度。\n> 如果数据包的第一个字节是长度编码的整数并且其字节值为 0xfe，则必须检查数据包的长度以验证它是否有足够的空间容纳 8 字节整数。\n> 如果不是，它可能是一个 [EOF_Packet](https://dev.mysql.com/doc/internals/en/packet-EOF_Packet.html) 替代。\n\n\n所以要得到这个字段对应的字节长度时，只要判断第一个字节的数据，然后就可以轻松获得这个字段的长度了\n### string\\<lenenc>\n这个数据类型分为两部分\n\n- **length** ([int<lenenc>](https://dev.mysql.com/doc/internals/en/describing-packets.html#type-lenenc_int)) -- string 数据的占用字节长度\n- **string** ([string<fix>](https://dev.mysql.com/doc/internals/en/describing-packets.html#type-string.fix_len)) -- [len=$length] string\n\n其中 length 这个数据通过上面 int\\<lenenc> 的方法获得，然后 string 的数据的字节长度就是 length 的值\n## 发送命令\n当我们连接成功后，这时就可以向服务端发送命令了，命令如下表：\n\n| **HEX 值** | **NAME** |\n| --- | --- |\n| 00 | [COM_SLEEP](https://dev.mysql.com/doc/internals/en/com-sleep.html#packet-COM_SLEEP) |\n| 01 | [COM_QUIT](https://dev.mysql.com/doc/internals/en/com-quit.html#packet-COM_QUIT) |\n| 02 | [COM_INIT_DB](https://dev.mysql.com/doc/internals/en/com-init-db.html#packet-COM_INIT_DB) |\n| 03 | [COM_QUERY](https://dev.mysql.com/doc/internals/en/com-query.html#packet-COM_QUERY) |\n| 04 | [COM_FIELD_LIST](https://dev.mysql.com/doc/internals/en/com-field-list.html#packet-COM_FIELD_LIST) |\n| 05 | [COM_CREATE_DB](https://dev.mysql.com/doc/internals/en/com-create-db.html#packet-COM_CREATE_DB) |\n| 06 | [COM_DROP_DB](https://dev.mysql.com/doc/internals/en/com-drop-db.html#packet-COM_DROP_DB) |\n| 07 | [COM_REFRESH](https://dev.mysql.com/doc/internals/en/com-refresh.html#packet-COM_REFRESH) |\n| 08 | [COM_SHUTDOWN](https://dev.mysql.com/doc/internals/en/com-shutdown.html#packet-COM_SHUTDOWN) |\n| 09 | [COM_STATISTICS](https://dev.mysql.com/doc/internals/en/com-statistics.html#packet-COM_STATISTICS) |\n| 0a | [COM_PROCESS_INFO](https://dev.mysql.com/doc/internals/en/com-process-info.html#packet-COM_PROCESS_INFO) |\n| 0b | [COM_CONNECT](https://dev.mysql.com/doc/internals/en/com-connect.html#packet-COM_CONNECT) |\n| 0c | [COM_PROCESS_KILL](https://dev.mysql.com/doc/internals/en/com-process-kill.html#packet-COM_PROCESS_KILL) |\n| 0d | [COM_DEBUG](https://dev.mysql.com/doc/internals/en/com-debug.html#packet-COM_DEBUG) |\n| 0e | [COM_PING](https://dev.mysql.com/doc/internals/en/com-ping.html#packet-COM_PING) |\n| 0f | [COM_TIME](https://dev.mysql.com/doc/internals/en/com-time.html#packet-COM_TIME) |\n| 10 | [COM_DELAYED_INSERT](https://dev.mysql.com/doc/internals/en/com-delayed-insert.html#packet-COM_DELAYED_INSERT) |\n| 11 | [COM_CHANGE_USER](https://dev.mysql.com/doc/internals/en/com-change-user.html#packet-COM_CHANGE_USER) |\n| 12 | [COM_BINLOG_DUMP](https://dev.mysql.com/doc/internals/en/com-binlog-dump.html#packet-COM_BINLOG_DUMP) |\n| 13 | [COM_TABLE_DUMP](https://dev.mysql.com/doc/internals/en/com-table-dump.html#packet-COM_TABLE_DUMP) |\n| 14 | [COM_CONNECT_OUT](https://dev.mysql.com/doc/internals/en/com-connect-out.html#packet-COM_CONNECT_OUT) |\n| 15 | [COM_REGISTER_SLAVE](https://dev.mysql.com/doc/internals/en/com-register-slave.html#packet-COM_REGISTER_SLAVE) |\n| 16 | [COM_STMT_PREPARE](https://dev.mysql.com/doc/internals/en/com-stmt-prepare.html#packet-COM_STMT_PREPARE) |\n| 17 | [COM_STMT_EXECUTE](https://dev.mysql.com/doc/internals/en/com-stmt-execute.html#packet-COM_STMT_EXECUTE) |\n| 18 | [COM_STMT_SEND_LONG_DATA](https://dev.mysql.com/doc/internals/en/com-stmt-send-long-data.html#packet-COM_STMT_SEND_LONG_DATA) |\n| 19 | [COM_STMT_CLOSE](https://dev.mysql.com/doc/internals/en/com-stmt-close.html#packet-COM_STMT_CLOSE) |\n| 1a | [COM_STMT_RESET](https://dev.mysql.com/doc/internals/en/com-stmt-reset.html#packet-COM_STMT_RESET) |\n| 1b | [COM_SET_OPTION](https://dev.mysql.com/doc/internals/en/com-set-option.html#packet-COM_SET_OPTION) |\n| 1c | [COM_STMT_FETCH](https://dev.mysql.com/doc/internals/en/com-stmt-fetch.html#packet-COM_STMT_FETCH) |\n| 1d | [COM_DAEMON](https://dev.mysql.com/doc/internals/en/com-daemon.html#packet-COM_DAEMON) |\n| 1e | [COM_BINLOG_DUMP_GTID](https://dev.mysql.com/doc/internals/en/com-binlog-dump-gtid.html#packet-COM_BINLOG_DUMP_GTID) |\n| 1f | [COM_RESET_CONNECTION](https://dev.mysql.com/doc/internals/en/com-reset-connection.html#packet-COM_RESET_CONNECTION) |\n\n一般我们用的最多的就是 COM_QUERY 这个命令，像 CRUD 都可以通过这个命令来发送，例如我们发送一个查询当前数据库，就可以发送下面的字节数据给服务端\n```bash\n0f 00 00 00 \t03 73 68 6f 77 20 64 61 74 61 62 61\n73 65 73\n```\n其中前 4 个字节代表这个包的大小和序号 ID，后面的字节数据就是我们发送的命令。\n03 代表这个命令是 COM_QUERY。 \n后面所有的字节数据都是 show databses 转换 byte 后的字节数据\n## 结果集\n当你发送的 COM_QUERY 命令时，它返回三种数据包的其中一种。我们可以通过第一个字节来判断它：\n\n- 当第一个字节数据等于 0x00：返回的是 OK_Packet\n- 当第一个字节的数据等于 0xff：返回的是 ERR_Packet\n- 当第一个字节的数据不是以上两个值时：返回一个结果集，并且第一个字节的值代表返回结果集中列（columns）的总数。\n\n**结果集分 3 个部分来读取：**\n\n- 第一个数据包表示返回结果集中列（columns）的总数。\n- 然后通过第一个数据包获取的列总数来读取相关列的所有数据包，一列有一个数据包，比如说上面得到列总数为 3，那么接下来的 3 个数据包就是这 3 列的说明。\n- 读完列的所有数据包后，紧接着就是没行数据的数据包了，一个数据包代表一行数据，每个数据包中有所有列的字段值。其中，如果值长度的值为 0xfe 时，则代表这行中这列的数据为 NULL。行数据直到读取到 OK_Packet/EOF_Packet 包出现为止。\n### COM_QUERY_Response 格式\n```cpp\n// 字节长度计算方法见上面的 int<lenenc> 介绍\nint<lenenc>     结果集中列（columns）的总数。\n```\n### 列数据包格式\n列数据包格式也分为两种格式，也是通过客户端上传的 [CLIENT_PROTOCOL_41](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PROTOCOL_41) 能力标志来觉得的。\n如果客户端支持 [CLIENT_PROTOCOL_41](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PROTOCOL_41) 这个能力标志，服务端返回 **ColumnDefinition41** 这个列数据包。\n如果客户端不支持  [CLIENT_PROTOCOL_41](https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PROTOCOL_41)  这个能力标志的话，服务端就返回 **ColumnDefinition320** 这个版本的列数据包。\n现在一般都使用 **ColumnDefinition41** 这个数据包，这个数据包描述如下：\n```cpp\nstring<lenenc>      catalog\t\t\t\t目录 (固定为 \"def\")\nstring<lenenc>      schema\t\t\t\t数据库\nstring<lenenc>      table\t\t\t\t虚拟表\nstring<lenenc>      org_table\t\t\t源表\nstring<lenenc>      name\t\t\t\t虚拟名称\nstring<lenenc>      org_name\t\t\t源名称\nstring<lenenc>      length of fixed-length fields [0c]\n2              \t\tcharacter set\t\t字符集\n4              \t\tcolumn length\t\t字段的最大长度\n1              \t\ttype\t\t\t\t列类型\n2              \t\tflags\t\t\t\t标志\n1              \t\tdecimals\t\t\t显示的小数位数\n2              \t\tfiller [00] [00]\t两个空占位符\n\nif command was COM_FIELD_LIST {\n    int<lenenc>     length of default-values\n    string[$len]   \tdefault values\n}\n```\n### 行数据包格式\n行数据包里面包含了所有列的字段数据，每个列的字段的数据可以通过 string\\<lenenc> 数据类型的计算的方式获得，其中要注意的是，如果字段长度描述字节的数据等于 0xfe 时，代表这行中这列的数据为 NULL。\n下图是行数据包的表现形式：\n\n![image.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2022/03/27/5ee42af3f32e41739eb78d61b027987d~tplv-k3u1fbpfcp-zoom-1.image)\n## 代码实现\n通过以上的介绍，现在我们可以用代码来实现不用第三方驱动的情况下手动连接 MySQL 服务器，然后发送一条查询 databses 的命令。下面的是代码片段，完整代码连接：[https://gist.github.com/greycodee/22f98464fece7792a83433a1fba58e2a](https://gist.github.com/greycodee/22f98464fece7792a83433a1fba58e2a)\n### 连接 MySQL 服务器\n```go\ntype MySQLClient struct {\n\tconn net.Conn\n\taddr string\n\tusername string\n\tpassword\tstring\n}\n\nfunc (m *MySQLClient) init()  {\n\t// 连接阶段\n\thandshake := m.startConn()\n\tm.sendHandshakeResponse41(handshake)\n}\n\n\n/*\n\t连接 MySQL 服务器\n*/\nfunc (m *MySQLClient) startConn() *HandshakeV10 {\n\tm.conn, _ = net.Dial(\"tcp\",m.addr)\n\tinitResp := make([]byte,1024)\n\treadLen, _ := m.conn.Read(initResp)\n\treturn ReadHandShakeV10(initResp[:readLen])\n}\n```\n### 解析初始握手数据包\n```go\n/*\n\t解析初始握手包 HandShakeV10\n*/\nfunc ReadHandShakeV10(data []byte) *HandshakeV10 {\n\tindex := 0\n\tvar h = &HandshakeV10{}\n\tindex+=4\n\th.ProtocolVersion= int32(data[index])\n\tindex++\n\tvar serverVersion []byte\n\tfor data[index]!=0 {\n\t\tserverVersion = append(serverVersion,data[index])\n\t\tindex++\n\t}\n\th.ServerVersion = string(serverVersion)\n\tindex++\n\tconnectByte := data[index:index+4]\n\tfor i :=range connectByte{\n\t\th.ConnectionId+=int32(connectByte[i])\n\t}\n\tindex+=4\n\tvar apdp1 []byte\n\tapdp1Byte := data[index:index+8]\n\tfor i := range apdp1Byte {\n\t\tapdp1 = append(apdp1, apdp1Byte[i])\n\t}\n\th.AuthPluginDataPart_1 = string(apdp1)\n\tindex+=9\n\t// 能力低2位\n\tc_flag_low_1 := strings.Split(fmt.Sprintf(\"%b\\n\",data[index+1]),\"\")\n\tc_flag_low_2 := strings.Split(fmt.Sprintf(\"%b\\n\",data[index]),\"\")\n\n\tindex+=2\n\t// 编码获取\n\th.CharacterSet = int32(data[index])\n\tindex++\n\t// 服务器状态\n\tindex+=2\n\t// 能力高2位\n\tc_flag_up_1 := strings.Split(fmt.Sprintf(\"%b\\n\",data[index+1]),\"\")\n\tc_flag_up_2 := strings.Split(fmt.Sprintf(\"%b\\n\",data[index]),\"\")\n\tvar capabilityFlags []string\n\tcapabilityFlags = append(capabilityFlags,c_flag_up_1...)\n\tcapabilityFlags = append(capabilityFlags,c_flag_up_2...)\n\tcapabilityFlags = append(capabilityFlags,c_flag_low_1...)\n\tcapabilityFlags = append(capabilityFlags,c_flag_low_2...)\n\tindex+=2\n\tif strings.EqualFold(\"1\",capabilityFlags[19]){\n\t\th.AuthPluginDataLen= int32(data[index])\n\t}\n\tindex++\n\tindex+=10\n\tif strings.EqualFold(\"1\",capabilityFlags[15]){\n\t\tp2Len := 13\n\t\tp2len1 := int(h.AuthPluginDataLen-8)\n\t\tif p2Len < p2len1 {\n\t\t\tp2Len = p2len1\n\t\t}\n\t\th.AuthPluginDataPart_2 = string(data[index:index+p2Len])\n\t\tindex+=p2Len\n\t}\n\tif strings.EqualFold(\"1\",capabilityFlags[19]) {\n\t\tvar authPlugName []byte\n\t\tfor data[index] != 0 {\n\t\t\tauthPlugName = append(authPlugName,data[index])\n\t\t\tindex++\n\t\t}\n\t\th.AuthPluginName = string(authPlugName)\n\t}\n\n\treturn h\n}\ntype HandshakeV10 struct {\n\tProtocolVersion      int32  `protobuf:\"varint,1,opt,name=protocol_version,json=protocolVersion,proto3\" json:\"protocol_version,omitempty\"`\n\tServerVersion        string `protobuf:\"bytes,2,opt,name=server_version,json=serverVersion,proto3\" json:\"server_version,omitempty\"`\n\tConnectionId         int32  `protobuf:\"varint,3,opt,name=connection_id,json=connectionId,proto3\" json:\"connection_id,omitempty\"`\n\tAuthPluginDataPart_1 string `protobuf:\"bytes,4,opt,name=auth_plugin_data_part_1,json=authPluginDataPart1,proto3\" json:\"auth_plugin_data_part_1,omitempty\"`\n\tCharacterSet         int32  `protobuf:\"varint,6,opt,name=character_set,json=characterSet,proto3\" json:\"character_set,omitempty\"`\n\tStatusFlags          int32  `protobuf:\"varint,7,opt,name=status_flags,json=statusFlags,proto3\" json:\"status_flags,omitempty\"`\n\tAuthPluginDataLen    int32  `protobuf:\"varint,8,opt,name=auth_plugin_data_len,json=authPluginDataLen,proto3\" json:\"auth_plugin_data_len,omitempty\"`\n\tAuthPluginDataPart_2 string `protobuf:\"bytes,9,opt,name=auth_plugin_data_part_2,json=authPluginDataPart2,proto3\" json:\"auth_plugin_data_part_2,omitempty\"`\n\tAuthPluginName       string `protobuf:\"bytes,10,opt,name=auth_plugin_name,json=authPluginName,proto3\" json:\"auth_plugin_name,omitempty\"`\n}\n```\n### 发送初始响应数据包\n```go\n/*\n\t发送初始响应数据包 HandshakeResponse41，包含登陆信息\n*/\nfunc (m *MySQLClient) sendHandshakeResponse41(serverResp *HandshakeV10) {\n\tresp := make([]byte,0)\n\tresp = append(resp, Int32ToBytesOfLittle(19833351)...)\n\tresp = append(resp, Int32ToBytesOfLittle(16777215)...)\n\tresp = append(resp, 33)\n\treserved := make([]byte,23)\n\tresp = append(resp, reserved...)\n\tresp = append(resp, []byte(m.username)...)\n\tresp = append(resp, 0)\n\tresp = append(resp, 20)\n\tresp = append(resp, CalcPassword([]byte(serverResp.AuthPluginDataPart_1+serverResp.AuthPluginDataPart_2)[:20],[]byte(m.password))...)\n\tresp = append(resp, []byte(\"mysql_native_password\")...)\n\tresp = append(resp, 0)\n\n\t_, _ = m.conn.Write(Pack(resp,1))\n\tflag := m.handleResponse()\n\tif flag == 0xff {\n\t\tpanic(\"连接失败\")\n\t}\n\treturn\n}\n```\n### 判断连接结果\n```go\n/*\n\t解析通用响应数据包 OK_Packet、ERR_Packet、数据集\n*/\nfunc (m *MySQLClient) handleResponse() uint8 {\n\tresp := make([]byte,1024)\n\treadLen, _ := m.conn.Read(resp)\n\tdata := resp[:readLen]\n\tdata = data[4:]\n\tswitch data[0] {\n\tcase 0x00:\n\t\tfmt.Println(\"成功\")\n\t\treturn 0x00\n\tcase 0xff:\n\t\tfmt.Println(\"失败\")\n\t\treturn 0xff\n\tdefault:\n\t\tparseResultSet(data)\n\t\treturn 0xfe\n\t}\n}\n```\n### 发送命令\n```go\n/*\n\tCommandQuery\n\t发送 COM_QUERY 命令，并读取数据\n*/\nfunc (m *MySQLClient) CommandQuery(sql string) {\n\tresp := make([]byte,0)\n\tresp = append(resp, 3)\n\tresp = append(resp, []byte(sql)...)\n\t_, _ = m.conn.Write(Pack(resp,0))\n\tm.handleResponse()\n}\n```\n### 解析结果集\n```go\nfunc parseResultSet(resp []byte)  {\n\tindex := 0\n\tfieldLen := resp[0]\n\tindex+=1\n\theadRows := make([]string,0)\n\theadIndex := 1\n\t// 读取列数据\n\tfor headIndex <= int(fieldLen){\n\t\tn,l := readColumn(resp,index)\n\t\tindex+=l\n\t\theadRows = append(headRows, n)\n\t\theadIndex++\n\t}\n\ttable, err := gotable.Create(headRows...)\n\tif err != nil {\n\t\tfmt.Println(\"Create table failed: \", err.Error())\n\t\treturn\n\t}\n\n\t// 读取行内容\n\tfor  {\n\t\t// 判断是否是 EOF 数据包\n\t\tif resp[index+4] == 0xfe{\n\t\t\tpackLen := 0\n\t\t\tfor _,v :=range resp[index:index+3]{\n\t\t\t\tpackLen+=int(v)\n\t\t\t}\n\t\t\tif packLen<9 {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\trows,ll := readRow(resp,index, int(fieldLen))\n\t\ttable.AddRow(rows)\n\t\tindex+=ll\n\t}\n\t// 打印\n\tfmt.Println(table)\n}\nfunc readColumn(data []byte, startIndex int) (name string,length int) {\n\tpackLen := data[startIndex:startIndex+3]\n\tfor i :=range packLen{\n\t\tlength+=int(packLen[i])\n\t}\n\tlength += 4\n\n\tstartIndex+=4\n\tstartIndex+=int(data[startIndex]+1)\n\tstartIndex+=int(data[startIndex]+1)\n\tstartIndex+=int(data[startIndex]+1)\n\tstartIndex+=int(data[startIndex]+1)\n\tnameLen := int(data[startIndex])\n\tname = string(data[startIndex+1:startIndex+nameLen+1])\n\treturn\n}\nfunc readRow(data []byte, startIndex int, fieldNum int) (name []string,length int) {\n\tpackLen := data[startIndex:startIndex+3]\n\tfor i :=range packLen{\n\t\tlength+=int(packLen[i])\n\t}\n\tlength += 4\n\tstartIndex+=4\n\tf:=0\n\tfor f < fieldNum{\n\t\tdataLen := 0\n\t\t// 计算字节数据长度\n\t\tif data[startIndex] < 0xfb {\n\t\t\t// NULL\n\t\t\tdataLen = int(data[startIndex])\n\t\t}else if data[startIndex] == 0xfc {\n\t\t\tfor _,v := range data[startIndex+1:startIndex+3]{\n\t\t\t\tdataLen+=int(v)\n\t\t\t}\n\t\t}else if data[startIndex] == 0xfd {\n\t\t\tfor _,v :=range data[startIndex+1:startIndex+5]{\n\t\t\t\tdataLen+=int(v)\n\t\t\t}\n\t\t}else if data[startIndex] == 0xfe {\n\t\t\tfor _,v :=range data[startIndex+1:startIndex+9]{\n\t\t\t\tdataLen+=int(v)\n\t\t\t}\n\t\t}\n\t\tname = append(name, string(data[startIndex+1:startIndex+dataLen+1]))\n\t\tstartIndex += dataLen+1\n\t\tf++\n\t}\n\treturn\n}\n\n```\n### 控制台结果输出\n执行上面的代码后，控制台就会输出所有的数据库名字\n```bash\n+--------------------+\n|      Database      |\n+--------------------+\n| information_schema |\n|      greycode      |\n|       mysql        |\n| performance_schema |\n|        sys         |\n+--------------------+\n```\n## 参考资料\n[https://dev.mysql.com/doc/internals/en/client-server-protocol.html](https://dev.mysql.com/doc/internals/en/client-server-protocol.html)\n","slug":"archive/2852F14D7D13471798CE28C544741E89","published":1,"updated":"2022-03-27T15:58:34.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6efs0010vpuc7osh2too","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们平常使用数据库的场景一般是程序里面代码直接连接使用，然后进行 CRUD 操作。或者使用有 GUI 界面的数据库软件来手动操作数据库， 这类软件有 DataGrip、Navicat等等…。平常很少关心它们的底层数据交互是怎么样的，相信你看了这篇文章一定能有大概的了解。本篇文章的代码使用 Go 语言来实现 MySQL 的协议。</p>\n<h2 id=\"协议简介\"><a href=\"#协议简介\" class=\"headerlink\" title=\"协议简介\"></a>协议简介</h2><p>MySQL 协议一般分为两个阶段，一个是连接阶段，一个是命令阶段。<br>连接阶段主要是客户端和服务端进行相互认证的阶段，就像我们平常登陆某个网站的一个操作。<br>命令阶段主要是客户端向服务端进行的一些指令的发送，然后服务端处理指令并返回结果的一个过程。<br>在客户端和服务端发送的数据包中，前 3 个字节表示这个数据包的大小，所以这里就有一个问题，就是它有一个大小的限制，数据包大小不能超过16777215 ($2^{24}-1$) bytes，也就是 16M 大小（16进制表示：ff ff ff，刚刚 3 个字节）。这就会有三种情况出现，一种是数据包小于 16M，一种是等于，一种是大于。所以在 MySQL 协议中是这样处理的：</p>\n<ul>\n<li>小于 16M：发送一个数据包就可以了</li>\n<li>等于 16M：发送两个数据包，第二个包为空包</li>\n<li>大于 16M：发送多个数据包，每个数据包大小最大为 16M，当最后一个数据包等于 16M 时，再多发送一个空数据包</li>\n</ul>\n<p>每个数据包中的第 4 个字节表示这个数据包的序号ID，这个 ID 在不同阶段会递增，比如在连接阶段，这个 ID 会随着包的数量而递增，当连接阶段完成后进入命令阶段，这个 ID 又会从 0 开始递增，直到这个命令的生命周期结束。</p>\n<h2 id=\"初始握手包\"><a href=\"#初始握手包\" class=\"headerlink\" title=\"初始握手包\"></a>初始握手包</h2><p>当客户端进行尝试使用 TCP 连接 MySQL 服务端时，服务端就会响应一个初始的握手包，这个握手包有 V9、V10 两个版本。不过现在一般用的都是 V10 版本，如果 MySQL 的版本在 3.21.0 之前，那么服务端响应的是 V9 版本的初始握手包。本篇文章就讲讲现在常用的 V10 版本的初始握手包。</p>\n<p>我们可以使用以下代码来尝试连接我们本地的 MySQL 服务:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tconn, err := net.Dial(<span class=\"string\">&quot;tcp&quot;</span>,<span class=\"string\">&quot;127.0.0.1:3306&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(conn net.Conn)</span></span> &#123;</span><br><span class=\"line\">\t\terr := conn.Close()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;(conn)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>运作程序后，服务端就会响应一个初始握手包给我们，那么怎么清楚明了的查看这个数据包呢？此时我们可以用 Wireshark 这个软件来查看 MySQL 服务端返回的数据包<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2022/03/27/e9eef1979e07465bb18236a94b2e3ba8~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"><br>可以看到前 4 个字节为 16 进制的数据: 4e 00 00 00 ，表示了这个数据包大小为 78 字节，序号 ID 为 0。具体的字段字节大小和描述如下表示：</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>字节数据长度(byte)</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Protocol</td>\n<td>1</td>\n<td>初始握手包协议版本，可以根据这个字节数据来判断握手包的协议版本，然后按不同版本来处理接下来的数据</td>\n</tr>\n<tr>\n<td>Version</td>\n<td>直到遇到字节数据为 0 的时候停止</td>\n<td>MySQL 服务端版本描述字符串</td>\n</tr>\n<tr>\n<td>Thread ID</td>\n<td>4</td>\n<td>连接 ID</td>\n</tr>\n<tr>\n<td>Slat（第一段）</td>\n<td>8</td>\n<td>用于处理后续客户端的密码加密</td>\n</tr>\n<tr>\n<td>filler</td>\n<td>1</td>\n<td>填充一个字节，默认为 0</td>\n</tr>\n<tr>\n<td>Service Capability（Low）</td>\n<td>2</td>\n<td>服务端能力标志，一共有 4 个字节，这里表示的是低 2 位字节的数据</td>\n</tr>\n<tr>\n<td>Server Language</td>\n<td>1</td>\n<td>服务端字符编码</td>\n</tr>\n<tr>\n<td>Server Status</td>\n<td>2</td>\n<td>服务端状态</td>\n</tr>\n<tr>\n<td>Service Capability（Upper）</td>\n<td>2</td>\n<td>服务端能力标志，这里表示的是高 2 位字节的数据</td>\n</tr>\n<tr>\n<td>Authentication Plugin Length</td>\n<td>1</td>\n<td>身份验证插件长度</td>\n</tr>\n<tr>\n<td>Unused</td>\n<td>10</td>\n<td>预留的 10 个字节数据，默认全部为 0</td>\n</tr>\n<tr>\n<td>Slat（第二段）</td>\n<td>计算公式：MAX(13, 身份验证插件长度 - 8)</td>\n<td>用于处理后续客户端的密码加密</td>\n</tr>\n<tr>\n<td>Authentication Plugin</td>\n<td>直到遇到字节数据为 0 的时候停止</td>\n<td>身份验证插件</td>\n</tr>\n</tbody></table>\n<p>这个初始握手包里包含了很多的数据，在后续的整个连接阶段需要用到里面的大部分数据。</p>\n<h2 id=\"能力标志\"><a href=\"#能力标志\" class=\"headerlink\" title=\"能力标志\"></a>能力标志</h2><p>上面服务端响应端初始握手包中包含了一个能力标志，这个能力标志一共有 4 个字节来表示，我们知道 1 个字节有 8 个 bit，所以 4 个字节一共有 32 个 bit，其中除了最高的 7 个 bit，另外的每一个 bit 都代表着一个能力标志的状态（0 为不支持，1 为支持）,就像下面这样表示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Capabilities 字节数据中的低 2 位</span><br><span class=\"line\">Server Capabilities: 0xffff</span><br><span class=\"line\">.... .... .... ...1 = Long Password: Set</span><br><span class=\"line\">.... .... .... ..1. = Found Rows: Set</span><br><span class=\"line\">.... .... .... .1.. = Long Column Flags: Set</span><br><span class=\"line\">.... .... .... 1... = Connect With Database: Set</span><br><span class=\"line\">.... .... ...1 .... = Don&#x27;t Allow database.table.column: Set</span><br><span class=\"line\">.... .... ..1. .... = Can use compression protocol: Set</span><br><span class=\"line\">.... .... .1.. .... = ODBC Client: Set</span><br><span class=\"line\">.... .... 1... .... = Can Use LOAD DATA LOCAL: Set</span><br><span class=\"line\">.... ...1 .... .... = Ignore Spaces before &#x27;(&#x27;: Set</span><br><span class=\"line\">.... ..1. .... .... = Speaks 4.1 protocol (new flag): Set</span><br><span class=\"line\">.... .1.. .... .... = Interactive Client: Set</span><br><span class=\"line\">.... 1... .... .... = Switch to SSL after handshake: Set</span><br><span class=\"line\">...1 .... .... .... = Ignore sigpipes: Set</span><br><span class=\"line\">..1. .... .... .... = Knows about transactions: Set</span><br><span class=\"line\">.1.. .... .... .... = Speaks 4.1 protocol (old flag): Set</span><br><span class=\"line\">1... .... .... .... = Can do 4.1 authentication: Set</span><br><span class=\"line\"></span><br><span class=\"line\"># Capabilities 字节数据中的高 2 位</span><br><span class=\"line\">Extended Server Capabilities: 0xc1ff</span><br><span class=\"line\">.... .... .... ...1 = Multiple statements: Set</span><br><span class=\"line\">.... .... .... ..1. = Multiple results: Set</span><br><span class=\"line\">.... .... .... .1.. = PS Multiple results: Set</span><br><span class=\"line\">.... .... .... 1... = Plugin Auth: Set</span><br><span class=\"line\">.... .... ...1 .... = Connect attrs: Set</span><br><span class=\"line\">.... .... ..1. .... = Plugin Auth LENENC Client Data: Set</span><br><span class=\"line\">.... .... .1.. .... = Client can handle expired passwords: Set</span><br><span class=\"line\">.... .... 1... .... = Session variable tracking: Set</span><br><span class=\"line\">.... ...1 .... .... = Deprecate EOF: Set</span><br><span class=\"line\">1100 000. .... .... = Unused: 0x60</span><br></pre></td></tr></table></figure>\n<p>除了服务端响应的初始握手包会返回这个能力标志，后续我们发送给服务端的 <strong>HandshakeResponse</strong> 数据包中也包含这个能力标志数据，那么我们该怎么发送这个能力标志数据呢？官方给出力各个能力的值，如下表：</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th><strong>Capability Flags</strong></th>\n<th><strong>值【16进制】</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>CLIENT_LONG_PASSWORD</td>\n<td>0x1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>CLIENT_FOUND_ROWS</td>\n<td>0x2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>CLIENT_LONG_FLAG</td>\n<td>0x4</td>\n</tr>\n<tr>\n<td>4</td>\n<td>CLIENT_CONNECT_WITH_DB</td>\n<td>0x8</td>\n</tr>\n<tr>\n<td>5</td>\n<td>CLIENT_NO_SCHEMA</td>\n<td>0x10</td>\n</tr>\n<tr>\n<td>6</td>\n<td>CLIENT_COMPRESS</td>\n<td>0x20</td>\n</tr>\n<tr>\n<td>7</td>\n<td>CLIENT_ODBC</td>\n<td>0x40</td>\n</tr>\n<tr>\n<td>8</td>\n<td>CLIENT_LOCAL_FILES</td>\n<td>0x80</td>\n</tr>\n<tr>\n<td>9</td>\n<td>CLIENT_IGNORE_SPACE</td>\n<td>0x100</td>\n</tr>\n<tr>\n<td>10</td>\n<td>CLIENT_PROTOCOL_41</td>\n<td>0x200</td>\n</tr>\n<tr>\n<td>11</td>\n<td>CLIENT_INTERACTIVE</td>\n<td>0x400</td>\n</tr>\n<tr>\n<td>12</td>\n<td>CLIENT_SSL</td>\n<td>0x800</td>\n</tr>\n<tr>\n<td>13</td>\n<td>CLIENT_IGNORE_SIGPIPE</td>\n<td>0x1000</td>\n</tr>\n<tr>\n<td>14</td>\n<td>CLIENT_TRANSACTIONS</td>\n<td>0x2000</td>\n</tr>\n<tr>\n<td>15</td>\n<td>CLIENT_RESERVED</td>\n<td>0x4000</td>\n</tr>\n<tr>\n<td>16</td>\n<td>CLIENT_SECURE_CONNECTION</td>\n<td>0x8000</td>\n</tr>\n<tr>\n<td>17</td>\n<td>CLIENT_MULTI_STATEMENTS</td>\n<td>0x10000</td>\n</tr>\n<tr>\n<td>18</td>\n<td>CLIENT_MULTI_RESULTS</td>\n<td>0x20000</td>\n</tr>\n<tr>\n<td>19</td>\n<td>CLIENT_PS_MULTI_RESULTS</td>\n<td>0x40000</td>\n</tr>\n<tr>\n<td>20</td>\n<td>CLIENT_PLUGIN_AUTH</td>\n<td>0x80000</td>\n</tr>\n<tr>\n<td>21</td>\n<td>CLIENT_CONNECT_ATTRS</td>\n<td>0x100000</td>\n</tr>\n<tr>\n<td>22</td>\n<td>CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA</td>\n<td>0x200000</td>\n</tr>\n<tr>\n<td>23</td>\n<td>CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS</td>\n<td>0x400000</td>\n</tr>\n<tr>\n<td>24</td>\n<td>CLIENT_SESSION_TRACK</td>\n<td>0x800000</td>\n</tr>\n<tr>\n<td>25</td>\n<td>CLIENT_DEPRECATE_EOF</td>\n<td>0x1000000</td>\n</tr>\n</tbody></table>\n<p>当我们要发送客户端支持的能力标志时，只要把所有支持的能力标志的值相加，然后转换为 4 字节大小的数据。<br>例如我们要发送个给服务端说明我们支持 <strong>CLIENT_PROTOCOL_41</strong> 这个能力，那么我们就可以把这个 16 进制的值转换为 4 个字节的数据来表示，转换后的数据为：[0 0 16 0]。HEX 表示法为：[00 00 10 00]</p>\n<blockquote>\n<p>注意：上面转换的字节数据为小端数据，这方面端知识具体可以查询字节序的大小端</p>\n</blockquote>\n<h2 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h2><p>初始握手包还有一个字节表示了支持的字符编码，后续我们响应的 **HandshakeResponse **数据包中也要发送客户端支持的字符编码，相对应的字符编码对应的 ID 如下表，当我们支持什么字符编码时，只要发送对应编码的 ID<br>就可以了。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">+--------------------+---------------------+-----+</span><br><span class=\"line\">| CHARACTER_SET_NAME | COLLATION_NAME      | ID  |</span><br><span class=\"line\">+--------------------+---------------------+-----+</span><br><span class=\"line\">| big5               | big5_chinese_ci     |   <span class=\"number\">1</span> |</span><br><span class=\"line\">| dec8               | dec8_swedish_ci     |   <span class=\"number\">3</span> |</span><br><span class=\"line\">| cp850              | cp850_general_ci    |   <span class=\"number\">4</span> |</span><br><span class=\"line\">| hp8                | hp8_english_ci      |   <span class=\"number\">6</span> |</span><br><span class=\"line\">| koi8r              | koi8r_general_ci    |   <span class=\"number\">7</span> |</span><br><span class=\"line\">| latin1             | latin1_swedish_ci   |   <span class=\"number\">8</span> |</span><br><span class=\"line\">| latin2             | latin2_general_ci   |   <span class=\"number\">9</span> |</span><br><span class=\"line\">| swe7               | swe7_swedish_ci     |  <span class=\"number\">10</span> |</span><br><span class=\"line\">| ascii              | ascii_general_ci    |  <span class=\"number\">11</span> |</span><br><span class=\"line\">| ujis               | ujis_japanese_ci    |  <span class=\"number\">12</span> |</span><br><span class=\"line\">| sjis               | sjis_japanese_ci    |  <span class=\"number\">13</span> |</span><br><span class=\"line\">| hebrew             | hebrew_general_ci   |  <span class=\"number\">16</span> |</span><br><span class=\"line\">| tis620             | tis620_thai_ci      |  <span class=\"number\">18</span> |</span><br><span class=\"line\">| euckr              | euckr_korean_ci     |  <span class=\"number\">19</span> |</span><br><span class=\"line\">| koi8u              | koi8u_general_ci    |  <span class=\"number\">22</span> |</span><br><span class=\"line\">| gb2312             | gb2312_chinese_ci   |  <span class=\"number\">24</span> |</span><br><span class=\"line\">| greek              | greek_general_ci    |  <span class=\"number\">25</span> |</span><br><span class=\"line\">| cp1250             | cp1250_general_ci   |  <span class=\"number\">26</span> |</span><br><span class=\"line\">| gbk                | gbk_chinese_ci      |  <span class=\"number\">28</span> |</span><br><span class=\"line\">| latin5             | latin5_turkish_ci   |  <span class=\"number\">30</span> |</span><br><span class=\"line\">| armscii8           | armscii8_general_ci |  <span class=\"number\">32</span> |</span><br><span class=\"line\">| utf8               | utf8_general_ci     |  <span class=\"number\">33</span> |</span><br><span class=\"line\">| ucs2               | ucs2_general_ci     |  <span class=\"number\">35</span> |</span><br><span class=\"line\">| cp866              | cp866_general_ci    |  <span class=\"number\">36</span> |</span><br><span class=\"line\">| keybcs2            | keybcs2_general_ci  |  <span class=\"number\">37</span> |</span><br><span class=\"line\">| macce              | macce_general_ci    |  <span class=\"number\">38</span> |</span><br><span class=\"line\">| macroman           | macroman_general_ci |  <span class=\"number\">39</span> |</span><br><span class=\"line\">| cp852              | cp852_general_ci    |  <span class=\"number\">40</span> |</span><br><span class=\"line\">| latin7             | latin7_general_ci   |  <span class=\"number\">41</span> |</span><br><span class=\"line\">| cp1251             | cp1251_general_ci   |  <span class=\"number\">51</span> |</span><br><span class=\"line\">| utf16              | utf16_general_ci    |  <span class=\"number\">54</span> |</span><br><span class=\"line\">| utf16le            | utf16le_general_ci  |  <span class=\"number\">56</span> |</span><br><span class=\"line\">| cp1256             | cp1256_general_ci   |  <span class=\"number\">57</span> |</span><br><span class=\"line\">| cp1257             | cp1257_general_ci   |  <span class=\"number\">59</span> |</span><br><span class=\"line\">| utf32              | utf32_general_ci    |  <span class=\"number\">60</span> |</span><br><span class=\"line\">| binary             | binary              |  <span class=\"number\">63</span> |</span><br><span class=\"line\">| geostd8            | geostd8_general_ci  |  <span class=\"number\">92</span> |</span><br><span class=\"line\">| cp932              | cp932_japanese_ci   |  <span class=\"number\">95</span> |</span><br><span class=\"line\">| eucjpms            | eucjpms_japanese_ci |  <span class=\"number\">97</span> |</span><br><span class=\"line\">| gb18030            | gb18030_chinese_ci  | <span class=\"number\">248</span> |</span><br><span class=\"line\">| utf8mb4            | utf8mb4_0900_ai_ci  | <span class=\"number\">255</span> |</span><br><span class=\"line\">+--------------------+---------------------+-----+</span><br></pre></td></tr></table></figure>\n<h2 id=\"客户端握手响应包（HandshakeResponse）\"><a href=\"#客户端握手响应包（HandshakeResponse）\" class=\"headerlink\" title=\"客户端握手响应包（HandshakeResponse）\"></a><strong>客户端握手响应包（HandshakeResponse）</strong></h2><p>客户端和 MySQL 服务端进行数据交互时，有明文数据交互和SSL加密数据交互，这里贴一张 MySQL 官网给出的一张图，这张图大致的描述了客户端和服务端连接的流程<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2022/03/27/6e65f83b1bcc4b5296d913bf0ac830b1~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"><br>本篇文章就讲下简单的明文连接，不管是明文连接和加密连接，客户端都必须返回 <strong>HandshakeResponse <strong>这个数据包给服务端。<br>这个数据包也有两个版本，一个是 <strong>HandshakeResponse41，</strong>另一个是</strong> HandshakeResponse320。</strong>现在一般都是用 **HandshakeResponse41 **这个版本的数据包。那么服务端要怎么知道客户端发送的数据包到底是什么版本呢？<br>这个就要用到上面的 **CLIENT_PROTOCOL_41 **这个能力标志了，服务端只要解析客户端发来的 **HandshakeResponse **数据包中的 Capability Flags 数据中是否支持 **CLIENT_PROTOCOL_41 **这个能力，来判断客户端握手响应包的版本。当 <strong>CLIENT_PROTOCOL_41 <strong>这个能力为支持状态，说明版本是</strong> HandshakeResponse41，否则就是 HandshakeResponse320。</strong></p>\n<h3 id=\"HandshakeResponse41\"><a href=\"#HandshakeResponse41\" class=\"headerlink\" title=\"HandshakeResponse41\"></a><strong>HandshakeResponse41</strong></h3><p>现在常用的就是 **HandshakeResponse41 **这个握手响应包，本篇文章就讲一讲这个握手响应包吧。这个包的描述如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span>              capability flags, CLIENT_PROTOCOL_41 always set</span><br><span class=\"line\"><span class=\"number\">4</span>              max-packet size</span><br><span class=\"line\"><span class=\"number\">1</span>              character set</span><br><span class=\"line\">string[<span class=\"number\">23</span>]\t   <span class=\"built_in\">reserved</span> (all [<span class=\"number\">0</span>])</span><br><span class=\"line\">string[NUL]    username</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> capabilities &amp; CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果支持 CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA 标志就返回这些数据</span></span><br><span class=\"line\">  lenenc-<span class=\"type\">int</span>     length of auth-response</span><br><span class=\"line\">  string[n]      auth-response</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> capabilities &amp; CLIENT_SECURE_CONNECTION &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果支持 CLIENT_SECURE_CONNECTION 标志就返回这些数据</span></span><br><span class=\"line\">  <span class=\"number\">1</span>              length of auth-response</span><br><span class=\"line\">  string[n]      auth-response</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 否则就返回这个数据</span></span><br><span class=\"line\">  string[NUL]    auth-response</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> capabilities &amp; CLIENT_CONNECT_WITH_DB &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果支持 CLIENT_CONNECT_WITH_DB 标志就返回这些数据</span></span><br><span class=\"line\">  string[NUL]    database</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> capabilities &amp; CLIENT_PLUGIN_AUTH &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果支持 CLIENT_PLUGIN_AUTH 标志就返回这些数据</span></span><br><span class=\"line\">  string[NUL]    auth plugin name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> capabilities &amp; CLIENT_CONNECT_ATTRS &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果支持 CLIENT_CONNECT_ATTRS 标志就返回这些数据</span></span><br><span class=\"line\">  lenenc-<span class=\"type\">int</span>     length of all key-values</span><br><span class=\"line\">  lenenc-str     key</span><br><span class=\"line\">  lenenc-str     value</span><br><span class=\"line\">  <span class=\"keyword\">if</span>-more data in <span class=\"string\">&#x27;length of all key-values&#x27;</span>, more keys <span class=\"keyword\">and</span> value pairs</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>capability_flags</strong> – 客户端的能力标志，占用 4 个字节</li>\n<li><strong>max_packet_size</strong>  – 客户端要发送到服务器的命令包的最大大小，占用 4 个字节</li>\n<li><strong>character_set</strong> - 连接的默认字符集，占用 1 个字节</li>\n<li>username – 客户端要登录的 SQL 帐户的名称 – 此字符串应使用character set字段指示的字符集进行编码。</li>\n<li><strong>auth-response</strong>  –由 auth plugin name 字段指示的 <a href=\"https://dev.mysql.com/doc/internals/en/authentication-method.html\">Authentication Method</a> 生成的加密的身份验证响应数据。</li>\n<li><strong>database</strong>  – 用于连接的初始数据库 – 此字符串应使用 character set字段指示的字符集进行编码。</li>\n<li>auth plugin name  – 客户端用此加密方法加密密码然后赋值给 auth-response 返回给服务端<h3 id=\"密码加密方式\"><a href=\"#密码加密方式\" class=\"headerlink\" title=\"密码加密方式\"></a>密码加密方式</h3>客户端传输给服务端的 MySQL 账户的密码加密方式采用插件的形式，就是 auth plugin name 这个字段的数据，一般支持以下几种加密方式</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>名称</strong></th>\n<th><strong>Auth Plugin Name</strong></th>\n<th><strong>能力标志</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>旧密码认证</td>\n<td>mysql_old_password</td>\n<td>不能使用，无能力标志</td>\n</tr>\n<tr>\n<td>安全密码认证</td>\n<td>mysql_native_password</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_SECURE_CONNECTION\">CLIENT_SECURE_CONNECTION</a></td>\n</tr>\n<tr>\n<td>明文认证</td>\n<td>mysql_clear_password</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PLUGIN_AUTH\">CLIENT_PLUGIN_AUTH</a></td>\n</tr>\n<tr>\n<td>Windows 原生身份验证</td>\n<td>authentication_windows_client</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PLUGIN_AUTH\">CLIENT_PLUGIN_AUTH</a></td>\n</tr>\n<tr>\n<td>SHA256</td>\n<td>sha256_password</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PLUGIN_AUTH\">CLIENT_PLUGIN_AUTH</a></td>\n</tr>\n</tbody></table>\n<p>现在一般常用的是安全密码认证，就是 **Auth Plugin Name **为 mysql_native_password 的认证加密方式。这个方法的加密方式如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SHA1( password ) XOR SHA1( <span class=\"string\">&quot;20-bytes random data from server&quot;</span> &lt;concat&gt; SHA1( SHA1( password ) ) )</span><br></pre></td></tr></table></figure>\n<p>它先对明文密码进行一次 SHA1 的散列运算生成密码 1，然后再将服务端初始握手包中的 20 位 Slat 数据和对明文密码进行两次 SHA1 散列的结果进行连接，然后对连接的结果再进行一次散列运算生成密码 2，最后密码 1 和密码 2 进行异或运算，得到来最终发送给服务端的数据。</p>\n<h2 id=\"响应数据包\"><a href=\"#响应数据包\" class=\"headerlink\" title=\"响应数据包\"></a>响应数据包</h2><p>当我们发送响应握手包 <strong>HandshakeResponse</strong> 后，服务端就会返回一个通用的响应包给我们，这个响应包可以是以下其中一个：</p>\n<ul>\n<li>OK_Packet</li>\n<li>ERR_Packet</li>\n<li>EOF_Packet</li>\n</ul>\n<p>那么我们要怎么区分这三个包呢？区分的关键在于包的第一个字节的数据，如果第一个字节数据为 0x00，则代表这是一个 OK_Packet 。如果第一个字节数据为 0xff，则表示这是一个 ERR_Packet。如果第一个字节为 0xfe，则代表这是一个 EOF_Packet。<br>从 MySQL 5.7.5 开始，OK_Packet 包也用于指示 EOF_Packet，并且不推荐使用 EOF_Packet 包。为了确保 MySQL 的旧版本（5.7.5 之前）和新版本（5.7.5 及更高版本）之间的向后兼容性，新客户端会向服务端该送 <a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_DEPRECATE_EOF\">CLIENT_DEPRECATE_EOF</a> 能力标志。如果没有传送这个能力标志，服务端返回端数据结果集中还是会以 EOF_Packet 包结尾，如果传送了这个能力标志的话，服务端返回端结果集中会以 OK_Packet 包结尾，并且第一个字节数据会是 0xfe。<br>那么我们怎么区分新版 OK_Packet 包在什么时候代表 OK_Packet，在什么时候代表 EOF_Packet 呢？主要可以通过以下几点来判断：</p>\n<ul>\n<li>一个是判断客户端刚才是否传送了 <a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_DEPRECATE_EOF\">CLIENT_DEPRECATE_EOF</a> 能力标志</li>\n<li>OK_Packet: 第一个字节数据为 0x00，且数据包长度 &gt; 7</li>\n<li>EOF_Packet: 第一个字节数据为 0xfe，且数据包长度 &lt; 9<h3 id=\"OK-Packet-格式\"><a href=\"#OK-Packet-格式\" class=\"headerlink\" title=\"OK_Packet 格式\"></a>OK_Packet 格式</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>&lt;<span class=\"number\">1</span>&gt;\t\t\theader\t\t\t\t[<span class=\"number\">00</span>] <span class=\"keyword\">or</span> [fe] the OK packet header</span><br><span class=\"line\"><span class=\"type\">int</span>&lt;lenenc&gt;\taffected_rows\t\t受影响行数</span><br><span class=\"line\"><span class=\"type\">int</span>&lt;lenenc&gt;\tlast_insert_id\t\t最后插入 ID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> capabilities &amp; CLIENT_PROTOCOL_41 &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>&lt;<span class=\"number\">2</span>&gt;\t\tstatus_flags\t状态标志</span><br><span class=\"line\">    <span class=\"type\">int</span>&lt;<span class=\"number\">2</span>&gt;\t\twarnings\t\t警告数</span><br><span class=\"line\">&#125; elseif capabilities &amp; CLIENT_TRANSACTIONS &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>&lt;<span class=\"number\">2</span>&gt;\t\tstatus_flags\tStatus Flags</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> capabilities &amp; CLIENT_SESSION_TRACK &#123;</span><br><span class=\"line\">    string&lt;lenenc&gt;\tinfo\t人类可读的状态信息</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> status_flags &amp; SERVER_SESSION_STATE_CHANGED &#123;</span><br><span class=\"line\">        string&lt;lenenc&gt;\tsession_state_changes\t会话状态信息</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    string&lt;EOF&gt;\tinfo\t\t人类可读的状态信息</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ERR-Packet-格式\"><a href=\"#ERR-Packet-格式\" class=\"headerlink\" title=\"ERR_Packet 格式\"></a>ERR_Packet 格式</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>&lt;<span class=\"number\">1</span>&gt;\t\theader\t\t\t\t[ff] header of the ERR packet</span><br><span class=\"line\"><span class=\"type\">int</span>&lt;<span class=\"number\">2</span>&gt;\t\terror_code\t\t\t错误代码</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> capabilities &amp; CLIENT_PROTOCOL_41 &#123;</span><br><span class=\"line\">  string&lt;<span class=\"number\">1</span>&gt;\tsql_state_marker\tSQL 状态的标记</span><br><span class=\"line\">  string&lt;<span class=\"number\">5</span>&gt;\tsql_state\t\t\tSQL 状态</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">string&lt;EOF&gt;\terror_message\t\t人类可读的错误信息</span><br></pre></td></tr></table></figure>\n<h3 id=\"EOF-Packet-格式\"><a href=\"#EOF-Packet-格式\" class=\"headerlink\" title=\"EOF_Packet 格式\"></a>EOF_Packet 格式</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>&lt;<span class=\"number\">1</span>&gt;\t\theader\t\t\t\t[fe] EOF header</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> capabilities &amp; CLIENT_PROTOCOL_41 &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span>&lt;<span class=\"number\">2</span>&gt;\twarnings\t\t\t警告数</span><br><span class=\"line\">  <span class=\"type\">int</span>&lt;<span class=\"number\">2</span>&gt;\tstatus_flags\t\t状态标志</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据包数据类型介绍\"><a href=\"#数据包数据类型介绍\" class=\"headerlink\" title=\"数据包数据类型介绍\"></a>数据包数据类型介绍</h2>在上面的数据包格式中，你是不是看到例如 int&lt;1&gt;、string<EOF>、int<lenenc> 等等这些一头雾水？这个是 MySQL 官网文档中表示协议数据类型和长度的。主要数据类型如下表：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>字节长度</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int&lt;1&gt;</td>\n<td>1 字节</td>\n</tr>\n<tr>\n<td>int&lt;2&gt;</td>\n<td>2 字节</td>\n</tr>\n<tr>\n<td>int&lt;3&gt;</td>\n<td>3 字节</td>\n</tr>\n<tr>\n<td>int&lt;4&gt;</td>\n<td>4 字节</td>\n</tr>\n<tr>\n<td>int&lt;6&gt;</td>\n<td>6 字节</td>\n</tr>\n<tr>\n<td>int&lt;8&gt;</td>\n<td>8 字节</td>\n</tr>\n<tr>\n<td>int&lt;lenenc&gt;</td>\n<td>见下文详细介绍</td>\n</tr>\n<tr>\n<td>string&lt;lenenc&gt;</td>\n<td>见下文详细介绍</td>\n</tr>\n<tr>\n<td>string&lt;fix&gt;</td>\n<td>固定字节长度的字符串，其中 fix 代表一个指定的数值，例如 string&lt;5&gt;，其中 fix 就等于 5</td>\n</tr>\n<tr>\n<td>string&lt;var&gt;</td>\n<td>字符串的长度由另一个字段确定或在运行时计算</td>\n</tr>\n<tr>\n<td>string&lt;EOF&gt;</td>\n<td>如果字符串是数据包的最后一个组成部分，则它的长度可以从整个数据包长度减去当前位置来计算。</td>\n</tr>\n<tr>\n<td>string&lt;NUL&gt;</td>\n<td>以 [00] 字节结尾的字符串。</td>\n</tr>\n</tbody></table>\n<p>在上面的表格中，大部分的数据类型的长度基本上都可以直接得知，但是其中 int&lt;lenenc&gt;、string&lt;lenenc&gt; 这两个类型的长度需要通过稍微复杂一点的计算来得到最终的数据长度。</p>\n<h3 id=\"int-lt-lenenc-gt\"><a href=\"#int-lt-lenenc-gt\" class=\"headerlink\" title=\"int&lt;lenenc&gt;\"></a>int&lt;lenenc&gt;</h3><p>当要解析这个长度的数据时，它一般开头的第一个字节有 4 中表现形式</p>\n<ul>\n<li>第一个字节的值小于 0xfb：代表这个数据就是这一个字节长度，并且第一个字节的值就是对应字段的值</li>\n<li>第一个字节的值等于 0xfc：代表这个字节往后的两个字节就是这个字段的数据，就是说这个字段一个占用 3 个字节长度，其中第 1 个字节表示该字段占用的字节长度数据，第 2 和第 3 个字节表示的是这个字段的数据</li>\n<li>第一个字节的值等于 0xfd：和上面类似，只是字段数据字节一共占用 4 个字节，其中后 3 个字节表示这个字段的数据</li>\n<li>第一个字节的值等于 0xfe：字段数据字节一共占用 9 个字节，其中后 8 个字节表示这个字段的数据<blockquote>\n<p>注意：在 MySQL 3.22 版本以前，0xfe 表示的这个字段只有 4 个字节长度。<br>如果数据包的第一个字节是长度编码的整数并且其字节值为 0xfe，则必须检查数据包的长度以验证它是否有足够的空间容纳 8 字节整数。<br>如果不是，它可能是一个 <a href=\"https://dev.mysql.com/doc/internals/en/packet-EOF_Packet.html\">EOF_Packet</a> 替代。</p>\n</blockquote>\n</li>\n</ul>\n<p>所以要得到这个字段对应的字节长度时，只要判断第一个字节的数据，然后就可以轻松获得这个字段的长度了</p>\n<h3 id=\"string-lt-lenenc-gt\"><a href=\"#string-lt-lenenc-gt\" class=\"headerlink\" title=\"string&lt;lenenc&gt;\"></a>string&lt;lenenc&gt;</h3><p>这个数据类型分为两部分</p>\n<ul>\n<li><strong>length</strong> (<a href=\"https://dev.mysql.com/doc/internals/en/describing-packets.html#type-lenenc_int\">int<lenenc></a>) – string 数据的占用字节长度</li>\n<li><strong>string</strong> (<a href=\"https://dev.mysql.com/doc/internals/en/describing-packets.html#type-string.fix_len\">string<fix></a>) – [len&#x3D;$length] string</li>\n</ul>\n<p>其中 length 这个数据通过上面 int&lt;lenenc&gt; 的方法获得，然后 string 的数据的字节长度就是 length 的值</p>\n<h2 id=\"发送命令\"><a href=\"#发送命令\" class=\"headerlink\" title=\"发送命令\"></a>发送命令</h2><p>当我们连接成功后，这时就可以向服务端发送命令了，命令如下表：</p>\n<table>\n<thead>\n<tr>\n<th><strong>HEX 值</strong></th>\n<th><strong>NAME</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>00</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-sleep.html#packet-COM_SLEEP\">COM_SLEEP</a></td>\n</tr>\n<tr>\n<td>01</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-quit.html#packet-COM_QUIT\">COM_QUIT</a></td>\n</tr>\n<tr>\n<td>02</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-init-db.html#packet-COM_INIT_DB\">COM_INIT_DB</a></td>\n</tr>\n<tr>\n<td>03</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-query.html#packet-COM_QUERY\">COM_QUERY</a></td>\n</tr>\n<tr>\n<td>04</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-field-list.html#packet-COM_FIELD_LIST\">COM_FIELD_LIST</a></td>\n</tr>\n<tr>\n<td>05</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-create-db.html#packet-COM_CREATE_DB\">COM_CREATE_DB</a></td>\n</tr>\n<tr>\n<td>06</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-drop-db.html#packet-COM_DROP_DB\">COM_DROP_DB</a></td>\n</tr>\n<tr>\n<td>07</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-refresh.html#packet-COM_REFRESH\">COM_REFRESH</a></td>\n</tr>\n<tr>\n<td>08</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-shutdown.html#packet-COM_SHUTDOWN\">COM_SHUTDOWN</a></td>\n</tr>\n<tr>\n<td>09</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-statistics.html#packet-COM_STATISTICS\">COM_STATISTICS</a></td>\n</tr>\n<tr>\n<td>0a</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-process-info.html#packet-COM_PROCESS_INFO\">COM_PROCESS_INFO</a></td>\n</tr>\n<tr>\n<td>0b</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-connect.html#packet-COM_CONNECT\">COM_CONNECT</a></td>\n</tr>\n<tr>\n<td>0c</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-process-kill.html#packet-COM_PROCESS_KILL\">COM_PROCESS_KILL</a></td>\n</tr>\n<tr>\n<td>0d</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-debug.html#packet-COM_DEBUG\">COM_DEBUG</a></td>\n</tr>\n<tr>\n<td>0e</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-ping.html#packet-COM_PING\">COM_PING</a></td>\n</tr>\n<tr>\n<td>0f</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-time.html#packet-COM_TIME\">COM_TIME</a></td>\n</tr>\n<tr>\n<td>10</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-delayed-insert.html#packet-COM_DELAYED_INSERT\">COM_DELAYED_INSERT</a></td>\n</tr>\n<tr>\n<td>11</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-change-user.html#packet-COM_CHANGE_USER\">COM_CHANGE_USER</a></td>\n</tr>\n<tr>\n<td>12</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-binlog-dump.html#packet-COM_BINLOG_DUMP\">COM_BINLOG_DUMP</a></td>\n</tr>\n<tr>\n<td>13</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-table-dump.html#packet-COM_TABLE_DUMP\">COM_TABLE_DUMP</a></td>\n</tr>\n<tr>\n<td>14</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-connect-out.html#packet-COM_CONNECT_OUT\">COM_CONNECT_OUT</a></td>\n</tr>\n<tr>\n<td>15</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-register-slave.html#packet-COM_REGISTER_SLAVE\">COM_REGISTER_SLAVE</a></td>\n</tr>\n<tr>\n<td>16</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-stmt-prepare.html#packet-COM_STMT_PREPARE\">COM_STMT_PREPARE</a></td>\n</tr>\n<tr>\n<td>17</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-stmt-execute.html#packet-COM_STMT_EXECUTE\">COM_STMT_EXECUTE</a></td>\n</tr>\n<tr>\n<td>18</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-stmt-send-long-data.html#packet-COM_STMT_SEND_LONG_DATA\">COM_STMT_SEND_LONG_DATA</a></td>\n</tr>\n<tr>\n<td>19</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-stmt-close.html#packet-COM_STMT_CLOSE\">COM_STMT_CLOSE</a></td>\n</tr>\n<tr>\n<td>1a</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-stmt-reset.html#packet-COM_STMT_RESET\">COM_STMT_RESET</a></td>\n</tr>\n<tr>\n<td>1b</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-set-option.html#packet-COM_SET_OPTION\">COM_SET_OPTION</a></td>\n</tr>\n<tr>\n<td>1c</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-stmt-fetch.html#packet-COM_STMT_FETCH\">COM_STMT_FETCH</a></td>\n</tr>\n<tr>\n<td>1d</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-daemon.html#packet-COM_DAEMON\">COM_DAEMON</a></td>\n</tr>\n<tr>\n<td>1e</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-binlog-dump-gtid.html#packet-COM_BINLOG_DUMP_GTID\">COM_BINLOG_DUMP_GTID</a></td>\n</tr>\n<tr>\n<td>1f</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-reset-connection.html#packet-COM_RESET_CONNECTION\">COM_RESET_CONNECTION</a></td>\n</tr>\n</tbody></table>\n<p>一般我们用的最多的就是 COM_QUERY 这个命令，像 CRUD 都可以通过这个命令来发送，例如我们发送一个查询当前数据库，就可以发送下面的字节数据给服务端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">0f 00 00 00 \t03 73 68 6f 77 20 64 61 74 61 62 61</span><br><span class=\"line\">73 65 73</span><br></pre></td></tr></table></figure>\n<p>其中前 4 个字节代表这个包的大小和序号 ID，后面的字节数据就是我们发送的命令。<br>03 代表这个命令是 COM_QUERY。<br>后面所有的字节数据都是 show databses 转换 byte 后的字节数据</p>\n<h2 id=\"结果集\"><a href=\"#结果集\" class=\"headerlink\" title=\"结果集\"></a>结果集</h2><p>当你发送的 COM_QUERY 命令时，它返回三种数据包的其中一种。我们可以通过第一个字节来判断它：</p>\n<ul>\n<li>当第一个字节数据等于 0x00：返回的是 OK_Packet</li>\n<li>当第一个字节的数据等于 0xff：返回的是 ERR_Packet</li>\n<li>当第一个字节的数据不是以上两个值时：返回一个结果集，并且第一个字节的值代表返回结果集中列（columns）的总数。</li>\n</ul>\n<p><strong>结果集分 3 个部分来读取：</strong></p>\n<ul>\n<li>第一个数据包表示返回结果集中列（columns）的总数。</li>\n<li>然后通过第一个数据包获取的列总数来读取相关列的所有数据包，一列有一个数据包，比如说上面得到列总数为 3，那么接下来的 3 个数据包就是这 3 列的说明。</li>\n<li>读完列的所有数据包后，紧接着就是没行数据的数据包了，一个数据包代表一行数据，每个数据包中有所有列的字段值。其中，如果值长度的值为 0xfe 时，则代表这行中这列的数据为 NULL。行数据直到读取到 OK_Packet&#x2F;EOF_Packet 包出现为止。<h3 id=\"COM-QUERY-Response-格式\"><a href=\"#COM-QUERY-Response-格式\" class=\"headerlink\" title=\"COM_QUERY_Response 格式\"></a>COM_QUERY_Response 格式</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字节长度计算方法见上面的 int&lt;lenenc&gt; 介绍</span></span><br><span class=\"line\"><span class=\"type\">int</span>&lt;lenenc&gt;     结果集中列（columns）的总数。</span><br></pre></td></tr></table></figure>\n<h3 id=\"列数据包格式\"><a href=\"#列数据包格式\" class=\"headerlink\" title=\"列数据包格式\"></a>列数据包格式</h3>列数据包格式也分为两种格式，也是通过客户端上传的 <a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PROTOCOL_41\">CLIENT_PROTOCOL_41</a> 能力标志来觉得的。<br>如果客户端支持 <a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PROTOCOL_41\">CLIENT_PROTOCOL_41</a> 这个能力标志，服务端返回 <strong>ColumnDefinition41</strong> 这个列数据包。<br>如果客户端不支持  <a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PROTOCOL_41\">CLIENT_PROTOCOL_41</a>  这个能力标志的话，服务端就返回 <strong>ColumnDefinition320</strong> 这个版本的列数据包。<br>现在一般都使用 <strong>ColumnDefinition41</strong> 这个数据包，这个数据包描述如下：<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">string&lt;lenenc&gt;      catalog\t\t\t\t目录 (固定为 <span class=\"string\">&quot;def&quot;</span>)</span><br><span class=\"line\">string&lt;lenenc&gt;      schema\t\t\t\t数据库</span><br><span class=\"line\">string&lt;lenenc&gt;      table\t\t\t\t虚拟表</span><br><span class=\"line\">string&lt;lenenc&gt;      org_table\t\t\t源表</span><br><span class=\"line\">string&lt;lenenc&gt;      name\t\t\t\t虚拟名称</span><br><span class=\"line\">string&lt;lenenc&gt;      org_name\t\t\t源名称</span><br><span class=\"line\">string&lt;lenenc&gt;      length of fixed-length fields [<span class=\"number\">0</span>c]</span><br><span class=\"line\"><span class=\"number\">2</span>              \t\tcharacter set\t\t字符集</span><br><span class=\"line\"><span class=\"number\">4</span>              \t\tcolumn length\t\t字段的最大长度</span><br><span class=\"line\"><span class=\"number\">1</span>              \t\ttype\t\t\t\t列类型</span><br><span class=\"line\"><span class=\"number\">2</span>              \t\tflags\t\t\t\t标志</span><br><span class=\"line\"><span class=\"number\">1</span>              \t\tdecimals\t\t\t显示的小数位数</span><br><span class=\"line\"><span class=\"number\">2</span>              \t\tfiller [<span class=\"number\">00</span>] [<span class=\"number\">00</span>]\t两个空占位符</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> command was COM_FIELD_LIST &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>&lt;lenenc&gt;     length of <span class=\"keyword\">default</span>-values</span><br><span class=\"line\">    string[$len]   \t<span class=\"keyword\">default</span> values</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"行数据包格式\"><a href=\"#行数据包格式\" class=\"headerlink\" title=\"行数据包格式\"></a>行数据包格式</h3>行数据包里面包含了所有列的字段数据，每个列的字段的数据可以通过 string&lt;lenenc&gt; 数据类型的计算的方式获得，其中要注意的是，如果字段长度描述字节的数据等于 0xfe 时，代表这行中这列的数据为 NULL。<br>下图是行数据包的表现形式：</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2022/03/27/5ee42af3f32e41739eb78d61b027987d~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>通过以上的介绍，现在我们可以用代码来实现不用第三方驱动的情况下手动连接 MySQL 服务器，然后发送一条查询 databses 的命令。下面的是代码片段，完整代码连接：<a href=\"https://gist.github.com/greycodee/22f98464fece7792a83433a1fba58e2a\">https://gist.github.com/greycodee/22f98464fece7792a83433a1fba58e2a</a></p>\n<h3 id=\"连接-MySQL-服务器\"><a href=\"#连接-MySQL-服务器\" class=\"headerlink\" title=\"连接 MySQL 服务器\"></a>连接 MySQL 服务器</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MySQLClient <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tconn net.Conn</span><br><span class=\"line\">\taddr <span class=\"type\">string</span></span><br><span class=\"line\">\tusername <span class=\"type\">string</span></span><br><span class=\"line\">\tpassword\t<span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MySQLClient)</span></span> init()  &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接阶段</span></span><br><span class=\"line\">\thandshake := m.startConn()</span><br><span class=\"line\">\tm.sendHandshakeResponse41(handshake)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t连接 MySQL 服务器</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MySQLClient)</span></span> startConn() *HandshakeV10 &#123;</span><br><span class=\"line\">\tm.conn, _ = net.Dial(<span class=\"string\">&quot;tcp&quot;</span>,m.addr)</span><br><span class=\"line\">\tinitResp := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>,<span class=\"number\">1024</span>)</span><br><span class=\"line\">\treadLen, _ := m.conn.Read(initResp)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ReadHandShakeV10(initResp[:readLen])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解析初始握手数据包\"><a href=\"#解析初始握手数据包\" class=\"headerlink\" title=\"解析初始握手数据包\"></a>解析初始握手数据包</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t解析初始握手包 HandShakeV10</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReadHandShakeV10</span><span class=\"params\">(data []<span class=\"type\">byte</span>)</span></span> *HandshakeV10 &#123;</span><br><span class=\"line\">\tindex := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> h = &amp;HandshakeV10&#123;&#125;</span><br><span class=\"line\">\tindex+=<span class=\"number\">4</span></span><br><span class=\"line\">\th.ProtocolVersion= <span class=\"type\">int32</span>(data[index])</span><br><span class=\"line\">\tindex++</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> serverVersion []<span class=\"type\">byte</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> data[index]!=<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tserverVersion = <span class=\"built_in\">append</span>(serverVersion,data[index])</span><br><span class=\"line\">\t\tindex++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\th.ServerVersion = <span class=\"type\">string</span>(serverVersion)</span><br><span class=\"line\">\tindex++</span><br><span class=\"line\">\tconnectByte := data[index:index+<span class=\"number\">4</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i :=<span class=\"keyword\">range</span> connectByte&#123;</span><br><span class=\"line\">\t\th.ConnectionId+=<span class=\"type\">int32</span>(connectByte[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tindex+=<span class=\"number\">4</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> apdp1 []<span class=\"type\">byte</span></span><br><span class=\"line\">\tapdp1Byte := data[index:index+<span class=\"number\">8</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> apdp1Byte &#123;</span><br><span class=\"line\">\t\tapdp1 = <span class=\"built_in\">append</span>(apdp1, apdp1Byte[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\th.AuthPluginDataPart_1 = <span class=\"type\">string</span>(apdp1)</span><br><span class=\"line\">\tindex+=<span class=\"number\">9</span></span><br><span class=\"line\">\t<span class=\"comment\">// 能力低2位</span></span><br><span class=\"line\">\tc_flag_low_1 := strings.Split(fmt.Sprintf(<span class=\"string\">&quot;%b\\n&quot;</span>,data[index+<span class=\"number\">1</span>]),<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">\tc_flag_low_2 := strings.Split(fmt.Sprintf(<span class=\"string\">&quot;%b\\n&quot;</span>,data[index]),<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex+=<span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"comment\">// 编码获取</span></span><br><span class=\"line\">\th.CharacterSet = <span class=\"type\">int32</span>(data[index])</span><br><span class=\"line\">\tindex++</span><br><span class=\"line\">\t<span class=\"comment\">// 服务器状态</span></span><br><span class=\"line\">\tindex+=<span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"comment\">// 能力高2位</span></span><br><span class=\"line\">\tc_flag_up_1 := strings.Split(fmt.Sprintf(<span class=\"string\">&quot;%b\\n&quot;</span>,data[index+<span class=\"number\">1</span>]),<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">\tc_flag_up_2 := strings.Split(fmt.Sprintf(<span class=\"string\">&quot;%b\\n&quot;</span>,data[index]),<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> capabilityFlags []<span class=\"type\">string</span></span><br><span class=\"line\">\tcapabilityFlags = <span class=\"built_in\">append</span>(capabilityFlags,c_flag_up_1...)</span><br><span class=\"line\">\tcapabilityFlags = <span class=\"built_in\">append</span>(capabilityFlags,c_flag_up_2...)</span><br><span class=\"line\">\tcapabilityFlags = <span class=\"built_in\">append</span>(capabilityFlags,c_flag_low_1...)</span><br><span class=\"line\">\tcapabilityFlags = <span class=\"built_in\">append</span>(capabilityFlags,c_flag_low_2...)</span><br><span class=\"line\">\tindex+=<span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.EqualFold(<span class=\"string\">&quot;1&quot;</span>,capabilityFlags[<span class=\"number\">19</span>])&#123;</span><br><span class=\"line\">\t\th.AuthPluginDataLen= <span class=\"type\">int32</span>(data[index])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tindex++</span><br><span class=\"line\">\tindex+=<span class=\"number\">10</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.EqualFold(<span class=\"string\">&quot;1&quot;</span>,capabilityFlags[<span class=\"number\">15</span>])&#123;</span><br><span class=\"line\">\t\tp2Len := <span class=\"number\">13</span></span><br><span class=\"line\">\t\tp2len1 := <span class=\"type\">int</span>(h.AuthPluginDataLen<span class=\"number\">-8</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> p2Len &lt; p2len1 &#123;</span><br><span class=\"line\">\t\t\tp2Len = p2len1</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\th.AuthPluginDataPart_2 = <span class=\"type\">string</span>(data[index:index+p2Len])</span><br><span class=\"line\">\t\tindex+=p2Len</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.EqualFold(<span class=\"string\">&quot;1&quot;</span>,capabilityFlags[<span class=\"number\">19</span>]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> authPlugName []<span class=\"type\">byte</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> data[index] != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tauthPlugName = <span class=\"built_in\">append</span>(authPlugName,data[index])</span><br><span class=\"line\">\t\t\tindex++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\th.AuthPluginName = <span class=\"type\">string</span>(authPlugName)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> h</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> HandshakeV10 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tProtocolVersion      <span class=\"type\">int32</span>  <span class=\"string\">`protobuf:&quot;varint,1,opt,name=protocol_version,json=protocolVersion,proto3&quot; json:&quot;protocol_version,omitempty&quot;`</span></span><br><span class=\"line\">\tServerVersion        <span class=\"type\">string</span> <span class=\"string\">`protobuf:&quot;bytes,2,opt,name=server_version,json=serverVersion,proto3&quot; json:&quot;server_version,omitempty&quot;`</span></span><br><span class=\"line\">\tConnectionId         <span class=\"type\">int32</span>  <span class=\"string\">`protobuf:&quot;varint,3,opt,name=connection_id,json=connectionId,proto3&quot; json:&quot;connection_id,omitempty&quot;`</span></span><br><span class=\"line\">\tAuthPluginDataPart_1 <span class=\"type\">string</span> <span class=\"string\">`protobuf:&quot;bytes,4,opt,name=auth_plugin_data_part_1,json=authPluginDataPart1,proto3&quot; json:&quot;auth_plugin_data_part_1,omitempty&quot;`</span></span><br><span class=\"line\">\tCharacterSet         <span class=\"type\">int32</span>  <span class=\"string\">`protobuf:&quot;varint,6,opt,name=character_set,json=characterSet,proto3&quot; json:&quot;character_set,omitempty&quot;`</span></span><br><span class=\"line\">\tStatusFlags          <span class=\"type\">int32</span>  <span class=\"string\">`protobuf:&quot;varint,7,opt,name=status_flags,json=statusFlags,proto3&quot; json:&quot;status_flags,omitempty&quot;`</span></span><br><span class=\"line\">\tAuthPluginDataLen    <span class=\"type\">int32</span>  <span class=\"string\">`protobuf:&quot;varint,8,opt,name=auth_plugin_data_len,json=authPluginDataLen,proto3&quot; json:&quot;auth_plugin_data_len,omitempty&quot;`</span></span><br><span class=\"line\">\tAuthPluginDataPart_2 <span class=\"type\">string</span> <span class=\"string\">`protobuf:&quot;bytes,9,opt,name=auth_plugin_data_part_2,json=authPluginDataPart2,proto3&quot; json:&quot;auth_plugin_data_part_2,omitempty&quot;`</span></span><br><span class=\"line\">\tAuthPluginName       <span class=\"type\">string</span> <span class=\"string\">`protobuf:&quot;bytes,10,opt,name=auth_plugin_name,json=authPluginName,proto3&quot; json:&quot;auth_plugin_name,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"发送初始响应数据包\"><a href=\"#发送初始响应数据包\" class=\"headerlink\" title=\"发送初始响应数据包\"></a>发送初始响应数据包</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t发送初始响应数据包 HandshakeResponse41，包含登陆信息</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MySQLClient)</span></span> sendHandshakeResponse41(serverResp *HandshakeV10) &#123;</span><br><span class=\"line\">\tresp := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, Int32ToBytesOfLittle(<span class=\"number\">19833351</span>)...)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, Int32ToBytesOfLittle(<span class=\"number\">16777215</span>)...)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, <span class=\"number\">33</span>)</span><br><span class=\"line\">\treserved := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>,<span class=\"number\">23</span>)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, reserved...)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, []<span class=\"type\">byte</span>(m.username)...)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, <span class=\"number\">20</span>)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, CalcPassword([]<span class=\"type\">byte</span>(serverResp.AuthPluginDataPart_1+serverResp.AuthPluginDataPart_2)[:<span class=\"number\">20</span>],[]<span class=\"type\">byte</span>(m.password))...)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, []<span class=\"type\">byte</span>(<span class=\"string\">&quot;mysql_native_password&quot;</span>)...)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t_, _ = m.conn.Write(Pack(resp,<span class=\"number\">1</span>))</span><br><span class=\"line\">\tflag := m.handleResponse()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> flag == <span class=\"number\">0xff</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">&quot;连接失败&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"判断连接结果\"><a href=\"#判断连接结果\" class=\"headerlink\" title=\"判断连接结果\"></a>判断连接结果</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t解析通用响应数据包 OK_Packet、ERR_Packet、数据集</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MySQLClient)</span></span> handleResponse() <span class=\"type\">uint8</span> &#123;</span><br><span class=\"line\">\tresp := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>,<span class=\"number\">1024</span>)</span><br><span class=\"line\">\treadLen, _ := m.conn.Read(resp)</span><br><span class=\"line\">\tdata := resp[:readLen]</span><br><span class=\"line\">\tdata = data[<span class=\"number\">4</span>:]</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> data[<span class=\"number\">0</span>] &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0x00</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;成功&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0x00</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0xff</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;失败&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0xff</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tparseResultSet(data)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0xfe</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"发送命令-1\"><a href=\"#发送命令-1\" class=\"headerlink\" title=\"发送命令\"></a>发送命令</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\tCommandQuery</span></span><br><span class=\"line\"><span class=\"comment\">\t发送 COM_QUERY 命令，并读取数据</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MySQLClient)</span></span> CommandQuery(sql <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">\tresp := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, <span class=\"number\">3</span>)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, []<span class=\"type\">byte</span>(sql)...)</span><br><span class=\"line\">\t_, _ = m.conn.Write(Pack(resp,<span class=\"number\">0</span>))</span><br><span class=\"line\">\tm.handleResponse()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解析结果集\"><a href=\"#解析结果集\" class=\"headerlink\" title=\"解析结果集\"></a>解析结果集</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parseResultSet</span><span class=\"params\">(resp []<span class=\"type\">byte</span>)</span></span>  &#123;</span><br><span class=\"line\">\tindex := <span class=\"number\">0</span></span><br><span class=\"line\">\tfieldLen := resp[<span class=\"number\">0</span>]</span><br><span class=\"line\">\tindex+=<span class=\"number\">1</span></span><br><span class=\"line\">\theadRows := <span class=\"built_in\">make</span>([]<span class=\"type\">string</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">\theadIndex := <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"comment\">// 读取列数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> headIndex &lt;= <span class=\"type\">int</span>(fieldLen)&#123;</span><br><span class=\"line\">\t\tn,l := readColumn(resp,index)</span><br><span class=\"line\">\t\tindex+=l</span><br><span class=\"line\">\t\theadRows = <span class=\"built_in\">append</span>(headRows, n)</span><br><span class=\"line\">\t\theadIndex++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttable, err := gotable.Create(headRows...)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Create table failed: &quot;</span>, err.Error())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 读取行内容</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>  &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断是否是 EOF 数据包</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> resp[index+<span class=\"number\">4</span>] == <span class=\"number\">0xfe</span>&#123;</span><br><span class=\"line\">\t\t\tpackLen := <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _,v :=<span class=\"keyword\">range</span> resp[index:index+<span class=\"number\">3</span>]&#123;</span><br><span class=\"line\">\t\t\t\tpackLen+=<span class=\"type\">int</span>(v)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> packLen&lt;<span class=\"number\">9</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\trows,ll := readRow(resp,index, <span class=\"type\">int</span>(fieldLen))</span><br><span class=\"line\">\t\ttable.AddRow(rows)</span><br><span class=\"line\">\t\tindex+=ll</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 打印</span></span><br><span class=\"line\">\tfmt.Println(table)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readColumn</span><span class=\"params\">(data []<span class=\"type\">byte</span>, startIndex <span class=\"type\">int</span>)</span></span> (name <span class=\"type\">string</span>,length <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tpackLen := data[startIndex:startIndex+<span class=\"number\">3</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i :=<span class=\"keyword\">range</span> packLen&#123;</span><br><span class=\"line\">\t\tlength+=<span class=\"type\">int</span>(packLen[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlength += <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tstartIndex+=<span class=\"number\">4</span></span><br><span class=\"line\">\tstartIndex+=<span class=\"type\">int</span>(data[startIndex]+<span class=\"number\">1</span>)</span><br><span class=\"line\">\tstartIndex+=<span class=\"type\">int</span>(data[startIndex]+<span class=\"number\">1</span>)</span><br><span class=\"line\">\tstartIndex+=<span class=\"type\">int</span>(data[startIndex]+<span class=\"number\">1</span>)</span><br><span class=\"line\">\tstartIndex+=<span class=\"type\">int</span>(data[startIndex]+<span class=\"number\">1</span>)</span><br><span class=\"line\">\tnameLen := <span class=\"type\">int</span>(data[startIndex])</span><br><span class=\"line\">\tname = <span class=\"type\">string</span>(data[startIndex+<span class=\"number\">1</span>:startIndex+nameLen+<span class=\"number\">1</span>])</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readRow</span><span class=\"params\">(data []<span class=\"type\">byte</span>, startIndex <span class=\"type\">int</span>, fieldNum <span class=\"type\">int</span>)</span></span> (name []<span class=\"type\">string</span>,length <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tpackLen := data[startIndex:startIndex+<span class=\"number\">3</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i :=<span class=\"keyword\">range</span> packLen&#123;</span><br><span class=\"line\">\t\tlength+=<span class=\"type\">int</span>(packLen[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlength += <span class=\"number\">4</span></span><br><span class=\"line\">\tstartIndex+=<span class=\"number\">4</span></span><br><span class=\"line\">\tf:=<span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> f &lt; fieldNum&#123;</span><br><span class=\"line\">\t\tdataLen := <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 计算字节数据长度</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> data[startIndex] &lt; <span class=\"number\">0xfb</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// NULL</span></span><br><span class=\"line\">\t\t\tdataLen = <span class=\"type\">int</span>(data[startIndex])</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> data[startIndex] == <span class=\"number\">0xfc</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _,v := <span class=\"keyword\">range</span> data[startIndex+<span class=\"number\">1</span>:startIndex+<span class=\"number\">3</span>]&#123;</span><br><span class=\"line\">\t\t\t\tdataLen+=<span class=\"type\">int</span>(v)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> data[startIndex] == <span class=\"number\">0xfd</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _,v :=<span class=\"keyword\">range</span> data[startIndex+<span class=\"number\">1</span>:startIndex+<span class=\"number\">5</span>]&#123;</span><br><span class=\"line\">\t\t\t\tdataLen+=<span class=\"type\">int</span>(v)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> data[startIndex] == <span class=\"number\">0xfe</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _,v :=<span class=\"keyword\">range</span> data[startIndex+<span class=\"number\">1</span>:startIndex+<span class=\"number\">9</span>]&#123;</span><br><span class=\"line\">\t\t\t\tdataLen+=<span class=\"type\">int</span>(v)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tname = <span class=\"built_in\">append</span>(name, <span class=\"type\">string</span>(data[startIndex+<span class=\"number\">1</span>:startIndex+dataLen+<span class=\"number\">1</span>]))</span><br><span class=\"line\">\t\tstartIndex += dataLen+<span class=\"number\">1</span></span><br><span class=\"line\">\t\tf++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"控制台结果输出\"><a href=\"#控制台结果输出\" class=\"headerlink\" title=\"控制台结果输出\"></a>控制台结果输出</h3><p>执行上面的代码后，控制台就会输出所有的数据库名字</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">+--------------------+</span><br><span class=\"line\">|      Database      |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">|      greycode      |</span><br><span class=\"line\">|       mysql        |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">|        sys         |</span><br><span class=\"line\">+--------------------+</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://dev.mysql.com/doc/internals/en/client-server-protocol.html\">https://dev.mysql.com/doc/internals/en/client-server-protocol.html</a></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>我们平常使用数据库的场景一般是程序里面代码直接连接使用，然后进行 CRUD 操作。或者使用有 GUI 界面的数据库软件来手动操作数据库， 这类软件有 DataGrip、Navicat等等…。平常很少关心它们的底层数据交互是怎么样的，相信你看了这篇文章一定能有大概的了解。本篇文章的代码使用 Go 语言来实现 MySQL 的协议。</p>\n<h2 id=\"协议简介\"><a href=\"#协议简介\" class=\"headerlink\" title=\"协议简介\"></a>协议简介</h2><p>MySQL 协议一般分为两个阶段，一个是连接阶段，一个是命令阶段。<br>连接阶段主要是客户端和服务端进行相互认证的阶段，就像我们平常登陆某个网站的一个操作。<br>命令阶段主要是客户端向服务端进行的一些指令的发送，然后服务端处理指令并返回结果的一个过程。<br>在客户端和服务端发送的数据包中，前 3 个字节表示这个数据包的大小，所以这里就有一个问题，就是它有一个大小的限制，数据包大小不能超过16777215 ($2^{24}-1$) bytes，也就是 16M 大小（16进制表示：ff ff ff，刚刚 3 个字节）。这就会有三种情况出现，一种是数据包小于 16M，一种是等于，一种是大于。所以在 MySQL 协议中是这样处理的：</p>\n<ul>\n<li>小于 16M：发送一个数据包就可以了</li>\n<li>等于 16M：发送两个数据包，第二个包为空包</li>\n<li>大于 16M：发送多个数据包，每个数据包大小最大为 16M，当最后一个数据包等于 16M 时，再多发送一个空数据包</li>\n</ul>\n<p>每个数据包中的第 4 个字节表示这个数据包的序号ID，这个 ID 在不同阶段会递增，比如在连接阶段，这个 ID 会随着包的数量而递增，当连接阶段完成后进入命令阶段，这个 ID 又会从 0 开始递增，直到这个命令的生命周期结束。</p>\n<h2 id=\"初始握手包\"><a href=\"#初始握手包\" class=\"headerlink\" title=\"初始握手包\"></a>初始握手包</h2><p>当客户端进行尝试使用 TCP 连接 MySQL 服务端时，服务端就会响应一个初始的握手包，这个握手包有 V9、V10 两个版本。不过现在一般用的都是 V10 版本，如果 MySQL 的版本在 3.21.0 之前，那么服务端响应的是 V9 版本的初始握手包。本篇文章就讲讲现在常用的 V10 版本的初始握手包。</p>\n<p>我们可以使用以下代码来尝试连接我们本地的 MySQL 服务:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;net&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">\tconn, err := net.Dial(<span class=\"string\">&quot;tcp&quot;</span>,<span class=\"string\">&quot;127.0.0.1:3306&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(conn net.Conn)</span></span> &#123;</span><br><span class=\"line\">\t\terr := conn.Close()</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;(conn)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>运作程序后，服务端就会响应一个初始握手包给我们，那么怎么清楚明了的查看这个数据包呢？此时我们可以用 Wireshark 这个软件来查看 MySQL 服务端返回的数据包<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2022/03/27/e9eef1979e07465bb18236a94b2e3ba8~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"><br>可以看到前 4 个字节为 16 进制的数据: 4e 00 00 00 ，表示了这个数据包大小为 78 字节，序号 ID 为 0。具体的字段字节大小和描述如下表示：</p>\n<table>\n<thead>\n<tr>\n<th>字段名</th>\n<th>字节数据长度(byte)</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Protocol</td>\n<td>1</td>\n<td>初始握手包协议版本，可以根据这个字节数据来判断握手包的协议版本，然后按不同版本来处理接下来的数据</td>\n</tr>\n<tr>\n<td>Version</td>\n<td>直到遇到字节数据为 0 的时候停止</td>\n<td>MySQL 服务端版本描述字符串</td>\n</tr>\n<tr>\n<td>Thread ID</td>\n<td>4</td>\n<td>连接 ID</td>\n</tr>\n<tr>\n<td>Slat（第一段）</td>\n<td>8</td>\n<td>用于处理后续客户端的密码加密</td>\n</tr>\n<tr>\n<td>filler</td>\n<td>1</td>\n<td>填充一个字节，默认为 0</td>\n</tr>\n<tr>\n<td>Service Capability（Low）</td>\n<td>2</td>\n<td>服务端能力标志，一共有 4 个字节，这里表示的是低 2 位字节的数据</td>\n</tr>\n<tr>\n<td>Server Language</td>\n<td>1</td>\n<td>服务端字符编码</td>\n</tr>\n<tr>\n<td>Server Status</td>\n<td>2</td>\n<td>服务端状态</td>\n</tr>\n<tr>\n<td>Service Capability（Upper）</td>\n<td>2</td>\n<td>服务端能力标志，这里表示的是高 2 位字节的数据</td>\n</tr>\n<tr>\n<td>Authentication Plugin Length</td>\n<td>1</td>\n<td>身份验证插件长度</td>\n</tr>\n<tr>\n<td>Unused</td>\n<td>10</td>\n<td>预留的 10 个字节数据，默认全部为 0</td>\n</tr>\n<tr>\n<td>Slat（第二段）</td>\n<td>计算公式：MAX(13, 身份验证插件长度 - 8)</td>\n<td>用于处理后续客户端的密码加密</td>\n</tr>\n<tr>\n<td>Authentication Plugin</td>\n<td>直到遇到字节数据为 0 的时候停止</td>\n<td>身份验证插件</td>\n</tr>\n</tbody></table>\n<p>这个初始握手包里包含了很多的数据，在后续的整个连接阶段需要用到里面的大部分数据。</p>\n<h2 id=\"能力标志\"><a href=\"#能力标志\" class=\"headerlink\" title=\"能力标志\"></a>能力标志</h2><p>上面服务端响应端初始握手包中包含了一个能力标志，这个能力标志一共有 4 个字节来表示，我们知道 1 个字节有 8 个 bit，所以 4 个字节一共有 32 个 bit，其中除了最高的 7 个 bit，另外的每一个 bit 都代表着一个能力标志的状态（0 为不支持，1 为支持）,就像下面这样表示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Capabilities 字节数据中的低 2 位</span><br><span class=\"line\">Server Capabilities: 0xffff</span><br><span class=\"line\">.... .... .... ...1 = Long Password: Set</span><br><span class=\"line\">.... .... .... ..1. = Found Rows: Set</span><br><span class=\"line\">.... .... .... .1.. = Long Column Flags: Set</span><br><span class=\"line\">.... .... .... 1... = Connect With Database: Set</span><br><span class=\"line\">.... .... ...1 .... = Don&#x27;t Allow database.table.column: Set</span><br><span class=\"line\">.... .... ..1. .... = Can use compression protocol: Set</span><br><span class=\"line\">.... .... .1.. .... = ODBC Client: Set</span><br><span class=\"line\">.... .... 1... .... = Can Use LOAD DATA LOCAL: Set</span><br><span class=\"line\">.... ...1 .... .... = Ignore Spaces before &#x27;(&#x27;: Set</span><br><span class=\"line\">.... ..1. .... .... = Speaks 4.1 protocol (new flag): Set</span><br><span class=\"line\">.... .1.. .... .... = Interactive Client: Set</span><br><span class=\"line\">.... 1... .... .... = Switch to SSL after handshake: Set</span><br><span class=\"line\">...1 .... .... .... = Ignore sigpipes: Set</span><br><span class=\"line\">..1. .... .... .... = Knows about transactions: Set</span><br><span class=\"line\">.1.. .... .... .... = Speaks 4.1 protocol (old flag): Set</span><br><span class=\"line\">1... .... .... .... = Can do 4.1 authentication: Set</span><br><span class=\"line\"></span><br><span class=\"line\"># Capabilities 字节数据中的高 2 位</span><br><span class=\"line\">Extended Server Capabilities: 0xc1ff</span><br><span class=\"line\">.... .... .... ...1 = Multiple statements: Set</span><br><span class=\"line\">.... .... .... ..1. = Multiple results: Set</span><br><span class=\"line\">.... .... .... .1.. = PS Multiple results: Set</span><br><span class=\"line\">.... .... .... 1... = Plugin Auth: Set</span><br><span class=\"line\">.... .... ...1 .... = Connect attrs: Set</span><br><span class=\"line\">.... .... ..1. .... = Plugin Auth LENENC Client Data: Set</span><br><span class=\"line\">.... .... .1.. .... = Client can handle expired passwords: Set</span><br><span class=\"line\">.... .... 1... .... = Session variable tracking: Set</span><br><span class=\"line\">.... ...1 .... .... = Deprecate EOF: Set</span><br><span class=\"line\">1100 000. .... .... = Unused: 0x60</span><br></pre></td></tr></table></figure>\n<p>除了服务端响应的初始握手包会返回这个能力标志，后续我们发送给服务端的 <strong>HandshakeResponse</strong> 数据包中也包含这个能力标志数据，那么我们该怎么发送这个能力标志数据呢？官方给出力各个能力的值，如下表：</p>\n<table>\n<thead>\n<tr>\n<th>序号</th>\n<th><strong>Capability Flags</strong></th>\n<th><strong>值【16进制】</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>CLIENT_LONG_PASSWORD</td>\n<td>0x1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>CLIENT_FOUND_ROWS</td>\n<td>0x2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>CLIENT_LONG_FLAG</td>\n<td>0x4</td>\n</tr>\n<tr>\n<td>4</td>\n<td>CLIENT_CONNECT_WITH_DB</td>\n<td>0x8</td>\n</tr>\n<tr>\n<td>5</td>\n<td>CLIENT_NO_SCHEMA</td>\n<td>0x10</td>\n</tr>\n<tr>\n<td>6</td>\n<td>CLIENT_COMPRESS</td>\n<td>0x20</td>\n</tr>\n<tr>\n<td>7</td>\n<td>CLIENT_ODBC</td>\n<td>0x40</td>\n</tr>\n<tr>\n<td>8</td>\n<td>CLIENT_LOCAL_FILES</td>\n<td>0x80</td>\n</tr>\n<tr>\n<td>9</td>\n<td>CLIENT_IGNORE_SPACE</td>\n<td>0x100</td>\n</tr>\n<tr>\n<td>10</td>\n<td>CLIENT_PROTOCOL_41</td>\n<td>0x200</td>\n</tr>\n<tr>\n<td>11</td>\n<td>CLIENT_INTERACTIVE</td>\n<td>0x400</td>\n</tr>\n<tr>\n<td>12</td>\n<td>CLIENT_SSL</td>\n<td>0x800</td>\n</tr>\n<tr>\n<td>13</td>\n<td>CLIENT_IGNORE_SIGPIPE</td>\n<td>0x1000</td>\n</tr>\n<tr>\n<td>14</td>\n<td>CLIENT_TRANSACTIONS</td>\n<td>0x2000</td>\n</tr>\n<tr>\n<td>15</td>\n<td>CLIENT_RESERVED</td>\n<td>0x4000</td>\n</tr>\n<tr>\n<td>16</td>\n<td>CLIENT_SECURE_CONNECTION</td>\n<td>0x8000</td>\n</tr>\n<tr>\n<td>17</td>\n<td>CLIENT_MULTI_STATEMENTS</td>\n<td>0x10000</td>\n</tr>\n<tr>\n<td>18</td>\n<td>CLIENT_MULTI_RESULTS</td>\n<td>0x20000</td>\n</tr>\n<tr>\n<td>19</td>\n<td>CLIENT_PS_MULTI_RESULTS</td>\n<td>0x40000</td>\n</tr>\n<tr>\n<td>20</td>\n<td>CLIENT_PLUGIN_AUTH</td>\n<td>0x80000</td>\n</tr>\n<tr>\n<td>21</td>\n<td>CLIENT_CONNECT_ATTRS</td>\n<td>0x100000</td>\n</tr>\n<tr>\n<td>22</td>\n<td>CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA</td>\n<td>0x200000</td>\n</tr>\n<tr>\n<td>23</td>\n<td>CLIENT_CAN_HANDLE_EXPIRED_PASSWORDS</td>\n<td>0x400000</td>\n</tr>\n<tr>\n<td>24</td>\n<td>CLIENT_SESSION_TRACK</td>\n<td>0x800000</td>\n</tr>\n<tr>\n<td>25</td>\n<td>CLIENT_DEPRECATE_EOF</td>\n<td>0x1000000</td>\n</tr>\n</tbody></table>\n<p>当我们要发送客户端支持的能力标志时，只要把所有支持的能力标志的值相加，然后转换为 4 字节大小的数据。<br>例如我们要发送个给服务端说明我们支持 <strong>CLIENT_PROTOCOL_41</strong> 这个能力，那么我们就可以把这个 16 进制的值转换为 4 个字节的数据来表示，转换后的数据为：[0 0 16 0]。HEX 表示法为：[00 00 10 00]</p>\n<blockquote>\n<p>注意：上面转换的字节数据为小端数据，这方面端知识具体可以查询字节序的大小端</p>\n</blockquote>\n<h2 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h2><p>初始握手包还有一个字节表示了支持的字符编码，后续我们响应的 **HandshakeResponse **数据包中也要发送客户端支持的字符编码，相对应的字符编码对应的 ID 如下表，当我们支持什么字符编码时，只要发送对应编码的 ID<br>就可以了。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">+--------------------+---------------------+-----+</span><br><span class=\"line\">| CHARACTER_SET_NAME | COLLATION_NAME      | ID  |</span><br><span class=\"line\">+--------------------+---------------------+-----+</span><br><span class=\"line\">| big5               | big5_chinese_ci     |   <span class=\"number\">1</span> |</span><br><span class=\"line\">| dec8               | dec8_swedish_ci     |   <span class=\"number\">3</span> |</span><br><span class=\"line\">| cp850              | cp850_general_ci    |   <span class=\"number\">4</span> |</span><br><span class=\"line\">| hp8                | hp8_english_ci      |   <span class=\"number\">6</span> |</span><br><span class=\"line\">| koi8r              | koi8r_general_ci    |   <span class=\"number\">7</span> |</span><br><span class=\"line\">| latin1             | latin1_swedish_ci   |   <span class=\"number\">8</span> |</span><br><span class=\"line\">| latin2             | latin2_general_ci   |   <span class=\"number\">9</span> |</span><br><span class=\"line\">| swe7               | swe7_swedish_ci     |  <span class=\"number\">10</span> |</span><br><span class=\"line\">| ascii              | ascii_general_ci    |  <span class=\"number\">11</span> |</span><br><span class=\"line\">| ujis               | ujis_japanese_ci    |  <span class=\"number\">12</span> |</span><br><span class=\"line\">| sjis               | sjis_japanese_ci    |  <span class=\"number\">13</span> |</span><br><span class=\"line\">| hebrew             | hebrew_general_ci   |  <span class=\"number\">16</span> |</span><br><span class=\"line\">| tis620             | tis620_thai_ci      |  <span class=\"number\">18</span> |</span><br><span class=\"line\">| euckr              | euckr_korean_ci     |  <span class=\"number\">19</span> |</span><br><span class=\"line\">| koi8u              | koi8u_general_ci    |  <span class=\"number\">22</span> |</span><br><span class=\"line\">| gb2312             | gb2312_chinese_ci   |  <span class=\"number\">24</span> |</span><br><span class=\"line\">| greek              | greek_general_ci    |  <span class=\"number\">25</span> |</span><br><span class=\"line\">| cp1250             | cp1250_general_ci   |  <span class=\"number\">26</span> |</span><br><span class=\"line\">| gbk                | gbk_chinese_ci      |  <span class=\"number\">28</span> |</span><br><span class=\"line\">| latin5             | latin5_turkish_ci   |  <span class=\"number\">30</span> |</span><br><span class=\"line\">| armscii8           | armscii8_general_ci |  <span class=\"number\">32</span> |</span><br><span class=\"line\">| utf8               | utf8_general_ci     |  <span class=\"number\">33</span> |</span><br><span class=\"line\">| ucs2               | ucs2_general_ci     |  <span class=\"number\">35</span> |</span><br><span class=\"line\">| cp866              | cp866_general_ci    |  <span class=\"number\">36</span> |</span><br><span class=\"line\">| keybcs2            | keybcs2_general_ci  |  <span class=\"number\">37</span> |</span><br><span class=\"line\">| macce              | macce_general_ci    |  <span class=\"number\">38</span> |</span><br><span class=\"line\">| macroman           | macroman_general_ci |  <span class=\"number\">39</span> |</span><br><span class=\"line\">| cp852              | cp852_general_ci    |  <span class=\"number\">40</span> |</span><br><span class=\"line\">| latin7             | latin7_general_ci   |  <span class=\"number\">41</span> |</span><br><span class=\"line\">| cp1251             | cp1251_general_ci   |  <span class=\"number\">51</span> |</span><br><span class=\"line\">| utf16              | utf16_general_ci    |  <span class=\"number\">54</span> |</span><br><span class=\"line\">| utf16le            | utf16le_general_ci  |  <span class=\"number\">56</span> |</span><br><span class=\"line\">| cp1256             | cp1256_general_ci   |  <span class=\"number\">57</span> |</span><br><span class=\"line\">| cp1257             | cp1257_general_ci   |  <span class=\"number\">59</span> |</span><br><span class=\"line\">| utf32              | utf32_general_ci    |  <span class=\"number\">60</span> |</span><br><span class=\"line\">| binary             | binary              |  <span class=\"number\">63</span> |</span><br><span class=\"line\">| geostd8            | geostd8_general_ci  |  <span class=\"number\">92</span> |</span><br><span class=\"line\">| cp932              | cp932_japanese_ci   |  <span class=\"number\">95</span> |</span><br><span class=\"line\">| eucjpms            | eucjpms_japanese_ci |  <span class=\"number\">97</span> |</span><br><span class=\"line\">| gb18030            | gb18030_chinese_ci  | <span class=\"number\">248</span> |</span><br><span class=\"line\">| utf8mb4            | utf8mb4_0900_ai_ci  | <span class=\"number\">255</span> |</span><br><span class=\"line\">+--------------------+---------------------+-----+</span><br></pre></td></tr></table></figure>\n<h2 id=\"客户端握手响应包（HandshakeResponse）\"><a href=\"#客户端握手响应包（HandshakeResponse）\" class=\"headerlink\" title=\"客户端握手响应包（HandshakeResponse）\"></a><strong>客户端握手响应包（HandshakeResponse）</strong></h2><p>客户端和 MySQL 服务端进行数据交互时，有明文数据交互和SSL加密数据交互，这里贴一张 MySQL 官网给出的一张图，这张图大致的描述了客户端和服务端连接的流程<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2022/03/27/6e65f83b1bcc4b5296d913bf0ac830b1~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"><br>本篇文章就讲下简单的明文连接，不管是明文连接和加密连接，客户端都必须返回 <strong>HandshakeResponse <strong>这个数据包给服务端。<br>这个数据包也有两个版本，一个是 <strong>HandshakeResponse41，</strong>另一个是</strong> HandshakeResponse320。</strong>现在一般都是用 **HandshakeResponse41 **这个版本的数据包。那么服务端要怎么知道客户端发送的数据包到底是什么版本呢？<br>这个就要用到上面的 **CLIENT_PROTOCOL_41 **这个能力标志了，服务端只要解析客户端发来的 **HandshakeResponse **数据包中的 Capability Flags 数据中是否支持 **CLIENT_PROTOCOL_41 **这个能力，来判断客户端握手响应包的版本。当 <strong>CLIENT_PROTOCOL_41 <strong>这个能力为支持状态，说明版本是</strong> HandshakeResponse41，否则就是 HandshakeResponse320。</strong></p>\n<h3 id=\"HandshakeResponse41\"><a href=\"#HandshakeResponse41\" class=\"headerlink\" title=\"HandshakeResponse41\"></a><strong>HandshakeResponse41</strong></h3><p>现在常用的就是 **HandshakeResponse41 **这个握手响应包，本篇文章就讲一讲这个握手响应包吧。这个包的描述如下：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span>              capability flags, CLIENT_PROTOCOL_41 always set</span><br><span class=\"line\"><span class=\"number\">4</span>              max-packet size</span><br><span class=\"line\"><span class=\"number\">1</span>              character set</span><br><span class=\"line\">string[<span class=\"number\">23</span>]\t   <span class=\"built_in\">reserved</span> (all [<span class=\"number\">0</span>])</span><br><span class=\"line\">string[NUL]    username</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> capabilities &amp; CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果支持 CLIENT_PLUGIN_AUTH_LENENC_CLIENT_DATA 标志就返回这些数据</span></span><br><span class=\"line\">  lenenc-<span class=\"type\">int</span>     length of auth-response</span><br><span class=\"line\">  string[n]      auth-response</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> capabilities &amp; CLIENT_SECURE_CONNECTION &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果支持 CLIENT_SECURE_CONNECTION 标志就返回这些数据</span></span><br><span class=\"line\">  <span class=\"number\">1</span>              length of auth-response</span><br><span class=\"line\">  string[n]      auth-response</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 否则就返回这个数据</span></span><br><span class=\"line\">  string[NUL]    auth-response</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> capabilities &amp; CLIENT_CONNECT_WITH_DB &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果支持 CLIENT_CONNECT_WITH_DB 标志就返回这些数据</span></span><br><span class=\"line\">  string[NUL]    database</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> capabilities &amp; CLIENT_PLUGIN_AUTH &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果支持 CLIENT_PLUGIN_AUTH 标志就返回这些数据</span></span><br><span class=\"line\">  string[NUL]    auth plugin name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> capabilities &amp; CLIENT_CONNECT_ATTRS &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果支持 CLIENT_CONNECT_ATTRS 标志就返回这些数据</span></span><br><span class=\"line\">  lenenc-<span class=\"type\">int</span>     length of all key-values</span><br><span class=\"line\">  lenenc-str     key</span><br><span class=\"line\">  lenenc-str     value</span><br><span class=\"line\">  <span class=\"keyword\">if</span>-more data in <span class=\"string\">&#x27;length of all key-values&#x27;</span>, more keys <span class=\"keyword\">and</span> value pairs</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>capability_flags</strong> – 客户端的能力标志，占用 4 个字节</li>\n<li><strong>max_packet_size</strong>  – 客户端要发送到服务器的命令包的最大大小，占用 4 个字节</li>\n<li><strong>character_set</strong> - 连接的默认字符集，占用 1 个字节</li>\n<li>username – 客户端要登录的 SQL 帐户的名称 – 此字符串应使用character set字段指示的字符集进行编码。</li>\n<li><strong>auth-response</strong>  –由 auth plugin name 字段指示的 <a href=\"https://dev.mysql.com/doc/internals/en/authentication-method.html\">Authentication Method</a> 生成的加密的身份验证响应数据。</li>\n<li><strong>database</strong>  – 用于连接的初始数据库 – 此字符串应使用 character set字段指示的字符集进行编码。</li>\n<li>auth plugin name  – 客户端用此加密方法加密密码然后赋值给 auth-response 返回给服务端<h3 id=\"密码加密方式\"><a href=\"#密码加密方式\" class=\"headerlink\" title=\"密码加密方式\"></a>密码加密方式</h3>客户端传输给服务端的 MySQL 账户的密码加密方式采用插件的形式，就是 auth plugin name 这个字段的数据，一般支持以下几种加密方式</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>名称</strong></th>\n<th><strong>Auth Plugin Name</strong></th>\n<th><strong>能力标志</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>旧密码认证</td>\n<td>mysql_old_password</td>\n<td>不能使用，无能力标志</td>\n</tr>\n<tr>\n<td>安全密码认证</td>\n<td>mysql_native_password</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_SECURE_CONNECTION\">CLIENT_SECURE_CONNECTION</a></td>\n</tr>\n<tr>\n<td>明文认证</td>\n<td>mysql_clear_password</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PLUGIN_AUTH\">CLIENT_PLUGIN_AUTH</a></td>\n</tr>\n<tr>\n<td>Windows 原生身份验证</td>\n<td>authentication_windows_client</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PLUGIN_AUTH\">CLIENT_PLUGIN_AUTH</a></td>\n</tr>\n<tr>\n<td>SHA256</td>\n<td>sha256_password</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PLUGIN_AUTH\">CLIENT_PLUGIN_AUTH</a></td>\n</tr>\n</tbody></table>\n<p>现在一般常用的是安全密码认证，就是 **Auth Plugin Name **为 mysql_native_password 的认证加密方式。这个方法的加密方式如下</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">SHA1( password ) XOR SHA1( <span class=\"string\">&quot;20-bytes random data from server&quot;</span> &lt;concat&gt; SHA1( SHA1( password ) ) )</span><br></pre></td></tr></table></figure>\n<p>它先对明文密码进行一次 SHA1 的散列运算生成密码 1，然后再将服务端初始握手包中的 20 位 Slat 数据和对明文密码进行两次 SHA1 散列的结果进行连接，然后对连接的结果再进行一次散列运算生成密码 2，最后密码 1 和密码 2 进行异或运算，得到来最终发送给服务端的数据。</p>\n<h2 id=\"响应数据包\"><a href=\"#响应数据包\" class=\"headerlink\" title=\"响应数据包\"></a>响应数据包</h2><p>当我们发送响应握手包 <strong>HandshakeResponse</strong> 后，服务端就会返回一个通用的响应包给我们，这个响应包可以是以下其中一个：</p>\n<ul>\n<li>OK_Packet</li>\n<li>ERR_Packet</li>\n<li>EOF_Packet</li>\n</ul>\n<p>那么我们要怎么区分这三个包呢？区分的关键在于包的第一个字节的数据，如果第一个字节数据为 0x00，则代表这是一个 OK_Packet 。如果第一个字节数据为 0xff，则表示这是一个 ERR_Packet。如果第一个字节为 0xfe，则代表这是一个 EOF_Packet。<br>从 MySQL 5.7.5 开始，OK_Packet 包也用于指示 EOF_Packet，并且不推荐使用 EOF_Packet 包。为了确保 MySQL 的旧版本（5.7.5 之前）和新版本（5.7.5 及更高版本）之间的向后兼容性，新客户端会向服务端该送 <a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_DEPRECATE_EOF\">CLIENT_DEPRECATE_EOF</a> 能力标志。如果没有传送这个能力标志，服务端返回端数据结果集中还是会以 EOF_Packet 包结尾，如果传送了这个能力标志的话，服务端返回端结果集中会以 OK_Packet 包结尾，并且第一个字节数据会是 0xfe。<br>那么我们怎么区分新版 OK_Packet 包在什么时候代表 OK_Packet，在什么时候代表 EOF_Packet 呢？主要可以通过以下几点来判断：</p>\n<ul>\n<li>一个是判断客户端刚才是否传送了 <a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_DEPRECATE_EOF\">CLIENT_DEPRECATE_EOF</a> 能力标志</li>\n<li>OK_Packet: 第一个字节数据为 0x00，且数据包长度 &gt; 7</li>\n<li>EOF_Packet: 第一个字节数据为 0xfe，且数据包长度 &lt; 9<h3 id=\"OK-Packet-格式\"><a href=\"#OK-Packet-格式\" class=\"headerlink\" title=\"OK_Packet 格式\"></a>OK_Packet 格式</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>&lt;<span class=\"number\">1</span>&gt;\t\t\theader\t\t\t\t[<span class=\"number\">00</span>] <span class=\"keyword\">or</span> [fe] the OK packet header</span><br><span class=\"line\"><span class=\"type\">int</span>&lt;lenenc&gt;\taffected_rows\t\t受影响行数</span><br><span class=\"line\"><span class=\"type\">int</span>&lt;lenenc&gt;\tlast_insert_id\t\t最后插入 ID</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> capabilities &amp; CLIENT_PROTOCOL_41 &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>&lt;<span class=\"number\">2</span>&gt;\t\tstatus_flags\t状态标志</span><br><span class=\"line\">    <span class=\"type\">int</span>&lt;<span class=\"number\">2</span>&gt;\t\twarnings\t\t警告数</span><br><span class=\"line\">&#125; elseif capabilities &amp; CLIENT_TRANSACTIONS &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>&lt;<span class=\"number\">2</span>&gt;\t\tstatus_flags\tStatus Flags</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> capabilities &amp; CLIENT_SESSION_TRACK &#123;</span><br><span class=\"line\">    string&lt;lenenc&gt;\tinfo\t人类可读的状态信息</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> status_flags &amp; SERVER_SESSION_STATE_CHANGED &#123;</span><br><span class=\"line\">        string&lt;lenenc&gt;\tsession_state_changes\t会话状态信息</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    string&lt;EOF&gt;\tinfo\t\t人类可读的状态信息</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ERR-Packet-格式\"><a href=\"#ERR-Packet-格式\" class=\"headerlink\" title=\"ERR_Packet 格式\"></a>ERR_Packet 格式</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>&lt;<span class=\"number\">1</span>&gt;\t\theader\t\t\t\t[ff] header of the ERR packet</span><br><span class=\"line\"><span class=\"type\">int</span>&lt;<span class=\"number\">2</span>&gt;\t\terror_code\t\t\t错误代码</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> capabilities &amp; CLIENT_PROTOCOL_41 &#123;</span><br><span class=\"line\">  string&lt;<span class=\"number\">1</span>&gt;\tsql_state_marker\tSQL 状态的标记</span><br><span class=\"line\">  string&lt;<span class=\"number\">5</span>&gt;\tsql_state\t\t\tSQL 状态</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">string&lt;EOF&gt;\terror_message\t\t人类可读的错误信息</span><br></pre></td></tr></table></figure>\n<h3 id=\"EOF-Packet-格式\"><a href=\"#EOF-Packet-格式\" class=\"headerlink\" title=\"EOF_Packet 格式\"></a>EOF_Packet 格式</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span>&lt;<span class=\"number\">1</span>&gt;\t\theader\t\t\t\t[fe] EOF header</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> capabilities &amp; CLIENT_PROTOCOL_41 &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span>&lt;<span class=\"number\">2</span>&gt;\twarnings\t\t\t警告数</span><br><span class=\"line\">  <span class=\"type\">int</span>&lt;<span class=\"number\">2</span>&gt;\tstatus_flags\t\t状态标志</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"数据包数据类型介绍\"><a href=\"#数据包数据类型介绍\" class=\"headerlink\" title=\"数据包数据类型介绍\"></a>数据包数据类型介绍</h2>在上面的数据包格式中，你是不是看到例如 int&lt;1&gt;、string<EOF>、int<lenenc> 等等这些一头雾水？这个是 MySQL 官网文档中表示协议数据类型和长度的。主要数据类型如下表：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th><strong>数据类型</strong></th>\n<th><strong>字节长度</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int&lt;1&gt;</td>\n<td>1 字节</td>\n</tr>\n<tr>\n<td>int&lt;2&gt;</td>\n<td>2 字节</td>\n</tr>\n<tr>\n<td>int&lt;3&gt;</td>\n<td>3 字节</td>\n</tr>\n<tr>\n<td>int&lt;4&gt;</td>\n<td>4 字节</td>\n</tr>\n<tr>\n<td>int&lt;6&gt;</td>\n<td>6 字节</td>\n</tr>\n<tr>\n<td>int&lt;8&gt;</td>\n<td>8 字节</td>\n</tr>\n<tr>\n<td>int&lt;lenenc&gt;</td>\n<td>见下文详细介绍</td>\n</tr>\n<tr>\n<td>string&lt;lenenc&gt;</td>\n<td>见下文详细介绍</td>\n</tr>\n<tr>\n<td>string&lt;fix&gt;</td>\n<td>固定字节长度的字符串，其中 fix 代表一个指定的数值，例如 string&lt;5&gt;，其中 fix 就等于 5</td>\n</tr>\n<tr>\n<td>string&lt;var&gt;</td>\n<td>字符串的长度由另一个字段确定或在运行时计算</td>\n</tr>\n<tr>\n<td>string&lt;EOF&gt;</td>\n<td>如果字符串是数据包的最后一个组成部分，则它的长度可以从整个数据包长度减去当前位置来计算。</td>\n</tr>\n<tr>\n<td>string&lt;NUL&gt;</td>\n<td>以 [00] 字节结尾的字符串。</td>\n</tr>\n</tbody></table>\n<p>在上面的表格中，大部分的数据类型的长度基本上都可以直接得知，但是其中 int&lt;lenenc&gt;、string&lt;lenenc&gt; 这两个类型的长度需要通过稍微复杂一点的计算来得到最终的数据长度。</p>\n<h3 id=\"int-lt-lenenc-gt\"><a href=\"#int-lt-lenenc-gt\" class=\"headerlink\" title=\"int&lt;lenenc&gt;\"></a>int&lt;lenenc&gt;</h3><p>当要解析这个长度的数据时，它一般开头的第一个字节有 4 中表现形式</p>\n<ul>\n<li>第一个字节的值小于 0xfb：代表这个数据就是这一个字节长度，并且第一个字节的值就是对应字段的值</li>\n<li>第一个字节的值等于 0xfc：代表这个字节往后的两个字节就是这个字段的数据，就是说这个字段一个占用 3 个字节长度，其中第 1 个字节表示该字段占用的字节长度数据，第 2 和第 3 个字节表示的是这个字段的数据</li>\n<li>第一个字节的值等于 0xfd：和上面类似，只是字段数据字节一共占用 4 个字节，其中后 3 个字节表示这个字段的数据</li>\n<li>第一个字节的值等于 0xfe：字段数据字节一共占用 9 个字节，其中后 8 个字节表示这个字段的数据<blockquote>\n<p>注意：在 MySQL 3.22 版本以前，0xfe 表示的这个字段只有 4 个字节长度。<br>如果数据包的第一个字节是长度编码的整数并且其字节值为 0xfe，则必须检查数据包的长度以验证它是否有足够的空间容纳 8 字节整数。<br>如果不是，它可能是一个 <a href=\"https://dev.mysql.com/doc/internals/en/packet-EOF_Packet.html\">EOF_Packet</a> 替代。</p>\n</blockquote>\n</li>\n</ul>\n<p>所以要得到这个字段对应的字节长度时，只要判断第一个字节的数据，然后就可以轻松获得这个字段的长度了</p>\n<h3 id=\"string-lt-lenenc-gt\"><a href=\"#string-lt-lenenc-gt\" class=\"headerlink\" title=\"string&lt;lenenc&gt;\"></a>string&lt;lenenc&gt;</h3><p>这个数据类型分为两部分</p>\n<ul>\n<li><strong>length</strong> (<a href=\"https://dev.mysql.com/doc/internals/en/describing-packets.html#type-lenenc_int\">int<lenenc></a>) – string 数据的占用字节长度</li>\n<li><strong>string</strong> (<a href=\"https://dev.mysql.com/doc/internals/en/describing-packets.html#type-string.fix_len\">string<fix></a>) – [len&#x3D;$length] string</li>\n</ul>\n<p>其中 length 这个数据通过上面 int&lt;lenenc&gt; 的方法获得，然后 string 的数据的字节长度就是 length 的值</p>\n<h2 id=\"发送命令\"><a href=\"#发送命令\" class=\"headerlink\" title=\"发送命令\"></a>发送命令</h2><p>当我们连接成功后，这时就可以向服务端发送命令了，命令如下表：</p>\n<table>\n<thead>\n<tr>\n<th><strong>HEX 值</strong></th>\n<th><strong>NAME</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>00</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-sleep.html#packet-COM_SLEEP\">COM_SLEEP</a></td>\n</tr>\n<tr>\n<td>01</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-quit.html#packet-COM_QUIT\">COM_QUIT</a></td>\n</tr>\n<tr>\n<td>02</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-init-db.html#packet-COM_INIT_DB\">COM_INIT_DB</a></td>\n</tr>\n<tr>\n<td>03</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-query.html#packet-COM_QUERY\">COM_QUERY</a></td>\n</tr>\n<tr>\n<td>04</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-field-list.html#packet-COM_FIELD_LIST\">COM_FIELD_LIST</a></td>\n</tr>\n<tr>\n<td>05</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-create-db.html#packet-COM_CREATE_DB\">COM_CREATE_DB</a></td>\n</tr>\n<tr>\n<td>06</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-drop-db.html#packet-COM_DROP_DB\">COM_DROP_DB</a></td>\n</tr>\n<tr>\n<td>07</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-refresh.html#packet-COM_REFRESH\">COM_REFRESH</a></td>\n</tr>\n<tr>\n<td>08</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-shutdown.html#packet-COM_SHUTDOWN\">COM_SHUTDOWN</a></td>\n</tr>\n<tr>\n<td>09</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-statistics.html#packet-COM_STATISTICS\">COM_STATISTICS</a></td>\n</tr>\n<tr>\n<td>0a</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-process-info.html#packet-COM_PROCESS_INFO\">COM_PROCESS_INFO</a></td>\n</tr>\n<tr>\n<td>0b</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-connect.html#packet-COM_CONNECT\">COM_CONNECT</a></td>\n</tr>\n<tr>\n<td>0c</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-process-kill.html#packet-COM_PROCESS_KILL\">COM_PROCESS_KILL</a></td>\n</tr>\n<tr>\n<td>0d</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-debug.html#packet-COM_DEBUG\">COM_DEBUG</a></td>\n</tr>\n<tr>\n<td>0e</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-ping.html#packet-COM_PING\">COM_PING</a></td>\n</tr>\n<tr>\n<td>0f</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-time.html#packet-COM_TIME\">COM_TIME</a></td>\n</tr>\n<tr>\n<td>10</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-delayed-insert.html#packet-COM_DELAYED_INSERT\">COM_DELAYED_INSERT</a></td>\n</tr>\n<tr>\n<td>11</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-change-user.html#packet-COM_CHANGE_USER\">COM_CHANGE_USER</a></td>\n</tr>\n<tr>\n<td>12</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-binlog-dump.html#packet-COM_BINLOG_DUMP\">COM_BINLOG_DUMP</a></td>\n</tr>\n<tr>\n<td>13</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-table-dump.html#packet-COM_TABLE_DUMP\">COM_TABLE_DUMP</a></td>\n</tr>\n<tr>\n<td>14</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-connect-out.html#packet-COM_CONNECT_OUT\">COM_CONNECT_OUT</a></td>\n</tr>\n<tr>\n<td>15</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-register-slave.html#packet-COM_REGISTER_SLAVE\">COM_REGISTER_SLAVE</a></td>\n</tr>\n<tr>\n<td>16</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-stmt-prepare.html#packet-COM_STMT_PREPARE\">COM_STMT_PREPARE</a></td>\n</tr>\n<tr>\n<td>17</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-stmt-execute.html#packet-COM_STMT_EXECUTE\">COM_STMT_EXECUTE</a></td>\n</tr>\n<tr>\n<td>18</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-stmt-send-long-data.html#packet-COM_STMT_SEND_LONG_DATA\">COM_STMT_SEND_LONG_DATA</a></td>\n</tr>\n<tr>\n<td>19</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-stmt-close.html#packet-COM_STMT_CLOSE\">COM_STMT_CLOSE</a></td>\n</tr>\n<tr>\n<td>1a</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-stmt-reset.html#packet-COM_STMT_RESET\">COM_STMT_RESET</a></td>\n</tr>\n<tr>\n<td>1b</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-set-option.html#packet-COM_SET_OPTION\">COM_SET_OPTION</a></td>\n</tr>\n<tr>\n<td>1c</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-stmt-fetch.html#packet-COM_STMT_FETCH\">COM_STMT_FETCH</a></td>\n</tr>\n<tr>\n<td>1d</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-daemon.html#packet-COM_DAEMON\">COM_DAEMON</a></td>\n</tr>\n<tr>\n<td>1e</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-binlog-dump-gtid.html#packet-COM_BINLOG_DUMP_GTID\">COM_BINLOG_DUMP_GTID</a></td>\n</tr>\n<tr>\n<td>1f</td>\n<td><a href=\"https://dev.mysql.com/doc/internals/en/com-reset-connection.html#packet-COM_RESET_CONNECTION\">COM_RESET_CONNECTION</a></td>\n</tr>\n</tbody></table>\n<p>一般我们用的最多的就是 COM_QUERY 这个命令，像 CRUD 都可以通过这个命令来发送，例如我们发送一个查询当前数据库，就可以发送下面的字节数据给服务端</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">0f 00 00 00 \t03 73 68 6f 77 20 64 61 74 61 62 61</span><br><span class=\"line\">73 65 73</span><br></pre></td></tr></table></figure>\n<p>其中前 4 个字节代表这个包的大小和序号 ID，后面的字节数据就是我们发送的命令。<br>03 代表这个命令是 COM_QUERY。<br>后面所有的字节数据都是 show databses 转换 byte 后的字节数据</p>\n<h2 id=\"结果集\"><a href=\"#结果集\" class=\"headerlink\" title=\"结果集\"></a>结果集</h2><p>当你发送的 COM_QUERY 命令时，它返回三种数据包的其中一种。我们可以通过第一个字节来判断它：</p>\n<ul>\n<li>当第一个字节数据等于 0x00：返回的是 OK_Packet</li>\n<li>当第一个字节的数据等于 0xff：返回的是 ERR_Packet</li>\n<li>当第一个字节的数据不是以上两个值时：返回一个结果集，并且第一个字节的值代表返回结果集中列（columns）的总数。</li>\n</ul>\n<p><strong>结果集分 3 个部分来读取：</strong></p>\n<ul>\n<li>第一个数据包表示返回结果集中列（columns）的总数。</li>\n<li>然后通过第一个数据包获取的列总数来读取相关列的所有数据包，一列有一个数据包，比如说上面得到列总数为 3，那么接下来的 3 个数据包就是这 3 列的说明。</li>\n<li>读完列的所有数据包后，紧接着就是没行数据的数据包了，一个数据包代表一行数据，每个数据包中有所有列的字段值。其中，如果值长度的值为 0xfe 时，则代表这行中这列的数据为 NULL。行数据直到读取到 OK_Packet&#x2F;EOF_Packet 包出现为止。<h3 id=\"COM-QUERY-Response-格式\"><a href=\"#COM-QUERY-Response-格式\" class=\"headerlink\" title=\"COM_QUERY_Response 格式\"></a>COM_QUERY_Response 格式</h3><figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字节长度计算方法见上面的 int&lt;lenenc&gt; 介绍</span></span><br><span class=\"line\"><span class=\"type\">int</span>&lt;lenenc&gt;     结果集中列（columns）的总数。</span><br></pre></td></tr></table></figure>\n<h3 id=\"列数据包格式\"><a href=\"#列数据包格式\" class=\"headerlink\" title=\"列数据包格式\"></a>列数据包格式</h3>列数据包格式也分为两种格式，也是通过客户端上传的 <a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PROTOCOL_41\">CLIENT_PROTOCOL_41</a> 能力标志来觉得的。<br>如果客户端支持 <a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PROTOCOL_41\">CLIENT_PROTOCOL_41</a> 这个能力标志，服务端返回 <strong>ColumnDefinition41</strong> 这个列数据包。<br>如果客户端不支持  <a href=\"https://dev.mysql.com/doc/internals/en/capability-flags.html#flag-CLIENT_PROTOCOL_41\">CLIENT_PROTOCOL_41</a>  这个能力标志的话，服务端就返回 <strong>ColumnDefinition320</strong> 这个版本的列数据包。<br>现在一般都使用 <strong>ColumnDefinition41</strong> 这个数据包，这个数据包描述如下：<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\">string&lt;lenenc&gt;      catalog\t\t\t\t目录 (固定为 <span class=\"string\">&quot;def&quot;</span>)</span><br><span class=\"line\">string&lt;lenenc&gt;      schema\t\t\t\t数据库</span><br><span class=\"line\">string&lt;lenenc&gt;      table\t\t\t\t虚拟表</span><br><span class=\"line\">string&lt;lenenc&gt;      org_table\t\t\t源表</span><br><span class=\"line\">string&lt;lenenc&gt;      name\t\t\t\t虚拟名称</span><br><span class=\"line\">string&lt;lenenc&gt;      org_name\t\t\t源名称</span><br><span class=\"line\">string&lt;lenenc&gt;      length of fixed-length fields [<span class=\"number\">0</span>c]</span><br><span class=\"line\"><span class=\"number\">2</span>              \t\tcharacter set\t\t字符集</span><br><span class=\"line\"><span class=\"number\">4</span>              \t\tcolumn length\t\t字段的最大长度</span><br><span class=\"line\"><span class=\"number\">1</span>              \t\ttype\t\t\t\t列类型</span><br><span class=\"line\"><span class=\"number\">2</span>              \t\tflags\t\t\t\t标志</span><br><span class=\"line\"><span class=\"number\">1</span>              \t\tdecimals\t\t\t显示的小数位数</span><br><span class=\"line\"><span class=\"number\">2</span>              \t\tfiller [<span class=\"number\">00</span>] [<span class=\"number\">00</span>]\t两个空占位符</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> command was COM_FIELD_LIST &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>&lt;lenenc&gt;     length of <span class=\"keyword\">default</span>-values</span><br><span class=\"line\">    string[$len]   \t<span class=\"keyword\">default</span> values</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"行数据包格式\"><a href=\"#行数据包格式\" class=\"headerlink\" title=\"行数据包格式\"></a>行数据包格式</h3>行数据包里面包含了所有列的字段数据，每个列的字段的数据可以通过 string&lt;lenenc&gt; 数据类型的计算的方式获得，其中要注意的是，如果字段长度描述字节的数据等于 0xfe 时，代表这行中这列的数据为 NULL。<br>下图是行数据包的表现形式：</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2022/03/27/5ee42af3f32e41739eb78d61b027987d~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"image.png\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>通过以上的介绍，现在我们可以用代码来实现不用第三方驱动的情况下手动连接 MySQL 服务器，然后发送一条查询 databses 的命令。下面的是代码片段，完整代码连接：<a href=\"https://gist.github.com/greycodee/22f98464fece7792a83433a1fba58e2a\">https://gist.github.com/greycodee/22f98464fece7792a83433a1fba58e2a</a></p>\n<h3 id=\"连接-MySQL-服务器\"><a href=\"#连接-MySQL-服务器\" class=\"headerlink\" title=\"连接 MySQL 服务器\"></a>连接 MySQL 服务器</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MySQLClient <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tconn net.Conn</span><br><span class=\"line\">\taddr <span class=\"type\">string</span></span><br><span class=\"line\">\tusername <span class=\"type\">string</span></span><br><span class=\"line\">\tpassword\t<span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MySQLClient)</span></span> init()  &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 连接阶段</span></span><br><span class=\"line\">\thandshake := m.startConn()</span><br><span class=\"line\">\tm.sendHandshakeResponse41(handshake)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t连接 MySQL 服务器</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MySQLClient)</span></span> startConn() *HandshakeV10 &#123;</span><br><span class=\"line\">\tm.conn, _ = net.Dial(<span class=\"string\">&quot;tcp&quot;</span>,m.addr)</span><br><span class=\"line\">\tinitResp := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>,<span class=\"number\">1024</span>)</span><br><span class=\"line\">\treadLen, _ := m.conn.Read(initResp)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ReadHandShakeV10(initResp[:readLen])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解析初始握手数据包\"><a href=\"#解析初始握手数据包\" class=\"headerlink\" title=\"解析初始握手数据包\"></a>解析初始握手数据包</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t解析初始握手包 HandShakeV10</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReadHandShakeV10</span><span class=\"params\">(data []<span class=\"type\">byte</span>)</span></span> *HandshakeV10 &#123;</span><br><span class=\"line\">\tindex := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> h = &amp;HandshakeV10&#123;&#125;</span><br><span class=\"line\">\tindex+=<span class=\"number\">4</span></span><br><span class=\"line\">\th.ProtocolVersion= <span class=\"type\">int32</span>(data[index])</span><br><span class=\"line\">\tindex++</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> serverVersion []<span class=\"type\">byte</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> data[index]!=<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\tserverVersion = <span class=\"built_in\">append</span>(serverVersion,data[index])</span><br><span class=\"line\">\t\tindex++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\th.ServerVersion = <span class=\"type\">string</span>(serverVersion)</span><br><span class=\"line\">\tindex++</span><br><span class=\"line\">\tconnectByte := data[index:index+<span class=\"number\">4</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i :=<span class=\"keyword\">range</span> connectByte&#123;</span><br><span class=\"line\">\t\th.ConnectionId+=<span class=\"type\">int32</span>(connectByte[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tindex+=<span class=\"number\">4</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> apdp1 []<span class=\"type\">byte</span></span><br><span class=\"line\">\tapdp1Byte := data[index:index+<span class=\"number\">8</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> apdp1Byte &#123;</span><br><span class=\"line\">\t\tapdp1 = <span class=\"built_in\">append</span>(apdp1, apdp1Byte[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\th.AuthPluginDataPart_1 = <span class=\"type\">string</span>(apdp1)</span><br><span class=\"line\">\tindex+=<span class=\"number\">9</span></span><br><span class=\"line\">\t<span class=\"comment\">// 能力低2位</span></span><br><span class=\"line\">\tc_flag_low_1 := strings.Split(fmt.Sprintf(<span class=\"string\">&quot;%b\\n&quot;</span>,data[index+<span class=\"number\">1</span>]),<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">\tc_flag_low_2 := strings.Split(fmt.Sprintf(<span class=\"string\">&quot;%b\\n&quot;</span>,data[index]),<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tindex+=<span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"comment\">// 编码获取</span></span><br><span class=\"line\">\th.CharacterSet = <span class=\"type\">int32</span>(data[index])</span><br><span class=\"line\">\tindex++</span><br><span class=\"line\">\t<span class=\"comment\">// 服务器状态</span></span><br><span class=\"line\">\tindex+=<span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"comment\">// 能力高2位</span></span><br><span class=\"line\">\tc_flag_up_1 := strings.Split(fmt.Sprintf(<span class=\"string\">&quot;%b\\n&quot;</span>,data[index+<span class=\"number\">1</span>]),<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">\tc_flag_up_2 := strings.Split(fmt.Sprintf(<span class=\"string\">&quot;%b\\n&quot;</span>,data[index]),<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> capabilityFlags []<span class=\"type\">string</span></span><br><span class=\"line\">\tcapabilityFlags = <span class=\"built_in\">append</span>(capabilityFlags,c_flag_up_1...)</span><br><span class=\"line\">\tcapabilityFlags = <span class=\"built_in\">append</span>(capabilityFlags,c_flag_up_2...)</span><br><span class=\"line\">\tcapabilityFlags = <span class=\"built_in\">append</span>(capabilityFlags,c_flag_low_1...)</span><br><span class=\"line\">\tcapabilityFlags = <span class=\"built_in\">append</span>(capabilityFlags,c_flag_low_2...)</span><br><span class=\"line\">\tindex+=<span class=\"number\">2</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.EqualFold(<span class=\"string\">&quot;1&quot;</span>,capabilityFlags[<span class=\"number\">19</span>])&#123;</span><br><span class=\"line\">\t\th.AuthPluginDataLen= <span class=\"type\">int32</span>(data[index])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tindex++</span><br><span class=\"line\">\tindex+=<span class=\"number\">10</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.EqualFold(<span class=\"string\">&quot;1&quot;</span>,capabilityFlags[<span class=\"number\">15</span>])&#123;</span><br><span class=\"line\">\t\tp2Len := <span class=\"number\">13</span></span><br><span class=\"line\">\t\tp2len1 := <span class=\"type\">int</span>(h.AuthPluginDataLen<span class=\"number\">-8</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> p2Len &lt; p2len1 &#123;</span><br><span class=\"line\">\t\t\tp2Len = p2len1</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\th.AuthPluginDataPart_2 = <span class=\"type\">string</span>(data[index:index+p2Len])</span><br><span class=\"line\">\t\tindex+=p2Len</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> strings.EqualFold(<span class=\"string\">&quot;1&quot;</span>,capabilityFlags[<span class=\"number\">19</span>]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> authPlugName []<span class=\"type\">byte</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> data[index] != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t\tauthPlugName = <span class=\"built_in\">append</span>(authPlugName,data[index])</span><br><span class=\"line\">\t\t\tindex++</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\th.AuthPluginName = <span class=\"type\">string</span>(authPlugName)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> h</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> HandshakeV10 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tProtocolVersion      <span class=\"type\">int32</span>  <span class=\"string\">`protobuf:&quot;varint,1,opt,name=protocol_version,json=protocolVersion,proto3&quot; json:&quot;protocol_version,omitempty&quot;`</span></span><br><span class=\"line\">\tServerVersion        <span class=\"type\">string</span> <span class=\"string\">`protobuf:&quot;bytes,2,opt,name=server_version,json=serverVersion,proto3&quot; json:&quot;server_version,omitempty&quot;`</span></span><br><span class=\"line\">\tConnectionId         <span class=\"type\">int32</span>  <span class=\"string\">`protobuf:&quot;varint,3,opt,name=connection_id,json=connectionId,proto3&quot; json:&quot;connection_id,omitempty&quot;`</span></span><br><span class=\"line\">\tAuthPluginDataPart_1 <span class=\"type\">string</span> <span class=\"string\">`protobuf:&quot;bytes,4,opt,name=auth_plugin_data_part_1,json=authPluginDataPart1,proto3&quot; json:&quot;auth_plugin_data_part_1,omitempty&quot;`</span></span><br><span class=\"line\">\tCharacterSet         <span class=\"type\">int32</span>  <span class=\"string\">`protobuf:&quot;varint,6,opt,name=character_set,json=characterSet,proto3&quot; json:&quot;character_set,omitempty&quot;`</span></span><br><span class=\"line\">\tStatusFlags          <span class=\"type\">int32</span>  <span class=\"string\">`protobuf:&quot;varint,7,opt,name=status_flags,json=statusFlags,proto3&quot; json:&quot;status_flags,omitempty&quot;`</span></span><br><span class=\"line\">\tAuthPluginDataLen    <span class=\"type\">int32</span>  <span class=\"string\">`protobuf:&quot;varint,8,opt,name=auth_plugin_data_len,json=authPluginDataLen,proto3&quot; json:&quot;auth_plugin_data_len,omitempty&quot;`</span></span><br><span class=\"line\">\tAuthPluginDataPart_2 <span class=\"type\">string</span> <span class=\"string\">`protobuf:&quot;bytes,9,opt,name=auth_plugin_data_part_2,json=authPluginDataPart2,proto3&quot; json:&quot;auth_plugin_data_part_2,omitempty&quot;`</span></span><br><span class=\"line\">\tAuthPluginName       <span class=\"type\">string</span> <span class=\"string\">`protobuf:&quot;bytes,10,opt,name=auth_plugin_name,json=authPluginName,proto3&quot; json:&quot;auth_plugin_name,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"发送初始响应数据包\"><a href=\"#发送初始响应数据包\" class=\"headerlink\" title=\"发送初始响应数据包\"></a>发送初始响应数据包</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t发送初始响应数据包 HandshakeResponse41，包含登陆信息</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MySQLClient)</span></span> sendHandshakeResponse41(serverResp *HandshakeV10) &#123;</span><br><span class=\"line\">\tresp := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, Int32ToBytesOfLittle(<span class=\"number\">19833351</span>)...)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, Int32ToBytesOfLittle(<span class=\"number\">16777215</span>)...)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, <span class=\"number\">33</span>)</span><br><span class=\"line\">\treserved := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>,<span class=\"number\">23</span>)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, reserved...)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, []<span class=\"type\">byte</span>(m.username)...)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, <span class=\"number\">20</span>)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, CalcPassword([]<span class=\"type\">byte</span>(serverResp.AuthPluginDataPart_1+serverResp.AuthPluginDataPart_2)[:<span class=\"number\">20</span>],[]<span class=\"type\">byte</span>(m.password))...)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, []<span class=\"type\">byte</span>(<span class=\"string\">&quot;mysql_native_password&quot;</span>)...)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t_, _ = m.conn.Write(Pack(resp,<span class=\"number\">1</span>))</span><br><span class=\"line\">\tflag := m.handleResponse()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> flag == <span class=\"number\">0xff</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">panic</span>(<span class=\"string\">&quot;连接失败&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"判断连接结果\"><a href=\"#判断连接结果\" class=\"headerlink\" title=\"判断连接结果\"></a>判断连接结果</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t解析通用响应数据包 OK_Packet、ERR_Packet、数据集</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MySQLClient)</span></span> handleResponse() <span class=\"type\">uint8</span> &#123;</span><br><span class=\"line\">\tresp := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>,<span class=\"number\">1024</span>)</span><br><span class=\"line\">\treadLen, _ := m.conn.Read(resp)</span><br><span class=\"line\">\tdata := resp[:readLen]</span><br><span class=\"line\">\tdata = data[<span class=\"number\">4</span>:]</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> data[<span class=\"number\">0</span>] &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0x00</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;成功&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0x00</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"number\">0xff</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;失败&quot;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0xff</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tparseResultSet(data)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0xfe</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"发送命令-1\"><a href=\"#发送命令-1\" class=\"headerlink\" title=\"发送命令\"></a>发送命令</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\tCommandQuery</span></span><br><span class=\"line\"><span class=\"comment\">\t发送 COM_QUERY 命令，并读取数据</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(m *MySQLClient)</span></span> CommandQuery(sql <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">\tresp := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, <span class=\"number\">3</span>)</span><br><span class=\"line\">\tresp = <span class=\"built_in\">append</span>(resp, []<span class=\"type\">byte</span>(sql)...)</span><br><span class=\"line\">\t_, _ = m.conn.Write(Pack(resp,<span class=\"number\">0</span>))</span><br><span class=\"line\">\tm.handleResponse()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"解析结果集\"><a href=\"#解析结果集\" class=\"headerlink\" title=\"解析结果集\"></a>解析结果集</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">parseResultSet</span><span class=\"params\">(resp []<span class=\"type\">byte</span>)</span></span>  &#123;</span><br><span class=\"line\">\tindex := <span class=\"number\">0</span></span><br><span class=\"line\">\tfieldLen := resp[<span class=\"number\">0</span>]</span><br><span class=\"line\">\tindex+=<span class=\"number\">1</span></span><br><span class=\"line\">\theadRows := <span class=\"built_in\">make</span>([]<span class=\"type\">string</span>,<span class=\"number\">0</span>)</span><br><span class=\"line\">\theadIndex := <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"comment\">// 读取列数据</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> headIndex &lt;= <span class=\"type\">int</span>(fieldLen)&#123;</span><br><span class=\"line\">\t\tn,l := readColumn(resp,index)</span><br><span class=\"line\">\t\tindex+=l</span><br><span class=\"line\">\t\theadRows = <span class=\"built_in\">append</span>(headRows, n)</span><br><span class=\"line\">\t\theadIndex++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttable, err := gotable.Create(headRows...)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Create table failed: &quot;</span>, err.Error())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 读取行内容</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>  &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 判断是否是 EOF 数据包</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> resp[index+<span class=\"number\">4</span>] == <span class=\"number\">0xfe</span>&#123;</span><br><span class=\"line\">\t\t\tpackLen := <span class=\"number\">0</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _,v :=<span class=\"keyword\">range</span> resp[index:index+<span class=\"number\">3</span>]&#123;</span><br><span class=\"line\">\t\t\t\tpackLen+=<span class=\"type\">int</span>(v)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> packLen&lt;<span class=\"number\">9</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\trows,ll := readRow(resp,index, <span class=\"type\">int</span>(fieldLen))</span><br><span class=\"line\">\t\ttable.AddRow(rows)</span><br><span class=\"line\">\t\tindex+=ll</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 打印</span></span><br><span class=\"line\">\tfmt.Println(table)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readColumn</span><span class=\"params\">(data []<span class=\"type\">byte</span>, startIndex <span class=\"type\">int</span>)</span></span> (name <span class=\"type\">string</span>,length <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tpackLen := data[startIndex:startIndex+<span class=\"number\">3</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i :=<span class=\"keyword\">range</span> packLen&#123;</span><br><span class=\"line\">\t\tlength+=<span class=\"type\">int</span>(packLen[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlength += <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tstartIndex+=<span class=\"number\">4</span></span><br><span class=\"line\">\tstartIndex+=<span class=\"type\">int</span>(data[startIndex]+<span class=\"number\">1</span>)</span><br><span class=\"line\">\tstartIndex+=<span class=\"type\">int</span>(data[startIndex]+<span class=\"number\">1</span>)</span><br><span class=\"line\">\tstartIndex+=<span class=\"type\">int</span>(data[startIndex]+<span class=\"number\">1</span>)</span><br><span class=\"line\">\tstartIndex+=<span class=\"type\">int</span>(data[startIndex]+<span class=\"number\">1</span>)</span><br><span class=\"line\">\tnameLen := <span class=\"type\">int</span>(data[startIndex])</span><br><span class=\"line\">\tname = <span class=\"type\">string</span>(data[startIndex+<span class=\"number\">1</span>:startIndex+nameLen+<span class=\"number\">1</span>])</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">readRow</span><span class=\"params\">(data []<span class=\"type\">byte</span>, startIndex <span class=\"type\">int</span>, fieldNum <span class=\"type\">int</span>)</span></span> (name []<span class=\"type\">string</span>,length <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tpackLen := data[startIndex:startIndex+<span class=\"number\">3</span>]</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i :=<span class=\"keyword\">range</span> packLen&#123;</span><br><span class=\"line\">\t\tlength+=<span class=\"type\">int</span>(packLen[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlength += <span class=\"number\">4</span></span><br><span class=\"line\">\tstartIndex+=<span class=\"number\">4</span></span><br><span class=\"line\">\tf:=<span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> f &lt; fieldNum&#123;</span><br><span class=\"line\">\t\tdataLen := <span class=\"number\">0</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 计算字节数据长度</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> data[startIndex] &lt; <span class=\"number\">0xfb</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// NULL</span></span><br><span class=\"line\">\t\t\tdataLen = <span class=\"type\">int</span>(data[startIndex])</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> data[startIndex] == <span class=\"number\">0xfc</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _,v := <span class=\"keyword\">range</span> data[startIndex+<span class=\"number\">1</span>:startIndex+<span class=\"number\">3</span>]&#123;</span><br><span class=\"line\">\t\t\t\tdataLen+=<span class=\"type\">int</span>(v)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> data[startIndex] == <span class=\"number\">0xfd</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _,v :=<span class=\"keyword\">range</span> data[startIndex+<span class=\"number\">1</span>:startIndex+<span class=\"number\">5</span>]&#123;</span><br><span class=\"line\">\t\t\t\tdataLen+=<span class=\"type\">int</span>(v)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> data[startIndex] == <span class=\"number\">0xfe</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> _,v :=<span class=\"keyword\">range</span> data[startIndex+<span class=\"number\">1</span>:startIndex+<span class=\"number\">9</span>]&#123;</span><br><span class=\"line\">\t\t\t\tdataLen+=<span class=\"type\">int</span>(v)</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tname = <span class=\"built_in\">append</span>(name, <span class=\"type\">string</span>(data[startIndex+<span class=\"number\">1</span>:startIndex+dataLen+<span class=\"number\">1</span>]))</span><br><span class=\"line\">\t\tstartIndex += dataLen+<span class=\"number\">1</span></span><br><span class=\"line\">\t\tf++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"控制台结果输出\"><a href=\"#控制台结果输出\" class=\"headerlink\" title=\"控制台结果输出\"></a>控制台结果输出</h3><p>执行上面的代码后，控制台就会输出所有的数据库名字</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">+--------------------+</span><br><span class=\"line\">|      Database      |</span><br><span class=\"line\">+--------------------+</span><br><span class=\"line\">| information_schema |</span><br><span class=\"line\">|      greycode      |</span><br><span class=\"line\">|       mysql        |</span><br><span class=\"line\">| performance_schema |</span><br><span class=\"line\">|        sys         |</span><br><span class=\"line\">+--------------------+</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://dev.mysql.com/doc/internals/en/client-server-protocol.html\">https://dev.mysql.com/doc/internals/en/client-server-protocol.html</a></p>\n"},{"title":"gitalk更换自定义代理","top":false,"cover":false,"toc":true,"mathjax":true,"p":"archive/33f09b03-a5a7-4d66-93d3-7063905f9b81","date":"2021-03-11T04:10:04.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n首先注册一个https://dash.cloudflare.com/ 的账号\n\n然后创建一个`Workers`。\n\n然后将代码复制到输入框里：\n\n```javascript\n/*\nCORS Anywhere as a Cloudflare Worker!\n(c) 2019 by Zibri (www.zibri.org)\nemail: zibri AT zibri DOT org\nhttps://github.com/Zibri/cloudflare-cors-anywhere\n*/\n\n/*\nwhitelist = [ \"^http.?://www.zibri.org$\", \"zibri.org$\", \"test\\\\..*\" ];  // regexp for whitelisted urls\n*/\n\nblacklist = [ ];           // regexp for blacklisted urls\nwhitelist = [ \".*\" ];     // regexp for whitelisted origins\n\nfunction isListed(uri,listing) {\n    var ret=false;\n    if (typeof uri == \"string\") {\n        listing.forEach((m)=>{\n\t          if (uri.match(m)!=null) ret=true;\n        });\n    } else {            //   decide what to do when Origin is null\n    \t  ret=true;    // true accepts null origins false rejects them.\n    }\n    return ret;\n}\n\naddEventListener(\"fetch\", async event=>{\n    event.respondWith((async function() {\n        isOPTIONS = (event.request.method == \"OPTIONS\");\n        var origin_url = new URL(event.request.url);\n\n        function fix(myHeaders) {\n            //            myHeaders.set(\"Access-Control-Allow-Origin\", \"*\");\n            myHeaders.set(\"Access-Control-Allow-Origin\", event.request.headers.get(\"Origin\"));\n            if (isOPTIONS) {\n                myHeaders.set(\"Access-Control-Allow-Methods\", event.request.headers.get(\"access-control-request-method\"));\n                acrh = event.request.headers.get(\"access-control-request-headers\");\n                //myHeaders.set(\"Access-Control-Allow-Credentials\", \"true\");\n\n                if (acrh) {\n                    myHeaders.set(\"Access-Control-Allow-Headers\", acrh);\n                }\n\n                myHeaders.delete(\"X-Content-Type-Options\");\n            }\n            return myHeaders;\n        }\n        var fetch_url = unescape(unescape(origin_url.search.substr(1)));\n\n        var orig = event.request.headers.get(\"Origin\");\n        \n        var remIp = event.request.headers.get(\"CF-Connecting-IP\");\n\n        if ((!isListed(fetch_url, blacklist)) && (isListed(orig, whitelist))) {\n\n            xheaders = event.request.headers.get(\"x-cors-headers\");\n\n            if (xheaders != null) {\n                try {\n                    xheaders = JSON.parse(xheaders);\n                } catch (e) {}\n            }\n\n            if (origin_url.search.startsWith(\"?\")) {\n                recv_headers = {};\n                for (var pair of event.request.headers.entries()) {\n                    if ((pair[0].match(\"^origin\") == null) && \n\t\t\t(pair[0].match(\"eferer\") == null) && \n\t\t\t(pair[0].match(\"^cf-\") == null) && \n\t\t\t(pair[0].match(\"^x-forw\") == null) && \n\t\t\t(pair[0].match(\"^x-cors-headers\") == null)\n\t\t    ) recv_headers[pair[0]] = pair[1];\n                }\n\t\t    \n                if (xheaders != null) {\n                    Object.entries(xheaders).forEach((c)=>recv_headers[c[0]] = c[1]);\n                }\n\n                newreq = new Request(event.request,{\n                    \"headers\": recv_headers\n                });\n\n                var response = await fetch(fetch_url,newreq);\n                var myHeaders = new Headers(response.headers);\n                cors_headers = [];\n                allh = {};\n                for (var pair of response.headers.entries()) {\n                    cors_headers.push(pair[0]);\n                    allh[pair[0]] = pair[1];\n                }\n                cors_headers.push(\"cors-received-headers\");\n                myHeaders = fix(myHeaders);\n\n                myHeaders.set(\"Access-Control-Expose-Headers\", cors_headers.join(\",\"));\n\n                myHeaders.set(\"cors-received-headers\", JSON.stringify(allh));\n\n                if (isOPTIONS) {\n                    var body = null;\n                } else {\n                    var body = await response.arrayBuffer();\n                }\n\n                var init = {\n                    headers: myHeaders,\n                    status: (isOPTIONS ? 200 : response.status),\n                    statusText: (isOPTIONS ? \"OK\" : response.statusText)\n                };\n                return new Response(body,init);\n\n            } else {\n                var myHeaders = new Headers();\n                myHeaders = fix(myHeaders);\n\n                if (typeof event.request.cf != \"undefined\") {\n                    if (typeof event.request.cf.country != \"undefined\") {\n                        country = event.request.cf.country;\n                    } else\n                        country = false;\n\n                    if (typeof event.request.cf.colo != \"undefined\") {\n                        colo = event.request.cf.colo;\n                    } else\n                        colo = false;\n                } else {\n                    country = false;\n                    colo = false;\n                }\n\n                return new Response(\n                \t\"CLOUDFLARE-CORS-ANYWHERE\\n\\n\" + \n                \t\"Source:\\nhttps://github.com/Zibri/cloudflare-cors-anywhere\\n\\n\" + \n                \t\"Usage:\\n\" + origin_url.origin + \"/?uri\\n\\n\" +\n\t\t\t\"Donate:\\nhttps://paypal.me/Zibri/5\\n\\n\" +\n                \t\"Limits: 100,000 requests/day\\n\" + \n                \t\"          1,000 requests/10 minutes\\n\\n\" + \n                \t(orig != null ? \"Origin: \" + orig + \"\\n\" : \"\") + \n                \t\"Ip: \" + remIp + \"\\n\" + \n                \t(country ? \"Country: \" + country + \"\\n\" : \"\") + \n                \t(colo ? \"Datacenter: \" + colo + \"\\n\" : \"\") + \"\\n\" + \n                \t((xheaders != null) ? \"\\nx-cors-headers: \" + JSON.stringify(xheaders) : \"\"),\n                \t{status: 200, headers: myHeaders}\n                );\n            }\n        } else {\n\n            return new Response(\n                \"Create your own cors proxy</br>\\n\" + \n                \"<a href='https://github.com/Zibri/cloudflare-cors-anywhere'>https://github.com/Zibri/cloudflare-cors-anywhere</a></br>\\n\" +\n                \"\\nDonate</br>\\n\" +\n                \"<a href='https://paypal.me/Zibri/5'>https://paypal.me/Zibri/5</a>\\n\",\n                {\n                    status: 403,\n                    statusText: 'Forbidden',\n                    headers: {\n                        \"Content-Type\": \"text/html\"\n                    }\n                });\n        }\n    }\n    )());\n});\n```\n\n> 作者地址：https://github.com/Zibri/cloudflare-cors-anywhere\n\n点击保存部署就可以了\n\n![20210311121528](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/IdsktUr.png)\n\n然后吧`gitalk`的代理换到你自己上面的部署地址就可以了。类似：\n\n```\nhttps://【上面部署的地址】.workers.dev/?https://github.com/login/oauth/access_token\n```","source":"_posts/archive/33f09b03-a5a7-4d66-93d3-7063905f9b81.md","raw":"---\ntitle: gitalk更换自定义代理\ntop: false\ncover: false\ntoc: true\nmathjax: true\np: archive/33f09b03-a5a7-4d66-93d3-7063905f9b81\ndate: 2021-03-11 12:10:04\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- gitalk\ncategories:\n---\n\n首先注册一个https://dash.cloudflare.com/ 的账号\n\n然后创建一个`Workers`。\n\n然后将代码复制到输入框里：\n\n```javascript\n/*\nCORS Anywhere as a Cloudflare Worker!\n(c) 2019 by Zibri (www.zibri.org)\nemail: zibri AT zibri DOT org\nhttps://github.com/Zibri/cloudflare-cors-anywhere\n*/\n\n/*\nwhitelist = [ \"^http.?://www.zibri.org$\", \"zibri.org$\", \"test\\\\..*\" ];  // regexp for whitelisted urls\n*/\n\nblacklist = [ ];           // regexp for blacklisted urls\nwhitelist = [ \".*\" ];     // regexp for whitelisted origins\n\nfunction isListed(uri,listing) {\n    var ret=false;\n    if (typeof uri == \"string\") {\n        listing.forEach((m)=>{\n\t          if (uri.match(m)!=null) ret=true;\n        });\n    } else {            //   decide what to do when Origin is null\n    \t  ret=true;    // true accepts null origins false rejects them.\n    }\n    return ret;\n}\n\naddEventListener(\"fetch\", async event=>{\n    event.respondWith((async function() {\n        isOPTIONS = (event.request.method == \"OPTIONS\");\n        var origin_url = new URL(event.request.url);\n\n        function fix(myHeaders) {\n            //            myHeaders.set(\"Access-Control-Allow-Origin\", \"*\");\n            myHeaders.set(\"Access-Control-Allow-Origin\", event.request.headers.get(\"Origin\"));\n            if (isOPTIONS) {\n                myHeaders.set(\"Access-Control-Allow-Methods\", event.request.headers.get(\"access-control-request-method\"));\n                acrh = event.request.headers.get(\"access-control-request-headers\");\n                //myHeaders.set(\"Access-Control-Allow-Credentials\", \"true\");\n\n                if (acrh) {\n                    myHeaders.set(\"Access-Control-Allow-Headers\", acrh);\n                }\n\n                myHeaders.delete(\"X-Content-Type-Options\");\n            }\n            return myHeaders;\n        }\n        var fetch_url = unescape(unescape(origin_url.search.substr(1)));\n\n        var orig = event.request.headers.get(\"Origin\");\n        \n        var remIp = event.request.headers.get(\"CF-Connecting-IP\");\n\n        if ((!isListed(fetch_url, blacklist)) && (isListed(orig, whitelist))) {\n\n            xheaders = event.request.headers.get(\"x-cors-headers\");\n\n            if (xheaders != null) {\n                try {\n                    xheaders = JSON.parse(xheaders);\n                } catch (e) {}\n            }\n\n            if (origin_url.search.startsWith(\"?\")) {\n                recv_headers = {};\n                for (var pair of event.request.headers.entries()) {\n                    if ((pair[0].match(\"^origin\") == null) && \n\t\t\t(pair[0].match(\"eferer\") == null) && \n\t\t\t(pair[0].match(\"^cf-\") == null) && \n\t\t\t(pair[0].match(\"^x-forw\") == null) && \n\t\t\t(pair[0].match(\"^x-cors-headers\") == null)\n\t\t    ) recv_headers[pair[0]] = pair[1];\n                }\n\t\t    \n                if (xheaders != null) {\n                    Object.entries(xheaders).forEach((c)=>recv_headers[c[0]] = c[1]);\n                }\n\n                newreq = new Request(event.request,{\n                    \"headers\": recv_headers\n                });\n\n                var response = await fetch(fetch_url,newreq);\n                var myHeaders = new Headers(response.headers);\n                cors_headers = [];\n                allh = {};\n                for (var pair of response.headers.entries()) {\n                    cors_headers.push(pair[0]);\n                    allh[pair[0]] = pair[1];\n                }\n                cors_headers.push(\"cors-received-headers\");\n                myHeaders = fix(myHeaders);\n\n                myHeaders.set(\"Access-Control-Expose-Headers\", cors_headers.join(\",\"));\n\n                myHeaders.set(\"cors-received-headers\", JSON.stringify(allh));\n\n                if (isOPTIONS) {\n                    var body = null;\n                } else {\n                    var body = await response.arrayBuffer();\n                }\n\n                var init = {\n                    headers: myHeaders,\n                    status: (isOPTIONS ? 200 : response.status),\n                    statusText: (isOPTIONS ? \"OK\" : response.statusText)\n                };\n                return new Response(body,init);\n\n            } else {\n                var myHeaders = new Headers();\n                myHeaders = fix(myHeaders);\n\n                if (typeof event.request.cf != \"undefined\") {\n                    if (typeof event.request.cf.country != \"undefined\") {\n                        country = event.request.cf.country;\n                    } else\n                        country = false;\n\n                    if (typeof event.request.cf.colo != \"undefined\") {\n                        colo = event.request.cf.colo;\n                    } else\n                        colo = false;\n                } else {\n                    country = false;\n                    colo = false;\n                }\n\n                return new Response(\n                \t\"CLOUDFLARE-CORS-ANYWHERE\\n\\n\" + \n                \t\"Source:\\nhttps://github.com/Zibri/cloudflare-cors-anywhere\\n\\n\" + \n                \t\"Usage:\\n\" + origin_url.origin + \"/?uri\\n\\n\" +\n\t\t\t\"Donate:\\nhttps://paypal.me/Zibri/5\\n\\n\" +\n                \t\"Limits: 100,000 requests/day\\n\" + \n                \t\"          1,000 requests/10 minutes\\n\\n\" + \n                \t(orig != null ? \"Origin: \" + orig + \"\\n\" : \"\") + \n                \t\"Ip: \" + remIp + \"\\n\" + \n                \t(country ? \"Country: \" + country + \"\\n\" : \"\") + \n                \t(colo ? \"Datacenter: \" + colo + \"\\n\" : \"\") + \"\\n\" + \n                \t((xheaders != null) ? \"\\nx-cors-headers: \" + JSON.stringify(xheaders) : \"\"),\n                \t{status: 200, headers: myHeaders}\n                );\n            }\n        } else {\n\n            return new Response(\n                \"Create your own cors proxy</br>\\n\" + \n                \"<a href='https://github.com/Zibri/cloudflare-cors-anywhere'>https://github.com/Zibri/cloudflare-cors-anywhere</a></br>\\n\" +\n                \"\\nDonate</br>\\n\" +\n                \"<a href='https://paypal.me/Zibri/5'>https://paypal.me/Zibri/5</a>\\n\",\n                {\n                    status: 403,\n                    statusText: 'Forbidden',\n                    headers: {\n                        \"Content-Type\": \"text/html\"\n                    }\n                });\n        }\n    }\n    )());\n});\n```\n\n> 作者地址：https://github.com/Zibri/cloudflare-cors-anywhere\n\n点击保存部署就可以了\n\n![20210311121528](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/IdsktUr.png)\n\n然后吧`gitalk`的代理换到你自己上面的部署地址就可以了。类似：\n\n```\nhttps://【上面部署的地址】.workers.dev/?https://github.com/login/oauth/access_token\n```","slug":"archive/33f09b03-a5a7-4d66-93d3-7063905f9b81","published":1,"updated":"2021-10-08T08:17:11.213Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6efw0013vpucbn35hv9n","content":"<p>首先注册一个<a href=\"https://dash.cloudflare.com/\">https://dash.cloudflare.com/</a> 的账号</p>\n<p>然后创建一个<code>Workers</code>。</p>\n<p>然后将代码复制到输入框里：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">CORS Anywhere as a Cloudflare Worker!</span></span><br><span class=\"line\"><span class=\"comment\">(c) 2019 by Zibri (www.zibri.org)</span></span><br><span class=\"line\"><span class=\"comment\">email: zibri AT zibri DOT org</span></span><br><span class=\"line\"><span class=\"comment\">https://github.com/Zibri/cloudflare-cors-anywhere</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">whitelist = [ &quot;^http.?://www.zibri.org$&quot;, &quot;zibri.org$&quot;, &quot;test\\\\..*&quot; ];  // regexp for whitelisted urls</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">blacklist = [ ];           <span class=\"comment\">// regexp for blacklisted urls</span></span><br><span class=\"line\">whitelist = [ <span class=\"string\">&quot;.*&quot;</span> ];     <span class=\"comment\">// regexp for whitelisted origins</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isListed</span>(<span class=\"params\">uri,listing</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> uri == <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">        listing.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">m</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t          <span class=\"keyword\">if</span> (uri.<span class=\"title function_\">match</span>(m)!=<span class=\"literal\">null</span>) ret=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;            <span class=\"comment\">//   decide what to do when Origin is null</span></span><br><span class=\"line\">    \t  ret=<span class=\"literal\">true</span>;    <span class=\"comment\">// true accepts null origins false rejects them.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;fetch&quot;</span>, <span class=\"keyword\">async</span> event=&gt;&#123;</span><br><span class=\"line\">    event.<span class=\"title function_\">respondWith</span>((<span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        isOPTIONS = (event.<span class=\"property\">request</span>.<span class=\"property\">method</span> == <span class=\"string\">&quot;OPTIONS&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> origin_url = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(event.<span class=\"property\">request</span>.<span class=\"property\">url</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">fix</span>(<span class=\"params\">myHeaders</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//            myHeaders.set(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span></span><br><span class=\"line\">            myHeaders.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, event.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;Origin&quot;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isOPTIONS) &#123;</span><br><span class=\"line\">                myHeaders.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>, event.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;access-control-request-method&quot;</span>));</span><br><span class=\"line\">                acrh = event.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;access-control-request-headers&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//myHeaders.set(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (acrh) &#123;</span><br><span class=\"line\">                    myHeaders.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, acrh);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                myHeaders.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;X-Content-Type-Options&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> myHeaders;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fetch_url = <span class=\"built_in\">unescape</span>(<span class=\"built_in\">unescape</span>(origin_url.<span class=\"property\">search</span>.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> orig = event.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;Origin&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> remIp = event.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;CF-Connecting-IP&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((!<span class=\"title function_\">isListed</span>(fetch_url, blacklist)) &amp;&amp; (<span class=\"title function_\">isListed</span>(orig, whitelist))) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            xheaders = event.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;x-cors-headers&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xheaders != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    xheaders = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xheaders);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (origin_url.<span class=\"property\">search</span>.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;?&quot;</span>)) &#123;</span><br><span class=\"line\">                recv_headers = &#123;&#125;;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> pair <span class=\"keyword\">of</span> event.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">entries</span>()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((pair[<span class=\"number\">0</span>].<span class=\"title function_\">match</span>(<span class=\"string\">&quot;^origin&quot;</span>) == <span class=\"literal\">null</span>) &amp;&amp; </span><br><span class=\"line\">\t\t\t(pair[<span class=\"number\">0</span>].<span class=\"title function_\">match</span>(<span class=\"string\">&quot;eferer&quot;</span>) == <span class=\"literal\">null</span>) &amp;&amp; </span><br><span class=\"line\">\t\t\t(pair[<span class=\"number\">0</span>].<span class=\"title function_\">match</span>(<span class=\"string\">&quot;^cf-&quot;</span>) == <span class=\"literal\">null</span>) &amp;&amp; </span><br><span class=\"line\">\t\t\t(pair[<span class=\"number\">0</span>].<span class=\"title function_\">match</span>(<span class=\"string\">&quot;^x-forw&quot;</span>) == <span class=\"literal\">null</span>) &amp;&amp; </span><br><span class=\"line\">\t\t\t(pair[<span class=\"number\">0</span>].<span class=\"title function_\">match</span>(<span class=\"string\">&quot;^x-cors-headers&quot;</span>) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">\t\t    ) recv_headers[pair[<span class=\"number\">0</span>]] = pair[<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t\t    </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (xheaders != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title class_\">Object</span>.<span class=\"title function_\">entries</span>(xheaders).<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">c</span>)=&gt;</span>recv_headers[c[<span class=\"number\">0</span>]] = c[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                newreq = <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>(event.<span class=\"property\">request</span>,&#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;headers&quot;</span>: recv_headers</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">var</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(fetch_url,newreq);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> myHeaders = <span class=\"keyword\">new</span> <span class=\"title class_\">Headers</span>(response.<span class=\"property\">headers</span>);</span><br><span class=\"line\">                cors_headers = [];</span><br><span class=\"line\">                allh = &#123;&#125;;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> pair <span class=\"keyword\">of</span> response.<span class=\"property\">headers</span>.<span class=\"title function_\">entries</span>()) &#123;</span><br><span class=\"line\">                    cors_headers.<span class=\"title function_\">push</span>(pair[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                    allh[pair[<span class=\"number\">0</span>]] = pair[<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                cors_headers.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;cors-received-headers&quot;</span>);</span><br><span class=\"line\">                myHeaders = <span class=\"title function_\">fix</span>(myHeaders);</span><br><span class=\"line\"></span><br><span class=\"line\">                myHeaders.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;Access-Control-Expose-Headers&quot;</span>, cors_headers.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;,&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">                myHeaders.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;cors-received-headers&quot;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(allh));</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isOPTIONS) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> body = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> body = <span class=\"keyword\">await</span> response.<span class=\"title function_\">arrayBuffer</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">var</span> init = &#123;</span><br><span class=\"line\">                    <span class=\"attr\">headers</span>: myHeaders,</span><br><span class=\"line\">                    <span class=\"attr\">status</span>: (isOPTIONS ? <span class=\"number\">200</span> : response.<span class=\"property\">status</span>),</span><br><span class=\"line\">                    <span class=\"attr\">statusText</span>: (isOPTIONS ? <span class=\"string\">&quot;OK&quot;</span> : response.<span class=\"property\">statusText</span>)</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(body,init);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> myHeaders = <span class=\"keyword\">new</span> <span class=\"title class_\">Headers</span>();</span><br><span class=\"line\">                myHeaders = <span class=\"title function_\">fix</span>(myHeaders);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> event.<span class=\"property\">request</span>.<span class=\"property\">cf</span> != <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> event.<span class=\"property\">request</span>.<span class=\"property\">cf</span>.<span class=\"property\">country</span> != <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">                        country = event.<span class=\"property\">request</span>.<span class=\"property\">cf</span>.<span class=\"property\">country</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">                        country = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> event.<span class=\"property\">request</span>.<span class=\"property\">cf</span>.<span class=\"property\">colo</span> != <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">                        colo = event.<span class=\"property\">request</span>.<span class=\"property\">cf</span>.<span class=\"property\">colo</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">                        colo = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    country = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    colo = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(</span><br><span class=\"line\">                \t<span class=\"string\">&quot;CLOUDFLARE-CORS-ANYWHERE\\n\\n&quot;</span> + </span><br><span class=\"line\">                \t<span class=\"string\">&quot;Source:\\nhttps://github.com/Zibri/cloudflare-cors-anywhere\\n\\n&quot;</span> + </span><br><span class=\"line\">                \t<span class=\"string\">&quot;Usage:\\n&quot;</span> + origin_url.<span class=\"property\">origin</span> + <span class=\"string\">&quot;/?uri\\n\\n&quot;</span> +</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Donate:\\nhttps://paypal.me/Zibri/5\\n\\n&quot;</span> +</span><br><span class=\"line\">                \t<span class=\"string\">&quot;Limits: 100,000 requests/day\\n&quot;</span> + </span><br><span class=\"line\">                \t<span class=\"string\">&quot;          1,000 requests/10 minutes\\n\\n&quot;</span> + </span><br><span class=\"line\">                \t(orig != <span class=\"literal\">null</span> ? <span class=\"string\">&quot;Origin: &quot;</span> + orig + <span class=\"string\">&quot;\\n&quot;</span> : <span class=\"string\">&quot;&quot;</span>) + </span><br><span class=\"line\">                \t<span class=\"string\">&quot;Ip: &quot;</span> + remIp + <span class=\"string\">&quot;\\n&quot;</span> + </span><br><span class=\"line\">                \t(country ? <span class=\"string\">&quot;Country: &quot;</span> + country + <span class=\"string\">&quot;\\n&quot;</span> : <span class=\"string\">&quot;&quot;</span>) + </span><br><span class=\"line\">                \t(colo ? <span class=\"string\">&quot;Datacenter: &quot;</span> + colo + <span class=\"string\">&quot;\\n&quot;</span> : <span class=\"string\">&quot;&quot;</span>) + <span class=\"string\">&quot;\\n&quot;</span> + </span><br><span class=\"line\">                \t((xheaders != <span class=\"literal\">null</span>) ? <span class=\"string\">&quot;\\nx-cors-headers: &quot;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(xheaders) : <span class=\"string\">&quot;&quot;</span>),</span><br><span class=\"line\">                \t&#123;<span class=\"attr\">status</span>: <span class=\"number\">200</span>, <span class=\"attr\">headers</span>: myHeaders&#125;</span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(</span><br><span class=\"line\">                <span class=\"string\">&quot;Create your own cors proxy&lt;/br&gt;\\n&quot;</span> + </span><br><span class=\"line\">                <span class=\"string\">&quot;&lt;a href=&#x27;https://github.com/Zibri/cloudflare-cors-anywhere&#x27;&gt;https://github.com/Zibri/cloudflare-cors-anywhere&lt;/a&gt;&lt;/br&gt;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;\\nDonate&lt;/br&gt;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;&lt;a href=&#x27;https://paypal.me/Zibri/5&#x27;&gt;https://paypal.me/Zibri/5&lt;/a&gt;\\n&quot;</span>,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">status</span>: <span class=\"number\">403</span>,</span><br><span class=\"line\">                    <span class=\"attr\">statusText</span>: <span class=\"string\">&#x27;Forbidden&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;text/html&quot;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    )());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>作者地址：<a href=\"https://github.com/Zibri/cloudflare-cors-anywhere\">https://github.com/Zibri/cloudflare-cors-anywhere</a></p>\n</blockquote>\n<p>点击保存部署就可以了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/IdsktUr.png\" alt=\"20210311121528\"></p>\n<p>然后吧<code>gitalk</code>的代理换到你自己上面的部署地址就可以了。类似：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://【上面部署的地址】.workers.dev/?https://github.com/login/oauth/access_token</span><br></pre></td></tr></table></figure>","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p>首先注册一个<a href=\"https://dash.cloudflare.com/\">https://dash.cloudflare.com/</a> 的账号</p>\n<p>然后创建一个<code>Workers</code>。</p>\n<p>然后将代码复制到输入框里：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">CORS Anywhere as a Cloudflare Worker!</span></span><br><span class=\"line\"><span class=\"comment\">(c) 2019 by Zibri (www.zibri.org)</span></span><br><span class=\"line\"><span class=\"comment\">email: zibri AT zibri DOT org</span></span><br><span class=\"line\"><span class=\"comment\">https://github.com/Zibri/cloudflare-cors-anywhere</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">whitelist = [ &quot;^http.?://www.zibri.org$&quot;, &quot;zibri.org$&quot;, &quot;test\\\\..*&quot; ];  // regexp for whitelisted urls</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\">blacklist = [ ];           <span class=\"comment\">// regexp for blacklisted urls</span></span><br><span class=\"line\">whitelist = [ <span class=\"string\">&quot;.*&quot;</span> ];     <span class=\"comment\">// regexp for whitelisted origins</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isListed</span>(<span class=\"params\">uri,listing</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> ret=<span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> uri == <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">        listing.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">m</span>)=&gt;</span>&#123;</span><br><span class=\"line\">\t          <span class=\"keyword\">if</span> (uri.<span class=\"title function_\">match</span>(m)!=<span class=\"literal\">null</span>) ret=<span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;            <span class=\"comment\">//   decide what to do when Origin is null</span></span><br><span class=\"line\">    \t  ret=<span class=\"literal\">true</span>;    <span class=\"comment\">// true accepts null origins false rejects them.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;fetch&quot;</span>, <span class=\"keyword\">async</span> event=&gt;&#123;</span><br><span class=\"line\">    event.<span class=\"title function_\">respondWith</span>((<span class=\"keyword\">async</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        isOPTIONS = (event.<span class=\"property\">request</span>.<span class=\"property\">method</span> == <span class=\"string\">&quot;OPTIONS&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">var</span> origin_url = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(event.<span class=\"property\">request</span>.<span class=\"property\">url</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">function</span> <span class=\"title function_\">fix</span>(<span class=\"params\">myHeaders</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">//            myHeaders.set(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);</span></span><br><span class=\"line\">            myHeaders.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, event.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;Origin&quot;</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isOPTIONS) &#123;</span><br><span class=\"line\">                myHeaders.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>, event.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;access-control-request-method&quot;</span>));</span><br><span class=\"line\">                acrh = event.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;access-control-request-headers&quot;</span>);</span><br><span class=\"line\">                <span class=\"comment\">//myHeaders.set(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;);</span></span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (acrh) &#123;</span><br><span class=\"line\">                    myHeaders.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, acrh);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                myHeaders.<span class=\"title function_\">delete</span>(<span class=\"string\">&quot;X-Content-Type-Options&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> myHeaders;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> fetch_url = <span class=\"built_in\">unescape</span>(<span class=\"built_in\">unescape</span>(origin_url.<span class=\"property\">search</span>.<span class=\"title function_\">substr</span>(<span class=\"number\">1</span>)));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> orig = event.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;Origin&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">var</span> remIp = event.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;CF-Connecting-IP&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((!<span class=\"title function_\">isListed</span>(fetch_url, blacklist)) &amp;&amp; (<span class=\"title function_\">isListed</span>(orig, whitelist))) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            xheaders = event.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">get</span>(<span class=\"string\">&quot;x-cors-headers&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (xheaders != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    xheaders = <span class=\"title class_\">JSON</span>.<span class=\"title function_\">parse</span>(xheaders);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (e) &#123;&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (origin_url.<span class=\"property\">search</span>.<span class=\"title function_\">startsWith</span>(<span class=\"string\">&quot;?&quot;</span>)) &#123;</span><br><span class=\"line\">                recv_headers = &#123;&#125;;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> pair <span class=\"keyword\">of</span> event.<span class=\"property\">request</span>.<span class=\"property\">headers</span>.<span class=\"title function_\">entries</span>()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((pair[<span class=\"number\">0</span>].<span class=\"title function_\">match</span>(<span class=\"string\">&quot;^origin&quot;</span>) == <span class=\"literal\">null</span>) &amp;&amp; </span><br><span class=\"line\">\t\t\t(pair[<span class=\"number\">0</span>].<span class=\"title function_\">match</span>(<span class=\"string\">&quot;eferer&quot;</span>) == <span class=\"literal\">null</span>) &amp;&amp; </span><br><span class=\"line\">\t\t\t(pair[<span class=\"number\">0</span>].<span class=\"title function_\">match</span>(<span class=\"string\">&quot;^cf-&quot;</span>) == <span class=\"literal\">null</span>) &amp;&amp; </span><br><span class=\"line\">\t\t\t(pair[<span class=\"number\">0</span>].<span class=\"title function_\">match</span>(<span class=\"string\">&quot;^x-forw&quot;</span>) == <span class=\"literal\">null</span>) &amp;&amp; </span><br><span class=\"line\">\t\t\t(pair[<span class=\"number\">0</span>].<span class=\"title function_\">match</span>(<span class=\"string\">&quot;^x-cors-headers&quot;</span>) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">\t\t    ) recv_headers[pair[<span class=\"number\">0</span>]] = pair[<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t\t    </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (xheaders != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"title class_\">Object</span>.<span class=\"title function_\">entries</span>(xheaders).<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">c</span>)=&gt;</span>recv_headers[c[<span class=\"number\">0</span>]] = c[<span class=\"number\">1</span>]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                newreq = <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>(event.<span class=\"property\">request</span>,&#123;</span><br><span class=\"line\">                    <span class=\"string\">&quot;headers&quot;</span>: recv_headers</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">var</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(fetch_url,newreq);</span><br><span class=\"line\">                <span class=\"keyword\">var</span> myHeaders = <span class=\"keyword\">new</span> <span class=\"title class_\">Headers</span>(response.<span class=\"property\">headers</span>);</span><br><span class=\"line\">                cors_headers = [];</span><br><span class=\"line\">                allh = &#123;&#125;;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> pair <span class=\"keyword\">of</span> response.<span class=\"property\">headers</span>.<span class=\"title function_\">entries</span>()) &#123;</span><br><span class=\"line\">                    cors_headers.<span class=\"title function_\">push</span>(pair[<span class=\"number\">0</span>]);</span><br><span class=\"line\">                    allh[pair[<span class=\"number\">0</span>]] = pair[<span class=\"number\">1</span>];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                cors_headers.<span class=\"title function_\">push</span>(<span class=\"string\">&quot;cors-received-headers&quot;</span>);</span><br><span class=\"line\">                myHeaders = <span class=\"title function_\">fix</span>(myHeaders);</span><br><span class=\"line\"></span><br><span class=\"line\">                myHeaders.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;Access-Control-Expose-Headers&quot;</span>, cors_headers.<span class=\"title function_\">join</span>(<span class=\"string\">&quot;,&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">                myHeaders.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;cors-received-headers&quot;</span>, <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(allh));</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isOPTIONS) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> body = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">var</span> body = <span class=\"keyword\">await</span> response.<span class=\"title function_\">arrayBuffer</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">var</span> init = &#123;</span><br><span class=\"line\">                    <span class=\"attr\">headers</span>: myHeaders,</span><br><span class=\"line\">                    <span class=\"attr\">status</span>: (isOPTIONS ? <span class=\"number\">200</span> : response.<span class=\"property\">status</span>),</span><br><span class=\"line\">                    <span class=\"attr\">statusText</span>: (isOPTIONS ? <span class=\"string\">&quot;OK&quot;</span> : response.<span class=\"property\">statusText</span>)</span><br><span class=\"line\">                &#125;;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(body,init);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">var</span> myHeaders = <span class=\"keyword\">new</span> <span class=\"title class_\">Headers</span>();</span><br><span class=\"line\">                myHeaders = <span class=\"title function_\">fix</span>(myHeaders);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> event.<span class=\"property\">request</span>.<span class=\"property\">cf</span> != <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> event.<span class=\"property\">request</span>.<span class=\"property\">cf</span>.<span class=\"property\">country</span> != <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">                        country = event.<span class=\"property\">request</span>.<span class=\"property\">cf</span>.<span class=\"property\">country</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">                        country = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> event.<span class=\"property\">request</span>.<span class=\"property\">cf</span>.<span class=\"property\">colo</span> != <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">                        colo = event.<span class=\"property\">request</span>.<span class=\"property\">cf</span>.<span class=\"property\">colo</span>;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">                        colo = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    country = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    colo = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(</span><br><span class=\"line\">                \t<span class=\"string\">&quot;CLOUDFLARE-CORS-ANYWHERE\\n\\n&quot;</span> + </span><br><span class=\"line\">                \t<span class=\"string\">&quot;Source:\\nhttps://github.com/Zibri/cloudflare-cors-anywhere\\n\\n&quot;</span> + </span><br><span class=\"line\">                \t<span class=\"string\">&quot;Usage:\\n&quot;</span> + origin_url.<span class=\"property\">origin</span> + <span class=\"string\">&quot;/?uri\\n\\n&quot;</span> +</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Donate:\\nhttps://paypal.me/Zibri/5\\n\\n&quot;</span> +</span><br><span class=\"line\">                \t<span class=\"string\">&quot;Limits: 100,000 requests/day\\n&quot;</span> + </span><br><span class=\"line\">                \t<span class=\"string\">&quot;          1,000 requests/10 minutes\\n\\n&quot;</span> + </span><br><span class=\"line\">                \t(orig != <span class=\"literal\">null</span> ? <span class=\"string\">&quot;Origin: &quot;</span> + orig + <span class=\"string\">&quot;\\n&quot;</span> : <span class=\"string\">&quot;&quot;</span>) + </span><br><span class=\"line\">                \t<span class=\"string\">&quot;Ip: &quot;</span> + remIp + <span class=\"string\">&quot;\\n&quot;</span> + </span><br><span class=\"line\">                \t(country ? <span class=\"string\">&quot;Country: &quot;</span> + country + <span class=\"string\">&quot;\\n&quot;</span> : <span class=\"string\">&quot;&quot;</span>) + </span><br><span class=\"line\">                \t(colo ? <span class=\"string\">&quot;Datacenter: &quot;</span> + colo + <span class=\"string\">&quot;\\n&quot;</span> : <span class=\"string\">&quot;&quot;</span>) + <span class=\"string\">&quot;\\n&quot;</span> + </span><br><span class=\"line\">                \t((xheaders != <span class=\"literal\">null</span>) ? <span class=\"string\">&quot;\\nx-cors-headers: &quot;</span> + <span class=\"title class_\">JSON</span>.<span class=\"title function_\">stringify</span>(xheaders) : <span class=\"string\">&quot;&quot;</span>),</span><br><span class=\"line\">                \t&#123;<span class=\"attr\">status</span>: <span class=\"number\">200</span>, <span class=\"attr\">headers</span>: myHeaders&#125;</span><br><span class=\"line\">                );</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(</span><br><span class=\"line\">                <span class=\"string\">&quot;Create your own cors proxy&lt;/br&gt;\\n&quot;</span> + </span><br><span class=\"line\">                <span class=\"string\">&quot;&lt;a href=&#x27;https://github.com/Zibri/cloudflare-cors-anywhere&#x27;&gt;https://github.com/Zibri/cloudflare-cors-anywhere&lt;/a&gt;&lt;/br&gt;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;\\nDonate&lt;/br&gt;\\n&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;&lt;a href=&#x27;https://paypal.me/Zibri/5&#x27;&gt;https://paypal.me/Zibri/5&lt;/a&gt;\\n&quot;</span>,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"attr\">status</span>: <span class=\"number\">403</span>,</span><br><span class=\"line\">                    <span class=\"attr\">statusText</span>: <span class=\"string\">&#x27;Forbidden&#x27;</span>,</span><br><span class=\"line\">                    <span class=\"attr\">headers</span>: &#123;</span><br><span class=\"line\">                        <span class=\"string\">&quot;Content-Type&quot;</span>: <span class=\"string\">&quot;text/html&quot;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    )());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>作者地址：<a href=\"https://github.com/Zibri/cloudflare-cors-anywhere\">https://github.com/Zibri/cloudflare-cors-anywhere</a></p>\n</blockquote>\n<p>点击保存部署就可以了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/IdsktUr.png\" alt=\"20210311121528\"></p>\n<p>然后吧<code>gitalk</code>的代理换到你自己上面的部署地址就可以了。类似：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://【上面部署的地址】.workers.dev/?https://github.com/login/oauth/access_token</span><br></pre></td></tr></table></figure>"},{"title":"什么是P2P网络","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2022-02-22T07:08:04.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## NAT 类型\n\n\n\n### Full Cone NAT\n\n全锥形 NAT 是将来自相同内部 IP 地址和端口的所有请求映射到相同的外部 IP 地址和端口。此外，任何外部主机都可以通过向映射的外部地址发送数据包来向内部主机发送数据包。\n\n### Restricted Cone NAT\n\n受限锥形 NAT 是将来自相同内部 IP 地址和端口的所有请求映射到相同的外部 IP 地址和端口。与完整的锥形 NAT 不同，外部主机（IP 地址为 X）只有在内部主机先前已向 IP 地址 X 发送数据包时才能向内部主机发送数据包。\n\n### Port Restricted Cone NAT\n\n端口受限锥形 NAT 类似于受限锥形 NAT，但限制包括端口号。具体来说，只有当内部主机之前已经向 IP 地址 X 和端口 P 发送了数据包时，外部主机才能向内部主机发送源 IP 地址为 X 和源端口 P 的数据包\n\n### Symmetric NAT\n\n对称 NAT 是一种从相同内部 IP 地址和端口到特定目标 IP 地址和端口的所有请求都映射到相同外部 IP 地址和端口的一种。如果同一主机发送具有相同源地址和端口的数据包，但发送到不同的目的地，则使用不同的映射。此外，只有收到数据包的外部主机才能将 UDP 数据包发送回内部主机。\n\n\n\n## Hole Punching\n\n使用先前建立的关联来允许任意外部地址/端口向内部地址/端口发送数据称为打孔。使用普通（全锥）、受限和端口受限 NAT 可以进行打孔，这些 NAT 将相同的内部地址/端口一致地映射到外部地址/端口。\n\n**注意：** 纯对称 NAT 无法进行打孔，因为它们的目标特定端口映射行为不一致。\n\n![NAT_types](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2022/02/22/NAT_types-20220222151007798.png)\n\n\n\n## STUN 和 TURN\n\n\n\n## 参考资料\n\nhttps://dh2i.com/wp-content/uploads/NAT_types.png\n\n","source":"_posts/archive/FA21243A47644D98B4380AE439D2A69F.md","raw":"---\ntitle: 什么是P2P网络\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2022-02-22 15:08:04\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- P2P\n- 网络\ncategories:\n- 网络\n---\n\n## NAT 类型\n\n\n\n### Full Cone NAT\n\n全锥形 NAT 是将来自相同内部 IP 地址和端口的所有请求映射到相同的外部 IP 地址和端口。此外，任何外部主机都可以通过向映射的外部地址发送数据包来向内部主机发送数据包。\n\n### Restricted Cone NAT\n\n受限锥形 NAT 是将来自相同内部 IP 地址和端口的所有请求映射到相同的外部 IP 地址和端口。与完整的锥形 NAT 不同，外部主机（IP 地址为 X）只有在内部主机先前已向 IP 地址 X 发送数据包时才能向内部主机发送数据包。\n\n### Port Restricted Cone NAT\n\n端口受限锥形 NAT 类似于受限锥形 NAT，但限制包括端口号。具体来说，只有当内部主机之前已经向 IP 地址 X 和端口 P 发送了数据包时，外部主机才能向内部主机发送源 IP 地址为 X 和源端口 P 的数据包\n\n### Symmetric NAT\n\n对称 NAT 是一种从相同内部 IP 地址和端口到特定目标 IP 地址和端口的所有请求都映射到相同外部 IP 地址和端口的一种。如果同一主机发送具有相同源地址和端口的数据包，但发送到不同的目的地，则使用不同的映射。此外，只有收到数据包的外部主机才能将 UDP 数据包发送回内部主机。\n\n\n\n## Hole Punching\n\n使用先前建立的关联来允许任意外部地址/端口向内部地址/端口发送数据称为打孔。使用普通（全锥）、受限和端口受限 NAT 可以进行打孔，这些 NAT 将相同的内部地址/端口一致地映射到外部地址/端口。\n\n**注意：** 纯对称 NAT 无法进行打孔，因为它们的目标特定端口映射行为不一致。\n\n![NAT_types](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2022/02/22/NAT_types-20220222151007798.png)\n\n\n\n## STUN 和 TURN\n\n\n\n## 参考资料\n\nhttps://dh2i.com/wp-content/uploads/NAT_types.png\n\n","slug":"archive/FA21243A47644D98B4380AE439D2A69F","published":1,"updated":"2022-02-22T07:16:06.034Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6efy0017vpuc38swfpqq","content":"<h2 id=\"NAT-类型\"><a href=\"#NAT-类型\" class=\"headerlink\" title=\"NAT 类型\"></a>NAT 类型</h2><h3 id=\"Full-Cone-NAT\"><a href=\"#Full-Cone-NAT\" class=\"headerlink\" title=\"Full Cone NAT\"></a>Full Cone NAT</h3><p>全锥形 NAT 是将来自相同内部 IP 地址和端口的所有请求映射到相同的外部 IP 地址和端口。此外，任何外部主机都可以通过向映射的外部地址发送数据包来向内部主机发送数据包。</p>\n<h3 id=\"Restricted-Cone-NAT\"><a href=\"#Restricted-Cone-NAT\" class=\"headerlink\" title=\"Restricted Cone NAT\"></a>Restricted Cone NAT</h3><p>受限锥形 NAT 是将来自相同内部 IP 地址和端口的所有请求映射到相同的外部 IP 地址和端口。与完整的锥形 NAT 不同，外部主机（IP 地址为 X）只有在内部主机先前已向 IP 地址 X 发送数据包时才能向内部主机发送数据包。</p>\n<h3 id=\"Port-Restricted-Cone-NAT\"><a href=\"#Port-Restricted-Cone-NAT\" class=\"headerlink\" title=\"Port Restricted Cone NAT\"></a>Port Restricted Cone NAT</h3><p>端口受限锥形 NAT 类似于受限锥形 NAT，但限制包括端口号。具体来说，只有当内部主机之前已经向 IP 地址 X 和端口 P 发送了数据包时，外部主机才能向内部主机发送源 IP 地址为 X 和源端口 P 的数据包</p>\n<h3 id=\"Symmetric-NAT\"><a href=\"#Symmetric-NAT\" class=\"headerlink\" title=\"Symmetric NAT\"></a>Symmetric NAT</h3><p>对称 NAT 是一种从相同内部 IP 地址和端口到特定目标 IP 地址和端口的所有请求都映射到相同外部 IP 地址和端口的一种。如果同一主机发送具有相同源地址和端口的数据包，但发送到不同的目的地，则使用不同的映射。此外，只有收到数据包的外部主机才能将 UDP 数据包发送回内部主机。</p>\n<h2 id=\"Hole-Punching\"><a href=\"#Hole-Punching\" class=\"headerlink\" title=\"Hole Punching\"></a>Hole Punching</h2><p>使用先前建立的关联来允许任意外部地址&#x2F;端口向内部地址&#x2F;端口发送数据称为打孔。使用普通（全锥）、受限和端口受限 NAT 可以进行打孔，这些 NAT 将相同的内部地址&#x2F;端口一致地映射到外部地址&#x2F;端口。</p>\n<p><strong>注意：</strong> 纯对称 NAT 无法进行打孔，因为它们的目标特定端口映射行为不一致。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2022/02/22/NAT_types-20220222151007798.png\" alt=\"NAT_types\"></p>\n<h2 id=\"STUN-和-TURN\"><a href=\"#STUN-和-TURN\" class=\"headerlink\" title=\"STUN 和 TURN\"></a>STUN 和 TURN</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://dh2i.com/wp-content/uploads/NAT_types.png\">https://dh2i.com/wp-content/uploads/NAT_types.png</a></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"NAT-类型\"><a href=\"#NAT-类型\" class=\"headerlink\" title=\"NAT 类型\"></a>NAT 类型</h2><h3 id=\"Full-Cone-NAT\"><a href=\"#Full-Cone-NAT\" class=\"headerlink\" title=\"Full Cone NAT\"></a>Full Cone NAT</h3><p>全锥形 NAT 是将来自相同内部 IP 地址和端口的所有请求映射到相同的外部 IP 地址和端口。此外，任何外部主机都可以通过向映射的外部地址发送数据包来向内部主机发送数据包。</p>\n<h3 id=\"Restricted-Cone-NAT\"><a href=\"#Restricted-Cone-NAT\" class=\"headerlink\" title=\"Restricted Cone NAT\"></a>Restricted Cone NAT</h3><p>受限锥形 NAT 是将来自相同内部 IP 地址和端口的所有请求映射到相同的外部 IP 地址和端口。与完整的锥形 NAT 不同，外部主机（IP 地址为 X）只有在内部主机先前已向 IP 地址 X 发送数据包时才能向内部主机发送数据包。</p>\n<h3 id=\"Port-Restricted-Cone-NAT\"><a href=\"#Port-Restricted-Cone-NAT\" class=\"headerlink\" title=\"Port Restricted Cone NAT\"></a>Port Restricted Cone NAT</h3><p>端口受限锥形 NAT 类似于受限锥形 NAT，但限制包括端口号。具体来说，只有当内部主机之前已经向 IP 地址 X 和端口 P 发送了数据包时，外部主机才能向内部主机发送源 IP 地址为 X 和源端口 P 的数据包</p>\n<h3 id=\"Symmetric-NAT\"><a href=\"#Symmetric-NAT\" class=\"headerlink\" title=\"Symmetric NAT\"></a>Symmetric NAT</h3><p>对称 NAT 是一种从相同内部 IP 地址和端口到特定目标 IP 地址和端口的所有请求都映射到相同外部 IP 地址和端口的一种。如果同一主机发送具有相同源地址和端口的数据包，但发送到不同的目的地，则使用不同的映射。此外，只有收到数据包的外部主机才能将 UDP 数据包发送回内部主机。</p>\n<h2 id=\"Hole-Punching\"><a href=\"#Hole-Punching\" class=\"headerlink\" title=\"Hole Punching\"></a>Hole Punching</h2><p>使用先前建立的关联来允许任意外部地址&#x2F;端口向内部地址&#x2F;端口发送数据称为打孔。使用普通（全锥）、受限和端口受限 NAT 可以进行打孔，这些 NAT 将相同的内部地址&#x2F;端口一致地映射到外部地址&#x2F;端口。</p>\n<p><strong>注意：</strong> 纯对称 NAT 无法进行打孔，因为它们的目标特定端口映射行为不一致。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2022/02/22/NAT_types-20220222151007798.png\" alt=\"NAT_types\"></p>\n<h2 id=\"STUN-和-TURN\"><a href=\"#STUN-和-TURN\" class=\"headerlink\" title=\"STUN 和 TURN\"></a>STUN 和 TURN</h2><h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://dh2i.com/wp-content/uploads/NAT_types.png\">https://dh2i.com/wp-content/uploads/NAT_types.png</a></p>\n"},{"title":"Dubbo的Telnet调试三部曲","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-02-05T06:04:54.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 第一步\n\n找到Dubbo服务的`IP地址`，比如我的Dubbo服务地址是`192.168.1.11`\n\n## 第二步\n\n使用命令连接Dubbo服务\n\n```shell\ntelnet 192.168.1.11 20880\n```\n\n## 第三步\n\n直接调试方法\n\n```shell\n# 调试TestService类下的get方法\ninvoke com.example.test.service.TestService.get(1132359)\n```\n\n## 资料\n\nhttps://dubbo.apache.org/zh/docs/v2.7/user/references/telnet/","source":"_posts/dubbo/dcf9d2d8-9c11-404a-874d-57834303dcac.md","raw":"---\ntitle: Dubbo的Telnet调试三部曲\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-02-05 14:04:54\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Dubbo\ncategories:\n- Dubbo\n---\n\n## 第一步\n\n找到Dubbo服务的`IP地址`，比如我的Dubbo服务地址是`192.168.1.11`\n\n## 第二步\n\n使用命令连接Dubbo服务\n\n```shell\ntelnet 192.168.1.11 20880\n```\n\n## 第三步\n\n直接调试方法\n\n```shell\n# 调试TestService类下的get方法\ninvoke com.example.test.service.TestService.get(1132359)\n```\n\n## 资料\n\nhttps://dubbo.apache.org/zh/docs/v2.7/user/references/telnet/","slug":"dubbo/dcf9d2d8-9c11-404a-874d-57834303dcac","published":1,"updated":"2021-10-08T07:57:24.161Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6efz001avpucem0abkj5","content":"<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>找到Dubbo服务的<code>IP地址</code>，比如我的Dubbo服务地址是<code>192.168.1.11</code></p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>使用命令连接Dubbo服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">telnet 192.168.1.11 20880</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>直接调试方法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调试TestService类下的get方法</span></span><br><span class=\"line\">invoke com.example.test.service.TestService.get(1132359)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h2><p><a href=\"https://dubbo.apache.org/zh/docs/v2.7/user/references/telnet/\">https://dubbo.apache.org/zh/docs/v2.7/user/references/telnet/</a></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>找到Dubbo服务的<code>IP地址</code>，比如我的Dubbo服务地址是<code>192.168.1.11</code></p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h2><p>使用命令连接Dubbo服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">telnet 192.168.1.11 20880</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>直接调试方法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">调试TestService类下的get方法</span></span><br><span class=\"line\">invoke com.example.test.service.TestService.get(1132359)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h2><p><a href=\"https://dubbo.apache.org/zh/docs/v2.7/user/references/telnet/\">https://dubbo.apache.org/zh/docs/v2.7/user/references/telnet/</a></p>\n"},{"title":"【go库】钉钉机器人","top":false,"cover":false,"toc":true,"mathjax":true,"p":"golang/47ca1795-f020-44a6-9847-02ef3955f6c9","date":"2021-03-19T06:18:58.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n钉钉机器人 go库\n\ngithub地址：https://github.com/greycodee/dingbot\n\n[钉钉官方文档](https://developers.dingtalk.com/document/app/custom-robot-access)\n\n## 快速开始\n```shell script\n    go get github.com/greycodee/dingbot\n```\n示例程序：\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/greycodee/dingbot\"\n\t\"github.com/greycodee/dingbot/message\"\n\t\"time\"\n)\n\n\nfunc main() {\n\tbot:= dingbot.DingBot{\n\t\tSecret:      \"你的加签秘钥\",\n\t\tAccessToken: \"你的AccessToken【从钉钉机器人的url上获取】\",\n\t}\n\tmsg := message.Message{\n\t\tMsgType: message.TextStr,\n\t\tText:    message.Text_{\n\t\t\tContent: \"go-钉钉机器人测试\",\n\t\t},\n\t}\n\tbot.Send(msg)\n\n}\n```\n\n## 消息支持\n- [x] text类型\n- [x] link类型\n- [x] markdown类型\n- [x] 整体跳转ActionCard类型\n- [x] 独立跳转ActionCard类型\n- [x] FeedCard类型\n\n## 使用\n\n### 发送Text消息\n\n```go\nfunc send() {\n\tbot:= dingbot.DingBot{\n\t\tSecret:      \"你的加签秘钥\",\n\t\tAccessToken: \"你的AccessToken【从钉钉机器人的url上获取】\",\n\t}\n\tmsg := message.Message{\n        MsgType: message.TextStr,\n        Text:    message.Text_{\n            Content: \"go-钉钉机器人测试\",\n            At: message.At_{\n                AtMobiles: []string{\"188xxxxxxxx\"},\n                IsAtAll:   false,\n            },\n        },\n    }\n\tbot.Send(msg)\n\n}\n```\n\n### 发送link类型消息\n\n```go\nfunc send() {\n\tbot:= dingbot.DingBot{\n\t\tSecret:      \"你的加签秘钥\",\n\t\tAccessToken: \"你的AccessToken【从钉钉机器人的url上获取】\",\n\t}\n\tmsg := message.Message{\n        MsgType: message.LinkStr,\n        Link: message.Link_{\n            Text:       \"link测试123123\",\n            Title:      \"go钉钉机器人\",\n            PicUrl:     \"\",\n            MessageUrl: \"https://developers.dingtalk.com/document/app/custom-robot-access/title-72m-8ag-pqw\",\n        },\n    \t\t\n    }\n\tbot.Send(msg)\n\n}\n```\n\n### 发送markdown类型消息\n\n```go\nfunc send() {\n\tbot:= dingbot.DingBot{\n\t\tSecret:      \"你的加签秘钥\",\n\t\tAccessToken: \"你的AccessToken【从钉钉机器人的url上获取】\",\n\t}\n\tmsg := message.Message{\n        MsgType: message.MarkdownStr,\n        Markdown: message.Markdown_{\n            Title: \"go钉钉\",\n            Text:  \"## go钉钉测试 @188xxxxxxxx \\n>文本123\",\n            At:    message.At_{\n                AtMobiles: []string{\"188xxxxxxxx\"},\n                IsAtAll:   false,\n            },\n        },\n    \t\t\n    }\n\tbot.Send(msg)\n\n}\n```\n\n### 发送整体跳转ActionCard类型消息\n\n```go\nfunc send() {\n\tbot:= dingbot.DingBot{\n\t\tSecret:      \"你的加签秘钥\",\n\t\tAccessToken: \"你的AccessToken【从钉钉机器人的url上获取】\",\n\t}\n\tmsg := message.Message{\n        MsgType: message.ActionCardStr,\n        ActionCard: message.ActionCard_{\n            Title:          \"ActionCard整体跳转11\",\n            Text:           \"ActionCardt整体跳转1223\",\n            SingleTitle:    \"阅读全文\",\n            SingleURL:      \"https://developers.dingtalk.com/document/app/custom-robot-access/title-72m-8ag-pqw\",\n        },\n    }\n\tbot.Send(msg)\n\n}\n```\n\n### 发送独立跳转ActionCard类型消息\n\n```go\nfunc send() {\n    bot:= dingbot.DingBot{\n        Secret:      \"你的加签秘钥\",\n        AccessToken: \"你的AccessToken【从钉钉机器人的url上获取】\",\n    }\n    msg := message.Message{\n        MsgType: message.ActionCardStr,\n        ActionCard: message.ActionCard_{\n            Title:          \"ActionCard跳转11\",\n            Text:           \"ActionCardt跳转1223\",\n            BtnOrientation: \"1\",\n            HideAvatar:     \"0\",\n            BtnS:           []message.Btn_{\n                {\n                    Title:     \"按钮1\",\n                    ActionURL: \"https://developers.dingtalk.com/\",\n                },\n                {\n                    Title:     \"按钮2\",\n                    ActionURL: \"https://developers.dingtalk.com/\",\n                },\n            },\n        },\n    }\n    bot.Send(msg)\n}\n```\n\n### 发送FeedCard类型消息\n\n```go\nfunc send() {\n    bot:= dingbot.DingBot{\n        Secret:      \"你的加签秘钥\",\n        AccessToken: \"你的AccessToken【从钉钉机器人的url上获取】\",\n    }\n    msg := message.Message{\n        MsgType:  message.FeedCardStr,\n        FeedCard: message.FeedCard_{[]message.Link_{\n            {\n                Title:      \"标题1\",\n                PicUrl:     \"\",\n                MessageUrl: \"https://developers.dingtalk.com/\",\n            },\n            {\n                Title:      \"标题2\",\n                PicUrl:     \"\",\n                MessageUrl: \"https://developers.dingtalk.com/\",\n            },\n        }},\n    }\n    bot.Send(msg)\n}\n```","source":"_posts/golang/47ca1795-f020-44a6-9847-02ef3955f6c9.md","raw":"---\ntitle: 【go库】钉钉机器人\ntop: false\ncover: false\ntoc: true\nmathjax: true\np: golang/47ca1795-f020-44a6-9847-02ef3955f6c9\ndate: 2021-03-19 14:18:58\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Go\n- 钉钉机器人\ncategories:\n- Go\n---\n\n钉钉机器人 go库\n\ngithub地址：https://github.com/greycodee/dingbot\n\n[钉钉官方文档](https://developers.dingtalk.com/document/app/custom-robot-access)\n\n## 快速开始\n```shell script\n    go get github.com/greycodee/dingbot\n```\n示例程序：\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/greycodee/dingbot\"\n\t\"github.com/greycodee/dingbot/message\"\n\t\"time\"\n)\n\n\nfunc main() {\n\tbot:= dingbot.DingBot{\n\t\tSecret:      \"你的加签秘钥\",\n\t\tAccessToken: \"你的AccessToken【从钉钉机器人的url上获取】\",\n\t}\n\tmsg := message.Message{\n\t\tMsgType: message.TextStr,\n\t\tText:    message.Text_{\n\t\t\tContent: \"go-钉钉机器人测试\",\n\t\t},\n\t}\n\tbot.Send(msg)\n\n}\n```\n\n## 消息支持\n- [x] text类型\n- [x] link类型\n- [x] markdown类型\n- [x] 整体跳转ActionCard类型\n- [x] 独立跳转ActionCard类型\n- [x] FeedCard类型\n\n## 使用\n\n### 发送Text消息\n\n```go\nfunc send() {\n\tbot:= dingbot.DingBot{\n\t\tSecret:      \"你的加签秘钥\",\n\t\tAccessToken: \"你的AccessToken【从钉钉机器人的url上获取】\",\n\t}\n\tmsg := message.Message{\n        MsgType: message.TextStr,\n        Text:    message.Text_{\n            Content: \"go-钉钉机器人测试\",\n            At: message.At_{\n                AtMobiles: []string{\"188xxxxxxxx\"},\n                IsAtAll:   false,\n            },\n        },\n    }\n\tbot.Send(msg)\n\n}\n```\n\n### 发送link类型消息\n\n```go\nfunc send() {\n\tbot:= dingbot.DingBot{\n\t\tSecret:      \"你的加签秘钥\",\n\t\tAccessToken: \"你的AccessToken【从钉钉机器人的url上获取】\",\n\t}\n\tmsg := message.Message{\n        MsgType: message.LinkStr,\n        Link: message.Link_{\n            Text:       \"link测试123123\",\n            Title:      \"go钉钉机器人\",\n            PicUrl:     \"\",\n            MessageUrl: \"https://developers.dingtalk.com/document/app/custom-robot-access/title-72m-8ag-pqw\",\n        },\n    \t\t\n    }\n\tbot.Send(msg)\n\n}\n```\n\n### 发送markdown类型消息\n\n```go\nfunc send() {\n\tbot:= dingbot.DingBot{\n\t\tSecret:      \"你的加签秘钥\",\n\t\tAccessToken: \"你的AccessToken【从钉钉机器人的url上获取】\",\n\t}\n\tmsg := message.Message{\n        MsgType: message.MarkdownStr,\n        Markdown: message.Markdown_{\n            Title: \"go钉钉\",\n            Text:  \"## go钉钉测试 @188xxxxxxxx \\n>文本123\",\n            At:    message.At_{\n                AtMobiles: []string{\"188xxxxxxxx\"},\n                IsAtAll:   false,\n            },\n        },\n    \t\t\n    }\n\tbot.Send(msg)\n\n}\n```\n\n### 发送整体跳转ActionCard类型消息\n\n```go\nfunc send() {\n\tbot:= dingbot.DingBot{\n\t\tSecret:      \"你的加签秘钥\",\n\t\tAccessToken: \"你的AccessToken【从钉钉机器人的url上获取】\",\n\t}\n\tmsg := message.Message{\n        MsgType: message.ActionCardStr,\n        ActionCard: message.ActionCard_{\n            Title:          \"ActionCard整体跳转11\",\n            Text:           \"ActionCardt整体跳转1223\",\n            SingleTitle:    \"阅读全文\",\n            SingleURL:      \"https://developers.dingtalk.com/document/app/custom-robot-access/title-72m-8ag-pqw\",\n        },\n    }\n\tbot.Send(msg)\n\n}\n```\n\n### 发送独立跳转ActionCard类型消息\n\n```go\nfunc send() {\n    bot:= dingbot.DingBot{\n        Secret:      \"你的加签秘钥\",\n        AccessToken: \"你的AccessToken【从钉钉机器人的url上获取】\",\n    }\n    msg := message.Message{\n        MsgType: message.ActionCardStr,\n        ActionCard: message.ActionCard_{\n            Title:          \"ActionCard跳转11\",\n            Text:           \"ActionCardt跳转1223\",\n            BtnOrientation: \"1\",\n            HideAvatar:     \"0\",\n            BtnS:           []message.Btn_{\n                {\n                    Title:     \"按钮1\",\n                    ActionURL: \"https://developers.dingtalk.com/\",\n                },\n                {\n                    Title:     \"按钮2\",\n                    ActionURL: \"https://developers.dingtalk.com/\",\n                },\n            },\n        },\n    }\n    bot.Send(msg)\n}\n```\n\n### 发送FeedCard类型消息\n\n```go\nfunc send() {\n    bot:= dingbot.DingBot{\n        Secret:      \"你的加签秘钥\",\n        AccessToken: \"你的AccessToken【从钉钉机器人的url上获取】\",\n    }\n    msg := message.Message{\n        MsgType:  message.FeedCardStr,\n        FeedCard: message.FeedCard_{[]message.Link_{\n            {\n                Title:      \"标题1\",\n                PicUrl:     \"\",\n                MessageUrl: \"https://developers.dingtalk.com/\",\n            },\n            {\n                Title:      \"标题2\",\n                PicUrl:     \"\",\n                MessageUrl: \"https://developers.dingtalk.com/\",\n            },\n        }},\n    }\n    bot.Send(msg)\n}\n```","slug":"golang/47ca1795-f020-44a6-9847-02ef3955f6c9","published":1,"updated":"2021-10-08T07:57:24.163Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eg0001evpucd6e6a8w4","content":"<p>钉钉机器人 go库</p>\n<p>github地址：<a href=\"https://github.com/greycodee/dingbot\">https://github.com/greycodee/dingbot</a></p>\n<p><a href=\"https://developers.dingtalk.com/document/app/custom-robot-access\">钉钉官方文档</a></p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">go get github.com/greycodee/dingbot</span><br></pre></td></tr></table></figure>\n<p>示例程序：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/greycodee/dingbot&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/greycodee/dingbot/message&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tbot:= dingbot.DingBot&#123;</span><br><span class=\"line\">\t\tSecret:      <span class=\"string\">&quot;你的加签秘钥&quot;</span>,</span><br><span class=\"line\">\t\tAccessToken: <span class=\"string\">&quot;你的AccessToken【从钉钉机器人的url上获取】&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmsg := message.Message&#123;</span><br><span class=\"line\">\t\tMsgType: message.TextStr,</span><br><span class=\"line\">\t\tText:    message.Text_&#123;</span><br><span class=\"line\">\t\t\tContent: <span class=\"string\">&quot;go-钉钉机器人测试&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbot.Send(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消息支持\"><a href=\"#消息支持\" class=\"headerlink\" title=\"消息支持\"></a>消息支持</h2><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> text类型</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> link类型</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> markdown类型</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 整体跳转ActionCard类型</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 独立跳转ActionCard类型</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> FeedCard类型</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"发送Text消息\"><a href=\"#发送Text消息\" class=\"headerlink\" title=\"发送Text消息\"></a>发送Text消息</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tbot:= dingbot.DingBot&#123;</span><br><span class=\"line\">\t\tSecret:      <span class=\"string\">&quot;你的加签秘钥&quot;</span>,</span><br><span class=\"line\">\t\tAccessToken: <span class=\"string\">&quot;你的AccessToken【从钉钉机器人的url上获取】&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmsg := message.Message&#123;</span><br><span class=\"line\">        MsgType: message.TextStr,</span><br><span class=\"line\">        Text:    message.Text_&#123;</span><br><span class=\"line\">            Content: <span class=\"string\">&quot;go-钉钉机器人测试&quot;</span>,</span><br><span class=\"line\">            At: message.At_&#123;</span><br><span class=\"line\">                AtMobiles: []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;188xxxxxxxx&quot;</span>&#125;,</span><br><span class=\"line\">                IsAtAll:   <span class=\"literal\">false</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tbot.Send(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送link类型消息\"><a href=\"#发送link类型消息\" class=\"headerlink\" title=\"发送link类型消息\"></a>发送link类型消息</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tbot:= dingbot.DingBot&#123;</span><br><span class=\"line\">\t\tSecret:      <span class=\"string\">&quot;你的加签秘钥&quot;</span>,</span><br><span class=\"line\">\t\tAccessToken: <span class=\"string\">&quot;你的AccessToken【从钉钉机器人的url上获取】&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmsg := message.Message&#123;</span><br><span class=\"line\">        MsgType: message.LinkStr,</span><br><span class=\"line\">        Link: message.Link_&#123;</span><br><span class=\"line\">            Text:       <span class=\"string\">&quot;link测试123123&quot;</span>,</span><br><span class=\"line\">            Title:      <span class=\"string\">&quot;go钉钉机器人&quot;</span>,</span><br><span class=\"line\">            PicUrl:     <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">            MessageUrl: <span class=\"string\">&quot;https://developers.dingtalk.com/document/app/custom-robot-access/title-72m-8ag-pqw&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    \t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tbot.Send(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送markdown类型消息\"><a href=\"#发送markdown类型消息\" class=\"headerlink\" title=\"发送markdown类型消息\"></a>发送markdown类型消息</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tbot:= dingbot.DingBot&#123;</span><br><span class=\"line\">\t\tSecret:      <span class=\"string\">&quot;你的加签秘钥&quot;</span>,</span><br><span class=\"line\">\t\tAccessToken: <span class=\"string\">&quot;你的AccessToken【从钉钉机器人的url上获取】&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmsg := message.Message&#123;</span><br><span class=\"line\">        MsgType: message.MarkdownStr,</span><br><span class=\"line\">        Markdown: message.Markdown_&#123;</span><br><span class=\"line\">            Title: <span class=\"string\">&quot;go钉钉&quot;</span>,</span><br><span class=\"line\">            Text:  <span class=\"string\">&quot;## go钉钉测试 @188xxxxxxxx \\n&gt;文本123&quot;</span>,</span><br><span class=\"line\">            At:    message.At_&#123;</span><br><span class=\"line\">                AtMobiles: []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;188xxxxxxxx&quot;</span>&#125;,</span><br><span class=\"line\">                IsAtAll:   <span class=\"literal\">false</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    \t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tbot.Send(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送整体跳转ActionCard类型消息\"><a href=\"#发送整体跳转ActionCard类型消息\" class=\"headerlink\" title=\"发送整体跳转ActionCard类型消息\"></a>发送整体跳转ActionCard类型消息</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tbot:= dingbot.DingBot&#123;</span><br><span class=\"line\">\t\tSecret:      <span class=\"string\">&quot;你的加签秘钥&quot;</span>,</span><br><span class=\"line\">\t\tAccessToken: <span class=\"string\">&quot;你的AccessToken【从钉钉机器人的url上获取】&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmsg := message.Message&#123;</span><br><span class=\"line\">        MsgType: message.ActionCardStr,</span><br><span class=\"line\">        ActionCard: message.ActionCard_&#123;</span><br><span class=\"line\">            Title:          <span class=\"string\">&quot;ActionCard整体跳转11&quot;</span>,</span><br><span class=\"line\">            Text:           <span class=\"string\">&quot;ActionCardt整体跳转1223&quot;</span>,</span><br><span class=\"line\">            SingleTitle:    <span class=\"string\">&quot;阅读全文&quot;</span>,</span><br><span class=\"line\">            SingleURL:      <span class=\"string\">&quot;https://developers.dingtalk.com/document/app/custom-robot-access/title-72m-8ag-pqw&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tbot.Send(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送独立跳转ActionCard类型消息\"><a href=\"#发送独立跳转ActionCard类型消息\" class=\"headerlink\" title=\"发送独立跳转ActionCard类型消息\"></a>发送独立跳转ActionCard类型消息</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    bot:= dingbot.DingBot&#123;</span><br><span class=\"line\">        Secret:      <span class=\"string\">&quot;你的加签秘钥&quot;</span>,</span><br><span class=\"line\">        AccessToken: <span class=\"string\">&quot;你的AccessToken【从钉钉机器人的url上获取】&quot;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    msg := message.Message&#123;</span><br><span class=\"line\">        MsgType: message.ActionCardStr,</span><br><span class=\"line\">        ActionCard: message.ActionCard_&#123;</span><br><span class=\"line\">            Title:          <span class=\"string\">&quot;ActionCard跳转11&quot;</span>,</span><br><span class=\"line\">            Text:           <span class=\"string\">&quot;ActionCardt跳转1223&quot;</span>,</span><br><span class=\"line\">            BtnOrientation: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">            HideAvatar:     <span class=\"string\">&quot;0&quot;</span>,</span><br><span class=\"line\">            BtnS:           []message.Btn_&#123;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Title:     <span class=\"string\">&quot;按钮1&quot;</span>,</span><br><span class=\"line\">                    ActionURL: <span class=\"string\">&quot;https://developers.dingtalk.com/&quot;</span>,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Title:     <span class=\"string\">&quot;按钮2&quot;</span>,</span><br><span class=\"line\">                    ActionURL: <span class=\"string\">&quot;https://developers.dingtalk.com/&quot;</span>,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bot.Send(msg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送FeedCard类型消息\"><a href=\"#发送FeedCard类型消息\" class=\"headerlink\" title=\"发送FeedCard类型消息\"></a>发送FeedCard类型消息</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    bot:= dingbot.DingBot&#123;</span><br><span class=\"line\">        Secret:      <span class=\"string\">&quot;你的加签秘钥&quot;</span>,</span><br><span class=\"line\">        AccessToken: <span class=\"string\">&quot;你的AccessToken【从钉钉机器人的url上获取】&quot;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    msg := message.Message&#123;</span><br><span class=\"line\">        MsgType:  message.FeedCardStr,</span><br><span class=\"line\">        FeedCard: message.FeedCard_&#123;[]message.Link_&#123;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Title:      <span class=\"string\">&quot;标题1&quot;</span>,</span><br><span class=\"line\">                PicUrl:     <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">                MessageUrl: <span class=\"string\">&quot;https://developers.dingtalk.com/&quot;</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Title:      <span class=\"string\">&quot;标题2&quot;</span>,</span><br><span class=\"line\">                PicUrl:     <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">                MessageUrl: <span class=\"string\">&quot;https://developers.dingtalk.com/&quot;</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bot.Send(msg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p>钉钉机器人 go库</p>\n<p>github地址：<a href=\"https://github.com/greycodee/dingbot\">https://github.com/greycodee/dingbot</a></p>\n<p><a href=\"https://developers.dingtalk.com/document/app/custom-robot-access\">钉钉官方文档</a></p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\">go get github.com/greycodee/dingbot</span><br></pre></td></tr></table></figure>\n<p>示例程序：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/greycodee/dingbot&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/greycodee/dingbot/message&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tbot:= dingbot.DingBot&#123;</span><br><span class=\"line\">\t\tSecret:      <span class=\"string\">&quot;你的加签秘钥&quot;</span>,</span><br><span class=\"line\">\t\tAccessToken: <span class=\"string\">&quot;你的AccessToken【从钉钉机器人的url上获取】&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmsg := message.Message&#123;</span><br><span class=\"line\">\t\tMsgType: message.TextStr,</span><br><span class=\"line\">\t\tText:    message.Text_&#123;</span><br><span class=\"line\">\t\t\tContent: <span class=\"string\">&quot;go-钉钉机器人测试&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbot.Send(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消息支持\"><a href=\"#消息支持\" class=\"headerlink\" title=\"消息支持\"></a>消息支持</h2><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> text类型</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> link类型</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> markdown类型</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 整体跳转ActionCard类型</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 独立跳转ActionCard类型</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> FeedCard类型</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"发送Text消息\"><a href=\"#发送Text消息\" class=\"headerlink\" title=\"发送Text消息\"></a>发送Text消息</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tbot:= dingbot.DingBot&#123;</span><br><span class=\"line\">\t\tSecret:      <span class=\"string\">&quot;你的加签秘钥&quot;</span>,</span><br><span class=\"line\">\t\tAccessToken: <span class=\"string\">&quot;你的AccessToken【从钉钉机器人的url上获取】&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmsg := message.Message&#123;</span><br><span class=\"line\">        MsgType: message.TextStr,</span><br><span class=\"line\">        Text:    message.Text_&#123;</span><br><span class=\"line\">            Content: <span class=\"string\">&quot;go-钉钉机器人测试&quot;</span>,</span><br><span class=\"line\">            At: message.At_&#123;</span><br><span class=\"line\">                AtMobiles: []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;188xxxxxxxx&quot;</span>&#125;,</span><br><span class=\"line\">                IsAtAll:   <span class=\"literal\">false</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tbot.Send(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送link类型消息\"><a href=\"#发送link类型消息\" class=\"headerlink\" title=\"发送link类型消息\"></a>发送link类型消息</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tbot:= dingbot.DingBot&#123;</span><br><span class=\"line\">\t\tSecret:      <span class=\"string\">&quot;你的加签秘钥&quot;</span>,</span><br><span class=\"line\">\t\tAccessToken: <span class=\"string\">&quot;你的AccessToken【从钉钉机器人的url上获取】&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmsg := message.Message&#123;</span><br><span class=\"line\">        MsgType: message.LinkStr,</span><br><span class=\"line\">        Link: message.Link_&#123;</span><br><span class=\"line\">            Text:       <span class=\"string\">&quot;link测试123123&quot;</span>,</span><br><span class=\"line\">            Title:      <span class=\"string\">&quot;go钉钉机器人&quot;</span>,</span><br><span class=\"line\">            PicUrl:     <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">            MessageUrl: <span class=\"string\">&quot;https://developers.dingtalk.com/document/app/custom-robot-access/title-72m-8ag-pqw&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    \t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tbot.Send(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送markdown类型消息\"><a href=\"#发送markdown类型消息\" class=\"headerlink\" title=\"发送markdown类型消息\"></a>发送markdown类型消息</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tbot:= dingbot.DingBot&#123;</span><br><span class=\"line\">\t\tSecret:      <span class=\"string\">&quot;你的加签秘钥&quot;</span>,</span><br><span class=\"line\">\t\tAccessToken: <span class=\"string\">&quot;你的AccessToken【从钉钉机器人的url上获取】&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmsg := message.Message&#123;</span><br><span class=\"line\">        MsgType: message.MarkdownStr,</span><br><span class=\"line\">        Markdown: message.Markdown_&#123;</span><br><span class=\"line\">            Title: <span class=\"string\">&quot;go钉钉&quot;</span>,</span><br><span class=\"line\">            Text:  <span class=\"string\">&quot;## go钉钉测试 @188xxxxxxxx \\n&gt;文本123&quot;</span>,</span><br><span class=\"line\">            At:    message.At_&#123;</span><br><span class=\"line\">                AtMobiles: []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;188xxxxxxxx&quot;</span>&#125;,</span><br><span class=\"line\">                IsAtAll:   <span class=\"literal\">false</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    \t\t</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tbot.Send(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送整体跳转ActionCard类型消息\"><a href=\"#发送整体跳转ActionCard类型消息\" class=\"headerlink\" title=\"发送整体跳转ActionCard类型消息\"></a>发送整体跳转ActionCard类型消息</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tbot:= dingbot.DingBot&#123;</span><br><span class=\"line\">\t\tSecret:      <span class=\"string\">&quot;你的加签秘钥&quot;</span>,</span><br><span class=\"line\">\t\tAccessToken: <span class=\"string\">&quot;你的AccessToken【从钉钉机器人的url上获取】&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tmsg := message.Message&#123;</span><br><span class=\"line\">        MsgType: message.ActionCardStr,</span><br><span class=\"line\">        ActionCard: message.ActionCard_&#123;</span><br><span class=\"line\">            Title:          <span class=\"string\">&quot;ActionCard整体跳转11&quot;</span>,</span><br><span class=\"line\">            Text:           <span class=\"string\">&quot;ActionCardt整体跳转1223&quot;</span>,</span><br><span class=\"line\">            SingleTitle:    <span class=\"string\">&quot;阅读全文&quot;</span>,</span><br><span class=\"line\">            SingleURL:      <span class=\"string\">&quot;https://developers.dingtalk.com/document/app/custom-robot-access/title-72m-8ag-pqw&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tbot.Send(msg)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送独立跳转ActionCard类型消息\"><a href=\"#发送独立跳转ActionCard类型消息\" class=\"headerlink\" title=\"发送独立跳转ActionCard类型消息\"></a>发送独立跳转ActionCard类型消息</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    bot:= dingbot.DingBot&#123;</span><br><span class=\"line\">        Secret:      <span class=\"string\">&quot;你的加签秘钥&quot;</span>,</span><br><span class=\"line\">        AccessToken: <span class=\"string\">&quot;你的AccessToken【从钉钉机器人的url上获取】&quot;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    msg := message.Message&#123;</span><br><span class=\"line\">        MsgType: message.ActionCardStr,</span><br><span class=\"line\">        ActionCard: message.ActionCard_&#123;</span><br><span class=\"line\">            Title:          <span class=\"string\">&quot;ActionCard跳转11&quot;</span>,</span><br><span class=\"line\">            Text:           <span class=\"string\">&quot;ActionCardt跳转1223&quot;</span>,</span><br><span class=\"line\">            BtnOrientation: <span class=\"string\">&quot;1&quot;</span>,</span><br><span class=\"line\">            HideAvatar:     <span class=\"string\">&quot;0&quot;</span>,</span><br><span class=\"line\">            BtnS:           []message.Btn_&#123;</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Title:     <span class=\"string\">&quot;按钮1&quot;</span>,</span><br><span class=\"line\">                    ActionURL: <span class=\"string\">&quot;https://developers.dingtalk.com/&quot;</span>,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    Title:     <span class=\"string\">&quot;按钮2&quot;</span>,</span><br><span class=\"line\">                    ActionURL: <span class=\"string\">&quot;https://developers.dingtalk.com/&quot;</span>,</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bot.Send(msg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"发送FeedCard类型消息\"><a href=\"#发送FeedCard类型消息\" class=\"headerlink\" title=\"发送FeedCard类型消息\"></a>发送FeedCard类型消息</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">send</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    bot:= dingbot.DingBot&#123;</span><br><span class=\"line\">        Secret:      <span class=\"string\">&quot;你的加签秘钥&quot;</span>,</span><br><span class=\"line\">        AccessToken: <span class=\"string\">&quot;你的AccessToken【从钉钉机器人的url上获取】&quot;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    msg := message.Message&#123;</span><br><span class=\"line\">        MsgType:  message.FeedCardStr,</span><br><span class=\"line\">        FeedCard: message.FeedCard_&#123;[]message.Link_&#123;</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Title:      <span class=\"string\">&quot;标题1&quot;</span>,</span><br><span class=\"line\">                PicUrl:     <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">                MessageUrl: <span class=\"string\">&quot;https://developers.dingtalk.com/&quot;</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                Title:      <span class=\"string\">&quot;标题2&quot;</span>,</span><br><span class=\"line\">                PicUrl:     <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">                MessageUrl: <span class=\"string\">&quot;https://developers.dingtalk.com/&quot;</span>,</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;&#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bot.Send(msg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"go自定义库上传github下载不了问题","top":false,"cover":false,"toc":true,"mathjax":true,"p":"golang/e1273901-26b1-4cfb-a55c-a9f5047855a5","date":"2021-03-19T03:39:50.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 自定义库上传github标签规范\n\n当自己写的库要上传到**github**时,标签号要符合`vX.Y.Z`的格式，例如`v1.0.0`\n\n如果定义其他的标签格式，则`go`会下载不到，例如`v1.0`,此时如果用`go get`命令下载的话，则下载不到此版本\n\n","source":"_posts/golang/e1273901-26b1-4cfb-a55c-a9f5047855a5.md","raw":"---\ntitle: go自定义库上传github下载不了问题\ntop: false\ncover: false\ntoc: true\nmathjax: true\np: golang/e1273901-26b1-4cfb-a55c-a9f5047855a5\ndate: 2021-03-19 11:39:50\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Go\ncategories:\n- Go\n---\n\n## 自定义库上传github标签规范\n\n当自己写的库要上传到**github**时,标签号要符合`vX.Y.Z`的格式，例如`v1.0.0`\n\n如果定义其他的标签格式，则`go`会下载不到，例如`v1.0`,此时如果用`go get`命令下载的话，则下载不到此版本\n\n","slug":"golang/e1273901-26b1-4cfb-a55c-a9f5047855a5","published":1,"updated":"2021-10-08T07:57:24.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eg1001gvpuc0yh5hai3","content":"<h2 id=\"自定义库上传github标签规范\"><a href=\"#自定义库上传github标签规范\" class=\"headerlink\" title=\"自定义库上传github标签规范\"></a>自定义库上传github标签规范</h2><p>当自己写的库要上传到<strong>github</strong>时,标签号要符合<code>vX.Y.Z</code>的格式，例如<code>v1.0.0</code></p>\n<p>如果定义其他的标签格式，则<code>go</code>会下载不到，例如<code>v1.0</code>,此时如果用<code>go get</code>命令下载的话，则下载不到此版本</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"自定义库上传github标签规范\"><a href=\"#自定义库上传github标签规范\" class=\"headerlink\" title=\"自定义库上传github标签规范\"></a>自定义库上传github标签规范</h2><p>当自己写的库要上传到<strong>github</strong>时,标签号要符合<code>vX.Y.Z</code>的格式，例如<code>v1.0.0</code></p>\n<p>如果定义其他的标签格式，则<code>go</code>会下载不到，例如<code>v1.0</code>,此时如果用<code>go get</code>命令下载的话，则下载不到此版本</p>\n"},{"title":"Docker迁移根目录导致mysql权限问题","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-20T07:04:16.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 问题描述\n\n　　最近由于公司服务器硬盘老是爆满，导致经常要清硬盘空间．最后发现/var/lib/docker目录占了25G,以前分kvm分区的时候，他们分了两个区：根目录＂/＂,和＂/home＂目录，发现home目录使用几乎为零，于是准备迁移Docker的根目录：\n\n迁移根目录我看的是这个文章：[docker的存储目录迁移](https://www.cnblogs.com/insist-forever/p/11739207.html),　不过迁移的时候我没有使用<font color=orange>rsync</font>这个命令，而是使用<font color=orange>cp -R</font>;\n\n文件复制过去后，按照教程，重新启动docker服务，可是其中mysql容器跑不起来了，报mysqld: Can't create/write to file '/tmp/ibTCv7Rw' (Errcode: 13 - Permission denied)\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XISBI0c.png)\n\n\n\n期间按照网上的方法：说docker容器启动是添加--privileged=true,设置/tmp目录的权限，关闭selinux，这些方法<font color=orange>都没用！！！！！！</font>\n\n> 其中设置/tmp文件权限这个方法，我把里面的/tmp文件挂载出来后，设置了权限，报这个的问题是解决了，可是又出现了新的问题，又报Version: '5.7.27'  socket: '/var/run/mysqld/mysqld.sock' \n>\n> ![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/RJyF24d.png)\n\n看来还是得从根源上解决问题啊！\n\n## 我的解决办法\n\n        我想，既然是权限问题，那肯定是复制文件的时候权限丢失了，于是查了下cp命令保持权限的命令（cp -p）:\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/KUPG0XE.png)\n\n于是我又重新关闭的docker服务，然后删除了所有复制到home文件的目录，重新用<font color=orange>cp -p -R /var/lib/docker /home/docker/lib/</font>来重新复制了文件；\n\n复制后，重启docker服务，启动docker容器，ok,一切正常；用docker info查看，看到已成功转移到/home下．![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/F3ssmVN.png)","source":"_posts/docker/docker-transfer-pit.md","raw":"---\ntitle: Docker迁移根目录导致mysql权限问题\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-20 15:04:16\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Mysql\n- Pit\n- Docker\n- Linux\ncategories:\n- Docker\n---\n\n## 问题描述\n\n　　最近由于公司服务器硬盘老是爆满，导致经常要清硬盘空间．最后发现/var/lib/docker目录占了25G,以前分kvm分区的时候，他们分了两个区：根目录＂/＂,和＂/home＂目录，发现home目录使用几乎为零，于是准备迁移Docker的根目录：\n\n迁移根目录我看的是这个文章：[docker的存储目录迁移](https://www.cnblogs.com/insist-forever/p/11739207.html),　不过迁移的时候我没有使用<font color=orange>rsync</font>这个命令，而是使用<font color=orange>cp -R</font>;\n\n文件复制过去后，按照教程，重新启动docker服务，可是其中mysql容器跑不起来了，报mysqld: Can't create/write to file '/tmp/ibTCv7Rw' (Errcode: 13 - Permission denied)\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XISBI0c.png)\n\n\n\n期间按照网上的方法：说docker容器启动是添加--privileged=true,设置/tmp目录的权限，关闭selinux，这些方法<font color=orange>都没用！！！！！！</font>\n\n> 其中设置/tmp文件权限这个方法，我把里面的/tmp文件挂载出来后，设置了权限，报这个的问题是解决了，可是又出现了新的问题，又报Version: '5.7.27'  socket: '/var/run/mysqld/mysqld.sock' \n>\n> ![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/RJyF24d.png)\n\n看来还是得从根源上解决问题啊！\n\n## 我的解决办法\n\n        我想，既然是权限问题，那肯定是复制文件的时候权限丢失了，于是查了下cp命令保持权限的命令（cp -p）:\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/KUPG0XE.png)\n\n于是我又重新关闭的docker服务，然后删除了所有复制到home文件的目录，重新用<font color=orange>cp -p -R /var/lib/docker /home/docker/lib/</font>来重新复制了文件；\n\n复制后，重启docker服务，启动docker容器，ok,一切正常；用docker info查看，看到已成功转移到/home下．![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/F3ssmVN.png)","slug":"docker/docker-transfer-pit","published":1,"updated":"2021-10-08T08:18:05.494Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eg3001jvpuc7bndc9yh","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>　　最近由于公司服务器硬盘老是爆满，导致经常要清硬盘空间．最后发现&#x2F;var&#x2F;lib&#x2F;docker目录占了25G,以前分kvm分区的时候，他们分了两个区：根目录＂&#x2F;＂,和＂&#x2F;home＂目录，发现home目录使用几乎为零，于是准备迁移Docker的根目录：</p>\n<p>迁移根目录我看的是这个文章：<a href=\"https://www.cnblogs.com/insist-forever/p/11739207.html\">docker的存储目录迁移</a>,　不过迁移的时候我没有使用<font color=orange>rsync</font>这个命令，而是使用<font color=orange>cp -R</font>;</p>\n<p>文件复制过去后，按照教程，重新启动docker服务，可是其中mysql容器跑不起来了，报mysqld: Can’t create&#x2F;write to file ‘&#x2F;tmp&#x2F;ibTCv7Rw’ (Errcode: 13 - Permission denied)</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XISBI0c.png\" alt=\"图片\"></p>\n<p>期间按照网上的方法：说docker容器启动是添加–privileged&#x3D;true,设置&#x2F;tmp目录的权限，关闭selinux，这些方法<font color=orange>都没用！！！！！！</font></p>\n<blockquote>\n<p>其中设置&#x2F;tmp文件权限这个方法，我把里面的&#x2F;tmp文件挂载出来后，设置了权限，报这个的问题是解决了，可是又出现了新的问题，又报Version: ‘5.7.27’  socket: ‘&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock’ </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/RJyF24d.png\" alt=\"图片\"></p>\n</blockquote>\n<p>看来还是得从根源上解决问题啊！</p>\n<h2 id=\"我的解决办法\"><a href=\"#我的解决办法\" class=\"headerlink\" title=\"我的解决办法\"></a>我的解决办法</h2><pre><code>    我想，既然是权限问题，那肯定是复制文件的时候权限丢失了，于是查了下cp命令保持权限的命令（cp -p）:\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/KUPG0XE.png\" alt=\"图片\"></p>\n<p>于是我又重新关闭的docker服务，然后删除了所有复制到home文件的目录，重新用<font color=orange>cp -p -R &#x2F;var&#x2F;lib&#x2F;docker &#x2F;home&#x2F;docker&#x2F;lib&#x2F;</font>来重新复制了文件；</p>\n<p>复制后，重启docker服务，启动docker容器，ok,一切正常；用docker info查看，看到已成功转移到&#x2F;home下．<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/F3ssmVN.png\" alt=\"图片\"></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>　　最近由于公司服务器硬盘老是爆满，导致经常要清硬盘空间．最后发现&#x2F;var&#x2F;lib&#x2F;docker目录占了25G,以前分kvm分区的时候，他们分了两个区：根目录＂&#x2F;＂,和＂&#x2F;home＂目录，发现home目录使用几乎为零，于是准备迁移Docker的根目录：</p>\n<p>迁移根目录我看的是这个文章：<a href=\"https://www.cnblogs.com/insist-forever/p/11739207.html\">docker的存储目录迁移</a>,　不过迁移的时候我没有使用<font color=orange>rsync</font>这个命令，而是使用<font color=orange>cp -R</font>;</p>\n<p>文件复制过去后，按照教程，重新启动docker服务，可是其中mysql容器跑不起来了，报mysqld: Can’t create&#x2F;write to file ‘&#x2F;tmp&#x2F;ibTCv7Rw’ (Errcode: 13 - Permission denied)</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XISBI0c.png\" alt=\"图片\"></p>\n<p>期间按照网上的方法：说docker容器启动是添加–privileged&#x3D;true,设置&#x2F;tmp目录的权限，关闭selinux，这些方法<font color=orange>都没用！！！！！！</font></p>\n<blockquote>\n<p>其中设置&#x2F;tmp文件权限这个方法，我把里面的&#x2F;tmp文件挂载出来后，设置了权限，报这个的问题是解决了，可是又出现了新的问题，又报Version: ‘5.7.27’  socket: ‘&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.sock’ </p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/RJyF24d.png\" alt=\"图片\"></p>\n</blockquote>\n<p>看来还是得从根源上解决问题啊！</p>\n<h2 id=\"我的解决办法\"><a href=\"#我的解决办法\" class=\"headerlink\" title=\"我的解决办法\"></a>我的解决办法</h2><pre><code>    我想，既然是权限问题，那肯定是复制文件的时候权限丢失了，于是查了下cp命令保持权限的命令（cp -p）:\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/KUPG0XE.png\" alt=\"图片\"></p>\n<p>于是我又重新关闭的docker服务，然后删除了所有复制到home文件的目录，重新用<font color=orange>cp -p -R &#x2F;var&#x2F;lib&#x2F;docker &#x2F;home&#x2F;docker&#x2F;lib&#x2F;</font>来重新复制了文件；</p>\n<p>复制后，重启docker服务，启动docker容器，ok,一切正常；用docker info查看，看到已成功转移到&#x2F;home下．<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/F3ssmVN.png\" alt=\"图片\"></p>\n"},{"title":"Docker下安装mysql并设置用户权限","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-09-03T07:58:46.000Z","password":null,"summary":null,"_content":"\n## 环境\n\n* Ubuntu18.04\n\n* Docker19.03.1\n\n* Mysql5.7\n\n  \n\n## Docker\n\n### 拉取镜像\n\n  Docker拉取镜像默认是从DockerHub上面拉取，上面有各厂商提供的优质官方镜像，可以直接拉取使用。或者也可以用DockerFile自定义构建你自己的镜像。\n\n```shell\nsudo docker pull mysql:5.7\t\t\t//拉取镜像到本地\n```\n\n注：上面mysql:5.7指的是拉取5.7版本的mysql，如果不加直接写mysql的话默认是拉取mysql的最新版本。\n\n![拉取镜像](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/oFZqBjP.png)\n\n如果显示上面这样，说明已经拉取好了。\n\n### 查看镜像\n\n```shell\nsudo docker images\t\t//查看本地镜像\n```\n\n![查看本地镜像](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/mkAm9SV-20211008161729338.png)\n\n\n\n### 创建容器\n\n#### 创建\n\n```shell\nsudo docker run -d -p 3306:3306 --name mysql5.7 -e MYSQL_ROOT_PASSWORD=root mysql:5.7\n```\n\n* -d       指定容器运行于后台\n* -p       端口映射   主机端口:容器端口\n* --name    自定义容器名字，方便记忆，不设置的话会随机生产\n* -e        容器环境变量\n\n![创建容器](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/sd6nZMU.png)\n\n创建好的话会显示一串随机生产的id\n\n#### 查看创建好的容器\n\n```shell\nsudo docker ps -a\n```\n\n* -a        显示所有创建好的容器，如果不加只显示正在运行的容器\n\n![查看容器](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Gr8w9zg.png)\n\n## Mysql\n\n### 进入容器\n\n```shell\nsudo docker exec -it mysql5.7 bash\n```\n\n* -i        打开STDIN，用于控制台交互\n* -t        分配tty设备，该可以支持终端登录\n\n![进入容器](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/UWZaGF2.png)\n\n### 登录mysql\n\n```shell\nmysql -uroot -p\n```\n\n注：然后输入刚才创建容器时的密码，就是MYSQL_ROOT_PASSWORD这个参数\n\n### 创建测试数据库\n\n```sql\ncreate database test;\n```\n\n### 创建mysql用户\n\n```sql\ncreate user 'zmh'@'%' identified by 'zmh';\n```\n\n注：\"%\"表示可以任意ip访问\n\n### 切换mysql用户\n\n```sql\nalter user 'zmh' identified by 'zmh';\n```\n\n### 授权\n\n授权test库的所有表的所有权限给zmh用户\n\n```sql\ngrant all privileges on test.* to 'zmh'@'%';\n```\n\n### 刷新权限\n\n```sql\nflush privileges;\n```\n\n退出mysql命令行\n\n```sql\nexit\n```\n\n### 客户端连接测试\n\n![进入容器](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/kvMGl3Z.png)\n\n成功！\n\n\n\n## 附加\n\n如果要重启mysql的话，不用进容器里面，直接重启容器就可以\n\n* sudo docker start mysql5.7       启动mysql5.7容器\n* sudo docker stop mysql5.7        停止mysql5.7容器\n* sudo docker restart mysql5.7   重启mysql5.7容器","source":"_posts/docker/docker-mysql.md","raw":"---\ntitle: Docker下安装mysql并设置用户权限\ntop: false\ncover: false\ntoc: true\nmathjax: true\ncategories:\n  - Docker\ntags:\n  - Docker\n  - Mysql\n  - Linux\ndate: 2019-09-03 15:58:46\npassword:\nsummary:\n---\n\n## 环境\n\n* Ubuntu18.04\n\n* Docker19.03.1\n\n* Mysql5.7\n\n  \n\n## Docker\n\n### 拉取镜像\n\n  Docker拉取镜像默认是从DockerHub上面拉取，上面有各厂商提供的优质官方镜像，可以直接拉取使用。或者也可以用DockerFile自定义构建你自己的镜像。\n\n```shell\nsudo docker pull mysql:5.7\t\t\t//拉取镜像到本地\n```\n\n注：上面mysql:5.7指的是拉取5.7版本的mysql，如果不加直接写mysql的话默认是拉取mysql的最新版本。\n\n![拉取镜像](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/oFZqBjP.png)\n\n如果显示上面这样，说明已经拉取好了。\n\n### 查看镜像\n\n```shell\nsudo docker images\t\t//查看本地镜像\n```\n\n![查看本地镜像](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/mkAm9SV-20211008161729338.png)\n\n\n\n### 创建容器\n\n#### 创建\n\n```shell\nsudo docker run -d -p 3306:3306 --name mysql5.7 -e MYSQL_ROOT_PASSWORD=root mysql:5.7\n```\n\n* -d       指定容器运行于后台\n* -p       端口映射   主机端口:容器端口\n* --name    自定义容器名字，方便记忆，不设置的话会随机生产\n* -e        容器环境变量\n\n![创建容器](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/sd6nZMU.png)\n\n创建好的话会显示一串随机生产的id\n\n#### 查看创建好的容器\n\n```shell\nsudo docker ps -a\n```\n\n* -a        显示所有创建好的容器，如果不加只显示正在运行的容器\n\n![查看容器](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Gr8w9zg.png)\n\n## Mysql\n\n### 进入容器\n\n```shell\nsudo docker exec -it mysql5.7 bash\n```\n\n* -i        打开STDIN，用于控制台交互\n* -t        分配tty设备，该可以支持终端登录\n\n![进入容器](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/UWZaGF2.png)\n\n### 登录mysql\n\n```shell\nmysql -uroot -p\n```\n\n注：然后输入刚才创建容器时的密码，就是MYSQL_ROOT_PASSWORD这个参数\n\n### 创建测试数据库\n\n```sql\ncreate database test;\n```\n\n### 创建mysql用户\n\n```sql\ncreate user 'zmh'@'%' identified by 'zmh';\n```\n\n注：\"%\"表示可以任意ip访问\n\n### 切换mysql用户\n\n```sql\nalter user 'zmh' identified by 'zmh';\n```\n\n### 授权\n\n授权test库的所有表的所有权限给zmh用户\n\n```sql\ngrant all privileges on test.* to 'zmh'@'%';\n```\n\n### 刷新权限\n\n```sql\nflush privileges;\n```\n\n退出mysql命令行\n\n```sql\nexit\n```\n\n### 客户端连接测试\n\n![进入容器](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/kvMGl3Z.png)\n\n成功！\n\n\n\n## 附加\n\n如果要重启mysql的话，不用进容器里面，直接重启容器就可以\n\n* sudo docker start mysql5.7       启动mysql5.7容器\n* sudo docker stop mysql5.7        停止mysql5.7容器\n* sudo docker restart mysql5.7   重启mysql5.7容器","slug":"docker/docker-mysql","published":1,"updated":"2021-10-08T08:17:43.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eg5001lvpuc033c72kb","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p>Ubuntu18.04</p>\n</li>\n<li><p>Docker19.03.1</p>\n</li>\n<li><p>Mysql5.7</p>\n</li>\n</ul>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><p>  Docker拉取镜像默认是从DockerHub上面拉取，上面有各厂商提供的优质官方镜像，可以直接拉取使用。或者也可以用DockerFile自定义构建你自己的镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker pull mysql:5.7\t\t\t//拉取镜像到本地</span><br></pre></td></tr></table></figure>\n\n<p>注：上面mysql:5.7指的是拉取5.7版本的mysql，如果不加直接写mysql的话默认是拉取mysql的最新版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/oFZqBjP.png\" alt=\"拉取镜像\"></p>\n<p>如果显示上面这样，说明已经拉取好了。</p>\n<h3 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker images\t\t//查看本地镜像</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/mkAm9SV-20211008161729338.png\" alt=\"查看本地镜像\"></p>\n<h3 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h3><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p 3306:3306 --name mysql5.7 -e MYSQL_ROOT_PASSWORD=root mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-d       指定容器运行于后台</li>\n<li>-p       端口映射   主机端口:容器端口</li>\n<li>–name    自定义容器名字，方便记忆，不设置的话会随机生产</li>\n<li>-e        容器环境变量</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/sd6nZMU.png\" alt=\"创建容器\"></p>\n<p>创建好的话会显示一串随机生产的id</p>\n<h4 id=\"查看创建好的容器\"><a href=\"#查看创建好的容器\" class=\"headerlink\" title=\"查看创建好的容器\"></a>查看创建好的容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker ps -a</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-a        显示所有创建好的容器，如果不加只显示正在运行的容器</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Gr8w9zg.png\" alt=\"查看容器\"></p>\n<h2 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h2><h3 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker exec -it mysql5.7 bash</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-i        打开STDIN，用于控制台交互</li>\n<li>-t        分配tty设备，该可以支持终端登录</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/UWZaGF2.png\" alt=\"进入容器\"></p>\n<h3 id=\"登录mysql\"><a href=\"#登录mysql\" class=\"headerlink\" title=\"登录mysql\"></a>登录mysql</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br></pre></td></tr></table></figure>\n\n<p>注：然后输入刚才创建容器时的密码，就是MYSQL_ROOT_PASSWORD这个参数</p>\n<h3 id=\"创建测试数据库\"><a href=\"#创建测试数据库\" class=\"headerlink\" title=\"创建测试数据库\"></a>创建测试数据库</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database test;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建mysql用户\"><a href=\"#创建mysql用户\" class=\"headerlink\" title=\"创建mysql用户\"></a>创建mysql用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> <span class=\"string\">&#x27;zmh&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified <span class=\"keyword\">by</span> <span class=\"string\">&#x27;zmh&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>注：”%”表示可以任意ip访问</p>\n<h3 id=\"切换mysql用户\"><a href=\"#切换mysql用户\" class=\"headerlink\" title=\"切换mysql用户\"></a>切换mysql用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> <span class=\"string\">&#x27;zmh&#x27;</span> identified <span class=\"keyword\">by</span> <span class=\"string\">&#x27;zmh&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><p>授权test库的所有表的所有权限给zmh用户</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> privileges <span class=\"keyword\">on</span> test.<span class=\"operator\">*</span> <span class=\"keyword\">to</span> <span class=\"string\">&#x27;zmh&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"刷新权限\"><a href=\"#刷新权限\" class=\"headerlink\" title=\"刷新权限\"></a>刷新权限</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<p>退出mysql命令行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端连接测试\"><a href=\"#客户端连接测试\" class=\"headerlink\" title=\"客户端连接测试\"></a>客户端连接测试</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/kvMGl3Z.png\" alt=\"进入容器\"></p>\n<p>成功！</p>\n<h2 id=\"附加\"><a href=\"#附加\" class=\"headerlink\" title=\"附加\"></a>附加</h2><p>如果要重启mysql的话，不用进容器里面，直接重启容器就可以</p>\n<ul>\n<li>sudo docker start mysql5.7       启动mysql5.7容器</li>\n<li>sudo docker stop mysql5.7        停止mysql5.7容器</li>\n<li>sudo docker restart mysql5.7   重启mysql5.7容器</li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p>Ubuntu18.04</p>\n</li>\n<li><p>Docker19.03.1</p>\n</li>\n<li><p>Mysql5.7</p>\n</li>\n</ul>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><p>  Docker拉取镜像默认是从DockerHub上面拉取，上面有各厂商提供的优质官方镜像，可以直接拉取使用。或者也可以用DockerFile自定义构建你自己的镜像。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker pull mysql:5.7\t\t\t//拉取镜像到本地</span><br></pre></td></tr></table></figure>\n\n<p>注：上面mysql:5.7指的是拉取5.7版本的mysql，如果不加直接写mysql的话默认是拉取mysql的最新版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/oFZqBjP.png\" alt=\"拉取镜像\"></p>\n<p>如果显示上面这样，说明已经拉取好了。</p>\n<h3 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker images\t\t//查看本地镜像</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/mkAm9SV-20211008161729338.png\" alt=\"查看本地镜像\"></p>\n<h3 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h3><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p 3306:3306 --name mysql5.7 -e MYSQL_ROOT_PASSWORD=root mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-d       指定容器运行于后台</li>\n<li>-p       端口映射   主机端口:容器端口</li>\n<li>–name    自定义容器名字，方便记忆，不设置的话会随机生产</li>\n<li>-e        容器环境变量</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/sd6nZMU.png\" alt=\"创建容器\"></p>\n<p>创建好的话会显示一串随机生产的id</p>\n<h4 id=\"查看创建好的容器\"><a href=\"#查看创建好的容器\" class=\"headerlink\" title=\"查看创建好的容器\"></a>查看创建好的容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker ps -a</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-a        显示所有创建好的容器，如果不加只显示正在运行的容器</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Gr8w9zg.png\" alt=\"查看容器\"></p>\n<h2 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h2><h3 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker exec -it mysql5.7 bash</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-i        打开STDIN，用于控制台交互</li>\n<li>-t        分配tty设备，该可以支持终端登录</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/UWZaGF2.png\" alt=\"进入容器\"></p>\n<h3 id=\"登录mysql\"><a href=\"#登录mysql\" class=\"headerlink\" title=\"登录mysql\"></a>登录mysql</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br></pre></td></tr></table></figure>\n\n<p>注：然后输入刚才创建容器时的密码，就是MYSQL_ROOT_PASSWORD这个参数</p>\n<h3 id=\"创建测试数据库\"><a href=\"#创建测试数据库\" class=\"headerlink\" title=\"创建测试数据库\"></a>创建测试数据库</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> database test;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建mysql用户\"><a href=\"#创建mysql用户\" class=\"headerlink\" title=\"创建mysql用户\"></a>创建mysql用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> <span class=\"string\">&#x27;zmh&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span> identified <span class=\"keyword\">by</span> <span class=\"string\">&#x27;zmh&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>注：”%”表示可以任意ip访问</p>\n<h3 id=\"切换mysql用户\"><a href=\"#切换mysql用户\" class=\"headerlink\" title=\"切换mysql用户\"></a>切换mysql用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> <span class=\"string\">&#x27;zmh&#x27;</span> identified <span class=\"keyword\">by</span> <span class=\"string\">&#x27;zmh&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><p>授权test库的所有表的所有权限给zmh用户</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> privileges <span class=\"keyword\">on</span> test.<span class=\"operator\">*</span> <span class=\"keyword\">to</span> <span class=\"string\">&#x27;zmh&#x27;</span>@<span class=\"string\">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"刷新权限\"><a href=\"#刷新权限\" class=\"headerlink\" title=\"刷新权限\"></a>刷新权限</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n\n<p>退出mysql命令行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端连接测试\"><a href=\"#客户端连接测试\" class=\"headerlink\" title=\"客户端连接测试\"></a>客户端连接测试</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/kvMGl3Z.png\" alt=\"进入容器\"></p>\n<p>成功！</p>\n<h2 id=\"附加\"><a href=\"#附加\" class=\"headerlink\" title=\"附加\"></a>附加</h2><p>如果要重启mysql的话，不用进容器里面，直接重启容器就可以</p>\n<ul>\n<li>sudo docker start mysql5.7       启动mysql5.7容器</li>\n<li>sudo docker stop mysql5.7        停止mysql5.7容器</li>\n<li>sudo docker restart mysql5.7   重启mysql5.7容器</li>\n</ul>\n"},{"title":"centos 多网卡配置优先级","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-09-01T07:47:14.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 过程\n\n1. **查看网卡配置**\n\n   ```bash\n   [root@localhost ~]# ip addr\n   1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n       link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n       inet 127.0.0.1/8 scope host lo\n          valid_lft forever preferred_lft forever\n       inet6 ::1/128 scope host\n          valid_lft forever preferred_lft forever\n   2: em1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n       link/ether 34:17:eb:f0:18:8f brd ff:ff:ff:ff:ff:ff\n       inet 192.168.0.84/24 brd 192.168.0.255 scope global noprefixroute em1\n          valid_lft forever preferred_lft forever\n       inet6 240e:390:c6a:c3a0:3617:ebff:fef0:188f/64 scope global noprefixroute dynamic\n          valid_lft 259182sec preferred_lft 172782sec\n       inet6 fe80::3617:ebff:fef0:188f/64 scope link noprefixroute\n          valid_lft forever preferred_lft forever\n   3: em2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n       link/ether 34:17:eb:f0:18:90 brd ff:ff:ff:ff:ff:ff\n       inet 192.169.0.10/23 brd 192.169.1.255 scope global noprefixroute em2\n          valid_lft forever preferred_lft forever\n       inet6 fe80::3617:ebff:fef0:1890/64 scope link noprefixroute\n          valid_lft forever preferred_lft forever\n   4: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n       link/ether 02:42:b1:66:84:26 brd ff:ff:ff:ff:ff:ff\n       inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n          valid_lft forever preferred_lft forever\n       inet6 fe80::42:b1ff:fe66:8426/64 scope link\n          valid_lft forever preferred_lft forever\n   12: veth4ffa8ca@if11: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default\n       link/ether ca:d7:f0:2f:42:f0 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n       inet6 fe80::c8d7:f0ff:fe2f:42f0/64 scope link\n          valid_lft forever preferred_lft forever\n   14: veth9c158d5@if13: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default\n       link/ether 76:ab:49:a9:e4:a6 brd ff:ff:ff:ff:ff:ff link-netnsid 1\n       inet6 fe80::74ab:49ff:fea9:e4a6/64 scope link\n          valid_lft forever preferred_lft forever\n   ```\n\n   这里有 `em1` 和 `em2` 两张网卡\n\n2. **查看网卡路由**\n\n   ```bash\n   [root@localhost ~]# ip route show\n   default via 192.168.0.1 dev em1 proto static metric 100\n   default via 192.169.0.1 dev em2 proto static metric 101\n   172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1\n   192.168.0.0/24 dev em1 proto kernel scope link src 192.168.0.84 metric 100\n   192.169.0.0/23 dev em2 proto kernel scope link src 192.169.0.10 metric 101\n   ```\n\n   可以看到，`em1` 的 `metric` 大于 `em2` ， `metric`  值越低，优先级越高。\n\n   > **Metric** 为路由指定所需跃点数的整数值（范围是 1 ~ 9999），它用来在路由表里的多个路由中选择与转发包中的目标地址最为匹配的路由。所选的路由具有最少的跃点数。跃点数能够反映跃点的数量、路径的速度、路径可靠性、路径吞吐量以及管理属性。**Metric** 的值越小，优先级越高，如果两块网卡的Metric的值相同，就会出现抢占优先级继而网卡冲突，将会有一块网卡无法连接。\n\n3. **更改优先级**\n\n   现在要设置 `em2` 的优先级比 `em1` 的高，只需要更改 `em2` 网卡配置的 `metric` 值比 `em1` 的低就可以了\n\n   **修改 em2 网卡配置：**\n\n   配置文件地址：`vim /etc/sysconfig/network-scripts/ifcfg-em2`\n\n   添加配置: `IPV4_ROUTE_METRIC=90`\n\n   ```bash\n   TYPE=Ethernet\n   BOOTPROTO=static\n   DEFROUTE=yes\n   PEERDNS=yes\n   PEERROUTES=yes\n   IPV4_FAILURE_FATAL=no\n   IPV4_ROUTE_METRIC=90\n   IPV6INIT=yes\n   IPV6_AUTOCONF=yes\n   IPV6_DEFROUTE=yes\n   IPV6_PEERDNS=yes\n   IPV6_PEERROUTES=yes\n   IPV6_FAILURE_FATAL=no\n   NAME=em2\n   UUID=23420496-e9ed-466c-a8fc-e99b091f3a00\n   DEVICE=em2\n   ONBOOT=yes\n   IPADDR=192.169.0.10\n   NETMASK=255.255.254.0\n   GATEWAY=192.169.0.1\n   DNS1=114.114.114.114\n   ```\n\n4. **重启网卡**\n\n   ```bash\n   # 刷新配置文件\n   source /etc/sysconfig/network-scripts/ifcfg-em2\n   \n   # 关闭 em2 网卡\n   ifdown em2\n   \n   # 开启 em2 网卡\n   ifup em2\n   ```\n\n   \n","source":"_posts/linux/0A5A3927BAEA4155849C174E4C613913.md","raw":"---\ntitle: centos 多网卡配置优先级\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-09-01 15:47:14\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Linux\n- Centos\ncategories:\n- Linux\n---\n\n## 过程\n\n1. **查看网卡配置**\n\n   ```bash\n   [root@localhost ~]# ip addr\n   1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n       link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n       inet 127.0.0.1/8 scope host lo\n          valid_lft forever preferred_lft forever\n       inet6 ::1/128 scope host\n          valid_lft forever preferred_lft forever\n   2: em1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n       link/ether 34:17:eb:f0:18:8f brd ff:ff:ff:ff:ff:ff\n       inet 192.168.0.84/24 brd 192.168.0.255 scope global noprefixroute em1\n          valid_lft forever preferred_lft forever\n       inet6 240e:390:c6a:c3a0:3617:ebff:fef0:188f/64 scope global noprefixroute dynamic\n          valid_lft 259182sec preferred_lft 172782sec\n       inet6 fe80::3617:ebff:fef0:188f/64 scope link noprefixroute\n          valid_lft forever preferred_lft forever\n   3: em2: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000\n       link/ether 34:17:eb:f0:18:90 brd ff:ff:ff:ff:ff:ff\n       inet 192.169.0.10/23 brd 192.169.1.255 scope global noprefixroute em2\n          valid_lft forever preferred_lft forever\n       inet6 fe80::3617:ebff:fef0:1890/64 scope link noprefixroute\n          valid_lft forever preferred_lft forever\n   4: docker0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n       link/ether 02:42:b1:66:84:26 brd ff:ff:ff:ff:ff:ff\n       inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0\n          valid_lft forever preferred_lft forever\n       inet6 fe80::42:b1ff:fe66:8426/64 scope link\n          valid_lft forever preferred_lft forever\n   12: veth4ffa8ca@if11: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default\n       link/ether ca:d7:f0:2f:42:f0 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n       inet6 fe80::c8d7:f0ff:fe2f:42f0/64 scope link\n          valid_lft forever preferred_lft forever\n   14: veth9c158d5@if13: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue master docker0 state UP group default\n       link/ether 76:ab:49:a9:e4:a6 brd ff:ff:ff:ff:ff:ff link-netnsid 1\n       inet6 fe80::74ab:49ff:fea9:e4a6/64 scope link\n          valid_lft forever preferred_lft forever\n   ```\n\n   这里有 `em1` 和 `em2` 两张网卡\n\n2. **查看网卡路由**\n\n   ```bash\n   [root@localhost ~]# ip route show\n   default via 192.168.0.1 dev em1 proto static metric 100\n   default via 192.169.0.1 dev em2 proto static metric 101\n   172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1\n   192.168.0.0/24 dev em1 proto kernel scope link src 192.168.0.84 metric 100\n   192.169.0.0/23 dev em2 proto kernel scope link src 192.169.0.10 metric 101\n   ```\n\n   可以看到，`em1` 的 `metric` 大于 `em2` ， `metric`  值越低，优先级越高。\n\n   > **Metric** 为路由指定所需跃点数的整数值（范围是 1 ~ 9999），它用来在路由表里的多个路由中选择与转发包中的目标地址最为匹配的路由。所选的路由具有最少的跃点数。跃点数能够反映跃点的数量、路径的速度、路径可靠性、路径吞吐量以及管理属性。**Metric** 的值越小，优先级越高，如果两块网卡的Metric的值相同，就会出现抢占优先级继而网卡冲突，将会有一块网卡无法连接。\n\n3. **更改优先级**\n\n   现在要设置 `em2` 的优先级比 `em1` 的高，只需要更改 `em2` 网卡配置的 `metric` 值比 `em1` 的低就可以了\n\n   **修改 em2 网卡配置：**\n\n   配置文件地址：`vim /etc/sysconfig/network-scripts/ifcfg-em2`\n\n   添加配置: `IPV4_ROUTE_METRIC=90`\n\n   ```bash\n   TYPE=Ethernet\n   BOOTPROTO=static\n   DEFROUTE=yes\n   PEERDNS=yes\n   PEERROUTES=yes\n   IPV4_FAILURE_FATAL=no\n   IPV4_ROUTE_METRIC=90\n   IPV6INIT=yes\n   IPV6_AUTOCONF=yes\n   IPV6_DEFROUTE=yes\n   IPV6_PEERDNS=yes\n   IPV6_PEERROUTES=yes\n   IPV6_FAILURE_FATAL=no\n   NAME=em2\n   UUID=23420496-e9ed-466c-a8fc-e99b091f3a00\n   DEVICE=em2\n   ONBOOT=yes\n   IPADDR=192.169.0.10\n   NETMASK=255.255.254.0\n   GATEWAY=192.169.0.1\n   DNS1=114.114.114.114\n   ```\n\n4. **重启网卡**\n\n   ```bash\n   # 刷新配置文件\n   source /etc/sysconfig/network-scripts/ifcfg-em2\n   \n   # 关闭 em2 网卡\n   ifdown em2\n   \n   # 开启 em2 网卡\n   ifup em2\n   ```\n\n   \n","slug":"linux/0A5A3927BAEA4155849C174E4C613913","published":1,"updated":"2021-10-08T07:57:24.182Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eg6001ovpuc31ed8euj","content":"<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><ol>\n<li><p><strong>查看网卡配置</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ip addr</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: em1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether 34:17:eb:f0:18:8f brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.0.84/24 brd 192.168.0.255 scope global noprefixroute em1</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 240e:390:c6a:c3a0:3617:ebff:fef0:188f/64 scope global noprefixroute dynamic</span><br><span class=\"line\">       valid_lft 259182sec preferred_lft 172782sec</span><br><span class=\"line\">    inet6 fe80::3617:ebff:fef0:188f/64 scope <span class=\"built_in\">link</span> noprefixroute</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: em2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether 34:17:eb:f0:18:90 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.169.0.10/23 brd 192.169.1.255 scope global noprefixroute em2</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::3617:ebff:fef0:1890/64 scope <span class=\"built_in\">link</span> noprefixroute</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">4: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether 02:42:b1:66:84:26 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::42:b1ff:fe66:8426/64 scope <span class=\"built_in\">link</span></span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">12: veth4ffa8ca@if11: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether ca:d7:f0:2f:42:f0 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet6 fe80::c8d7:f0ff:fe2f:42f0/64 scope <span class=\"built_in\">link</span></span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">14: veth9c158d5@if13: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether 76:ab:49:a9:e4:a6 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class=\"line\">    inet6 fe80::74ab:49ff:fea9:e4a6/64 scope <span class=\"built_in\">link</span></span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>\n\n<p>这里有 <code>em1</code> 和 <code>em2</code> 两张网卡</p>\n</li>\n<li><p><strong>查看网卡路由</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ip route show</span></span><br><span class=\"line\">default via 192.168.0.1 dev em1 proto static metric 100</span><br><span class=\"line\">default via 192.169.0.1 dev em2 proto static metric 101</span><br><span class=\"line\">172.17.0.0/16 dev docker0 proto kernel scope <span class=\"built_in\">link</span> src 172.17.0.1</span><br><span class=\"line\">192.168.0.0/24 dev em1 proto kernel scope <span class=\"built_in\">link</span> src 192.168.0.84 metric 100</span><br><span class=\"line\">192.169.0.0/23 dev em2 proto kernel scope <span class=\"built_in\">link</span> src 192.169.0.10 metric 101</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，<code>em1</code> 的 <code>metric</code> 大于 <code>em2</code> ， <code>metric</code>  值越低，优先级越高。</p>\n<blockquote>\n<p><strong>Metric</strong> 为路由指定所需跃点数的整数值（范围是 1 ~ 9999），它用来在路由表里的多个路由中选择与转发包中的目标地址最为匹配的路由。所选的路由具有最少的跃点数。跃点数能够反映跃点的数量、路径的速度、路径可靠性、路径吞吐量以及管理属性。<strong>Metric</strong> 的值越小，优先级越高，如果两块网卡的Metric的值相同，就会出现抢占优先级继而网卡冲突，将会有一块网卡无法连接。</p>\n</blockquote>\n</li>\n<li><p><strong>更改优先级</strong></p>\n<p>现在要设置 <code>em2</code> 的优先级比 <code>em1</code> 的高，只需要更改 <code>em2</code> 网卡配置的 <code>metric</code> 值比 <code>em1</code> 的低就可以了</p>\n<p><strong>修改 em2 网卡配置：</strong></p>\n<p>配置文件地址：<code>vim /etc/sysconfig/network-scripts/ifcfg-em2</code></p>\n<p>添加配置: <code>IPV4_ROUTE_METRIC=90</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">DEFROUTE=<span class=\"built_in\">yes</span></span><br><span class=\"line\">PEERDNS=<span class=\"built_in\">yes</span></span><br><span class=\"line\">PEERROUTES=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV4_ROUTE_METRIC=90</span><br><span class=\"line\">IPV6INIT=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_AUTOCONF=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_DEFROUTE=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_PEERDNS=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_PEERROUTES=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">NAME=em2</span><br><span class=\"line\">UUID=23420496-e9ed-466c-a8fc-e99b091f3a00</span><br><span class=\"line\">DEVICE=em2</span><br><span class=\"line\">ONBOOT=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPADDR=192.169.0.10</span><br><span class=\"line\">NETMASK=255.255.254.0</span><br><span class=\"line\">GATEWAY=192.169.0.1</span><br><span class=\"line\">DNS1=114.114.114.114</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>重启网卡</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 刷新配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/sysconfig/network-scripts/ifcfg-em2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭 em2 网卡</span></span><br><span class=\"line\">ifdown em2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启 em2 网卡</span></span><br><span class=\"line\">ifup em2</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><ol>\n<li><p><strong>查看网卡配置</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ip addr</span></span><br><span class=\"line\">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class=\"line\">    inet 127.0.0.1/8 scope host lo</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 ::1/128 scope host</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">2: em1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether 34:17:eb:f0:18:8f brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.168.0.84/24 brd 192.168.0.255 scope global noprefixroute em1</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 240e:390:c6a:c3a0:3617:ebff:fef0:188f/64 scope global noprefixroute dynamic</span><br><span class=\"line\">       valid_lft 259182sec preferred_lft 172782sec</span><br><span class=\"line\">    inet6 fe80::3617:ebff:fef0:188f/64 scope <span class=\"built_in\">link</span> noprefixroute</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">3: em2: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP group default qlen 1000</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether 34:17:eb:f0:18:90 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 192.169.0.10/23 brd 192.169.1.255 scope global noprefixroute em2</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::3617:ebff:fef0:1890/64 scope <span class=\"built_in\">link</span> noprefixroute</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">4: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether 02:42:b1:66:84:26 brd ff:ff:ff:ff:ff:ff</span><br><span class=\"line\">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">    inet6 fe80::42:b1ff:fe66:8426/64 scope <span class=\"built_in\">link</span></span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">12: veth4ffa8ca@if11: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether ca:d7:f0:2f:42:f0 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class=\"line\">    inet6 fe80::c8d7:f0ff:fe2f:42f0/64 scope <span class=\"built_in\">link</span></span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br><span class=\"line\">14: veth9c158d5@if13: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default</span><br><span class=\"line\">    <span class=\"built_in\">link</span>/ether 76:ab:49:a9:e4:a6 brd ff:ff:ff:ff:ff:ff link-netnsid 1</span><br><span class=\"line\">    inet6 fe80::74ab:49ff:fea9:e4a6/64 scope <span class=\"built_in\">link</span></span><br><span class=\"line\">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>\n\n<p>这里有 <code>em1</code> 和 <code>em2</code> 两张网卡</p>\n</li>\n<li><p><strong>查看网卡路由</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]<span class=\"comment\"># ip route show</span></span><br><span class=\"line\">default via 192.168.0.1 dev em1 proto static metric 100</span><br><span class=\"line\">default via 192.169.0.1 dev em2 proto static metric 101</span><br><span class=\"line\">172.17.0.0/16 dev docker0 proto kernel scope <span class=\"built_in\">link</span> src 172.17.0.1</span><br><span class=\"line\">192.168.0.0/24 dev em1 proto kernel scope <span class=\"built_in\">link</span> src 192.168.0.84 metric 100</span><br><span class=\"line\">192.169.0.0/23 dev em2 proto kernel scope <span class=\"built_in\">link</span> src 192.169.0.10 metric 101</span><br></pre></td></tr></table></figure>\n\n<p>可以看到，<code>em1</code> 的 <code>metric</code> 大于 <code>em2</code> ， <code>metric</code>  值越低，优先级越高。</p>\n<blockquote>\n<p><strong>Metric</strong> 为路由指定所需跃点数的整数值（范围是 1 ~ 9999），它用来在路由表里的多个路由中选择与转发包中的目标地址最为匹配的路由。所选的路由具有最少的跃点数。跃点数能够反映跃点的数量、路径的速度、路径可靠性、路径吞吐量以及管理属性。<strong>Metric</strong> 的值越小，优先级越高，如果两块网卡的Metric的值相同，就会出现抢占优先级继而网卡冲突，将会有一块网卡无法连接。</p>\n</blockquote>\n</li>\n<li><p><strong>更改优先级</strong></p>\n<p>现在要设置 <code>em2</code> 的优先级比 <code>em1</code> 的高，只需要更改 <code>em2</code> 网卡配置的 <code>metric</code> 值比 <code>em1</code> 的低就可以了</p>\n<p><strong>修改 em2 网卡配置：</strong></p>\n<p>配置文件地址：<code>vim /etc/sysconfig/network-scripts/ifcfg-em2</code></p>\n<p>添加配置: <code>IPV4_ROUTE_METRIC=90</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">BOOTPROTO=static</span><br><span class=\"line\">DEFROUTE=<span class=\"built_in\">yes</span></span><br><span class=\"line\">PEERDNS=<span class=\"built_in\">yes</span></span><br><span class=\"line\">PEERROUTES=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV4_ROUTE_METRIC=90</span><br><span class=\"line\">IPV6INIT=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_AUTOCONF=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_DEFROUTE=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_PEERDNS=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_PEERROUTES=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">NAME=em2</span><br><span class=\"line\">UUID=23420496-e9ed-466c-a8fc-e99b091f3a00</span><br><span class=\"line\">DEVICE=em2</span><br><span class=\"line\">ONBOOT=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPADDR=192.169.0.10</span><br><span class=\"line\">NETMASK=255.255.254.0</span><br><span class=\"line\">GATEWAY=192.169.0.1</span><br><span class=\"line\">DNS1=114.114.114.114</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>重启网卡</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 刷新配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/sysconfig/network-scripts/ifcfg-em2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 关闭 em2 网卡</span></span><br><span class=\"line\">ifdown em2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 开启 em2 网卡</span></span><br><span class=\"line\">ifup em2</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Hexo使用UUID生成文章路径","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-01-27T09:51:05.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 教程\n1. 编写一个名为**hexoN**的脚本文件\n\n```shell\n#!/bin/bash\nuuid=$(sudo cat /proc/sys/kernel/random/uuid)\necho $uuid\nhexo new $uuid\n```\n\n2. 添加执行权限\n\n```shell\nchmod +x hexoN\n```\n\n3. 在用户根目录的`.zshrc`(因为我用的是ohmyzsh，所以是这个文件，一般是`.bashrc`，也可直接加载系统文件`/etc/profile`中)追加一条\n\n``` shell\n# 后面地址是存放这个脚本的文件夹路径 根据实际更改\nexport PATH=$PATH:/home/zheng/software/shell\n```\n\n4. 执行命令是刚才追加的内容生效\n\n```shell\nsource .zshrc\n```\n\n<!-- more -->\n\n## 使用\n\n到Hexo博客的根目录执行\n\n![20210127180305](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210127180305.png)","source":"_posts/linux/79b5fe12-9c60-4b93-be92-dffb00fa39c7.md","raw":"---\ntitle: Hexo使用UUID生成文章路径\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-01-27 17:51:05\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Shell\n- Linux\ncategories:\n- Linux\n---\n\n## 教程\n1. 编写一个名为**hexoN**的脚本文件\n\n```shell\n#!/bin/bash\nuuid=$(sudo cat /proc/sys/kernel/random/uuid)\necho $uuid\nhexo new $uuid\n```\n\n2. 添加执行权限\n\n```shell\nchmod +x hexoN\n```\n\n3. 在用户根目录的`.zshrc`(因为我用的是ohmyzsh，所以是这个文件，一般是`.bashrc`，也可直接加载系统文件`/etc/profile`中)追加一条\n\n``` shell\n# 后面地址是存放这个脚本的文件夹路径 根据实际更改\nexport PATH=$PATH:/home/zheng/software/shell\n```\n\n4. 执行命令是刚才追加的内容生效\n\n```shell\nsource .zshrc\n```\n\n<!-- more -->\n\n## 使用\n\n到Hexo博客的根目录执行\n\n![20210127180305](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210127180305.png)","slug":"linux/79b5fe12-9c60-4b93-be92-dffb00fa39c7","published":1,"updated":"2021-10-08T08:57:02.542Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eg8001qvpucatkrbw6k","content":"<h2 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h2><ol>\n<li>编写一个名为<strong>hexoN</strong>的脚本文件</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\">uuid=$(sudo cat /proc/sys/kernel/random/uuid)</span><br><span class=\"line\">echo $uuid</span><br><span class=\"line\">hexo new $uuid</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>添加执行权限</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod +x hexoN</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在用户根目录的<code>.zshrc</code>(因为我用的是ohmyzsh，所以是这个文件，一般是<code>.bashrc</code>，也可直接加载系统文件<code>/etc/profile</code>中)追加一条</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">后面地址是存放这个脚本的文件夹路径 根据实际更改</span></span><br><span class=\"line\">export PATH=$PATH:/home/zheng/software/shell</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>执行命令是刚才追加的内容生效</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">source .zshrc</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>到Hexo博客的根目录执行</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210127180305.png\" alt=\"20210127180305\"></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"<h2 id=\"教程\"><a href=\"#教程\" class=\"headerlink\" title=\"教程\"></a>教程</h2><ol>\n<li>编写一个名为<strong>hexoN</strong>的脚本文件</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\">uuid=$(sudo cat /proc/sys/kernel/random/uuid)</span><br><span class=\"line\">echo $uuid</span><br><span class=\"line\">hexo new $uuid</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>添加执行权限</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">chmod +x hexoN</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在用户根目录的<code>.zshrc</code>(因为我用的是ohmyzsh，所以是这个文件，一般是<code>.bashrc</code>，也可直接加载系统文件<code>/etc/profile</code>中)追加一条</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">后面地址是存放这个脚本的文件夹路径 根据实际更改</span></span><br><span class=\"line\">export PATH=$PATH:/home/zheng/software/shell</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>执行命令是刚才追加的内容生效</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">source .zshrc</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>到Hexo博客的根目录执行</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210127180305.png\" alt=\"20210127180305\"></p>"},{"title":"后端服务器时间不一致问题解决手册","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-06-15T02:32:50.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 时区问题\n\n一般快 8 小时，慢 8 小时的问题都是时区问题，直接把时区改成 CST 时区\n\n编辑系统环境变量文件 `/etc/profile`\n\n```shell\nexport TZ='CST-8'\n```\n\n## Linux 系统时间不同步问题\n\nLinux 系统时间比正常时间快几分中或慢几分钟，但是时区是正确的 CST 时区，这是就要用到 `ntpdate` 这个命令了\n\n1. 安装\n\n```shell\n#centos,redhat系列\nyum install ntpdate\n\n#debian,ubuntu系列\napt install ntpdate\n\n#archlinux系列\npacman -S ntpdate\n```\n\n2、通过ntpdate命令从时钟服务器同步\n\n我们这里选用中国ntp服务器`cn.pool.ntp.org`来作为时钟同步的来源。为能正常访问到`cn.pool.ntp.org`，你的Linux系统应该能访问外网才行。\n\n执行命令如下：\n\n```\nntpdate cn.pool.ntp.org\n```\n\n3、配置crontab自动执行同步\n\n如果每次手动执行，显然是很麻烦的。这里，我们使用[crontab](https://linux265.com/news/3851.html)定时任务来定期执行ntpdate同步命令，例如我们每10分钟或一小时执行一次，可以通过以下方式实现。\n\n首先在命令终端中输入crontab -e命令，然后输入如下命令保存即可。\n\n```\ncrontab -e\n```\n\n开始编辑文件内容，输入定时执行命令：\n\n```\n#每10分钟执行一次\n*/10 * * * * /usr/sbin/ntpdate cn.pool.ntp.org\n```\n\n或者\n\n```\n#每一个小时执行一次\n0 * * * * /usr/sbin/ntpdate cn.pool.ntp.org\n```\n\n\n\n## 参考资料\n\n- https://linux265.com/news/6009.html\n","source":"_posts/linux/9AFC3EFAEC15479BB5FBC6F670594A94.md","raw":"---\ntitle: 后端服务器时间不一致问题解决手册\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-06-15 10:32:50\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Time\n- Linux\ncategories:\n- Linux\n---\n\n## 时区问题\n\n一般快 8 小时，慢 8 小时的问题都是时区问题，直接把时区改成 CST 时区\n\n编辑系统环境变量文件 `/etc/profile`\n\n```shell\nexport TZ='CST-8'\n```\n\n## Linux 系统时间不同步问题\n\nLinux 系统时间比正常时间快几分中或慢几分钟，但是时区是正确的 CST 时区，这是就要用到 `ntpdate` 这个命令了\n\n1. 安装\n\n```shell\n#centos,redhat系列\nyum install ntpdate\n\n#debian,ubuntu系列\napt install ntpdate\n\n#archlinux系列\npacman -S ntpdate\n```\n\n2、通过ntpdate命令从时钟服务器同步\n\n我们这里选用中国ntp服务器`cn.pool.ntp.org`来作为时钟同步的来源。为能正常访问到`cn.pool.ntp.org`，你的Linux系统应该能访问外网才行。\n\n执行命令如下：\n\n```\nntpdate cn.pool.ntp.org\n```\n\n3、配置crontab自动执行同步\n\n如果每次手动执行，显然是很麻烦的。这里，我们使用[crontab](https://linux265.com/news/3851.html)定时任务来定期执行ntpdate同步命令，例如我们每10分钟或一小时执行一次，可以通过以下方式实现。\n\n首先在命令终端中输入crontab -e命令，然后输入如下命令保存即可。\n\n```\ncrontab -e\n```\n\n开始编辑文件内容，输入定时执行命令：\n\n```\n#每10分钟执行一次\n*/10 * * * * /usr/sbin/ntpdate cn.pool.ntp.org\n```\n\n或者\n\n```\n#每一个小时执行一次\n0 * * * * /usr/sbin/ntpdate cn.pool.ntp.org\n```\n\n\n\n## 参考资料\n\n- https://linux265.com/news/6009.html\n","slug":"linux/9AFC3EFAEC15479BB5FBC6F670594A94","published":1,"updated":"2021-10-08T07:57:24.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eg9001uvpuc1dy25ww5","content":"<h2 id=\"时区问题\"><a href=\"#时区问题\" class=\"headerlink\" title=\"时区问题\"></a>时区问题</h2><p>一般快 8 小时，慢 8 小时的问题都是时区问题，直接把时区改成 CST 时区</p>\n<p>编辑系统环境变量文件 <code>/etc/profile</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export TZ=&#x27;CST-8&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux-系统时间不同步问题\"><a href=\"#Linux-系统时间不同步问题\" class=\"headerlink\" title=\"Linux 系统时间不同步问题\"></a>Linux 系统时间不同步问题</h2><p>Linux 系统时间比正常时间快几分中或慢几分钟，但是时区是正确的 CST 时区，这是就要用到 <code>ntpdate</code> 这个命令了</p>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">centos,redhat系列</span></span><br><span class=\"line\">yum install ntpdate</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">debian,ubuntu系列</span></span><br><span class=\"line\">apt install ntpdate</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">archlinux系列</span></span><br><span class=\"line\">pacman -S ntpdate</span><br></pre></td></tr></table></figure>\n\n<p>2、通过ntpdate命令从时钟服务器同步</p>\n<p>我们这里选用中国ntp服务器<code>cn.pool.ntp.org</code>来作为时钟同步的来源。为能正常访问到<code>cn.pool.ntp.org</code>，你的Linux系统应该能访问外网才行。</p>\n<p>执行命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ntpdate cn.pool.ntp.org</span><br></pre></td></tr></table></figure>\n\n<p>3、配置crontab自动执行同步</p>\n<p>如果每次手动执行，显然是很麻烦的。这里，我们使用<a href=\"https://linux265.com/news/3851.html\">crontab</a>定时任务来定期执行ntpdate同步命令，例如我们每10分钟或一小时执行一次，可以通过以下方式实现。</p>\n<p>首先在命令终端中输入crontab -e命令，然后输入如下命令保存即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n\n<p>开始编辑文件内容，输入定时执行命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#每10分钟执行一次</span><br><span class=\"line\">*/10 * * * * /usr/sbin/ntpdate cn.pool.ntp.org</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#每一个小时执行一次</span><br><span class=\"line\">0 * * * * /usr/sbin/ntpdate cn.pool.ntp.org</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://linux265.com/news/6009.html\">https://linux265.com/news/6009.html</a></li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"时区问题\"><a href=\"#时区问题\" class=\"headerlink\" title=\"时区问题\"></a>时区问题</h2><p>一般快 8 小时，慢 8 小时的问题都是时区问题，直接把时区改成 CST 时区</p>\n<p>编辑系统环境变量文件 <code>/etc/profile</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export TZ=&#x27;CST-8&#x27;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Linux-系统时间不同步问题\"><a href=\"#Linux-系统时间不同步问题\" class=\"headerlink\" title=\"Linux 系统时间不同步问题\"></a>Linux 系统时间不同步问题</h2><p>Linux 系统时间比正常时间快几分中或慢几分钟，但是时区是正确的 CST 时区，这是就要用到 <code>ntpdate</code> 这个命令了</p>\n<ol>\n<li>安装</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">centos,redhat系列</span></span><br><span class=\"line\">yum install ntpdate</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">debian,ubuntu系列</span></span><br><span class=\"line\">apt install ntpdate</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">archlinux系列</span></span><br><span class=\"line\">pacman -S ntpdate</span><br></pre></td></tr></table></figure>\n\n<p>2、通过ntpdate命令从时钟服务器同步</p>\n<p>我们这里选用中国ntp服务器<code>cn.pool.ntp.org</code>来作为时钟同步的来源。为能正常访问到<code>cn.pool.ntp.org</code>，你的Linux系统应该能访问外网才行。</p>\n<p>执行命令如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">ntpdate cn.pool.ntp.org</span><br></pre></td></tr></table></figure>\n\n<p>3、配置crontab自动执行同步</p>\n<p>如果每次手动执行，显然是很麻烦的。这里，我们使用<a href=\"https://linux265.com/news/3851.html\">crontab</a>定时任务来定期执行ntpdate同步命令，例如我们每10分钟或一小时执行一次，可以通过以下方式实现。</p>\n<p>首先在命令终端中输入crontab -e命令，然后输入如下命令保存即可。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n\n<p>开始编辑文件内容，输入定时执行命令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#每10分钟执行一次</span><br><span class=\"line\">*/10 * * * * /usr/sbin/ntpdate cn.pool.ntp.org</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">#每一个小时执行一次</span><br><span class=\"line\">0 * * * * /usr/sbin/ntpdate cn.pool.ntp.org</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://linux265.com/news/6009.html\">https://linux265.com/news/6009.html</a></li>\n</ul>\n"},{"title":"树莓派安装docker","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-08-30T10:33:03.000Z","password":null,"summary":null,"_content":"\n## 前言\n\n  和平常x86_64架构的电脑安装docker不同，树莓派是ARM架构的，所以安装步骤比较繁琐一点。\n\n\n\n##  使用APT源安装docker\n\n  更新apt软件源及安装必备组件。为了确认所下载软件包的合法性，还需要添加软件源的 GPG 密钥。\n\n```shell\n$sudo apt-get update\n$sudo apt-get install \\\n\t apt-transport-https \\\n     ca-certificates \\\n     curl \\\n     gnupg2 \\\n     lsb-release \\\n     software-properties-common\n$curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/raspbian/gpg | sudo apt-key add -\n```\n\n\n\n## 添加docker ce 软件源\n\n* 首先执行以下一行命令，然后记一下输出的结果\n\n  ```shell\n  $ echo $(lsb_release -cs)\n  stretch\n  ```\n\n* 在/etc/apt/sources.list.d目录下新建文件docker.list\n\n  ```shell\n  $ sudo vi /etc/apt/sources.list.d/docker.list\n  ```\n\n* 在文件里添加下面这行\n\n  ```shell\n  deb [arch=armhf] https://download.docker.com/linux/raspbian $(lsb_release -cs) stable\n  ```\n\n* 把$(lsb_release -cs)改为刚才第一行输出的结果，比如我的输出的是stretch，改完后如下\n\n  ```shell\n  deb [arch=armhf] https://download.docker.com/linux/raspbian stretch stable\n  ```\n\n* 保存，退出\n\n  \n\n## 安装docker ce\n\n  依次执行以下两行命令，即可完成安装\n\n```shell\n$ sudo apt-get update\n$ sudo apt-get install docker-ce\n```\n\n\n\n## 启动\n\n```shell\n$ service docker start           启动\n$ service docker stop            停止\n$ service docker status          状态\n$ service docker restart         重启\n```","source":"_posts/linux/build-docker-pi.md","raw":"---\ntitle: 树莓派安装docker\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Linux\n  - Docker\n  - RaspberryPi\ncategories:\n  - Linux\ndate: 2019-08-30 18:33:03\npassword:\nsummary:\n---\n\n## 前言\n\n  和平常x86_64架构的电脑安装docker不同，树莓派是ARM架构的，所以安装步骤比较繁琐一点。\n\n\n\n##  使用APT源安装docker\n\n  更新apt软件源及安装必备组件。为了确认所下载软件包的合法性，还需要添加软件源的 GPG 密钥。\n\n```shell\n$sudo apt-get update\n$sudo apt-get install \\\n\t apt-transport-https \\\n     ca-certificates \\\n     curl \\\n     gnupg2 \\\n     lsb-release \\\n     software-properties-common\n$curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/raspbian/gpg | sudo apt-key add -\n```\n\n\n\n## 添加docker ce 软件源\n\n* 首先执行以下一行命令，然后记一下输出的结果\n\n  ```shell\n  $ echo $(lsb_release -cs)\n  stretch\n  ```\n\n* 在/etc/apt/sources.list.d目录下新建文件docker.list\n\n  ```shell\n  $ sudo vi /etc/apt/sources.list.d/docker.list\n  ```\n\n* 在文件里添加下面这行\n\n  ```shell\n  deb [arch=armhf] https://download.docker.com/linux/raspbian $(lsb_release -cs) stable\n  ```\n\n* 把$(lsb_release -cs)改为刚才第一行输出的结果，比如我的输出的是stretch，改完后如下\n\n  ```shell\n  deb [arch=armhf] https://download.docker.com/linux/raspbian stretch stable\n  ```\n\n* 保存，退出\n\n  \n\n## 安装docker ce\n\n  依次执行以下两行命令，即可完成安装\n\n```shell\n$ sudo apt-get update\n$ sudo apt-get install docker-ce\n```\n\n\n\n## 启动\n\n```shell\n$ service docker start           启动\n$ service docker stop            停止\n$ service docker status          状态\n$ service docker restart         重启\n```","slug":"linux/build-docker-pi","published":1,"updated":"2021-10-08T07:57:24.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ega001xvpuc9lbc5d12","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  和平常x86_64架构的电脑安装docker不同，树莓派是ARM架构的，所以安装步骤比较繁琐一点。</p>\n<h2 id=\"使用APT源安装docker\"><a href=\"#使用APT源安装docker\" class=\"headerlink\" title=\"使用APT源安装docker\"></a>使用APT源安装docker</h2><p>  更新apt软件源及安装必备组件。为了确认所下载软件包的合法性，还需要添加软件源的 GPG 密钥。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">sudo apt-get update</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">sudo apt-get install \\</span></span><br><span class=\"line\"><span class=\"language-bash\">\t apt-transport-https \\</span></span><br><span class=\"line\"><span class=\"language-bash\">     ca-certificates \\</span></span><br><span class=\"line\"><span class=\"language-bash\">     curl \\</span></span><br><span class=\"line\"><span class=\"language-bash\">     gnupg2 \\</span></span><br><span class=\"line\"><span class=\"language-bash\">     lsb-release \\</span></span><br><span class=\"line\"><span class=\"language-bash\">     software-properties-common</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/raspbian/gpg | sudo apt-key add -</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"添加docker-ce-软件源\"><a href=\"#添加docker-ce-软件源\" class=\"headerlink\" title=\"添加docker ce 软件源\"></a>添加docker ce 软件源</h2><ul>\n<li><p>首先执行以下一行命令，然后记一下输出的结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $(lsb_release -cs)</span></span><br><span class=\"line\">stretch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在&#x2F;etc&#x2F;apt&#x2F;sources.list.d目录下新建文件docker.list</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo vi /etc/apt/sources.list.d/docker.list</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在文件里添加下面这行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">deb [arch=armhf] https://download.docker.com/linux/raspbian $(lsb_release -cs) stable</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把$(lsb_release -cs)改为刚才第一行输出的结果，比如我的输出的是stretch，改完后如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">deb [arch=armhf] https://download.docker.com/linux/raspbian stretch stable</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存，退出</p>\n</li>\n</ul>\n<h2 id=\"安装docker-ce\"><a href=\"#安装docker-ce\" class=\"headerlink\" title=\"安装docker ce\"></a>安装docker ce</h2><p>  依次执行以下两行命令，即可完成安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get update</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get install docker-ce</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">service docker start           启动</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">service docker stop            停止</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">service docker status          状态</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">service docker restart         重启</span></span><br></pre></td></tr></table></figure>","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  和平常x86_64架构的电脑安装docker不同，树莓派是ARM架构的，所以安装步骤比较繁琐一点。</p>\n<h2 id=\"使用APT源安装docker\"><a href=\"#使用APT源安装docker\" class=\"headerlink\" title=\"使用APT源安装docker\"></a>使用APT源安装docker</h2><p>  更新apt软件源及安装必备组件。为了确认所下载软件包的合法性，还需要添加软件源的 GPG 密钥。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">sudo apt-get update</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">sudo apt-get install \\</span></span><br><span class=\"line\"><span class=\"language-bash\">\t apt-transport-https \\</span></span><br><span class=\"line\"><span class=\"language-bash\">     ca-certificates \\</span></span><br><span class=\"line\"><span class=\"language-bash\">     curl \\</span></span><br><span class=\"line\"><span class=\"language-bash\">     gnupg2 \\</span></span><br><span class=\"line\"><span class=\"language-bash\">     lsb-release \\</span></span><br><span class=\"line\"><span class=\"language-bash\">     software-properties-common</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/raspbian/gpg | sudo apt-key add -</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"添加docker-ce-软件源\"><a href=\"#添加docker-ce-软件源\" class=\"headerlink\" title=\"添加docker ce 软件源\"></a>添加docker ce 软件源</h2><ul>\n<li><p>首先执行以下一行命令，然后记一下输出的结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> $(lsb_release -cs)</span></span><br><span class=\"line\">stretch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在&#x2F;etc&#x2F;apt&#x2F;sources.list.d目录下新建文件docker.list</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo vi /etc/apt/sources.list.d/docker.list</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在文件里添加下面这行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">deb [arch=armhf] https://download.docker.com/linux/raspbian $(lsb_release -cs) stable</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把$(lsb_release -cs)改为刚才第一行输出的结果，比如我的输出的是stretch，改完后如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">deb [arch=armhf] https://download.docker.com/linux/raspbian stretch stable</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存，退出</p>\n</li>\n</ul>\n<h2 id=\"安装docker-ce\"><a href=\"#安装docker-ce\" class=\"headerlink\" title=\"安装docker ce\"></a>安装docker ce</h2><p>  依次执行以下两行命令，即可完成安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get update</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo apt-get install docker-ce</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">service docker start           启动</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">service docker stop            停止</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">service docker status          状态</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">service docker restart         重启</span></span><br></pre></td></tr></table></figure>"},{"title":"使用GitHub Actions编译树莓派内核","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-01-26T07:56:07.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 仓库地址\n\n仓库地址：https://github.com/GreyCode9/make-raspberrypi-kernel\n\n## 创建秘钥\n\n1. 点击Github右上角头像 -> Settings -> Developer settings -> Personal access tokens -> Generate new token\n\n<!-- more -->\n\n1. 或者直接点这个链接进入： https://github.com/settings/tokens\n\n   ![20210126150521](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126150521.png)\n\n![20210126150712](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126150712.png)\n\n<font color=red>创建后保存这个秘钥(秘钥只显示一次)</font>\n\n## 创建仓库\n\n创建仓库**[make-raspberrypi-kernel](https://github.com/GreyCode9/make-raspberrypi-kernel)**\n\n然后点击仓库的Settings -> Secrets ->New repository secret\n\n**然后填入刚才生成的秘钥**\n\n![20210126151157](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126151157.png)\n\n\n\n## 创建Actions\n\n接着点击**Actions** ,创建一个Actions，然后填入如下内容\n\n``` yaml\nname: Make RaspberryPi Kernel\n\non:\n  push:\n    tags: \n      - 'v*' # 当推送的Tag为v开头的，就会触发构建\n\nenv:\n  USE_SSH_CONFIG: true # 是否使用ssh连接进行 true:使用 false:不使用\n\njobs:\n  build:\n\n    runs-on: ubuntu-18.04\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: pull RaspberryPi Kernel linux\n        run: |\n          cd ../\n          git clone https://github.com/raspberrypi/linux.git\n      - name: pull RaspberryPi Kernel Tool\n        run: |\n          cd ../\n          git clone https://github.com/raspberrypi/tools.git\n      - name: Move .config\n        if: env.USE_SSH_CONFIG == 'false'\n        run: |\n          cp .config ../linux\n      - name: Setup Debug Session # 用SSH连接Actions\n        if: env.USE_SSH_CONFIG == 'true'\n        uses: csexton/debugger-action@master\n      - name: Make\n        run: |\n          cd ../\n          export WORKPATH=$(pwd)\n          export PATH=$PATH:$WORKPATH/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin\n          export PATH=$PATH:$WORKPATH/tools/arm-bcm2708/arm-bcm2708-linux-gnueabi/bin\n          cd linux/\n          make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage modules dtbs -j8\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.TOKEN }} # 之前GitHub添加的Token\n        with:\n          tag_name: ${{ github.ref }} # (tag)标签名称\n          release_name: Release ${{ github.ref }}\n          draft: false # 是否是草稿\n          prerelease: false # 是否是预发布\n      # 上传构建结果到 Release（把打包的tgz上传到Release）\n      - name: build TAR PACKAGE\n        run: |\n          tar -czvf raspberrypi-kernel.tar.gz ../linux/arch/arm/boot\n      - name: Upload Release Asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的\n          asset_path: ./raspberrypi-kernel.tar.gz # 要上传文件\n          asset_name: raspberrypi-kernel.tar.gz # 上传后的文件名\n          asset_content_type: application/gzip\n\n\n```\n\n- 可以在本地配置好`.config`文件然后上传到仓库，然后把Actions的配置文件中的`USE_SSH_CONFIG`字段改成`false`。\n- 也可以直接在`Actions`中进行配置`.config`文件，需要把`USE_SSH_CONFIG`字段改成`true`。\n\n## 触发构建\n\n当上面完成后，就可以把代码pull到本地，然后根据自己的需求配置`.config`文件。执行命令\n\n```shell\ngit tag -a v1.0 -m 'build kernel'\ngit push origin v1.0\n```\n\n推送完成后，就可以看到Actions正在构建了\n\n![20210126152258](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126152258.png)\n\n构建完成后，就可以在`Release`下载构建好的内核文件了\n\n![20210126152413](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126152413.png)\n\n![20210126152413](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126152428.png)\n\n## 资料索引\n\n- https://www.cnblogs.com/YAN-HUA/p/13530906.html\n- http://doc.openluat.com/article/166/0\n- https://www.daimajiaoliu.com/daima/4793af6f2900402","source":"_posts/linux/github-actions-build-pi-kernerl.md","raw":"---\ntitle: 使用GitHub Actions编译树莓派内核\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-01-26 15:56:07\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Github Actions\n- Linux\ncategories:\n- Linux\n---\n\n## 仓库地址\n\n仓库地址：https://github.com/GreyCode9/make-raspberrypi-kernel\n\n## 创建秘钥\n\n1. 点击Github右上角头像 -> Settings -> Developer settings -> Personal access tokens -> Generate new token\n\n<!-- more -->\n\n1. 或者直接点这个链接进入： https://github.com/settings/tokens\n\n   ![20210126150521](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126150521.png)\n\n![20210126150712](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126150712.png)\n\n<font color=red>创建后保存这个秘钥(秘钥只显示一次)</font>\n\n## 创建仓库\n\n创建仓库**[make-raspberrypi-kernel](https://github.com/GreyCode9/make-raspberrypi-kernel)**\n\n然后点击仓库的Settings -> Secrets ->New repository secret\n\n**然后填入刚才生成的秘钥**\n\n![20210126151157](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126151157.png)\n\n\n\n## 创建Actions\n\n接着点击**Actions** ,创建一个Actions，然后填入如下内容\n\n``` yaml\nname: Make RaspberryPi Kernel\n\non:\n  push:\n    tags: \n      - 'v*' # 当推送的Tag为v开头的，就会触发构建\n\nenv:\n  USE_SSH_CONFIG: true # 是否使用ssh连接进行 true:使用 false:不使用\n\njobs:\n  build:\n\n    runs-on: ubuntu-18.04\n\n    steps:\n      - uses: actions/checkout@v2\n      - name: pull RaspberryPi Kernel linux\n        run: |\n          cd ../\n          git clone https://github.com/raspberrypi/linux.git\n      - name: pull RaspberryPi Kernel Tool\n        run: |\n          cd ../\n          git clone https://github.com/raspberrypi/tools.git\n      - name: Move .config\n        if: env.USE_SSH_CONFIG == 'false'\n        run: |\n          cp .config ../linux\n      - name: Setup Debug Session # 用SSH连接Actions\n        if: env.USE_SSH_CONFIG == 'true'\n        uses: csexton/debugger-action@master\n      - name: Make\n        run: |\n          cd ../\n          export WORKPATH=$(pwd)\n          export PATH=$PATH:$WORKPATH/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin\n          export PATH=$PATH:$WORKPATH/tools/arm-bcm2708/arm-bcm2708-linux-gnueabi/bin\n          cd linux/\n          make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage modules dtbs -j8\n      - name: Create Release\n        id: create_release\n        uses: actions/create-release@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.TOKEN }} # 之前GitHub添加的Token\n        with:\n          tag_name: ${{ github.ref }} # (tag)标签名称\n          release_name: Release ${{ github.ref }}\n          draft: false # 是否是草稿\n          prerelease: false # 是否是预发布\n      # 上传构建结果到 Release（把打包的tgz上传到Release）\n      - name: build TAR PACKAGE\n        run: |\n          tar -czvf raspberrypi-kernel.tar.gz ../linux/arch/arm/boot\n      - name: Upload Release Asset\n        id: upload-release-asset\n        uses: actions/upload-release-asset@master\n        env:\n          GITHUB_TOKEN: ${{ secrets.TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }} # 上传地址，通过创建Release获取到的\n          asset_path: ./raspberrypi-kernel.tar.gz # 要上传文件\n          asset_name: raspberrypi-kernel.tar.gz # 上传后的文件名\n          asset_content_type: application/gzip\n\n\n```\n\n- 可以在本地配置好`.config`文件然后上传到仓库，然后把Actions的配置文件中的`USE_SSH_CONFIG`字段改成`false`。\n- 也可以直接在`Actions`中进行配置`.config`文件，需要把`USE_SSH_CONFIG`字段改成`true`。\n\n## 触发构建\n\n当上面完成后，就可以把代码pull到本地，然后根据自己的需求配置`.config`文件。执行命令\n\n```shell\ngit tag -a v1.0 -m 'build kernel'\ngit push origin v1.0\n```\n\n推送完成后，就可以看到Actions正在构建了\n\n![20210126152258](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126152258.png)\n\n构建完成后，就可以在`Release`下载构建好的内核文件了\n\n![20210126152413](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126152413.png)\n\n![20210126152413](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126152428.png)\n\n## 资料索引\n\n- https://www.cnblogs.com/YAN-HUA/p/13530906.html\n- http://doc.openluat.com/article/166/0\n- https://www.daimajiaoliu.com/daima/4793af6f2900402","slug":"linux/github-actions-build-pi-kernerl","published":1,"updated":"2021-10-08T08:56:19.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6egc0021vpuccurkfg50","content":"<h2 id=\"仓库地址\"><a href=\"#仓库地址\" class=\"headerlink\" title=\"仓库地址\"></a>仓库地址</h2><p>仓库地址：<a href=\"https://github.com/GreyCode9/make-raspberrypi-kernel\">https://github.com/GreyCode9/make-raspberrypi-kernel</a></p>\n<h2 id=\"创建秘钥\"><a href=\"#创建秘钥\" class=\"headerlink\" title=\"创建秘钥\"></a>创建秘钥</h2><ol>\n<li>点击Github右上角头像 -&gt; Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Generate new token</li>\n</ol>\n<span id=\"more\"></span>\n\n<ol>\n<li><p>或者直接点这个链接进入： <a href=\"https://github.com/settings/tokens\">https://github.com/settings/tokens</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126150521.png\" alt=\"20210126150521\"></p>\n</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126150712.png\" alt=\"20210126150712\"></p>\n<p><font color=red>创建后保存这个秘钥(秘钥只显示一次)</font></p>\n<h2 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h2><p>创建仓库**<a href=\"https://github.com/GreyCode9/make-raspberrypi-kernel\">make-raspberrypi-kernel</a>**</p>\n<p>然后点击仓库的Settings -&gt; Secrets -&gt;New repository secret</p>\n<p><strong>然后填入刚才生成的秘钥</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126151157.png\" alt=\"20210126151157\"></p>\n<h2 id=\"创建Actions\"><a href=\"#创建Actions\" class=\"headerlink\" title=\"创建Actions\"></a>创建Actions</h2><p>接着点击<strong>Actions</strong> ,创建一个Actions，然后填入如下内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Make</span> <span class=\"string\">RaspberryPi</span> <span class=\"string\">Kernel</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;v*&#x27;</span> <span class=\"comment\"># 当推送的Tag为v开头的，就会触发构建</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">  <span class=\"attr\">USE_SSH_CONFIG:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 是否使用ssh连接进行 true:使用 false:不使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-18.04</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">pull</span> <span class=\"string\">RaspberryPi</span> <span class=\"string\">Kernel</span> <span class=\"string\">linux</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          cd ../</span></span><br><span class=\"line\"><span class=\"string\">          git clone https://github.com/raspberrypi/linux.git</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">pull</span> <span class=\"string\">RaspberryPi</span> <span class=\"string\">Kernel</span> <span class=\"string\">Tool</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          cd ../</span></span><br><span class=\"line\"><span class=\"string\">          git clone https://github.com/raspberrypi/tools.git</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Move</span> <span class=\"string\">.config</span></span><br><span class=\"line\">        <span class=\"attr\">if:</span> <span class=\"string\">env.USE_SSH_CONFIG</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          cp .config ../linux</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Debug</span> <span class=\"string\">Session</span> <span class=\"comment\"># 用SSH连接Actions</span></span><br><span class=\"line\">        <span class=\"attr\">if:</span> <span class=\"string\">env.USE_SSH_CONFIG</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">csexton/debugger-action@master</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Make</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          cd ../</span></span><br><span class=\"line\"><span class=\"string\">          export WORKPATH=$(pwd)</span></span><br><span class=\"line\"><span class=\"string\">          export PATH=$PATH:$WORKPATH/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin</span></span><br><span class=\"line\"><span class=\"string\">          export PATH=$PATH:$WORKPATH/tools/arm-bcm2708/arm-bcm2708-linux-gnueabi/bin</span></span><br><span class=\"line\"><span class=\"string\">          cd linux/</span></span><br><span class=\"line\"><span class=\"string\">          make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage modules dtbs -j8</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Create</span> <span class=\"string\">Release</span></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">create_release</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/create-release@master</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">GITHUB_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.TOKEN</span> <span class=\"string\">&#125;&#125;</span> <span class=\"comment\"># 之前GitHub添加的Token</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">tag_name:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.ref</span> <span class=\"string\">&#125;&#125;</span> <span class=\"comment\"># (tag)标签名称</span></span><br><span class=\"line\">          <span class=\"attr\">release_name:</span> <span class=\"string\">Release</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.ref</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">draft:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 是否是草稿</span></span><br><span class=\"line\">          <span class=\"attr\">prerelease:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 是否是预发布</span></span><br><span class=\"line\">      <span class=\"comment\"># 上传构建结果到 Release（把打包的tgz上传到Release）</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">build</span> <span class=\"string\">TAR</span> <span class=\"string\">PACKAGE</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          tar -czvf raspberrypi-kernel.tar.gz ../linux/arch/arm/boot</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Upload</span> <span class=\"string\">Release</span> <span class=\"string\">Asset</span></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">upload-release-asset</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/upload-release-asset@master</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">GITHUB_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">upload_url:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">steps.create_release.outputs.upload_url</span> <span class=\"string\">&#125;&#125;</span> <span class=\"comment\"># 上传地址，通过创建Release获取到的</span></span><br><span class=\"line\">          <span class=\"attr\">asset_path:</span> <span class=\"string\">./raspberrypi-kernel.tar.gz</span> <span class=\"comment\"># 要上传文件</span></span><br><span class=\"line\">          <span class=\"attr\">asset_name:</span> <span class=\"string\">raspberrypi-kernel.tar.gz</span> <span class=\"comment\"># 上传后的文件名</span></span><br><span class=\"line\">          <span class=\"attr\">asset_content_type:</span> <span class=\"string\">application/gzip</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以在本地配置好<code>.config</code>文件然后上传到仓库，然后把Actions的配置文件中的<code>USE_SSH_CONFIG</code>字段改成<code>false</code>。</li>\n<li>也可以直接在<code>Actions</code>中进行配置<code>.config</code>文件，需要把<code>USE_SSH_CONFIG</code>字段改成<code>true</code>。</li>\n</ul>\n<h2 id=\"触发构建\"><a href=\"#触发构建\" class=\"headerlink\" title=\"触发构建\"></a>触发构建</h2><p>当上面完成后，就可以把代码pull到本地，然后根据自己的需求配置<code>.config</code>文件。执行命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git tag -a v1.0 -m &#x27;build kernel&#x27;</span><br><span class=\"line\">git push origin v1.0</span><br></pre></td></tr></table></figure>\n\n<p>推送完成后，就可以看到Actions正在构建了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126152258.png\" alt=\"20210126152258\"></p>\n<p>构建完成后，就可以在<code>Release</code>下载构建好的内核文件了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126152413.png\" alt=\"20210126152413\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126152428.png\" alt=\"20210126152413\"></p>\n<h2 id=\"资料索引\"><a href=\"#资料索引\" class=\"headerlink\" title=\"资料索引\"></a>资料索引</h2><ul>\n<li><a href=\"https://www.cnblogs.com/YAN-HUA/p/13530906.html\">https://www.cnblogs.com/YAN-HUA/p/13530906.html</a></li>\n<li><a href=\"http://doc.openluat.com/article/166/0\">http://doc.openluat.com/article/166/0</a></li>\n<li><a href=\"https://www.daimajiaoliu.com/daima/4793af6f2900402\">https://www.daimajiaoliu.com/daima/4793af6f2900402</a></li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"<h2 id=\"仓库地址\"><a href=\"#仓库地址\" class=\"headerlink\" title=\"仓库地址\"></a>仓库地址</h2><p>仓库地址：<a href=\"https://github.com/GreyCode9/make-raspberrypi-kernel\">https://github.com/GreyCode9/make-raspberrypi-kernel</a></p>\n<h2 id=\"创建秘钥\"><a href=\"#创建秘钥\" class=\"headerlink\" title=\"创建秘钥\"></a>创建秘钥</h2><ol>\n<li>点击Github右上角头像 -&gt; Settings -&gt; Developer settings -&gt; Personal access tokens -&gt; Generate new token</li>\n</ol>","more":"<ol>\n<li><p>或者直接点这个链接进入： <a href=\"https://github.com/settings/tokens\">https://github.com/settings/tokens</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126150521.png\" alt=\"20210126150521\"></p>\n</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126150712.png\" alt=\"20210126150712\"></p>\n<p><font color=red>创建后保存这个秘钥(秘钥只显示一次)</font></p>\n<h2 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h2><p>创建仓库**<a href=\"https://github.com/GreyCode9/make-raspberrypi-kernel\">make-raspberrypi-kernel</a>**</p>\n<p>然后点击仓库的Settings -&gt; Secrets -&gt;New repository secret</p>\n<p><strong>然后填入刚才生成的秘钥</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126151157.png\" alt=\"20210126151157\"></p>\n<h2 id=\"创建Actions\"><a href=\"#创建Actions\" class=\"headerlink\" title=\"创建Actions\"></a>创建Actions</h2><p>接着点击<strong>Actions</strong> ,创建一个Actions，然后填入如下内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">Make</span> <span class=\"string\">RaspberryPi</span> <span class=\"string\">Kernel</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">on:</span></span><br><span class=\"line\">  <span class=\"attr\">push:</span></span><br><span class=\"line\">    <span class=\"attr\">tags:</span> </span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&#x27;v*&#x27;</span> <span class=\"comment\"># 当推送的Tag为v开头的，就会触发构建</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\">  <span class=\"attr\">USE_SSH_CONFIG:</span> <span class=\"literal\">true</span> <span class=\"comment\"># 是否使用ssh连接进行 true:使用 false:不使用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">jobs:</span></span><br><span class=\"line\">  <span class=\"attr\">build:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">runs-on:</span> <span class=\"string\">ubuntu-18.04</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">steps:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">uses:</span> <span class=\"string\">actions/checkout@v2</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">pull</span> <span class=\"string\">RaspberryPi</span> <span class=\"string\">Kernel</span> <span class=\"string\">linux</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          cd ../</span></span><br><span class=\"line\"><span class=\"string\">          git clone https://github.com/raspberrypi/linux.git</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">pull</span> <span class=\"string\">RaspberryPi</span> <span class=\"string\">Kernel</span> <span class=\"string\">Tool</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          cd ../</span></span><br><span class=\"line\"><span class=\"string\">          git clone https://github.com/raspberrypi/tools.git</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Move</span> <span class=\"string\">.config</span></span><br><span class=\"line\">        <span class=\"attr\">if:</span> <span class=\"string\">env.USE_SSH_CONFIG</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;false&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          cp .config ../linux</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Setup</span> <span class=\"string\">Debug</span> <span class=\"string\">Session</span> <span class=\"comment\"># 用SSH连接Actions</span></span><br><span class=\"line\">        <span class=\"attr\">if:</span> <span class=\"string\">env.USE_SSH_CONFIG</span> <span class=\"string\">==</span> <span class=\"string\">&#x27;true&#x27;</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">csexton/debugger-action@master</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Make</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          cd ../</span></span><br><span class=\"line\"><span class=\"string\">          export WORKPATH=$(pwd)</span></span><br><span class=\"line\"><span class=\"string\">          export PATH=$PATH:$WORKPATH/tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin</span></span><br><span class=\"line\"><span class=\"string\">          export PATH=$PATH:$WORKPATH/tools/arm-bcm2708/arm-bcm2708-linux-gnueabi/bin</span></span><br><span class=\"line\"><span class=\"string\">          cd linux/</span></span><br><span class=\"line\"><span class=\"string\">          make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- zImage modules dtbs -j8</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Create</span> <span class=\"string\">Release</span></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">create_release</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/create-release@master</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">GITHUB_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.TOKEN</span> <span class=\"string\">&#125;&#125;</span> <span class=\"comment\"># 之前GitHub添加的Token</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">tag_name:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.ref</span> <span class=\"string\">&#125;&#125;</span> <span class=\"comment\"># (tag)标签名称</span></span><br><span class=\"line\">          <span class=\"attr\">release_name:</span> <span class=\"string\">Release</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">github.ref</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">          <span class=\"attr\">draft:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 是否是草稿</span></span><br><span class=\"line\">          <span class=\"attr\">prerelease:</span> <span class=\"literal\">false</span> <span class=\"comment\"># 是否是预发布</span></span><br><span class=\"line\">      <span class=\"comment\"># 上传构建结果到 Release（把打包的tgz上传到Release）</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">build</span> <span class=\"string\">TAR</span> <span class=\"string\">PACKAGE</span></span><br><span class=\"line\">        <span class=\"attr\">run:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">          tar -czvf raspberrypi-kernel.tar.gz ../linux/arch/arm/boot</span></span><br><span class=\"line\"><span class=\"string\"></span>      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">Upload</span> <span class=\"string\">Release</span> <span class=\"string\">Asset</span></span><br><span class=\"line\">        <span class=\"attr\">id:</span> <span class=\"string\">upload-release-asset</span></span><br><span class=\"line\">        <span class=\"attr\">uses:</span> <span class=\"string\">actions/upload-release-asset@master</span></span><br><span class=\"line\">        <span class=\"attr\">env:</span></span><br><span class=\"line\">          <span class=\"attr\">GITHUB_TOKEN:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">secrets.TOKEN</span> <span class=\"string\">&#125;&#125;</span></span><br><span class=\"line\">        <span class=\"attr\">with:</span></span><br><span class=\"line\">          <span class=\"attr\">upload_url:</span> <span class=\"string\">$&#123;&#123;</span> <span class=\"string\">steps.create_release.outputs.upload_url</span> <span class=\"string\">&#125;&#125;</span> <span class=\"comment\"># 上传地址，通过创建Release获取到的</span></span><br><span class=\"line\">          <span class=\"attr\">asset_path:</span> <span class=\"string\">./raspberrypi-kernel.tar.gz</span> <span class=\"comment\"># 要上传文件</span></span><br><span class=\"line\">          <span class=\"attr\">asset_name:</span> <span class=\"string\">raspberrypi-kernel.tar.gz</span> <span class=\"comment\"># 上传后的文件名</span></span><br><span class=\"line\">          <span class=\"attr\">asset_content_type:</span> <span class=\"string\">application/gzip</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>可以在本地配置好<code>.config</code>文件然后上传到仓库，然后把Actions的配置文件中的<code>USE_SSH_CONFIG</code>字段改成<code>false</code>。</li>\n<li>也可以直接在<code>Actions</code>中进行配置<code>.config</code>文件，需要把<code>USE_SSH_CONFIG</code>字段改成<code>true</code>。</li>\n</ul>\n<h2 id=\"触发构建\"><a href=\"#触发构建\" class=\"headerlink\" title=\"触发构建\"></a>触发构建</h2><p>当上面完成后，就可以把代码pull到本地，然后根据自己的需求配置<code>.config</code>文件。执行命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git tag -a v1.0 -m &#x27;build kernel&#x27;</span><br><span class=\"line\">git push origin v1.0</span><br></pre></td></tr></table></figure>\n\n<p>推送完成后，就可以看到Actions正在构建了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126152258.png\" alt=\"20210126152258\"></p>\n<p>构建完成后，就可以在<code>Release</code>下载构建好的内核文件了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126152413.png\" alt=\"20210126152413\"></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20210126152428.png\" alt=\"20210126152413\"></p>\n<h2 id=\"资料索引\"><a href=\"#资料索引\" class=\"headerlink\" title=\"资料索引\"></a>资料索引</h2><ul>\n<li><a href=\"https://www.cnblogs.com/YAN-HUA/p/13530906.html\">https://www.cnblogs.com/YAN-HUA/p/13530906.html</a></li>\n<li><a href=\"http://doc.openluat.com/article/166/0\">http://doc.openluat.com/article/166/0</a></li>\n<li><a href=\"https://www.daimajiaoliu.com/daima/4793af6f2900402\">https://www.daimajiaoliu.com/daima/4793af6f2900402</a></li>\n</ul>"},{"title":"fastDFS安装使用教程","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-07T05:34:10.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## FastDFS简介\n\nFastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB < file_size <500MB）为载体的在线服务。\n\nFastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。\n\n- **Tracker Server**：跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的 storage server和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。\n\n- **Storage Server**：存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份。\n\n- **Client**：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。\n\n- 结构图![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200507152801.webp)\n\n\n\n- 上传文件流程![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200507152857.webp)\n\n## 安装环境\n\n| 系统及软件版本        | Git开源地址                                   |\n| --------------------- | --------------------------------------------- |\n| Centos 7              | #                                             |\n| libfastcommon V1.0.43 | https://github.com/happyfish100/fastdfs       |\n| fastdfs V6.06         | https://github.com/happyfish100/libfastcommon |\n\n> 我虚拟机装的Centos7的ip地址是172.16.54.137\n\n## 安装前工作\n\n### 关闭防火墙\n> 为了方便，先关闭防火墙。线上环境安装可安装后开放对应端口。\n\n```shell\nservice firewalld stop\n```\n\n\n\n### 下载所需安装包\n\n- libfastcommon\n\n```shell\nwget https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz -O libfastcommon.tar.gz\n```\n\n- fastDFS\n\n```shell\nwget https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz -O fastdfs.tar.gz\n```\n\n\n\n### 安装fastDFS环境\n\n- 解压安装`libfastcommon`\n\n```shell\ntar -zxvf libfastcommon.tar.gz && cd libfastcommon-1.0.43/ && ./make.sh && ./make.sh install\n```\n\n\n\n## 安装fastDFS\n\n### 解压安装\n\n```shell\ntar -zxvf fastdfs.tar.gz && cd fastdfs-6.06/ && ./make.sh && ./make.sh install\n```\n> 安装好fastDFS后，在`/etc/fdfs/`目录下会生成4个示例的配置文件\n>\n> - client.conf.sample\tfastDFS客户端配置文件\n> - storage.conf.sample\n> - storage_ids.conf.sample    当storage超过1个时，可以用这个配置文件来配置管理\n> - tracker.conf.sample\n\n\n### 配置并启动Tracker\n\n进入`/etc/fdfs/`复制一份`Tracker`配置文件，\n\n```shell\ncd /etc/fdfs/ && cp tracker.conf.sample tracker.conf\n```\n\n\n\n修改`tracker.conf`配置文件里的`base_path`目录\n\n```shell\nbase_path=/data/fastdfs/tracker\n```\n\n创建对应的文件夹\n\n```shell\nmkdir -p /data/fastdfs/tracker\n```\n\n\n\n服务命令\n\n```shell\n#启动Tracker\nservice fdfs_trackerd start\n\n#关闭Tracker\nservice fdfs_trackerd stop\n\n#开机自启\nsystemctl enable fdfs_trackerd\n```\n\n\n\n### 配置并启动Storage\n\n进入`/etc/fdfs/`复制一份`Storage`配置文件，\n\n```shell\ncd /etc/fdfs && cp storage.conf.sample storage.conf\n```\n\n\n\n修改`storage.conf`配置文件\n\n```shell\nbase_path=/data/fastdfs/storage\n\n#存放文件地址\nstore_path0=/data/fastdfs/file\n\n#更改为你的tracker地址\ntracker_server=172.16.54.137:22122\n```\n\n\n\n创建对应的文件夹\n\n```shell\nmkdir -p /data/fastdfs/storage && mkdir -p /data/fastdfs/file\n```\n\n\n\n服务命令\n\n```shell\n#启动Storage\nservice fdfs_storaged start\n\n#关闭Storage\nservice fdfs_storaged stop\n\n#开机自启\nsystemctl enable fdfs_storaged\n```\n\n\n\n### 上传文件测试\n\n> 上传文件可以用他自带的客户端进行测试，使用客户端前，要复制一份`client.conf`并修改一下里面的内容\n\n```shell\n#复制一份客户端配置文件\ncd /etc/fdfs && cp client.conf.sample client.conf\n```\n\n\n\n修改`client.config`配置文件\n\n```shell\nbase_path=/data/fastdfs/client\n\n#更改为你的tracker地址\ntracker_server=172.16.54.137:22122\n```\n\n\n\n创建对应文件夹\n\n```shell\nmkdir -p /data/fastdfs/client\n```\n\n\n\n使用方法\n\n```shell\n/usr/bin/fdfs_upload_file /etc/fdfs/client.conf [filename]\n\n#上传成功后返回\ngroup1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml\n```\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200506215501.png)\n\n## 安装Nginx\n\n> 为了方便，这里直接使用nginx的docker镜像来进行安装。docker安装请自行查找资料\n\n首先创建一个文件夹，存放nginx的配置文件\n\n```shell\n#创建文件夹\nmkdir -p /data/nginx\n#进入文件夹并下载nginx配置文件\ncd /data/nginx && wget http://xhh.dengzii.com/file/nginx.conf\n```\n\n> 配置文件已经修改过了，直接下载即可使用\n\n\n\n然后运行docker命令（第一次运行会自动下载nginx镜像）\n\n```shell\ndocker run -d -p 81:80 -v /data/nginx/nginx.conf:/etc/nginx/nginx.conf -v /data/:/data/ --name fastDFS-nginx nginx\n```\n\n\n\n然后就可以通过`http://ip:port/[filePth]`访问上传到fastDFS的文件了\n\n```shell\n#例如刚才上传的文件 可以通过如下地址访问\nhttp://172.16.54.137:81/group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml\n```\n\n\n\n## 拓展\n\n这里只是示例了单机的fastDFS安装，一般fastDFS都是分布式安装的。具体可以通过下载这个结构图去进行安装。此时如果配置了多个group，则需要安装`fastdfs-nginx-module`这个nginx的模块。\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200507132841.png)","source":"_posts/linux/linux-fastdfs-install.md","raw":"---\ntitle: fastDFS安装使用教程\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-07 13:34:10\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Linux\n- fastDFS\ncategories:\n- Linux\n---\n\n## FastDFS简介\n\nFastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB < file_size <500MB）为载体的在线服务。\n\nFastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。\n\n- **Tracker Server**：跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的 storage server和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。\n\n- **Storage Server**：存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份。\n\n- **Client**：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。\n\n- 结构图![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200507152801.webp)\n\n\n\n- 上传文件流程![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200507152857.webp)\n\n## 安装环境\n\n| 系统及软件版本        | Git开源地址                                   |\n| --------------------- | --------------------------------------------- |\n| Centos 7              | #                                             |\n| libfastcommon V1.0.43 | https://github.com/happyfish100/fastdfs       |\n| fastdfs V6.06         | https://github.com/happyfish100/libfastcommon |\n\n> 我虚拟机装的Centos7的ip地址是172.16.54.137\n\n## 安装前工作\n\n### 关闭防火墙\n> 为了方便，先关闭防火墙。线上环境安装可安装后开放对应端口。\n\n```shell\nservice firewalld stop\n```\n\n\n\n### 下载所需安装包\n\n- libfastcommon\n\n```shell\nwget https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz -O libfastcommon.tar.gz\n```\n\n- fastDFS\n\n```shell\nwget https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz -O fastdfs.tar.gz\n```\n\n\n\n### 安装fastDFS环境\n\n- 解压安装`libfastcommon`\n\n```shell\ntar -zxvf libfastcommon.tar.gz && cd libfastcommon-1.0.43/ && ./make.sh && ./make.sh install\n```\n\n\n\n## 安装fastDFS\n\n### 解压安装\n\n```shell\ntar -zxvf fastdfs.tar.gz && cd fastdfs-6.06/ && ./make.sh && ./make.sh install\n```\n> 安装好fastDFS后，在`/etc/fdfs/`目录下会生成4个示例的配置文件\n>\n> - client.conf.sample\tfastDFS客户端配置文件\n> - storage.conf.sample\n> - storage_ids.conf.sample    当storage超过1个时，可以用这个配置文件来配置管理\n> - tracker.conf.sample\n\n\n### 配置并启动Tracker\n\n进入`/etc/fdfs/`复制一份`Tracker`配置文件，\n\n```shell\ncd /etc/fdfs/ && cp tracker.conf.sample tracker.conf\n```\n\n\n\n修改`tracker.conf`配置文件里的`base_path`目录\n\n```shell\nbase_path=/data/fastdfs/tracker\n```\n\n创建对应的文件夹\n\n```shell\nmkdir -p /data/fastdfs/tracker\n```\n\n\n\n服务命令\n\n```shell\n#启动Tracker\nservice fdfs_trackerd start\n\n#关闭Tracker\nservice fdfs_trackerd stop\n\n#开机自启\nsystemctl enable fdfs_trackerd\n```\n\n\n\n### 配置并启动Storage\n\n进入`/etc/fdfs/`复制一份`Storage`配置文件，\n\n```shell\ncd /etc/fdfs && cp storage.conf.sample storage.conf\n```\n\n\n\n修改`storage.conf`配置文件\n\n```shell\nbase_path=/data/fastdfs/storage\n\n#存放文件地址\nstore_path0=/data/fastdfs/file\n\n#更改为你的tracker地址\ntracker_server=172.16.54.137:22122\n```\n\n\n\n创建对应的文件夹\n\n```shell\nmkdir -p /data/fastdfs/storage && mkdir -p /data/fastdfs/file\n```\n\n\n\n服务命令\n\n```shell\n#启动Storage\nservice fdfs_storaged start\n\n#关闭Storage\nservice fdfs_storaged stop\n\n#开机自启\nsystemctl enable fdfs_storaged\n```\n\n\n\n### 上传文件测试\n\n> 上传文件可以用他自带的客户端进行测试，使用客户端前，要复制一份`client.conf`并修改一下里面的内容\n\n```shell\n#复制一份客户端配置文件\ncd /etc/fdfs && cp client.conf.sample client.conf\n```\n\n\n\n修改`client.config`配置文件\n\n```shell\nbase_path=/data/fastdfs/client\n\n#更改为你的tracker地址\ntracker_server=172.16.54.137:22122\n```\n\n\n\n创建对应文件夹\n\n```shell\nmkdir -p /data/fastdfs/client\n```\n\n\n\n使用方法\n\n```shell\n/usr/bin/fdfs_upload_file /etc/fdfs/client.conf [filename]\n\n#上传成功后返回\ngroup1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml\n```\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200506215501.png)\n\n## 安装Nginx\n\n> 为了方便，这里直接使用nginx的docker镜像来进行安装。docker安装请自行查找资料\n\n首先创建一个文件夹，存放nginx的配置文件\n\n```shell\n#创建文件夹\nmkdir -p /data/nginx\n#进入文件夹并下载nginx配置文件\ncd /data/nginx && wget http://xhh.dengzii.com/file/nginx.conf\n```\n\n> 配置文件已经修改过了，直接下载即可使用\n\n\n\n然后运行docker命令（第一次运行会自动下载nginx镜像）\n\n```shell\ndocker run -d -p 81:80 -v /data/nginx/nginx.conf:/etc/nginx/nginx.conf -v /data/:/data/ --name fastDFS-nginx nginx\n```\n\n\n\n然后就可以通过`http://ip:port/[filePth]`访问上传到fastDFS的文件了\n\n```shell\n#例如刚才上传的文件 可以通过如下地址访问\nhttp://172.16.54.137:81/group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml\n```\n\n\n\n## 拓展\n\n这里只是示例了单机的fastDFS安装，一般fastDFS都是分布式安装的。具体可以通过下载这个结构图去进行安装。此时如果配置了多个group，则需要安装`fastdfs-nginx-module`这个nginx的模块。\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200507132841.png)","slug":"linux/linux-fastdfs-install","published":1,"updated":"2021-10-08T08:56:48.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6egd0023vpuc9k4o22vo","content":"<h2 id=\"FastDFS简介\"><a href=\"#FastDFS简介\" class=\"headerlink\" title=\"FastDFS简介\"></a>FastDFS简介</h2><p>FastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB &lt; file_size &lt;500MB）为载体的在线服务。</p>\n<p>FastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。</p>\n<ul>\n<li><p><strong>Tracker Server</strong>：跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的 storage server和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。</p>\n</li>\n<li><p><strong>Storage Server</strong>：存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份。</p>\n</li>\n<li><p><strong>Client</strong>：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。</p>\n</li>\n<li><p>结构图<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200507152801.webp\" alt=\"图片\"></p>\n</li>\n<li><p>上传文件流程<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200507152857.webp\" alt=\"图片\"></p>\n</li>\n</ul>\n<h2 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h2><table>\n<thead>\n<tr>\n<th>系统及软件版本</th>\n<th>Git开源地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Centos 7</td>\n<td>#</td>\n</tr>\n<tr>\n<td>libfastcommon V1.0.43</td>\n<td><a href=\"https://github.com/happyfish100/fastdfs\">https://github.com/happyfish100/fastdfs</a></td>\n</tr>\n<tr>\n<td>fastdfs V6.06</td>\n<td><a href=\"https://github.com/happyfish100/libfastcommon\">https://github.com/happyfish100/libfastcommon</a></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>我虚拟机装的Centos7的ip地址是172.16.54.137</p>\n</blockquote>\n<h2 id=\"安装前工作\"><a href=\"#安装前工作\" class=\"headerlink\" title=\"安装前工作\"></a>安装前工作</h2><h3 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h3><blockquote>\n<p>为了方便，先关闭防火墙。线上环境安装可安装后开放对应端口。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">service firewalld stop</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"下载所需安装包\"><a href=\"#下载所需安装包\" class=\"headerlink\" title=\"下载所需安装包\"></a>下载所需安装包</h3><ul>\n<li>libfastcommon</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz -O libfastcommon.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>fastDFS</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz -O fastdfs.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装fastDFS环境\"><a href=\"#安装fastDFS环境\" class=\"headerlink\" title=\"安装fastDFS环境\"></a>安装fastDFS环境</h3><ul>\n<li>解压安装<code>libfastcommon</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf libfastcommon.tar.gz &amp;&amp; cd libfastcommon-1.0.43/ &amp;&amp; ./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装fastDFS\"><a href=\"#安装fastDFS\" class=\"headerlink\" title=\"安装fastDFS\"></a>安装fastDFS</h2><h3 id=\"解压安装\"><a href=\"#解压安装\" class=\"headerlink\" title=\"解压安装\"></a>解压安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf fastdfs.tar.gz &amp;&amp; cd fastdfs-6.06/ &amp;&amp; ./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>安装好fastDFS后，在<code>/etc/fdfs/</code>目录下会生成4个示例的配置文件</p>\n<ul>\n<li>client.conf.sample    fastDFS客户端配置文件</li>\n<li>storage.conf.sample</li>\n<li>storage_ids.conf.sample    当storage超过1个时，可以用这个配置文件来配置管理</li>\n<li>tracker.conf.sample</li>\n</ul>\n</blockquote>\n<h3 id=\"配置并启动Tracker\"><a href=\"#配置并启动Tracker\" class=\"headerlink\" title=\"配置并启动Tracker\"></a>配置并启动Tracker</h3><p>进入<code>/etc/fdfs/</code>复制一份<code>Tracker</code>配置文件，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /etc/fdfs/ &amp;&amp; cp tracker.conf.sample tracker.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改<code>tracker.conf</code>配置文件里的<code>base_path</code>目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">base_path=/data/fastdfs/tracker</span><br></pre></td></tr></table></figure>\n\n<p>创建对应的文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/fastdfs/tracker</span><br></pre></td></tr></table></figure>\n\n\n\n<p>服务命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动Tracker</span></span><br><span class=\"line\">service fdfs_trackerd start</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">关闭Tracker</span></span><br><span class=\"line\">service fdfs_trackerd stop</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开机自启</span></span><br><span class=\"line\">systemctl enable fdfs_trackerd</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"配置并启动Storage\"><a href=\"#配置并启动Storage\" class=\"headerlink\" title=\"配置并启动Storage\"></a>配置并启动Storage</h3><p>进入<code>/etc/fdfs/</code>复制一份<code>Storage</code>配置文件，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /etc/fdfs &amp;&amp; cp storage.conf.sample storage.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改<code>storage.conf</code>配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">base_path=/data/fastdfs/storage</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">存放文件地址</span></span><br><span class=\"line\">store_path0=/data/fastdfs/file</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">更改为你的tracker地址</span></span><br><span class=\"line\">tracker_server=172.16.54.137:22122</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建对应的文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/fastdfs/storage &amp;&amp; mkdir -p /data/fastdfs/file</span><br></pre></td></tr></table></figure>\n\n\n\n<p>服务命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动Storage</span></span><br><span class=\"line\">service fdfs_storaged start</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">关闭Storage</span></span><br><span class=\"line\">service fdfs_storaged stop</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开机自启</span></span><br><span class=\"line\">systemctl enable fdfs_storaged</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"上传文件测试\"><a href=\"#上传文件测试\" class=\"headerlink\" title=\"上传文件测试\"></a>上传文件测试</h3><blockquote>\n<p>上传文件可以用他自带的客户端进行测试，使用客户端前，要复制一份<code>client.conf</code>并修改一下里面的内容</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">复制一份客户端配置文件</span></span><br><span class=\"line\">cd /etc/fdfs &amp;&amp; cp client.conf.sample client.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改<code>client.config</code>配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">base_path=/data/fastdfs/client</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">更改为你的tracker地址</span></span><br><span class=\"line\">tracker_server=172.16.54.137:22122</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建对应文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/fastdfs/client</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用方法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf [filename]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">上传成功后返回</span></span><br><span class=\"line\">group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200506215501.png\" alt=\"图片\"></p>\n<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><blockquote>\n<p>为了方便，这里直接使用nginx的docker镜像来进行安装。docker安装请自行查找资料</p>\n</blockquote>\n<p>首先创建一个文件夹，存放nginx的配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建文件夹</span></span><br><span class=\"line\">mkdir -p /data/nginx</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">进入文件夹并下载nginx配置文件</span></span><br><span class=\"line\">cd /data/nginx &amp;&amp; wget http://xhh.dengzii.com/file/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置文件已经修改过了，直接下载即可使用</p>\n</blockquote>\n<p>然后运行docker命令（第一次运行会自动下载nginx镜像）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 81:80 -v /data/nginx/nginx.conf:/etc/nginx/nginx.conf -v /data/:/data/ --name fastDFS-nginx nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后就可以通过<code>http://ip:port/[filePth]</code>访问上传到fastDFS的文件了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例如刚才上传的文件 可以通过如下地址访问</span></span><br><span class=\"line\">http://172.16.54.137:81/group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>这里只是示例了单机的fastDFS安装，一般fastDFS都是分布式安装的。具体可以通过下载这个结构图去进行安装。此时如果配置了多个group，则需要安装<code>fastdfs-nginx-module</code>这个nginx的模块。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200507132841.png\" alt=\"图片\"></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"FastDFS简介\"><a href=\"#FastDFS简介\" class=\"headerlink\" title=\"FastDFS简介\"></a>FastDFS简介</h2><p>FastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB &lt; file_size &lt;500MB）为载体的在线服务。</p>\n<p>FastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。</p>\n<ul>\n<li><p><strong>Tracker Server</strong>：跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的 storage server和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。</p>\n</li>\n<li><p><strong>Storage Server</strong>：存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份。</p>\n</li>\n<li><p><strong>Client</strong>：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。</p>\n</li>\n<li><p>结构图<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200507152801.webp\" alt=\"图片\"></p>\n</li>\n<li><p>上传文件流程<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200507152857.webp\" alt=\"图片\"></p>\n</li>\n</ul>\n<h2 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h2><table>\n<thead>\n<tr>\n<th>系统及软件版本</th>\n<th>Git开源地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Centos 7</td>\n<td>#</td>\n</tr>\n<tr>\n<td>libfastcommon V1.0.43</td>\n<td><a href=\"https://github.com/happyfish100/fastdfs\">https://github.com/happyfish100/fastdfs</a></td>\n</tr>\n<tr>\n<td>fastdfs V6.06</td>\n<td><a href=\"https://github.com/happyfish100/libfastcommon\">https://github.com/happyfish100/libfastcommon</a></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>我虚拟机装的Centos7的ip地址是172.16.54.137</p>\n</blockquote>\n<h2 id=\"安装前工作\"><a href=\"#安装前工作\" class=\"headerlink\" title=\"安装前工作\"></a>安装前工作</h2><h3 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h3><blockquote>\n<p>为了方便，先关闭防火墙。线上环境安装可安装后开放对应端口。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">service firewalld stop</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"下载所需安装包\"><a href=\"#下载所需安装包\" class=\"headerlink\" title=\"下载所需安装包\"></a>下载所需安装包</h3><ul>\n<li>libfastcommon</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz -O libfastcommon.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>fastDFS</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz -O fastdfs.tar.gz</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"安装fastDFS环境\"><a href=\"#安装fastDFS环境\" class=\"headerlink\" title=\"安装fastDFS环境\"></a>安装fastDFS环境</h3><ul>\n<li>解压安装<code>libfastcommon</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf libfastcommon.tar.gz &amp;&amp; cd libfastcommon-1.0.43/ &amp;&amp; ./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装fastDFS\"><a href=\"#安装fastDFS\" class=\"headerlink\" title=\"安装fastDFS\"></a>安装fastDFS</h2><h3 id=\"解压安装\"><a href=\"#解压安装\" class=\"headerlink\" title=\"解压安装\"></a>解压安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf fastdfs.tar.gz &amp;&amp; cd fastdfs-6.06/ &amp;&amp; ./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>安装好fastDFS后，在<code>/etc/fdfs/</code>目录下会生成4个示例的配置文件</p>\n<ul>\n<li>client.conf.sample    fastDFS客户端配置文件</li>\n<li>storage.conf.sample</li>\n<li>storage_ids.conf.sample    当storage超过1个时，可以用这个配置文件来配置管理</li>\n<li>tracker.conf.sample</li>\n</ul>\n</blockquote>\n<h3 id=\"配置并启动Tracker\"><a href=\"#配置并启动Tracker\" class=\"headerlink\" title=\"配置并启动Tracker\"></a>配置并启动Tracker</h3><p>进入<code>/etc/fdfs/</code>复制一份<code>Tracker</code>配置文件，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /etc/fdfs/ &amp;&amp; cp tracker.conf.sample tracker.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改<code>tracker.conf</code>配置文件里的<code>base_path</code>目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">base_path=/data/fastdfs/tracker</span><br></pre></td></tr></table></figure>\n\n<p>创建对应的文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/fastdfs/tracker</span><br></pre></td></tr></table></figure>\n\n\n\n<p>服务命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动Tracker</span></span><br><span class=\"line\">service fdfs_trackerd start</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">关闭Tracker</span></span><br><span class=\"line\">service fdfs_trackerd stop</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开机自启</span></span><br><span class=\"line\">systemctl enable fdfs_trackerd</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"配置并启动Storage\"><a href=\"#配置并启动Storage\" class=\"headerlink\" title=\"配置并启动Storage\"></a>配置并启动Storage</h3><p>进入<code>/etc/fdfs/</code>复制一份<code>Storage</code>配置文件，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /etc/fdfs &amp;&amp; cp storage.conf.sample storage.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改<code>storage.conf</code>配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">base_path=/data/fastdfs/storage</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">存放文件地址</span></span><br><span class=\"line\">store_path0=/data/fastdfs/file</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">更改为你的tracker地址</span></span><br><span class=\"line\">tracker_server=172.16.54.137:22122</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建对应的文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/fastdfs/storage &amp;&amp; mkdir -p /data/fastdfs/file</span><br></pre></td></tr></table></figure>\n\n\n\n<p>服务命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">启动Storage</span></span><br><span class=\"line\">service fdfs_storaged start</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">关闭Storage</span></span><br><span class=\"line\">service fdfs_storaged stop</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">开机自启</span></span><br><span class=\"line\">systemctl enable fdfs_storaged</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"上传文件测试\"><a href=\"#上传文件测试\" class=\"headerlink\" title=\"上传文件测试\"></a>上传文件测试</h3><blockquote>\n<p>上传文件可以用他自带的客户端进行测试，使用客户端前，要复制一份<code>client.conf</code>并修改一下里面的内容</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">复制一份客户端配置文件</span></span><br><span class=\"line\">cd /etc/fdfs &amp;&amp; cp client.conf.sample client.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改<code>client.config</code>配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">base_path=/data/fastdfs/client</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">更改为你的tracker地址</span></span><br><span class=\"line\">tracker_server=172.16.54.137:22122</span><br></pre></td></tr></table></figure>\n\n\n\n<p>创建对应文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/fastdfs/client</span><br></pre></td></tr></table></figure>\n\n\n\n<p>使用方法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf [filename]</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">上传成功后返回</span></span><br><span class=\"line\">group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200506215501.png\" alt=\"图片\"></p>\n<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><blockquote>\n<p>为了方便，这里直接使用nginx的docker镜像来进行安装。docker安装请自行查找资料</p>\n</blockquote>\n<p>首先创建一个文件夹，存放nginx的配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">创建文件夹</span></span><br><span class=\"line\">mkdir -p /data/nginx</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">进入文件夹并下载nginx配置文件</span></span><br><span class=\"line\">cd /data/nginx &amp;&amp; wget http://xhh.dengzii.com/file/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置文件已经修改过了，直接下载即可使用</p>\n</blockquote>\n<p>然后运行docker命令（第一次运行会自动下载nginx镜像）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 81:80 -v /data/nginx/nginx.conf:/etc/nginx/nginx.conf -v /data/:/data/ --name fastDFS-nginx nginx</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后就可以通过<code>http://ip:port/[filePth]</code>访问上传到fastDFS的文件了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">例如刚才上传的文件 可以通过如下地址访问</span></span><br><span class=\"line\">http://172.16.54.137:81/group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>这里只是示例了单机的fastDFS安装，一般fastDFS都是分布式安装的。具体可以通过下载这个结构图去进行安装。此时如果配置了多个group，则需要安装<code>fastdfs-nginx-module</code>这个nginx的模块。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200507132841.png\" alt=\"图片\"></p>\n"},{"title":"JDK时区问题","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-08-27T07:26:30.000Z","password":null,"summary":null,"_content":"\n\n今天碰到一个大坑，弄了快一个小时才解决掉；\n\n一个管理台后端服务，用docker隔离了三个容器，oracle,nginx,tomcat;后发现管理台查出来的时间和现实时间相差8个小时，一查是linux时区问题；\n\n---\n\n* 于是改之,三台容器都输入一下代码\n\n```shell\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n\n测试了一下，发现问题docker容器的时区是正确了，可是问题并未得到解决，数据库时间还是慢了8个小时。\n\n---\n\n* 于是又查资料，换另外一种设置时区的方法；\n\n```shell\nvi /etc/sysconfig/clock\n```\n\n在里面输入如下内容\n\n```shell\nZONE=\"Asia/Shanghai\"\nUTC=false\nARC=false\n```\n\n保存，重启，测试。。。。。发现还是一样,快疯了\n\n---\n\n* 第三种方法，设置TZ环境变量\n\n> 设置环境变量可以在设置系统级别的/etc/profile  ,也可以设置用户级别的home目录的.bashrc。由于用的是docker，防止变量重启失效，只能在.bashrc里设置。在.bashrc加入如下内容：\n\n```shell\nexport TZ='CST-8'\n```\n\n保存：然后执行\n\n```shell\nsource .bashrc\n```\n\n使设置立即生效。\n\n重启容器，测试，发现时间正常了。。。。哈哈哈哈\n\n---\n\n## 总结\n\n上面问题出在jdk的new Date()方法，所以只要设置jdk所在的那个docker容器的变量就可以，不用每个都设置。jdk的new Date()方法每次调用都会去取环境变量TZ的时区，TZ是TimeZone的缩写，容器内部操作系统并未指定时区（TimeZone）信息，系统默认使用世界标准时（UTC+0),所以导致new Date()出来的数据存库会比当前时间慢8个小时；\n","source":"_posts/linux/problem-jdk-timezone.md","raw":"---\ntitle: JDK时区问题\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Java\n  - Linux\ncategories:\n  - Linux\ndate: 2019-08-27 15:26:30\npassword:\nsummary:\n---\n\n\n今天碰到一个大坑，弄了快一个小时才解决掉；\n\n一个管理台后端服务，用docker隔离了三个容器，oracle,nginx,tomcat;后发现管理台查出来的时间和现实时间相差8个小时，一查是linux时区问题；\n\n---\n\n* 于是改之,三台容器都输入一下代码\n\n```shell\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n\n测试了一下，发现问题docker容器的时区是正确了，可是问题并未得到解决，数据库时间还是慢了8个小时。\n\n---\n\n* 于是又查资料，换另外一种设置时区的方法；\n\n```shell\nvi /etc/sysconfig/clock\n```\n\n在里面输入如下内容\n\n```shell\nZONE=\"Asia/Shanghai\"\nUTC=false\nARC=false\n```\n\n保存，重启，测试。。。。。发现还是一样,快疯了\n\n---\n\n* 第三种方法，设置TZ环境变量\n\n> 设置环境变量可以在设置系统级别的/etc/profile  ,也可以设置用户级别的home目录的.bashrc。由于用的是docker，防止变量重启失效，只能在.bashrc里设置。在.bashrc加入如下内容：\n\n```shell\nexport TZ='CST-8'\n```\n\n保存：然后执行\n\n```shell\nsource .bashrc\n```\n\n使设置立即生效。\n\n重启容器，测试，发现时间正常了。。。。哈哈哈哈\n\n---\n\n## 总结\n\n上面问题出在jdk的new Date()方法，所以只要设置jdk所在的那个docker容器的变量就可以，不用每个都设置。jdk的new Date()方法每次调用都会去取环境变量TZ的时区，TZ是TimeZone的缩写，容器内部操作系统并未指定时区（TimeZone）信息，系统默认使用世界标准时（UTC+0),所以导致new Date()出来的数据存库会比当前时间慢8个小时；\n","slug":"linux/problem-jdk-timezone","published":1,"updated":"2021-10-08T07:57:24.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6egf0028vpuc1tcbaj71","content":"<p>今天碰到一个大坑，弄了快一个小时才解决掉；</p>\n<p>一个管理台后端服务，用docker隔离了三个容器，oracle,nginx,tomcat;后发现管理台查出来的时间和现实时间相差8个小时，一查是linux时区问题；</p>\n<hr>\n<ul>\n<li>于是改之,三台容器都输入一下代码</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>\n\n<p>测试了一下，发现问题docker容器的时区是正确了，可是问题并未得到解决，数据库时间还是慢了8个小时。</p>\n<hr>\n<ul>\n<li>于是又查资料，换另外一种设置时区的方法；</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/clock</span><br></pre></td></tr></table></figure>\n\n<p>在里面输入如下内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ZONE=&quot;Asia/Shanghai&quot;</span><br><span class=\"line\">UTC=false</span><br><span class=\"line\">ARC=false</span><br></pre></td></tr></table></figure>\n\n<p>保存，重启，测试。。。。。发现还是一样,快疯了</p>\n<hr>\n<ul>\n<li>第三种方法，设置TZ环境变量</li>\n</ul>\n<blockquote>\n<p>设置环境变量可以在设置系统级别的&#x2F;etc&#x2F;profile  ,也可以设置用户级别的home目录的.bashrc。由于用的是docker，防止变量重启失效，只能在.bashrc里设置。在.bashrc加入如下内容：</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export TZ=&#x27;CST-8&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>保存：然后执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n\n<p>使设置立即生效。</p>\n<p>重启容器，测试，发现时间正常了。。。。哈哈哈哈</p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面问题出在jdk的new Date()方法，所以只要设置jdk所在的那个docker容器的变量就可以，不用每个都设置。jdk的new Date()方法每次调用都会去取环境变量TZ的时区，TZ是TimeZone的缩写，容器内部操作系统并未指定时区（TimeZone）信息，系统默认使用世界标准时（UTC+0),所以导致new Date()出来的数据存库会比当前时间慢8个小时；</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p>今天碰到一个大坑，弄了快一个小时才解决掉；</p>\n<p>一个管理台后端服务，用docker隔离了三个容器，oracle,nginx,tomcat;后发现管理台查出来的时间和现实时间相差8个小时，一查是linux时区问题；</p>\n<hr>\n<ul>\n<li>于是改之,三台容器都输入一下代码</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>\n\n<p>测试了一下，发现问题docker容器的时区是正确了，可是问题并未得到解决，数据库时间还是慢了8个小时。</p>\n<hr>\n<ul>\n<li>于是又查资料，换另外一种设置时区的方法；</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/clock</span><br></pre></td></tr></table></figure>\n\n<p>在里面输入如下内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ZONE=&quot;Asia/Shanghai&quot;</span><br><span class=\"line\">UTC=false</span><br><span class=\"line\">ARC=false</span><br></pre></td></tr></table></figure>\n\n<p>保存，重启，测试。。。。。发现还是一样,快疯了</p>\n<hr>\n<ul>\n<li>第三种方法，设置TZ环境变量</li>\n</ul>\n<blockquote>\n<p>设置环境变量可以在设置系统级别的&#x2F;etc&#x2F;profile  ,也可以设置用户级别的home目录的.bashrc。由于用的是docker，防止变量重启失效，只能在.bashrc里设置。在.bashrc加入如下内容：</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export TZ=&#x27;CST-8&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>保存：然后执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n\n<p>使设置立即生效。</p>\n<p>重启容器，测试，发现时间正常了。。。。哈哈哈哈</p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面问题出在jdk的new Date()方法，所以只要设置jdk所在的那个docker容器的变量就可以，不用每个都设置。jdk的new Date()方法每次调用都会去取环境变量TZ的时区，TZ是TimeZone的缩写，容器内部操作系统并未指定时区（TimeZone）信息，系统默认使用世界标准时（UTC+0),所以导致new Date()出来的数据存库会比当前时间慢8个小时；</p>\n"},{"title":"Java删除文件后电脑磁盘空间没有恢复","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-07-03T09:12:41.000Z","password":null,"summary":null,"keywords":null,"description":"当用一下命令删除文件后，电脑磁盘内存没有恢复，还是原来的大小","_content":"\n\n\n## 问题\n\n当用一下命令删除文件后，电脑磁盘内存没有恢复，还是原来的大小\n\n```java\nFile folder = new File(\"/tmp/file.mp4\")\nfile.delete();\n```\n\n## 解决\n\n原来是 `FileOutputStream` 文件流忘了关了，导致一直占用这个资源。所以使用完后一定记得关文件流，使用下面的代码关闭文件流：\n\n```java\nFileOutputStream fileOutputStream = new FileOutputStream(new File());\nfileOutputStream.close();\n```\n\n**Linux 里的文件被删除后，空间没有被释放是因为在 Linux 系统中，通过 rm 或者文件管理器删除文件将会从文件系统的目录结构上解除链接(unlink).然而如果文件是被打开的(有一个进程正在使用)，那么进程将仍然可以读取该文件，磁盘空间也一直被占用。**\n\n可以使用 `lsof +L1 |grep delete` 命令来查看状态为 `deleted` 的文件，状态为 `deleted` 为标记被删除，其实该文件并没有从磁盘中删除，类似windows下的回收站状态。\n\n所以当进程结束后，磁盘空间就会被释放。\n\n## 参考资料\n\n- http://www.cxyzjd.com/article/su4416160/78212934\n- https://www.jianshu.com/p/fcb80c878d04\n","source":"_posts/java/74CAAAFD610241A1B8ECDB5F3BB33EE4.md","raw":"---\ntitle: Java删除文件后电脑磁盘空间没有恢复\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-07-03 17:12:41\npassword:\nsummary:\nkeywords:\ndescription: 当用一下命令删除文件后，电脑磁盘内存没有恢复，还是原来的大小\ntags:\n- Java\n- Linux\ncategories:\n- Java\n---\n\n\n\n## 问题\n\n当用一下命令删除文件后，电脑磁盘内存没有恢复，还是原来的大小\n\n```java\nFile folder = new File(\"/tmp/file.mp4\")\nfile.delete();\n```\n\n## 解决\n\n原来是 `FileOutputStream` 文件流忘了关了，导致一直占用这个资源。所以使用完后一定记得关文件流，使用下面的代码关闭文件流：\n\n```java\nFileOutputStream fileOutputStream = new FileOutputStream(new File());\nfileOutputStream.close();\n```\n\n**Linux 里的文件被删除后，空间没有被释放是因为在 Linux 系统中，通过 rm 或者文件管理器删除文件将会从文件系统的目录结构上解除链接(unlink).然而如果文件是被打开的(有一个进程正在使用)，那么进程将仍然可以读取该文件，磁盘空间也一直被占用。**\n\n可以使用 `lsof +L1 |grep delete` 命令来查看状态为 `deleted` 的文件，状态为 `deleted` 为标记被删除，其实该文件并没有从磁盘中删除，类似windows下的回收站状态。\n\n所以当进程结束后，磁盘空间就会被释放。\n\n## 参考资料\n\n- http://www.cxyzjd.com/article/su4416160/78212934\n- https://www.jianshu.com/p/fcb80c878d04\n","slug":"java/74CAAAFD610241A1B8ECDB5F3BB33EE4","published":1,"updated":"2021-10-08T07:57:24.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6egg002avpucanwnf05w","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>当用一下命令删除文件后，电脑磁盘内存没有恢复，还是原来的大小</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">File</span> <span class=\"variable\">folder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/tmp/file.mp4&quot;</span>)</span><br><span class=\"line\">file.delete();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>原来是 <code>FileOutputStream</code> 文件流忘了关了，导致一直占用这个资源。所以使用完后一定记得关文件流，使用下面的代码关闭文件流：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>());</span><br><span class=\"line\">fileOutputStream.close();</span><br></pre></td></tr></table></figure>\n\n<p><strong>Linux 里的文件被删除后，空间没有被释放是因为在 Linux 系统中，通过 rm 或者文件管理器删除文件将会从文件系统的目录结构上解除链接(unlink).然而如果文件是被打开的(有一个进程正在使用)，那么进程将仍然可以读取该文件，磁盘空间也一直被占用。</strong></p>\n<p>可以使用 <code>lsof +L1 |grep delete</code> 命令来查看状态为 <code>deleted</code> 的文件，状态为 <code>deleted</code> 为标记被删除，其实该文件并没有从磁盘中删除，类似windows下的回收站状态。</p>\n<p>所以当进程结束后，磁盘空间就会被释放。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://www.cxyzjd.com/article/su4416160/78212934\">http://www.cxyzjd.com/article/su4416160/78212934</a></li>\n<li><a href=\"https://www.jianshu.com/p/fcb80c878d04\">https://www.jianshu.com/p/fcb80c878d04</a></li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>当用一下命令删除文件后，电脑磁盘内存没有恢复，还是原来的大小</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">File</span> <span class=\"variable\">folder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/tmp/file.mp4&quot;</span>)</span><br><span class=\"line\">file.delete();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>原来是 <code>FileOutputStream</code> 文件流忘了关了，导致一直占用这个资源。所以使用完后一定记得关文件流，使用下面的代码关闭文件流：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">FileOutputStream</span> <span class=\"variable\">fileOutputStream</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>());</span><br><span class=\"line\">fileOutputStream.close();</span><br></pre></td></tr></table></figure>\n\n<p><strong>Linux 里的文件被删除后，空间没有被释放是因为在 Linux 系统中，通过 rm 或者文件管理器删除文件将会从文件系统的目录结构上解除链接(unlink).然而如果文件是被打开的(有一个进程正在使用)，那么进程将仍然可以读取该文件，磁盘空间也一直被占用。</strong></p>\n<p>可以使用 <code>lsof +L1 |grep delete</code> 命令来查看状态为 <code>deleted</code> 的文件，状态为 <code>deleted</code> 为标记被删除，其实该文件并没有从磁盘中删除，类似windows下的回收站状态。</p>\n<p>所以当进程结束后，磁盘空间就会被释放。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"http://www.cxyzjd.com/article/su4416160/78212934\">http://www.cxyzjd.com/article/su4416160/78212934</a></li>\n<li><a href=\"https://www.jianshu.com/p/fcb80c878d04\">https://www.jianshu.com/p/fcb80c878d04</a></li>\n</ul>\n"},{"title":"AviatorScript轻量级高性能脚本语言","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-08-17T08:10:53.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 简介\n\n在 `5.0` 版本以前，它的名字是叫 **Aviator** ，定位一直只是一个表达式引擎，不支持 if/else 条件语句（仅有三元运算符支持 `?:` ），没有内置的 for/while 循环支持（虽然你可以用 seq 库类似函数式的方式来处理集合），也没有赋值（后来在 4.0 引入），没有作用域的概念（也在 4.0 引入 lambda 函数后部分实现）等等一般语言常见的能力。在 `5.0` 版本后，它变成了一门脚本语言，叫：**AviatorScript** 。\n\n在 `5.0` ，新加了如下新特性：\n\n- `大括号 { ... }` 括起来的词法作用域。\n- `let` 语句用于定义局部变量。\n\n- 条件语句 `if/elsif/else` 。\n- 循环语句 `for` 和 `while` ，以及相应的 `break` 和 `continue` 语句支持。\n\n- `return` 语句用于从脚本或者函数中返回值。\n- `fn hello() { println(\"hello\"); }` 新的 fn 语法用于定义命名函数。\n\n- `## 单行注释` 注释支持\n- 模块系统\n\n- `new` 语法用于[创建对象](https://www.yuque.com/boyan-avfmj/aviatorscript/hzm6lr)\n- [异常处理](https://www.yuque.com/boyan-avfmj/aviatorscript/sikgal)\n\n- [命令行工具 aviator](https://www.yuque.com/boyan-avfmj/aviatorscript/ma3zs3)\n\n## 使用\n\n**AviatorScript** 可以单纯的作为脚本语言使用，也可以和 Java 配合使用。\n\n## 单纯的作为脚本语言使用\n\n作为脚本语言使用时，需要下载一个 `aviator`，然后用它去执行脚本文件。\n\n**下载：**\n\n执行下面命令下载，如果你电脑没有安装 `wget` 工具，你也可以直接打开 https://raw.githubusercontent.com/killme2008/aviator/master/bin/aviator，然后把里面的内容复制下来保存成一个可执行文件。**然后把它放在环境变量中，可以全局访问到它**\n\n```bash\n$ wget https://raw.githubusercontent.com/killme2008/aviator/master/bin/aviator\n$ chmod u+x aviator\n```\n\n**初始化：**\n\n下载完后，需要执行一下命令，它会自动在 `~/.aviatorscrip` 下载所需要的依赖。\n\n```bash\n╰─$ aviator\nDownloading AviatorScript now...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   148  100   148    0     0    249      0 --:--:-- --:--:-- --:--:--   248\n100   159  100   159    0     0    158      0  0:00:01  0:00:01 --:--:--   158\n100  583k  100  583k    0     0  51321      0  0:00:11  0:00:11 --:--:-- 35877\nUsage: java com.googlecode.aviator.Main [file] [args]\n     : java com.googlecode.aviator.Main -e [script]\n     : java com.googlecode.aviator.Main -v\n```\n\n**执行脚本文件：**\n\n下载好相关的环境后，就可以编写一个脚本文件了，文件名一般以 `.av` 结尾，这个不是必须的，你想以其他结尾也可以\n\n**test.av：**\n\n```javascript\nprintln(\"Hello World!\");\n```\n\n然后执行该脚本文件：\n\n```bash\n╰─$ aviator test.av\nHello World!\nnull\n```\n\n界面输出 `Hello World!`，最后一行的 `null` 表示是整个表达式的执行结果，就是返回值的意思，比如定义 `return` 时，这个 null 就会变成 return 的值，我们做如下更改：\n\n**test.av：**\n\n```javascript\nprintln(\"Hello World!\");\nreturn \"success\";\n```\n\n我们添加了一个 `return` 数据，然后执行这个脚本文件：\n\n```bash\n╰─$ aviator test.av\nHello World!\nsuccess\n```\n\n执行结果就会变成我们定义的 return 数据。\n\n具体的可参考文档 [**aviator 命令行**](https://www.yuque.com/boyan-avfmj/aviatorscript/ma3zs3)\n\n## 配合 Java 使用\n\n配合 Java 使用时，需要导入 Aviator 的依赖，可以在 [search.maven.org](https://search.maven.org/search?q=g:com.googlecode.aviator AND a:aviator&core=gav) 查看可用的版本。\n\n```xml\n<dependency>\n  <groupId>com.googlecode.aviator</groupId>\n  <artifactId>aviator</artifactId>\n  <version>{version}</version>\n</dependency>\n```\n\n导入依赖后，我们先来演示执行一个 `1+1` 操作：\n\n```java\nint result = (int) AviatorEvaluator.execute(\"return 1+1;\");\nSystem.out.println(result);\n```\n\n上面代码中，我们直接返回 `1+1` 的结果，然后输出，但是当我们执行的时候，就回报如下错误：\n\n```bash\nException in thread \"main\" java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.Integer\n\tat top.mjava.demo.AviatorDemo.demo5(AviatorDemo.java:19)\n\tat top.mjava.demo.AviatorDemo.main(AviatorDemo.java:15)\n```\n\n这是因为**在 Aviator 中任何整数都将被转换为 Long 类型**，而 Long 类型是不能转换为 Integer 类型的，所以会报上面的错误。所以我们要将 int 改为 long 即可：\n\n```java\nlong result = (long) AviatorEvaluator.execute(\"return 1+1;\");\nSystem.out.println(result);\n```\n\n输出：\n\n```bash\n2\n```\n\n### 挂载 Java 方法\n\n在 Aviator 中，除了可以使用它提供的法来创建函数外，还可以挂载 Java 的自定义方法，然后在 Aviator 脚本中使用。\n\n定义自定义的 Java 方法时，需要继承 `AbstractFunction` 抽象类，然后重写 `call` 和 `getName` 这两个方法：\n\n- call : 方法具体逻辑代码\n- getName : 在 Aviator 中使用时的函数名\n\n**定义自定义函数：**\n\n这边自定义了一个加法运算的方法，传入两个参数然后计算它们的和\n\n```java\nclass AddFunction extends AbstractFunction{\n\n    @Override\n    public AviatorObject call(Map<String, Object> env, AviatorObject arg1, AviatorObject arg2) {\n        long p1 = (long) arg1.getValue(env);\n        long p2 = (long) arg2.getValue(env);\n\n        long result = p1+p2;\n        return AviatorLong.valueOf(result);\n    }\n\n    @Override\n    public String getName() {\n        return \"add\";\n    }\n}\n```\n\n**使用自定义函数：**\n\n如果要在 Aviator 脚本中使用这个自定义的函数时，需要先注册这个 Java 类，然后在 Aviator 脚本中使用 `getName()` 返回的方法名作为函数名来调用：\n\n```java\n// 注册自定义函数\nAviatorEvaluator.addFunction(new AddFunction());\n// 使用自定义函数\nlong result = (long) AviatorEvaluator.execute(\"return add(2,1);\");\nSystem.out.println(result);\n```\n\n**输出：**\n\n```bash\n3\n```\n\n## 参考资料\n\n- https://www.yuque.com/boyan-avfmj/aviatorscript/cpow90\n- https://code.google.com/archive/p/aviator/wikis/User_Guide_zh.wiki\n- https://github.com/killme2008/aviatorscript\n","source":"_posts/java/CA3AB1D58EA74B76A5FD69F79DD5EC79.md","raw":"---\ntitle: AviatorScript轻量级高性能脚本语言\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-08-17 16:10:53\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 表达式引擎\n- Aviator\n- Java\ncategories:\n- Java\n---\n\n## 简介\n\n在 `5.0` 版本以前，它的名字是叫 **Aviator** ，定位一直只是一个表达式引擎，不支持 if/else 条件语句（仅有三元运算符支持 `?:` ），没有内置的 for/while 循环支持（虽然你可以用 seq 库类似函数式的方式来处理集合），也没有赋值（后来在 4.0 引入），没有作用域的概念（也在 4.0 引入 lambda 函数后部分实现）等等一般语言常见的能力。在 `5.0` 版本后，它变成了一门脚本语言，叫：**AviatorScript** 。\n\n在 `5.0` ，新加了如下新特性：\n\n- `大括号 { ... }` 括起来的词法作用域。\n- `let` 语句用于定义局部变量。\n\n- 条件语句 `if/elsif/else` 。\n- 循环语句 `for` 和 `while` ，以及相应的 `break` 和 `continue` 语句支持。\n\n- `return` 语句用于从脚本或者函数中返回值。\n- `fn hello() { println(\"hello\"); }` 新的 fn 语法用于定义命名函数。\n\n- `## 单行注释` 注释支持\n- 模块系统\n\n- `new` 语法用于[创建对象](https://www.yuque.com/boyan-avfmj/aviatorscript/hzm6lr)\n- [异常处理](https://www.yuque.com/boyan-avfmj/aviatorscript/sikgal)\n\n- [命令行工具 aviator](https://www.yuque.com/boyan-avfmj/aviatorscript/ma3zs3)\n\n## 使用\n\n**AviatorScript** 可以单纯的作为脚本语言使用，也可以和 Java 配合使用。\n\n## 单纯的作为脚本语言使用\n\n作为脚本语言使用时，需要下载一个 `aviator`，然后用它去执行脚本文件。\n\n**下载：**\n\n执行下面命令下载，如果你电脑没有安装 `wget` 工具，你也可以直接打开 https://raw.githubusercontent.com/killme2008/aviator/master/bin/aviator，然后把里面的内容复制下来保存成一个可执行文件。**然后把它放在环境变量中，可以全局访问到它**\n\n```bash\n$ wget https://raw.githubusercontent.com/killme2008/aviator/master/bin/aviator\n$ chmod u+x aviator\n```\n\n**初始化：**\n\n下载完后，需要执行一下命令，它会自动在 `~/.aviatorscrip` 下载所需要的依赖。\n\n```bash\n╰─$ aviator\nDownloading AviatorScript now...\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100   148  100   148    0     0    249      0 --:--:-- --:--:-- --:--:--   248\n100   159  100   159    0     0    158      0  0:00:01  0:00:01 --:--:--   158\n100  583k  100  583k    0     0  51321      0  0:00:11  0:00:11 --:--:-- 35877\nUsage: java com.googlecode.aviator.Main [file] [args]\n     : java com.googlecode.aviator.Main -e [script]\n     : java com.googlecode.aviator.Main -v\n```\n\n**执行脚本文件：**\n\n下载好相关的环境后，就可以编写一个脚本文件了，文件名一般以 `.av` 结尾，这个不是必须的，你想以其他结尾也可以\n\n**test.av：**\n\n```javascript\nprintln(\"Hello World!\");\n```\n\n然后执行该脚本文件：\n\n```bash\n╰─$ aviator test.av\nHello World!\nnull\n```\n\n界面输出 `Hello World!`，最后一行的 `null` 表示是整个表达式的执行结果，就是返回值的意思，比如定义 `return` 时，这个 null 就会变成 return 的值，我们做如下更改：\n\n**test.av：**\n\n```javascript\nprintln(\"Hello World!\");\nreturn \"success\";\n```\n\n我们添加了一个 `return` 数据，然后执行这个脚本文件：\n\n```bash\n╰─$ aviator test.av\nHello World!\nsuccess\n```\n\n执行结果就会变成我们定义的 return 数据。\n\n具体的可参考文档 [**aviator 命令行**](https://www.yuque.com/boyan-avfmj/aviatorscript/ma3zs3)\n\n## 配合 Java 使用\n\n配合 Java 使用时，需要导入 Aviator 的依赖，可以在 [search.maven.org](https://search.maven.org/search?q=g:com.googlecode.aviator AND a:aviator&core=gav) 查看可用的版本。\n\n```xml\n<dependency>\n  <groupId>com.googlecode.aviator</groupId>\n  <artifactId>aviator</artifactId>\n  <version>{version}</version>\n</dependency>\n```\n\n导入依赖后，我们先来演示执行一个 `1+1` 操作：\n\n```java\nint result = (int) AviatorEvaluator.execute(\"return 1+1;\");\nSystem.out.println(result);\n```\n\n上面代码中，我们直接返回 `1+1` 的结果，然后输出，但是当我们执行的时候，就回报如下错误：\n\n```bash\nException in thread \"main\" java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.Integer\n\tat top.mjava.demo.AviatorDemo.demo5(AviatorDemo.java:19)\n\tat top.mjava.demo.AviatorDemo.main(AviatorDemo.java:15)\n```\n\n这是因为**在 Aviator 中任何整数都将被转换为 Long 类型**，而 Long 类型是不能转换为 Integer 类型的，所以会报上面的错误。所以我们要将 int 改为 long 即可：\n\n```java\nlong result = (long) AviatorEvaluator.execute(\"return 1+1;\");\nSystem.out.println(result);\n```\n\n输出：\n\n```bash\n2\n```\n\n### 挂载 Java 方法\n\n在 Aviator 中，除了可以使用它提供的法来创建函数外，还可以挂载 Java 的自定义方法，然后在 Aviator 脚本中使用。\n\n定义自定义的 Java 方法时，需要继承 `AbstractFunction` 抽象类，然后重写 `call` 和 `getName` 这两个方法：\n\n- call : 方法具体逻辑代码\n- getName : 在 Aviator 中使用时的函数名\n\n**定义自定义函数：**\n\n这边自定义了一个加法运算的方法，传入两个参数然后计算它们的和\n\n```java\nclass AddFunction extends AbstractFunction{\n\n    @Override\n    public AviatorObject call(Map<String, Object> env, AviatorObject arg1, AviatorObject arg2) {\n        long p1 = (long) arg1.getValue(env);\n        long p2 = (long) arg2.getValue(env);\n\n        long result = p1+p2;\n        return AviatorLong.valueOf(result);\n    }\n\n    @Override\n    public String getName() {\n        return \"add\";\n    }\n}\n```\n\n**使用自定义函数：**\n\n如果要在 Aviator 脚本中使用这个自定义的函数时，需要先注册这个 Java 类，然后在 Aviator 脚本中使用 `getName()` 返回的方法名作为函数名来调用：\n\n```java\n// 注册自定义函数\nAviatorEvaluator.addFunction(new AddFunction());\n// 使用自定义函数\nlong result = (long) AviatorEvaluator.execute(\"return add(2,1);\");\nSystem.out.println(result);\n```\n\n**输出：**\n\n```bash\n3\n```\n\n## 参考资料\n\n- https://www.yuque.com/boyan-avfmj/aviatorscript/cpow90\n- https://code.google.com/archive/p/aviator/wikis/User_Guide_zh.wiki\n- https://github.com/killme2008/aviatorscript\n","slug":"java/CA3AB1D58EA74B76A5FD69F79DD5EC79","published":1,"updated":"2021-10-08T07:57:24.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6egn002evpucf2gc1mbr","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在 <code>5.0</code> 版本以前，它的名字是叫 <strong>Aviator</strong> ，定位一直只是一个表达式引擎，不支持 if&#x2F;else 条件语句（仅有三元运算符支持 <code>?:</code> ），没有内置的 for&#x2F;while 循环支持（虽然你可以用 seq 库类似函数式的方式来处理集合），也没有赋值（后来在 4.0 引入），没有作用域的概念（也在 4.0 引入 lambda 函数后部分实现）等等一般语言常见的能力。在 <code>5.0</code> 版本后，它变成了一门脚本语言，叫：<strong>AviatorScript</strong> 。</p>\n<p>在 <code>5.0</code> ，新加了如下新特性：</p>\n<ul>\n<li><p><code>大括号 &#123; ... &#125;</code> 括起来的词法作用域。</p>\n</li>\n<li><p><code>let</code> 语句用于定义局部变量。</p>\n</li>\n<li><p>条件语句 <code>if/elsif/else</code> 。</p>\n</li>\n<li><p>循环语句 <code>for</code> 和 <code>while</code> ，以及相应的 <code>break</code> 和 <code>continue</code> 语句支持。</p>\n</li>\n<li><p><code>return</code> 语句用于从脚本或者函数中返回值。</p>\n</li>\n<li><p><code>fn hello() &#123; println(&quot;hello&quot;); &#125;</code> 新的 fn 语法用于定义命名函数。</p>\n</li>\n<li><p><code>## 单行注释</code> 注释支持</p>\n</li>\n<li><p>模块系统</p>\n</li>\n<li><p><code>new</code> 语法用于<a href=\"https://www.yuque.com/boyan-avfmj/aviatorscript/hzm6lr\">创建对象</a></p>\n</li>\n<li><p><a href=\"https://www.yuque.com/boyan-avfmj/aviatorscript/sikgal\">异常处理</a></p>\n</li>\n<li><p><a href=\"https://www.yuque.com/boyan-avfmj/aviatorscript/ma3zs3\">命令行工具 aviator</a></p>\n</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><strong>AviatorScript</strong> 可以单纯的作为脚本语言使用，也可以和 Java 配合使用。</p>\n<h2 id=\"单纯的作为脚本语言使用\"><a href=\"#单纯的作为脚本语言使用\" class=\"headerlink\" title=\"单纯的作为脚本语言使用\"></a>单纯的作为脚本语言使用</h2><p>作为脚本语言使用时，需要下载一个 <code>aviator</code>，然后用它去执行脚本文件。</p>\n<p><strong>下载：</strong></p>\n<p>执行下面命令下载，如果你电脑没有安装 <code>wget</code> 工具，你也可以直接打开 <a href=\"https://raw.githubusercontent.com/killme2008/aviator/master/bin/aviator%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8A%8A%E9%87%8C%E9%9D%A2%E7%9A%84%E5%86%85%E5%AE%B9%E5%A4%8D%E5%88%B6%E4%B8%8B%E6%9D%A5%E4%BF%9D%E5%AD%98%E6%88%90%E4%B8%80%E4%B8%AA%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E3%80%82**%E7%84%B6%E5%90%8E%E6%8A%8A%E5%AE%83%E6%94%BE%E5%9C%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%B8%AD%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%85%A8%E5%B1%80%E8%AE%BF%E9%97%AE%E5%88%B0%E5%AE%83\">https://raw.githubusercontent.com/killme2008/aviator/master/bin/aviator，然后把里面的内容复制下来保存成一个可执行文件。**然后把它放在环境变量中，可以全局访问到它</a>**</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ wget https://raw.githubusercontent.com/killme2008/aviator/master/bin/aviator</span><br><span class=\"line\">$ <span class=\"built_in\">chmod</span> u+x aviator</span><br></pre></td></tr></table></figure>\n\n<p><strong>初始化：</strong></p>\n<p>下载完后，需要执行一下命令，它会自动在 <code>~/.aviatorscrip</code> 下载所需要的依赖。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">╰─$ aviator</span><br><span class=\"line\">Downloading AviatorScript now...</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100   148  100   148    0     0    249      0 --:--:-- --:--:-- --:--:--   248</span><br><span class=\"line\">100   159  100   159    0     0    158      0  0:00:01  0:00:01 --:--:--   158</span><br><span class=\"line\">100  583k  100  583k    0     0  51321      0  0:00:11  0:00:11 --:--:-- 35877</span><br><span class=\"line\">Usage: java com.googlecode.aviator.Main [file] [args]</span><br><span class=\"line\">     : java com.googlecode.aviator.Main -e [script]</span><br><span class=\"line\">     : java com.googlecode.aviator.Main -v</span><br></pre></td></tr></table></figure>\n\n<p><strong>执行脚本文件：</strong></p>\n<p>下载好相关的环境后，就可以编写一个脚本文件了，文件名一般以 <code>.av</code> 结尾，这个不是必须的，你想以其他结尾也可以</p>\n<p><strong>test.av：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">println</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后执行该脚本文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">╰─$ aviator test.av</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">null</span><br></pre></td></tr></table></figure>\n\n<p>界面输出 <code>Hello World!</code>，最后一行的 <code>null</code> 表示是整个表达式的执行结果，就是返回值的意思，比如定义 <code>return</code> 时，这个 null 就会变成 return 的值，我们做如下更改：</p>\n<p><strong>test.av：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">println</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>我们添加了一个 <code>return</code> 数据，然后执行这个脚本文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">╰─$ aviator test.av</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure>\n\n<p>执行结果就会变成我们定义的 return 数据。</p>\n<p>具体的可参考文档 <a href=\"https://www.yuque.com/boyan-avfmj/aviatorscript/ma3zs3\"><strong>aviator 命令行</strong></a></p>\n<h2 id=\"配合-Java-使用\"><a href=\"#配合-Java-使用\" class=\"headerlink\" title=\"配合 Java 使用\"></a>配合 Java 使用</h2><p>配合 Java 使用时，需要导入 Aviator 的依赖，可以在 [search.maven.org](<a href=\"https://search.maven.org/search?q=g:com.googlecode.aviator\">https://search.maven.org/search?q=g:com.googlecode.aviator</a> AND a:aviator&amp;core&#x3D;gav) 查看可用的版本。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.googlecode.aviator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aviator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>&#123;version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>导入依赖后，我们先来演示执行一个 <code>1+1</code> 操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) AviatorEvaluator.execute(<span class=\"string\">&quot;return 1+1;&quot;</span>);</span><br><span class=\"line\">System.out.println(result);</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，我们直接返回 <code>1+1</code> 的结果，然后输出，但是当我们执行的时候，就回报如下错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;main&quot;</span> java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.Integer</span><br><span class=\"line\">\tat top.mjava.demo.AviatorDemo.demo5(AviatorDemo.java:19)</span><br><span class=\"line\">\tat top.mjava.demo.AviatorDemo.main(AviatorDemo.java:15)</span><br></pre></td></tr></table></figure>\n\n<p>这是因为<strong>在 Aviator 中任何整数都将被转换为 Long 类型</strong>，而 Long 类型是不能转换为 Integer 类型的，所以会报上面的错误。所以我们要将 int 改为 long 即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>) AviatorEvaluator.execute(<span class=\"string\">&quot;return 1+1;&quot;</span>);</span><br><span class=\"line\">System.out.println(result);</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"挂载-Java-方法\"><a href=\"#挂载-Java-方法\" class=\"headerlink\" title=\"挂载 Java 方法\"></a>挂载 Java 方法</h3><p>在 Aviator 中，除了可以使用它提供的法来创建函数外，还可以挂载 Java 的自定义方法，然后在 Aviator 脚本中使用。</p>\n<p>定义自定义的 Java 方法时，需要继承 <code>AbstractFunction</code> 抽象类，然后重写 <code>call</code> 和 <code>getName</code> 这两个方法：</p>\n<ul>\n<li>call : 方法具体逻辑代码</li>\n<li>getName : 在 Aviator 中使用时的函数名</li>\n</ul>\n<p><strong>定义自定义函数：</strong></p>\n<p>这边自定义了一个加法运算的方法，传入两个参数然后计算它们的和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AddFunction</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractFunction</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AviatorObject <span class=\"title function_\">call</span><span class=\"params\">(Map&lt;String, Object&gt; env, AviatorObject arg1, AviatorObject arg2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">p1</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>) arg1.getValue(env);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">p2</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>) arg2.getValue(env);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> p1+p2;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> AviatorLong.valueOf(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;add&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用自定义函数：</strong></p>\n<p>如果要在 Aviator 脚本中使用这个自定义的函数时，需要先注册这个 Java 类，然后在 Aviator 脚本中使用 <code>getName()</code> 返回的方法名作为函数名来调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册自定义函数</span></span><br><span class=\"line\">AviatorEvaluator.addFunction(<span class=\"keyword\">new</span> <span class=\"title class_\">AddFunction</span>());</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义函数</span></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>) AviatorEvaluator.execute(<span class=\"string\">&quot;return add(2,1);&quot;</span>);</span><br><span class=\"line\">System.out.println(result);</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.yuque.com/boyan-avfmj/aviatorscript/cpow90\">https://www.yuque.com/boyan-avfmj/aviatorscript/cpow90</a></li>\n<li><a href=\"https://code.google.com/archive/p/aviator/wikis/User_Guide_zh.wiki\">https://code.google.com/archive/p/aviator/wikis/User_Guide_zh.wiki</a></li>\n<li><a href=\"https://github.com/killme2008/aviatorscript\">https://github.com/killme2008/aviatorscript</a></li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在 <code>5.0</code> 版本以前，它的名字是叫 <strong>Aviator</strong> ，定位一直只是一个表达式引擎，不支持 if&#x2F;else 条件语句（仅有三元运算符支持 <code>?:</code> ），没有内置的 for&#x2F;while 循环支持（虽然你可以用 seq 库类似函数式的方式来处理集合），也没有赋值（后来在 4.0 引入），没有作用域的概念（也在 4.0 引入 lambda 函数后部分实现）等等一般语言常见的能力。在 <code>5.0</code> 版本后，它变成了一门脚本语言，叫：<strong>AviatorScript</strong> 。</p>\n<p>在 <code>5.0</code> ，新加了如下新特性：</p>\n<ul>\n<li><p><code>大括号 &#123; ... &#125;</code> 括起来的词法作用域。</p>\n</li>\n<li><p><code>let</code> 语句用于定义局部变量。</p>\n</li>\n<li><p>条件语句 <code>if/elsif/else</code> 。</p>\n</li>\n<li><p>循环语句 <code>for</code> 和 <code>while</code> ，以及相应的 <code>break</code> 和 <code>continue</code> 语句支持。</p>\n</li>\n<li><p><code>return</code> 语句用于从脚本或者函数中返回值。</p>\n</li>\n<li><p><code>fn hello() &#123; println(&quot;hello&quot;); &#125;</code> 新的 fn 语法用于定义命名函数。</p>\n</li>\n<li><p><code>## 单行注释</code> 注释支持</p>\n</li>\n<li><p>模块系统</p>\n</li>\n<li><p><code>new</code> 语法用于<a href=\"https://www.yuque.com/boyan-avfmj/aviatorscript/hzm6lr\">创建对象</a></p>\n</li>\n<li><p><a href=\"https://www.yuque.com/boyan-avfmj/aviatorscript/sikgal\">异常处理</a></p>\n</li>\n<li><p><a href=\"https://www.yuque.com/boyan-avfmj/aviatorscript/ma3zs3\">命令行工具 aviator</a></p>\n</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><strong>AviatorScript</strong> 可以单纯的作为脚本语言使用，也可以和 Java 配合使用。</p>\n<h2 id=\"单纯的作为脚本语言使用\"><a href=\"#单纯的作为脚本语言使用\" class=\"headerlink\" title=\"单纯的作为脚本语言使用\"></a>单纯的作为脚本语言使用</h2><p>作为脚本语言使用时，需要下载一个 <code>aviator</code>，然后用它去执行脚本文件。</p>\n<p><strong>下载：</strong></p>\n<p>执行下面命令下载，如果你电脑没有安装 <code>wget</code> 工具，你也可以直接打开 <a href=\"https://raw.githubusercontent.com/killme2008/aviator/master/bin/aviator%EF%BC%8C%E7%84%B6%E5%90%8E%E6%8A%8A%E9%87%8C%E9%9D%A2%E7%9A%84%E5%86%85%E5%AE%B9%E5%A4%8D%E5%88%B6%E4%B8%8B%E6%9D%A5%E4%BF%9D%E5%AD%98%E6%88%90%E4%B8%80%E4%B8%AA%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E3%80%82**%E7%84%B6%E5%90%8E%E6%8A%8A%E5%AE%83%E6%94%BE%E5%9C%A8%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E4%B8%AD%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%85%A8%E5%B1%80%E8%AE%BF%E9%97%AE%E5%88%B0%E5%AE%83\">https://raw.githubusercontent.com/killme2008/aviator/master/bin/aviator，然后把里面的内容复制下来保存成一个可执行文件。**然后把它放在环境变量中，可以全局访问到它</a>**</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ wget https://raw.githubusercontent.com/killme2008/aviator/master/bin/aviator</span><br><span class=\"line\">$ <span class=\"built_in\">chmod</span> u+x aviator</span><br></pre></td></tr></table></figure>\n\n<p><strong>初始化：</strong></p>\n<p>下载完后，需要执行一下命令，它会自动在 <code>~/.aviatorscrip</code> 下载所需要的依赖。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">╰─$ aviator</span><br><span class=\"line\">Downloading AviatorScript now...</span><br><span class=\"line\">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class=\"line\">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class=\"line\">100   148  100   148    0     0    249      0 --:--:-- --:--:-- --:--:--   248</span><br><span class=\"line\">100   159  100   159    0     0    158      0  0:00:01  0:00:01 --:--:--   158</span><br><span class=\"line\">100  583k  100  583k    0     0  51321      0  0:00:11  0:00:11 --:--:-- 35877</span><br><span class=\"line\">Usage: java com.googlecode.aviator.Main [file] [args]</span><br><span class=\"line\">     : java com.googlecode.aviator.Main -e [script]</span><br><span class=\"line\">     : java com.googlecode.aviator.Main -v</span><br></pre></td></tr></table></figure>\n\n<p><strong>执行脚本文件：</strong></p>\n<p>下载好相关的环境后，就可以编写一个脚本文件了，文件名一般以 <code>.av</code> 结尾，这个不是必须的，你想以其他结尾也可以</p>\n<p><strong>test.av：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">println</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后执行该脚本文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">╰─$ aviator test.av</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">null</span><br></pre></td></tr></table></figure>\n\n<p>界面输出 <code>Hello World!</code>，最后一行的 <code>null</code> 表示是整个表达式的执行结果，就是返回值的意思，比如定义 <code>return</code> 时，这个 null 就会变成 return 的值，我们做如下更改：</p>\n<p><strong>test.av：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">println</span>(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">&quot;success&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>我们添加了一个 <code>return</code> 数据，然后执行这个脚本文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">╰─$ aviator test.av</span><br><span class=\"line\">Hello World!</span><br><span class=\"line\">success</span><br></pre></td></tr></table></figure>\n\n<p>执行结果就会变成我们定义的 return 数据。</p>\n<p>具体的可参考文档 <a href=\"https://www.yuque.com/boyan-avfmj/aviatorscript/ma3zs3\"><strong>aviator 命令行</strong></a></p>\n<h2 id=\"配合-Java-使用\"><a href=\"#配合-Java-使用\" class=\"headerlink\" title=\"配合 Java 使用\"></a>配合 Java 使用</h2><p>配合 Java 使用时，需要导入 Aviator 的依赖，可以在 [search.maven.org](<a href=\"https://search.maven.org/search?q=g:com.googlecode.aviator\">https://search.maven.org/search?q=g:com.googlecode.aviator</a> AND a:aviator&amp;core&#x3D;gav) 查看可用的版本。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.googlecode.aviator<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>aviator<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>&#123;version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>导入依赖后，我们先来演示执行一个 <code>1+1</code> 操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>) AviatorEvaluator.execute(<span class=\"string\">&quot;return 1+1;&quot;</span>);</span><br><span class=\"line\">System.out.println(result);</span><br></pre></td></tr></table></figure>\n\n<p>上面代码中，我们直接返回 <code>1+1</code> 的结果，然后输出，但是当我们执行的时候，就回报如下错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">Exception <span class=\"keyword\">in</span> thread <span class=\"string\">&quot;main&quot;</span> java.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.Integer</span><br><span class=\"line\">\tat top.mjava.demo.AviatorDemo.demo5(AviatorDemo.java:19)</span><br><span class=\"line\">\tat top.mjava.demo.AviatorDemo.main(AviatorDemo.java:15)</span><br></pre></td></tr></table></figure>\n\n<p>这是因为<strong>在 Aviator 中任何整数都将被转换为 Long 类型</strong>，而 Long 类型是不能转换为 Integer 类型的，所以会报上面的错误。所以我们要将 int 改为 long 即可：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>) AviatorEvaluator.execute(<span class=\"string\">&quot;return 1+1;&quot;</span>);</span><br><span class=\"line\">System.out.println(result);</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"挂载-Java-方法\"><a href=\"#挂载-Java-方法\" class=\"headerlink\" title=\"挂载 Java 方法\"></a>挂载 Java 方法</h3><p>在 Aviator 中，除了可以使用它提供的法来创建函数外，还可以挂载 Java 的自定义方法，然后在 Aviator 脚本中使用。</p>\n<p>定义自定义的 Java 方法时，需要继承 <code>AbstractFunction</code> 抽象类，然后重写 <code>call</code> 和 <code>getName</code> 这两个方法：</p>\n<ul>\n<li>call : 方法具体逻辑代码</li>\n<li>getName : 在 Aviator 中使用时的函数名</li>\n</ul>\n<p><strong>定义自定义函数：</strong></p>\n<p>这边自定义了一个加法运算的方法，传入两个参数然后计算它们的和</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AddFunction</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractFunction</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> AviatorObject <span class=\"title function_\">call</span><span class=\"params\">(Map&lt;String, Object&gt; env, AviatorObject arg1, AviatorObject arg2)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">p1</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>) arg1.getValue(env);</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">p2</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>) arg2.getValue(env);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> p1+p2;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> AviatorLong.valueOf(result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;add&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>使用自定义函数：</strong></p>\n<p>如果要在 Aviator 脚本中使用这个自定义的函数时，需要先注册这个 Java 类，然后在 Aviator 脚本中使用 <code>getName()</code> 返回的方法名作为函数名来调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注册自定义函数</span></span><br><span class=\"line\">AviatorEvaluator.addFunction(<span class=\"keyword\">new</span> <span class=\"title class_\">AddFunction</span>());</span><br><span class=\"line\"><span class=\"comment\">// 使用自定义函数</span></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (<span class=\"type\">long</span>) AviatorEvaluator.execute(<span class=\"string\">&quot;return add(2,1);&quot;</span>);</span><br><span class=\"line\">System.out.println(result);</span><br></pre></td></tr></table></figure>\n\n<p><strong>输出：</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://www.yuque.com/boyan-avfmj/aviatorscript/cpow90\">https://www.yuque.com/boyan-avfmj/aviatorscript/cpow90</a></li>\n<li><a href=\"https://code.google.com/archive/p/aviator/wikis/User_Guide_zh.wiki\">https://code.google.com/archive/p/aviator/wikis/User_Guide_zh.wiki</a></li>\n<li><a href=\"https://github.com/killme2008/aviatorscript\">https://github.com/killme2008/aviatorscript</a></li>\n</ul>\n"},{"title":"Java8 Stream方法大全","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-10T01:53:34.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n![Stream](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/java_8_stream.png)","source":"_posts/java/java-8-stream-method.md","raw":"---\ntitle: Java8 Stream方法大全\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-10 09:53:34\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\ncategories:\n- Java\n---\n\n![Stream](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/java_8_stream.png)","slug":"java/java-8-stream-method","published":1,"updated":"2021-10-08T08:33:52.432Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ego002fvpucg4zzca41","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/java_8_stream.png\" alt=\"Stream\"></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/java_8_stream.png\" alt=\"Stream\"></p>\n"},{"title":"Java数组的几种初始化方式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-09T02:22:12.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## 一维数组\n\n### 初始化容量\n\n```java\n/**\n* 定义容量为5,初始值为0的int一维数组\n*/\nint array[]=new int[5];\nint[] array2=new int[5];\n```\n\n### 初始化值\n\n```java\n/**\n* 初始化一维容量为5的一维数组的值\n*/\nint[] array10={1,2,3,4,5};\nint aray12[]={1,2,3,4,5};\n```\n\n\n\n\n\n## 二维数组\n\n> 二维数组初始化时必须要声明行数,列数可随意 \n\n\n### 初始化容量\n- 声明了列数的\n\n\n\n```java\n/**\n* 初始化一个5行5列的二维数组\n*/\nint[][] array3=new int[5][5];\nint []array4[]=new int[5][5];\nint array5[][]=new int[5][5];\n```\n\n\n-  未声明列数的\n\n\n\n> 此种方法初始化后如果要赋值的话要new一个数组,如果按照常规的方法赋值然后取值会报空指针异常\n```java\n/**\n* 初始化一个5行空列的二维数组\n*/\nint[][] array6=new int[5][];\nint []arra7[]=new int[5][];\nint array8[][]=new int[5][];\n```\n ```java\n/**\n* 赋值方法\n*/\nint[][] array6=new int[5][];\narray6[0]=new int[]{1,2,3};\nSystem.out.println(array6[0][0]);\n\n//输出:1\n ```\n\n\n#### 初始化值\n\n```java\n/**\n* 初始化并赋值一个2行3列的二维数组\n*/\nint[][] array13={{1,2,3},{4,5,6}};\nint []array14[]={{1,2,3},{4,5,6}};\nint array15[][]={{1,2,3},{4,5,6}};\n```\n\n\n\n## 总结\n\n​    其他像什么三维数组,多维数组初始化的方式都差不多,可以自己在IDE工具中试一下;","source":"_posts/java/java-array-init.md","raw":"---\ntitle: Java数组的几种初始化方式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-09 10:22:12\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\ncategories:\n- Java\n---\n\n\n\n## 一维数组\n\n### 初始化容量\n\n```java\n/**\n* 定义容量为5,初始值为0的int一维数组\n*/\nint array[]=new int[5];\nint[] array2=new int[5];\n```\n\n### 初始化值\n\n```java\n/**\n* 初始化一维容量为5的一维数组的值\n*/\nint[] array10={1,2,3,4,5};\nint aray12[]={1,2,3,4,5};\n```\n\n\n\n\n\n## 二维数组\n\n> 二维数组初始化时必须要声明行数,列数可随意 \n\n\n### 初始化容量\n- 声明了列数的\n\n\n\n```java\n/**\n* 初始化一个5行5列的二维数组\n*/\nint[][] array3=new int[5][5];\nint []array4[]=new int[5][5];\nint array5[][]=new int[5][5];\n```\n\n\n-  未声明列数的\n\n\n\n> 此种方法初始化后如果要赋值的话要new一个数组,如果按照常规的方法赋值然后取值会报空指针异常\n```java\n/**\n* 初始化一个5行空列的二维数组\n*/\nint[][] array6=new int[5][];\nint []arra7[]=new int[5][];\nint array8[][]=new int[5][];\n```\n ```java\n/**\n* 赋值方法\n*/\nint[][] array6=new int[5][];\narray6[0]=new int[]{1,2,3};\nSystem.out.println(array6[0][0]);\n\n//输出:1\n ```\n\n\n#### 初始化值\n\n```java\n/**\n* 初始化并赋值一个2行3列的二维数组\n*/\nint[][] array13={{1,2,3},{4,5,6}};\nint []array14[]={{1,2,3},{4,5,6}};\nint array15[][]={{1,2,3},{4,5,6}};\n```\n\n\n\n## 总结\n\n​    其他像什么三维数组,多维数组初始化的方式都差不多,可以自己在IDE工具中试一下;","slug":"java/java-array-init","published":1,"updated":"2021-10-08T07:57:24.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6egp002ivpuc7c9bawbd","content":"<h2 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h2><h3 id=\"初始化容量\"><a href=\"#初始化容量\" class=\"headerlink\" title=\"初始化容量\"></a>初始化容量</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 定义容量为5,初始值为0的int一维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> array[]=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"type\">int</span>[] array2=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化值\"><a href=\"#初始化值\" class=\"headerlink\" title=\"初始化值\"></a>初始化值</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 初始化一维容量为5的一维数组的值</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] array10=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> aray12[]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h2><blockquote>\n<p>二维数组初始化时必须要声明行数,列数可随意 </p>\n</blockquote>\n<h3 id=\"初始化容量-1\"><a href=\"#初始化容量-1\" class=\"headerlink\" title=\"初始化容量\"></a>初始化容量</h3><ul>\n<li>声明了列数的</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 初始化一个5行5列的二维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span>[][] array3=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> []array4[]=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> array5[][]=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>未声明列数的</li>\n</ul>\n<blockquote>\n<p>此种方法初始化后如果要赋值的话要new一个数组,如果按照常规的方法赋值然后取值会报空指针异常</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 初始化一个5行空列的二维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span>[][] array6=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>][];</span><br><span class=\"line\"><span class=\"type\">int</span> []arra7[]=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>][];</span><br><span class=\"line\"><span class=\"type\">int</span> array8[][]=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>][];</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 赋值方法</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span>[][] array6=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>][];</span><br><span class=\"line\">array6[<span class=\"number\">0</span>]=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">System.out.println(array6[<span class=\"number\">0</span>][<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出:1</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"初始化值-1\"><a href=\"#初始化值-1\" class=\"headerlink\" title=\"初始化值\"></a>初始化值</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 初始化并赋值一个2行3列的二维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span>[][] array13=&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> []array14[]=&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> array15[][]=&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    其他像什么三维数组,多维数组初始化的方式都差不多,可以自己在IDE工具中试一下;</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h2><h3 id=\"初始化容量\"><a href=\"#初始化容量\" class=\"headerlink\" title=\"初始化容量\"></a>初始化容量</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 定义容量为5,初始值为0的int一维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> array[]=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"type\">int</span>[] array2=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化值\"><a href=\"#初始化值\" class=\"headerlink\" title=\"初始化值\"></a>初始化值</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 初始化一维容量为5的一维数组的值</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span>[] array10=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> aray12[]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h2><blockquote>\n<p>二维数组初始化时必须要声明行数,列数可随意 </p>\n</blockquote>\n<h3 id=\"初始化容量-1\"><a href=\"#初始化容量-1\" class=\"headerlink\" title=\"初始化容量\"></a>初始化容量</h3><ul>\n<li>声明了列数的</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 初始化一个5行5列的二维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span>[][] array3=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> []array4[]=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> array5[][]=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>未声明列数的</li>\n</ul>\n<blockquote>\n<p>此种方法初始化后如果要赋值的话要new一个数组,如果按照常规的方法赋值然后取值会报空指针异常</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 初始化一个5行空列的二维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span>[][] array6=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>][];</span><br><span class=\"line\"><span class=\"type\">int</span> []arra7[]=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>][];</span><br><span class=\"line\"><span class=\"type\">int</span> array8[][]=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>][];</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 赋值方法</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span>[][] array6=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">5</span>][];</span><br><span class=\"line\">array6[<span class=\"number\">0</span>]=<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">System.out.println(array6[<span class=\"number\">0</span>][<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出:1</span></span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"初始化值-1\"><a href=\"#初始化值-1\" class=\"headerlink\" title=\"初始化值\"></a>初始化值</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 初始化并赋值一个2行3列的二维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span>[][] array13=&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> []array14[]=&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> array15[][]=&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    其他像什么三维数组,多维数组初始化的方式都差不多,可以自己在IDE工具中试一下;</p>\n"},{"title":"【源码解析】扒开ArrayList的外衣","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-03T11:13:31.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n> 积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。\n\n## 本文内容\n\n当然ArrayList里的方法不止这些，本文主要讲一些常用的方法\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200103101050.png)\n\n## 方法变量\n\n`Arraylist`里的方法变量主要有以下几个\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_005.png)\n\n\n\n## 构造方法\n\n### 有参构造\n\n#### 传入数组的大小\n\n##### 代码实现\n\n```java\nList<String> list=new ArrayList<>(5);\n```\n\n##### 源码解析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_004.png)\n\n#### 传入一个list对象\n\n其实这个就相当于把传入的list对象里的数据<font color=orange>复制</font>到新的ArrayList对象\n\n##### 代码实现\n\n```java\nList<String> list=new ArrayList<>(Arrays.asList(\"z\",\"m\",\"h\"));\n```\n\n> 这里用来`Arrays`工具类里的`asList`方法，它的源码里是直接返回一个List，有兴趣的可以去看看，这里就不介绍了\n\n##### 源码解析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_006.png)\n\n### 无参构造\n\n这个比较简单，直接赋值一个空数组\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\n```\n\n#### 源码解析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200103112943.png)\n\n## add方法\n\nadd一般常用的有两个方法，一个就是`add(E e)`在尾部添加数据，一个就是`add(int index,E element)`在指定位置插入元素\n\n### add(E e)\n\n这个是`Arrayist`的主要方法，平时用的也是最多的方法之一，所以源码比较复杂，比较长\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"灰灰HK\");\n```\n\n#### 源码解析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_007.png)\n\n- <font color=orange>ensureCapacityInternal(int minCapacity)</font>确保数组容量充足\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_009.png)\n\n- <font color=orange>calculateCapacity(Object[] elementData, int minCapacity)</font>\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_010.png)\n\n- 再回到<font color=orange>ensureExplicitCapacity(int minCapacity)</font>这个方法，这个方法先`修改次数加1`，然后判断`size+1`是不是比当前的数组容量大，如果比当前的数组容量大，则进行扩容操作，扩大容量为原数组的`1.5倍`\n\n> 比如第二次调用add方法，此时`size+1=2`, ` elementData.length=10`,为什么等于10呢？因为第一次默认把数组容量从0扩大到了10,这时`size+1`比`elementData.length`小，就不会进行扩容操作\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_011.png)\n\n- <font color=orange>grow(int minCapacity)</font>扩容\n\n> 这里调用`Arrays.copyOf()`方法进行复制操作，当进一步深入这个方法时，发现是由`System.arraycopy()`这个方法实现复制功能的，这个方法由`native`关键字修饰，表示不是由`Java`语言实现的，一般是c/cpp实现\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_012.png)\n\n#### 小结\n\n到这里，add的方法流程就走完了，其核心步骤：\n\n- 每次添加元素时判断数组容量是否充足\n\n- <font color=orange>第一次</font>添加元素，把数组容量扩容到10\n\n- 扩容时，除第一次，以后的每次扩容为<font color=orange>原大小的1.5倍</font>\n\n- 扩容后调用`System.arraycopy()`方法把原数组的元素复制到扩容后的新数组\n\n  \n\n### add(int index, E element)\n\n该方法为在指定位置插入元素，该位置及后面所有元素后移\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.add(0,\"灰灰\");\n```\n\n#### 源码解析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_013.png)\n\n> 可以看到，这边又用到了`System.arraycopy()`这个方法\n\n- <font color=orange>rangeCheckForAdd(int index)</font>判断是否越界\n\n> 这里他是和`size`对比，而不是和数组的`length`对比，我个人认为这样第一节省了空间，第二方便后面移动的操作\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_014.png)\n\n- <font color=orange>System.arraycopy()</font>拷贝数组\n\n```java\npublic static native void arraycopy(Object src,  int  srcPos,\n                             \t\tObject dest, int destPos,\n                                    int length)\n```\n\n> - src    原数组对象\n> - srcPos    原数组起始位置\n> - dest    目标数组\n> - destPos    目标数组起始位置\n> - length    复制多少个数据\n\n#### 小结\n\n插入方法其主要步骤如下:\n\n- 检查插入的位置是否越界\n- 检查数组容量是否充足，不充足进行扩容相关操作\n- 调用`System.arraycopy()`进行`index`及后面的元素后移\n\n## get方法\n\n### get(int index)\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.get(0);\n```\n\n#### 源码解析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_015.png)\n\n- <font color=orange>rangeCheck(int index)</font>判断是否越界\n\n> get个add方法判断越界的方法是不一样的，这边是`index>=size`,多了个`等于`，为什么要多个等于呢？因为数组是从0开始的，而size<font color=orange>相当于</font>是开始的从1开始的\n\n```java\nprivate void rangeCheck(int index) {\n    if (index >= size)\n        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n}\n```\n\n- <font color=orange>elementData(int index)</font>直接返回对应下标的数组元素\n\n```java\nE elementData(int index) {\n    return (E) elementData[index];\n}\n```\n\n#### 小结\n\nget方法比较简单，主要步骤为：\n\n- 检查是否越界\n- 返回对应元素\n\n## set方法\n\n### set(int index, E element)\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.set(0,\"灰灰\");\n```\n\n#### 源码解析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_016.png)\n\n## remove方法\n\n### remove(int index)\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.remove(0);\n```\n\n#### 源码解析\n\n> 当删除的元素为最后一个元素时，`numMoved`就小于0了，就不会进行移动元素的操作\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_017.png)\n\n### remove(Object o)\n\n> 这个方法在实际中用的比较少，因为`AraryList`是可以保存重复的元素，所以删除是<font color=orange>删除最早添加的元素</font>\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.remove(\"hk\");\n```\n\n#### 源码解析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_018.png)\n\n- <font color=orange>fastRemove(int index)</font>删除元素\n\n> 这个方法和remove(int index)内部的操作类似，不过这边不保存被删除的元素\n\n```java\nprivate void fastRemove(int index) {\n    modCount++;\n    int numMoved = size - index - 1;\n    if (numMoved > 0)\n        System.arraycopy(elementData, index+1, elementData, index,\n                         numMoved);\n    elementData[--size] = null; // clear to let GC do its work\n}\n```\n\n## clear方法\n\n### clear()\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.clear();\n```\n\n#### 源码分析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_019.png)\n\n## 总结\n\n`ArrayList`底层扩容或者移动数组元素时都调用了`System.arraycopy()`来进行相关操作，平时进行我们进行数组复制或移动的时候也可以调用这个方法了，这个性能比循环复制性能高多了，特别是在大量数据的时候。\n\n文章好几次出现了`modCount++`这个操作，这个`modCount`主要用户内部类的迭代器","source":"_posts/java/java-arraylist-source-1.md","raw":"---\ntitle: 【源码解析】扒开ArrayList的外衣\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-03 19:13:31\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\n- ArrayList\n- 源码解析\ncategories:\n- Java\n---\n\n> 积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。\n\n## 本文内容\n\n当然ArrayList里的方法不止这些，本文主要讲一些常用的方法\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200103101050.png)\n\n## 方法变量\n\n`Arraylist`里的方法变量主要有以下几个\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_005.png)\n\n\n\n## 构造方法\n\n### 有参构造\n\n#### 传入数组的大小\n\n##### 代码实现\n\n```java\nList<String> list=new ArrayList<>(5);\n```\n\n##### 源码解析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_004.png)\n\n#### 传入一个list对象\n\n其实这个就相当于把传入的list对象里的数据<font color=orange>复制</font>到新的ArrayList对象\n\n##### 代码实现\n\n```java\nList<String> list=new ArrayList<>(Arrays.asList(\"z\",\"m\",\"h\"));\n```\n\n> 这里用来`Arrays`工具类里的`asList`方法，它的源码里是直接返回一个List，有兴趣的可以去看看，这里就不介绍了\n\n##### 源码解析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_006.png)\n\n### 无参构造\n\n这个比较简单，直接赋值一个空数组\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\n```\n\n#### 源码解析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200103112943.png)\n\n## add方法\n\nadd一般常用的有两个方法，一个就是`add(E e)`在尾部添加数据，一个就是`add(int index,E element)`在指定位置插入元素\n\n### add(E e)\n\n这个是`Arrayist`的主要方法，平时用的也是最多的方法之一，所以源码比较复杂，比较长\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"灰灰HK\");\n```\n\n#### 源码解析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_007.png)\n\n- <font color=orange>ensureCapacityInternal(int minCapacity)</font>确保数组容量充足\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_009.png)\n\n- <font color=orange>calculateCapacity(Object[] elementData, int minCapacity)</font>\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_010.png)\n\n- 再回到<font color=orange>ensureExplicitCapacity(int minCapacity)</font>这个方法，这个方法先`修改次数加1`，然后判断`size+1`是不是比当前的数组容量大，如果比当前的数组容量大，则进行扩容操作，扩大容量为原数组的`1.5倍`\n\n> 比如第二次调用add方法，此时`size+1=2`, ` elementData.length=10`,为什么等于10呢？因为第一次默认把数组容量从0扩大到了10,这时`size+1`比`elementData.length`小，就不会进行扩容操作\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_011.png)\n\n- <font color=orange>grow(int minCapacity)</font>扩容\n\n> 这里调用`Arrays.copyOf()`方法进行复制操作，当进一步深入这个方法时，发现是由`System.arraycopy()`这个方法实现复制功能的，这个方法由`native`关键字修饰，表示不是由`Java`语言实现的，一般是c/cpp实现\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_012.png)\n\n#### 小结\n\n到这里，add的方法流程就走完了，其核心步骤：\n\n- 每次添加元素时判断数组容量是否充足\n\n- <font color=orange>第一次</font>添加元素，把数组容量扩容到10\n\n- 扩容时，除第一次，以后的每次扩容为<font color=orange>原大小的1.5倍</font>\n\n- 扩容后调用`System.arraycopy()`方法把原数组的元素复制到扩容后的新数组\n\n  \n\n### add(int index, E element)\n\n该方法为在指定位置插入元素，该位置及后面所有元素后移\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.add(0,\"灰灰\");\n```\n\n#### 源码解析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_013.png)\n\n> 可以看到，这边又用到了`System.arraycopy()`这个方法\n\n- <font color=orange>rangeCheckForAdd(int index)</font>判断是否越界\n\n> 这里他是和`size`对比，而不是和数组的`length`对比，我个人认为这样第一节省了空间，第二方便后面移动的操作\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_014.png)\n\n- <font color=orange>System.arraycopy()</font>拷贝数组\n\n```java\npublic static native void arraycopy(Object src,  int  srcPos,\n                             \t\tObject dest, int destPos,\n                                    int length)\n```\n\n> - src    原数组对象\n> - srcPos    原数组起始位置\n> - dest    目标数组\n> - destPos    目标数组起始位置\n> - length    复制多少个数据\n\n#### 小结\n\n插入方法其主要步骤如下:\n\n- 检查插入的位置是否越界\n- 检查数组容量是否充足，不充足进行扩容相关操作\n- 调用`System.arraycopy()`进行`index`及后面的元素后移\n\n## get方法\n\n### get(int index)\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.get(0);\n```\n\n#### 源码解析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_015.png)\n\n- <font color=orange>rangeCheck(int index)</font>判断是否越界\n\n> get个add方法判断越界的方法是不一样的，这边是`index>=size`,多了个`等于`，为什么要多个等于呢？因为数组是从0开始的，而size<font color=orange>相当于</font>是开始的从1开始的\n\n```java\nprivate void rangeCheck(int index) {\n    if (index >= size)\n        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n}\n```\n\n- <font color=orange>elementData(int index)</font>直接返回对应下标的数组元素\n\n```java\nE elementData(int index) {\n    return (E) elementData[index];\n}\n```\n\n#### 小结\n\nget方法比较简单，主要步骤为：\n\n- 检查是否越界\n- 返回对应元素\n\n## set方法\n\n### set(int index, E element)\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.set(0,\"灰灰\");\n```\n\n#### 源码解析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_016.png)\n\n## remove方法\n\n### remove(int index)\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.remove(0);\n```\n\n#### 源码解析\n\n> 当删除的元素为最后一个元素时，`numMoved`就小于0了，就不会进行移动元素的操作\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_017.png)\n\n### remove(Object o)\n\n> 这个方法在实际中用的比较少，因为`AraryList`是可以保存重复的元素，所以删除是<font color=orange>删除最早添加的元素</font>\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.remove(\"hk\");\n```\n\n#### 源码解析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_018.png)\n\n- <font color=orange>fastRemove(int index)</font>删除元素\n\n> 这个方法和remove(int index)内部的操作类似，不过这边不保存被删除的元素\n\n```java\nprivate void fastRemove(int index) {\n    modCount++;\n    int numMoved = size - index - 1;\n    if (numMoved > 0)\n        System.arraycopy(elementData, index+1, elementData, index,\n                         numMoved);\n    elementData[--size] = null; // clear to let GC do its work\n}\n```\n\n## clear方法\n\n### clear()\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.clear();\n```\n\n#### 源码分析\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_019.png)\n\n## 总结\n\n`ArrayList`底层扩容或者移动数组元素时都调用了`System.arraycopy()`来进行相关操作，平时进行我们进行数组复制或移动的时候也可以调用这个方法了，这个性能比循环复制性能高多了，特别是在大量数据的时候。\n\n文章好几次出现了`modCount++`这个操作，这个`modCount`主要用户内部类的迭代器","slug":"java/java-arraylist-source-1","published":1,"updated":"2021-10-08T09:00:10.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6egq002lvpuc9bfsc9ye","content":"<blockquote>\n<p>积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p>\n</blockquote>\n<h2 id=\"本文内容\"><a href=\"#本文内容\" class=\"headerlink\" title=\"本文内容\"></a>本文内容</h2><p>当然ArrayList里的方法不止这些，本文主要讲一些常用的方法</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200103101050.png\" alt=\"图片\"></p>\n<h2 id=\"方法变量\"><a href=\"#方法变量\" class=\"headerlink\" title=\"方法变量\"></a>方法变量</h2><p><code>Arraylist</code>里的方法变量主要有以下几个</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_005.png\" alt=\"图片\"></p>\n<h2 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h2><h3 id=\"有参构造\"><a href=\"#有参构造\" class=\"headerlink\" title=\"有参构造\"></a>有参构造</h3><h4 id=\"传入数组的大小\"><a href=\"#传入数组的大小\" class=\"headerlink\" title=\"传入数组的大小\"></a>传入数组的大小</h4><h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_004.png\" alt=\"图片\"></p>\n<h4 id=\"传入一个list对象\"><a href=\"#传入一个list对象\" class=\"headerlink\" title=\"传入一个list对象\"></a>传入一个list对象</h4><p>其实这个就相当于把传入的list对象里的数据<font color=orange>复制</font>到新的ArrayList对象</p>\n<h5 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"string\">&quot;z&quot;</span>,<span class=\"string\">&quot;m&quot;</span>,<span class=\"string\">&quot;h&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里用来<code>Arrays</code>工具类里的<code>asList</code>方法，它的源码里是直接返回一个List，有兴趣的可以去看看，这里就不介绍了</p>\n</blockquote>\n<h5 id=\"源码解析-1\"><a href=\"#源码解析-1\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_006.png\" alt=\"图片\"></p>\n<h3 id=\"无参构造\"><a href=\"#无参构造\" class=\"headerlink\" title=\"无参构造\"></a>无参构造</h3><p>这个比较简单，直接赋值一个空数组</p>\n<h4 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-2\"><a href=\"#源码解析-2\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200103112943.png\" alt=\"图片\"></p>\n<h2 id=\"add方法\"><a href=\"#add方法\" class=\"headerlink\" title=\"add方法\"></a>add方法</h2><p>add一般常用的有两个方法，一个就是<code>add(E e)</code>在尾部添加数据，一个就是<code>add(int index,E element)</code>在指定位置插入元素</p>\n<h3 id=\"add-E-e\"><a href=\"#add-E-e\" class=\"headerlink\" title=\"add(E e)\"></a>add(E e)</h3><p>这个是<code>Arrayist</code>的主要方法，平时用的也是最多的方法之一，所以源码比较复杂，比较长</p>\n<h4 id=\"代码实现-3\"><a href=\"#代码实现-3\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;灰灰HK&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-3\"><a href=\"#源码解析-3\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_007.png\" alt=\"图片\"></p>\n<ul>\n<li><font color=orange>ensureCapacityInternal(int minCapacity)</font>确保数组容量充足</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_009.png\" alt=\"图片\"></p>\n<ul>\n<li><font color=orange>calculateCapacity(Object[] elementData, int minCapacity)</font></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_010.png\" alt=\"图片\"></p>\n<ul>\n<li>再回到<font color=orange>ensureExplicitCapacity(int minCapacity)</font>这个方法，这个方法先<code>修改次数加1</code>，然后判断<code>size+1</code>是不是比当前的数组容量大，如果比当前的数组容量大，则进行扩容操作，扩大容量为原数组的<code>1.5倍</code></li>\n</ul>\n<blockquote>\n<p>比如第二次调用add方法，此时<code>size+1=2</code>, <code> elementData.length=10</code>,为什么等于10呢？因为第一次默认把数组容量从0扩大到了10,这时<code>size+1</code>比<code>elementData.length</code>小，就不会进行扩容操作</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_011.png\" alt=\"图片\"></p>\n<ul>\n<li><font color=orange>grow(int minCapacity)</font>扩容</li>\n</ul>\n<blockquote>\n<p>这里调用<code>Arrays.copyOf()</code>方法进行复制操作，当进一步深入这个方法时，发现是由<code>System.arraycopy()</code>这个方法实现复制功能的，这个方法由<code>native</code>关键字修饰，表示不是由<code>Java</code>语言实现的，一般是c&#x2F;cpp实现</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_012.png\" alt=\"图片\"></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>到这里，add的方法流程就走完了，其核心步骤：</p>\n<ul>\n<li><p>每次添加元素时判断数组容量是否充足</p>\n</li>\n<li><p><font color=orange>第一次</font>添加元素，把数组容量扩容到10</p>\n</li>\n<li><p>扩容时，除第一次，以后的每次扩容为<font color=orange>原大小的1.5倍</font></p>\n</li>\n<li><p>扩容后调用<code>System.arraycopy()</code>方法把原数组的元素复制到扩容后的新数组</p>\n</li>\n</ul>\n<h3 id=\"add-int-index-E-element\"><a href=\"#add-int-index-E-element\" class=\"headerlink\" title=\"add(int index, E element)\"></a>add(int index, E element)</h3><p>该方法为在指定位置插入元素，该位置及后面所有元素后移</p>\n<h4 id=\"代码实现-4\"><a href=\"#代码实现-4\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;hk&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"number\">0</span>,<span class=\"string\">&quot;灰灰&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-4\"><a href=\"#源码解析-4\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_013.png\" alt=\"图片\"></p>\n<blockquote>\n<p>可以看到，这边又用到了<code>System.arraycopy()</code>这个方法</p>\n</blockquote>\n<ul>\n<li><font color=orange>rangeCheckForAdd(int index)</font>判断是否越界</li>\n</ul>\n<blockquote>\n<p>这里他是和<code>size</code>对比，而不是和数组的<code>length</code>对比，我个人认为这样第一节省了空间，第二方便后面移动的操作</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_014.png\" alt=\"图片\"></p>\n<ul>\n<li><font color=orange>System.arraycopy()</font>拷贝数组</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">arraycopy</span><span class=\"params\">(Object src,  <span class=\"type\">int</span>  srcPos,</span></span><br><span class=\"line\"><span class=\"params\">                             \t\tObject dest, <span class=\"type\">int</span> destPos,</span></span><br><span class=\"line\"><span class=\"params\">                                    <span class=\"type\">int</span> length)</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>src    原数组对象</li>\n<li>srcPos    原数组起始位置</li>\n<li>dest    目标数组</li>\n<li>destPos    目标数组起始位置</li>\n<li>length    复制多少个数据</li>\n</ul>\n</blockquote>\n<h4 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>插入方法其主要步骤如下:</p>\n<ul>\n<li>检查插入的位置是否越界</li>\n<li>检查数组容量是否充足，不充足进行扩容相关操作</li>\n<li>调用<code>System.arraycopy()</code>进行<code>index</code>及后面的元素后移</li>\n</ul>\n<h2 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h2><h3 id=\"get-int-index\"><a href=\"#get-int-index\" class=\"headerlink\" title=\"get(int index)\"></a>get(int index)</h3><h4 id=\"代码实现-5\"><a href=\"#代码实现-5\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;hk&quot;</span>);</span><br><span class=\"line\">list.get(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-5\"><a href=\"#源码解析-5\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_015.png\" alt=\"图片\"></p>\n<ul>\n<li><font color=orange>rangeCheck(int index)</font>判断是否越界</li>\n</ul>\n<blockquote>\n<p>get个add方法判断越界的方法是不一样的，这边是<code>index&gt;=size</code>,多了个<code>等于</code>，为什么要多个等于呢？因为数组是从0开始的，而size<font color=orange>相当于</font>是开始的从1开始的</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rangeCheck</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= size)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><font color=orange>elementData(int index)</font>直接返回对应下标的数组元素</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">E <span class=\"title function_\">elementData</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (E) elementData[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>get方法比较简单，主要步骤为：</p>\n<ul>\n<li>检查是否越界</li>\n<li>返回对应元素</li>\n</ul>\n<h2 id=\"set方法\"><a href=\"#set方法\" class=\"headerlink\" title=\"set方法\"></a>set方法</h2><h3 id=\"set-int-index-E-element\"><a href=\"#set-int-index-E-element\" class=\"headerlink\" title=\"set(int index, E element)\"></a>set(int index, E element)</h3><h4 id=\"代码实现-6\"><a href=\"#代码实现-6\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;hk&quot;</span>);</span><br><span class=\"line\">list.set(<span class=\"number\">0</span>,<span class=\"string\">&quot;灰灰&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-6\"><a href=\"#源码解析-6\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_016.png\" alt=\"图片\"></p>\n<h2 id=\"remove方法\"><a href=\"#remove方法\" class=\"headerlink\" title=\"remove方法\"></a>remove方法</h2><h3 id=\"remove-int-index\"><a href=\"#remove-int-index\" class=\"headerlink\" title=\"remove(int index)\"></a>remove(int index)</h3><h4 id=\"代码实现-7\"><a href=\"#代码实现-7\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;hk&quot;</span>);</span><br><span class=\"line\">list.remove(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-7\"><a href=\"#源码解析-7\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><blockquote>\n<p>当删除的元素为最后一个元素时，<code>numMoved</code>就小于0了，就不会进行移动元素的操作</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_017.png\" alt=\"图片\"></p>\n<h3 id=\"remove-Object-o\"><a href=\"#remove-Object-o\" class=\"headerlink\" title=\"remove(Object o)\"></a>remove(Object o)</h3><blockquote>\n<p>这个方法在实际中用的比较少，因为<code>AraryList</code>是可以保存重复的元素，所以删除是<font color=orange>删除最早添加的元素</font></p>\n</blockquote>\n<h4 id=\"代码实现-8\"><a href=\"#代码实现-8\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;hk&quot;</span>);</span><br><span class=\"line\">list.remove(<span class=\"string\">&quot;hk&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-8\"><a href=\"#源码解析-8\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_018.png\" alt=\"图片\"></p>\n<ul>\n<li><font color=orange>fastRemove(int index)</font>删除元素</li>\n</ul>\n<blockquote>\n<p>这个方法和remove(int index)内部的操作类似，不过这边不保存被删除的元素</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fastRemove</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">numMoved</span> <span class=\"operator\">=</span> size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index,</span><br><span class=\"line\">                         numMoved);</span><br><span class=\"line\">    elementData[--size] = <span class=\"literal\">null</span>; <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"clear方法\"><a href=\"#clear方法\" class=\"headerlink\" title=\"clear方法\"></a>clear方法</h2><h3 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear()\"></a>clear()</h3><h4 id=\"代码实现-9\"><a href=\"#代码实现-9\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;hk&quot;</span>);</span><br><span class=\"line\">list.clear();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_019.png\" alt=\"图片\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>ArrayList</code>底层扩容或者移动数组元素时都调用了<code>System.arraycopy()</code>来进行相关操作，平时进行我们进行数组复制或移动的时候也可以调用这个方法了，这个性能比循环复制性能高多了，特别是在大量数据的时候。</p>\n<p>文章好几次出现了<code>modCount++</code>这个操作，这个<code>modCount</code>主要用户内部类的迭代器</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<blockquote>\n<p>积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p>\n</blockquote>\n<h2 id=\"本文内容\"><a href=\"#本文内容\" class=\"headerlink\" title=\"本文内容\"></a>本文内容</h2><p>当然ArrayList里的方法不止这些，本文主要讲一些常用的方法</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200103101050.png\" alt=\"图片\"></p>\n<h2 id=\"方法变量\"><a href=\"#方法变量\" class=\"headerlink\" title=\"方法变量\"></a>方法变量</h2><p><code>Arraylist</code>里的方法变量主要有以下几个</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_005.png\" alt=\"图片\"></p>\n<h2 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h2><h3 id=\"有参构造\"><a href=\"#有参构造\" class=\"headerlink\" title=\"有参构造\"></a>有参构造</h3><h4 id=\"传入数组的大小\"><a href=\"#传入数组的大小\" class=\"headerlink\" title=\"传入数组的大小\"></a>传入数组的大小</h4><h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_004.png\" alt=\"图片\"></p>\n<h4 id=\"传入一个list对象\"><a href=\"#传入一个list对象\" class=\"headerlink\" title=\"传入一个list对象\"></a>传入一个list对象</h4><p>其实这个就相当于把传入的list对象里的数据<font color=orange>复制</font>到新的ArrayList对象</p>\n<h5 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"string\">&quot;z&quot;</span>,<span class=\"string\">&quot;m&quot;</span>,<span class=\"string\">&quot;h&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里用来<code>Arrays</code>工具类里的<code>asList</code>方法，它的源码里是直接返回一个List，有兴趣的可以去看看，这里就不介绍了</p>\n</blockquote>\n<h5 id=\"源码解析-1\"><a href=\"#源码解析-1\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_006.png\" alt=\"图片\"></p>\n<h3 id=\"无参构造\"><a href=\"#无参构造\" class=\"headerlink\" title=\"无参构造\"></a>无参构造</h3><p>这个比较简单，直接赋值一个空数组</p>\n<h4 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-2\"><a href=\"#源码解析-2\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200103112943.png\" alt=\"图片\"></p>\n<h2 id=\"add方法\"><a href=\"#add方法\" class=\"headerlink\" title=\"add方法\"></a>add方法</h2><p>add一般常用的有两个方法，一个就是<code>add(E e)</code>在尾部添加数据，一个就是<code>add(int index,E element)</code>在指定位置插入元素</p>\n<h3 id=\"add-E-e\"><a href=\"#add-E-e\" class=\"headerlink\" title=\"add(E e)\"></a>add(E e)</h3><p>这个是<code>Arrayist</code>的主要方法，平时用的也是最多的方法之一，所以源码比较复杂，比较长</p>\n<h4 id=\"代码实现-3\"><a href=\"#代码实现-3\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;灰灰HK&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-3\"><a href=\"#源码解析-3\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_007.png\" alt=\"图片\"></p>\n<ul>\n<li><font color=orange>ensureCapacityInternal(int minCapacity)</font>确保数组容量充足</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_009.png\" alt=\"图片\"></p>\n<ul>\n<li><font color=orange>calculateCapacity(Object[] elementData, int minCapacity)</font></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_010.png\" alt=\"图片\"></p>\n<ul>\n<li>再回到<font color=orange>ensureExplicitCapacity(int minCapacity)</font>这个方法，这个方法先<code>修改次数加1</code>，然后判断<code>size+1</code>是不是比当前的数组容量大，如果比当前的数组容量大，则进行扩容操作，扩大容量为原数组的<code>1.5倍</code></li>\n</ul>\n<blockquote>\n<p>比如第二次调用add方法，此时<code>size+1=2</code>, <code> elementData.length=10</code>,为什么等于10呢？因为第一次默认把数组容量从0扩大到了10,这时<code>size+1</code>比<code>elementData.length</code>小，就不会进行扩容操作</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_011.png\" alt=\"图片\"></p>\n<ul>\n<li><font color=orange>grow(int minCapacity)</font>扩容</li>\n</ul>\n<blockquote>\n<p>这里调用<code>Arrays.copyOf()</code>方法进行复制操作，当进一步深入这个方法时，发现是由<code>System.arraycopy()</code>这个方法实现复制功能的，这个方法由<code>native</code>关键字修饰，表示不是由<code>Java</code>语言实现的，一般是c&#x2F;cpp实现</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_012.png\" alt=\"图片\"></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>到这里，add的方法流程就走完了，其核心步骤：</p>\n<ul>\n<li><p>每次添加元素时判断数组容量是否充足</p>\n</li>\n<li><p><font color=orange>第一次</font>添加元素，把数组容量扩容到10</p>\n</li>\n<li><p>扩容时，除第一次，以后的每次扩容为<font color=orange>原大小的1.5倍</font></p>\n</li>\n<li><p>扩容后调用<code>System.arraycopy()</code>方法把原数组的元素复制到扩容后的新数组</p>\n</li>\n</ul>\n<h3 id=\"add-int-index-E-element\"><a href=\"#add-int-index-E-element\" class=\"headerlink\" title=\"add(int index, E element)\"></a>add(int index, E element)</h3><p>该方法为在指定位置插入元素，该位置及后面所有元素后移</p>\n<h4 id=\"代码实现-4\"><a href=\"#代码实现-4\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;hk&quot;</span>);</span><br><span class=\"line\">list.add(<span class=\"number\">0</span>,<span class=\"string\">&quot;灰灰&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-4\"><a href=\"#源码解析-4\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_013.png\" alt=\"图片\"></p>\n<blockquote>\n<p>可以看到，这边又用到了<code>System.arraycopy()</code>这个方法</p>\n</blockquote>\n<ul>\n<li><font color=orange>rangeCheckForAdd(int index)</font>判断是否越界</li>\n</ul>\n<blockquote>\n<p>这里他是和<code>size</code>对比，而不是和数组的<code>length</code>对比，我个人认为这样第一节省了空间，第二方便后面移动的操作</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_014.png\" alt=\"图片\"></p>\n<ul>\n<li><font color=orange>System.arraycopy()</font>拷贝数组</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">arraycopy</span><span class=\"params\">(Object src,  <span class=\"type\">int</span>  srcPos,</span></span><br><span class=\"line\"><span class=\"params\">                             \t\tObject dest, <span class=\"type\">int</span> destPos,</span></span><br><span class=\"line\"><span class=\"params\">                                    <span class=\"type\">int</span> length)</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>src    原数组对象</li>\n<li>srcPos    原数组起始位置</li>\n<li>dest    目标数组</li>\n<li>destPos    目标数组起始位置</li>\n<li>length    复制多少个数据</li>\n</ul>\n</blockquote>\n<h4 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>插入方法其主要步骤如下:</p>\n<ul>\n<li>检查插入的位置是否越界</li>\n<li>检查数组容量是否充足，不充足进行扩容相关操作</li>\n<li>调用<code>System.arraycopy()</code>进行<code>index</code>及后面的元素后移</li>\n</ul>\n<h2 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h2><h3 id=\"get-int-index\"><a href=\"#get-int-index\" class=\"headerlink\" title=\"get(int index)\"></a>get(int index)</h3><h4 id=\"代码实现-5\"><a href=\"#代码实现-5\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;hk&quot;</span>);</span><br><span class=\"line\">list.get(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-5\"><a href=\"#源码解析-5\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_015.png\" alt=\"图片\"></p>\n<ul>\n<li><font color=orange>rangeCheck(int index)</font>判断是否越界</li>\n</ul>\n<blockquote>\n<p>get个add方法判断越界的方法是不一样的，这边是<code>index&gt;=size</code>,多了个<code>等于</code>，为什么要多个等于呢？因为数组是从0开始的，而size<font color=orange>相当于</font>是开始的从1开始的</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rangeCheck</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= size)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IndexOutOfBoundsException</span>(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><font color=orange>elementData(int index)</font>直接返回对应下标的数组元素</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">E <span class=\"title function_\">elementData</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (E) elementData[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>get方法比较简单，主要步骤为：</p>\n<ul>\n<li>检查是否越界</li>\n<li>返回对应元素</li>\n</ul>\n<h2 id=\"set方法\"><a href=\"#set方法\" class=\"headerlink\" title=\"set方法\"></a>set方法</h2><h3 id=\"set-int-index-E-element\"><a href=\"#set-int-index-E-element\" class=\"headerlink\" title=\"set(int index, E element)\"></a>set(int index, E element)</h3><h4 id=\"代码实现-6\"><a href=\"#代码实现-6\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;hk&quot;</span>);</span><br><span class=\"line\">list.set(<span class=\"number\">0</span>,<span class=\"string\">&quot;灰灰&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-6\"><a href=\"#源码解析-6\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_016.png\" alt=\"图片\"></p>\n<h2 id=\"remove方法\"><a href=\"#remove方法\" class=\"headerlink\" title=\"remove方法\"></a>remove方法</h2><h3 id=\"remove-int-index\"><a href=\"#remove-int-index\" class=\"headerlink\" title=\"remove(int index)\"></a>remove(int index)</h3><h4 id=\"代码实现-7\"><a href=\"#代码实现-7\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;hk&quot;</span>);</span><br><span class=\"line\">list.remove(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-7\"><a href=\"#源码解析-7\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><blockquote>\n<p>当删除的元素为最后一个元素时，<code>numMoved</code>就小于0了，就不会进行移动元素的操作</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_017.png\" alt=\"图片\"></p>\n<h3 id=\"remove-Object-o\"><a href=\"#remove-Object-o\" class=\"headerlink\" title=\"remove(Object o)\"></a>remove(Object o)</h3><blockquote>\n<p>这个方法在实际中用的比较少，因为<code>AraryList</code>是可以保存重复的元素，所以删除是<font color=orange>删除最早添加的元素</font></p>\n</blockquote>\n<h4 id=\"代码实现-8\"><a href=\"#代码实现-8\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;hk&quot;</span>);</span><br><span class=\"line\">list.remove(<span class=\"string\">&quot;hk&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-8\"><a href=\"#源码解析-8\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_018.png\" alt=\"图片\"></p>\n<ul>\n<li><font color=orange>fastRemove(int index)</font>删除元素</li>\n</ul>\n<blockquote>\n<p>这个方法和remove(int index)内部的操作类似，不过这边不保存被删除的元素</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fastRemove</span><span class=\"params\">(<span class=\"type\">int</span> index)</span> &#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">numMoved</span> <span class=\"operator\">=</span> size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index,</span><br><span class=\"line\">                         numMoved);</span><br><span class=\"line\">    elementData[--size] = <span class=\"literal\">null</span>; <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"clear方法\"><a href=\"#clear方法\" class=\"headerlink\" title=\"clear方法\"></a>clear方法</h2><h3 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear()\"></a>clear()</h3><h4 id=\"代码实现-9\"><a href=\"#代码实现-9\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">&quot;hk&quot;</span>);</span><br><span class=\"line\">list.clear();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Selection_019.png\" alt=\"图片\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>ArrayList</code>底层扩容或者移动数组元素时都调用了<code>System.arraycopy()</code>来进行相关操作，平时进行我们进行数组复制或移动的时候也可以调用这个方法了，这个性能比循环复制性能高多了，特别是在大量数据的时候。</p>\n<p>文章好几次出现了<code>modCount++</code>这个操作，这个<code>modCount</code>主要用户内部类的迭代器</p>\n"},{"title":"【源码解析】你真的了解ArrayDeque嘛？","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-08T06:00:51.000Z","password":null,"summary":null,"keywords":null,"description":"LinkedList和ArrayDeque都是通过实现了Deque这个接口来获得队列和栈的功能。而Deque这个接口通过继承Queue这个接口来取得队列功能，然后在这个基础进行扩展，实现了双端队列，由此可以获得栈的功能。为了空间能得到充分利用，ArrayDeque使用了循环队列；还有LinkedList可以插入null值，而ArrayDeque是不能插入null的。","_content":"\n<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p>\n</blockquote>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">前言</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上篇文章说<a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>也可以实现<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能，但是我们一般要用队列功能的话推荐使用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>,因为他层是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">数组</strong>，而队列和栈都是只要<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">操作头部或尾部</strong>，所以这样的话数组的性能就比链表快一点。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>都是通过实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口来获得<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能。而<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口通过继承<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Queue</code>这个接口来取得队列功能，然后在这个基础进行扩展，实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">双端队列</code>，由此可以获得<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能。为了空间能得到充分利用，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>使用了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">循环队列</code>；还有<a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>可以插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值，而<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>是不能插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>的。</p>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">什么是双端队列？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">简单来说，就是两端都可以操作的队列（🌚说了和没说一样…）。哈哈，还是看图吧</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">一般队列是这样的：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108104246.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">双端队列是这样的</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108104215.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">总的来说，普通队列只可在头部删除元素和尾部添加元素，而双端队列头部和尾部都可以添加和删除元素</strong></p>\n<h2 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">什么是循环队列？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">不如说你定了个5容量大小的数组，你第一次插入的位置是下标为2，当你添加第4个元素的时候，他不会进行扩容，而是通过<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头尾指针</strong>进行对比，然后把数据插入到下标为0的位置上。当<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头尾指针相等时</strong>，表示这个队列数组已经满了，这时才会扩容。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108104300.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里的数组从上向下的顺序，有人会问为什么头尾指针都指向第三个方格呢？因为这边演示的是第一个元素插入到下标为2的位置嘛。。当然，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>是从0开始的，所以初始化时头尾指针都是指向下标为0的位置上。</p>\n</blockquote>\n<h2 id=\"hdeque\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">Deque有什么？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">话不多说，看图：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200107134323.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>具体实现的方法主要在蓝色的方框里，其他两个颜色的方框都是通过调用蓝色方框里的这些方法来实现相关功能的，可以再看一张我画的脑图：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200107232905.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这边队列的每种功能都有两个方法，其中<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">remove()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">element()</code>如果操作失败会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">报异常</strong>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">offer()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">poll()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">peek()</code>操作失败会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">返回null或者false</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">其实真正用到的就<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">深红色方框</strong>里写的这些方法，所以本文我就说这四个方法，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addLast()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">pollFirst</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">getFirst()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addFirst()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">peekFirst</code>；</p>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">内部变量</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">ArrayDeque内部就只有4个变量，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">对象数组element[]</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头指针head</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">尾指针tail</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">MIN_INITIAL_CAPACITY表示最小初始化容量为8</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200107235523.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">构造方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">构造方法和其他集合一样，有<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">有参构造</strong>和<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">无参构造</strong></p>\n<h3 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">无参构造</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">很简单，直接初始化一个<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">容量为16</strong>的对象数组</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;Object[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">16</span>];<br>}<br></code></pre>\n<h3 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">有参构造</span></h3>\n<h4 id=\"hint\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">传入参数为int数</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(numElements);<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">allocateElements(int numElements)</strong>分配空数组以容纳给定数量的元素。</li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">allocateElements</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;Object[calculateSize(numElements)];<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">calculateSize(int numElements)</strong>调整传入的值大小</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108003104.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">上面的算法中用到了位运算，如果不了解位运算的话，可以看<a href=\"https://mjava.top/java/java-base-wei/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">位运算</a>这篇文章。这里把数值设置成2的n次方(是整数次)，是为了满足下面要说的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">循环队列</code>这个算法</strong></p>\n<h4 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">传入的参数为集合对象</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(c.size());<br>&nbsp;&nbsp;&nbsp;&nbsp;addAll(c);<br>}<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">第一步调用了和上面一样的方法，这里多了个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addAll()</code>方法</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">addAll(Collection<!--? extends E--> c)</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108003710.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这边复制时并没有用和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>一样的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">System.arraycopy()</code>方法，而是采用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">for循环</code>来调用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>方法进行一个一个添加的；为什么这么做呢？因为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>和其他集合不一样，它里面是不能有<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值的，而其他集合里面有的是可以传<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>的，所以这边采用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>一个一个的加，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>方法如果传入的值为空的话，就会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">报异常</strong>；（add()实际调用的是addLast()，下面再讲）</p>\n</blockquote>\n<h2 id=\"haddlast\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">addLast()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这个方法的意思是添加数据到尾部，下面图片方框中的位与算法是实现循环队列这个功能的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">核心算法</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">还记得上面初始化时候，不管传入的是什么数值，最后出来的都是<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>(整数次)方。这个算法就是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>右边为<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span>时，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为0时，结果为0；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为负数时，-1=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span></strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">举一些例子：当<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span><span class=\"mrel\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">=</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">8</span></span></span></span>，<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span><span class=\"mrel\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">=</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">7</span></span></span></span></p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">4&amp;7=4    9&amp;7=1    22&amp;7=6</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">0&amp;7=0</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">-1&amp;7=7    -2&amp;7=6    -8&amp;7=0</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108095155.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">doubleCapacity()</strong>扩容为原来的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">2倍</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108103710.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">方便理解，我画下上扩容的流程图，比如head在中间：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108112208.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hpollfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">pollFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">移除头部数据</p>\n<h3 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108114243.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">删除的时候并没有像<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>一样移动数据，而只是移动了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的位置</p>\n</blockquote>\n<h3 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108114844.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hgetfirstpeekfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">getFirst()和peekFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这两个方法都是一样的，都是直接返回<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的数据，区别就是一个会抛异常，一个不会</p>\n<h3 id=\"h-12\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码分析</span></h3>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">getFirst()</strong></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;E&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">getFirst</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">@SuppressWarnings</span>(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"unchecked\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;result&nbsp;=&nbsp;(E)&nbsp;elements[head];<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;(result&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">null</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;NoSuchElementException();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;result;<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">peekFirst()</strong></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;E&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">peekFirst</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;elements[head]&nbsp;is&nbsp;null&nbsp;if&nbsp;deque&nbsp;empty</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;(E)&nbsp;elements[head];<br>}<br></code></pre>\n<h2 id=\"haddfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">addFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-13\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108131919.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这里还是用了上面讲了位与算法，算出<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>的值，然后插入数据</p>\n<h3 id=\"h-14\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108133154.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hclear\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-15\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">清空这个操作是从<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的元素开始删除，直到<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>=<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">tail</code>，清空完成；</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108134034.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hsize\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">size()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个获取队列的大小也是用了上面讲的位与算法，用尾部减去了头部，然后位与数组的长度-1。为什么要这么弄呢？直接向<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>一样定义个size不好嘛？<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">你不觉得这样更方便吗？少了一个变量，就少维护了一个变量，就少了一个安全隐患啊</strong></p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">size</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;(tail&nbsp;-&nbsp;head)&nbsp;&amp;&nbsp;(elements.length&nbsp;-&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>);<br>}<br></code></pre>\n<h2 id=\"h-16\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上面的方法基本上有<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">位与</code>这个算法的身影，可见这个是核心了；如果不了解位运算的话，可以看<a href=\"https://mjava.top/java/java-base-wei/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">位运算</a>这篇文章；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">核心算法：</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>右边为<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span>时，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为0时，结果为0；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为负数时，-1=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span></strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>无参构造方法是直接初始化一个容量为16的空数组，而上篇<a href=\"https://mjava.top/java/java-arraylist-source-1\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">ArrayList</a>文章里，它无参构造方法是初始化了一个<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">空数组</strong>，在第一次添加数据的时候才进行扩容到10；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>每次扩容为原来数组长度的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">2倍</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>不能插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值</p></div>","source":"_posts/java/java-arraydeque-source-1.md","raw":"---\ntitle: 【源码解析】你真的了解ArrayDeque嘛？\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-08 14:00:51\npassword:\nsummary:\nkeywords:\ndescription: LinkedList和ArrayDeque都是通过实现了Deque这个接口来获得队列和栈的功能。而Deque这个接口通过继承Queue这个接口来取得队列功能，然后在这个基础进行扩展，实现了双端队列，由此可以获得栈的功能。为了空间能得到充分利用，ArrayDeque使用了循环队列；还有LinkedList可以插入null值，而ArrayDeque是不能插入null的。\ntags:\n- Java\n- 源码解析\n- ArrayDeque\ncategories:\n- Java\n---\n\n<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p>\n</blockquote>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">前言</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上篇文章说<a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>也可以实现<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能，但是我们一般要用队列功能的话推荐使用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>,因为他层是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">数组</strong>，而队列和栈都是只要<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">操作头部或尾部</strong>，所以这样的话数组的性能就比链表快一点。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>都是通过实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口来获得<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能。而<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口通过继承<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Queue</code>这个接口来取得队列功能，然后在这个基础进行扩展，实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">双端队列</code>，由此可以获得<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能。为了空间能得到充分利用，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>使用了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">循环队列</code>；还有<a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>可以插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值，而<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>是不能插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>的。</p>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">什么是双端队列？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">简单来说，就是两端都可以操作的队列（🌚说了和没说一样…）。哈哈，还是看图吧</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">一般队列是这样的：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108104246.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">双端队列是这样的</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108104215.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">总的来说，普通队列只可在头部删除元素和尾部添加元素，而双端队列头部和尾部都可以添加和删除元素</strong></p>\n<h2 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">什么是循环队列？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">不如说你定了个5容量大小的数组，你第一次插入的位置是下标为2，当你添加第4个元素的时候，他不会进行扩容，而是通过<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头尾指针</strong>进行对比，然后把数据插入到下标为0的位置上。当<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头尾指针相等时</strong>，表示这个队列数组已经满了，这时才会扩容。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108104300.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里的数组从上向下的顺序，有人会问为什么头尾指针都指向第三个方格呢？因为这边演示的是第一个元素插入到下标为2的位置嘛。。当然，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>是从0开始的，所以初始化时头尾指针都是指向下标为0的位置上。</p>\n</blockquote>\n<h2 id=\"hdeque\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">Deque有什么？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">话不多说，看图：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200107134323.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>具体实现的方法主要在蓝色的方框里，其他两个颜色的方框都是通过调用蓝色方框里的这些方法来实现相关功能的，可以再看一张我画的脑图：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200107232905.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这边队列的每种功能都有两个方法，其中<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">remove()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">element()</code>如果操作失败会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">报异常</strong>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">offer()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">poll()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">peek()</code>操作失败会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">返回null或者false</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">其实真正用到的就<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">深红色方框</strong>里写的这些方法，所以本文我就说这四个方法，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addLast()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">pollFirst</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">getFirst()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addFirst()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">peekFirst</code>；</p>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">内部变量</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">ArrayDeque内部就只有4个变量，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">对象数组element[]</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头指针head</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">尾指针tail</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">MIN_INITIAL_CAPACITY表示最小初始化容量为8</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200107235523.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">构造方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">构造方法和其他集合一样，有<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">有参构造</strong>和<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">无参构造</strong></p>\n<h3 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">无参构造</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">很简单，直接初始化一个<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">容量为16</strong>的对象数组</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;Object[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">16</span>];<br>}<br></code></pre>\n<h3 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">有参构造</span></h3>\n<h4 id=\"hint\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">传入参数为int数</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(numElements);<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">allocateElements(int numElements)</strong>分配空数组以容纳给定数量的元素。</li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">allocateElements</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;Object[calculateSize(numElements)];<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">calculateSize(int numElements)</strong>调整传入的值大小</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108003104.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">上面的算法中用到了位运算，如果不了解位运算的话，可以看<a href=\"https://mjava.top/java/java-base-wei/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">位运算</a>这篇文章。这里把数值设置成2的n次方(是整数次)，是为了满足下面要说的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">循环队列</code>这个算法</strong></p>\n<h4 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">传入的参数为集合对象</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(c.size());<br>&nbsp;&nbsp;&nbsp;&nbsp;addAll(c);<br>}<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">第一步调用了和上面一样的方法，这里多了个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addAll()</code>方法</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">addAll(Collection<!--? extends E--> c)</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108003710.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这边复制时并没有用和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>一样的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">System.arraycopy()</code>方法，而是采用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">for循环</code>来调用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>方法进行一个一个添加的；为什么这么做呢？因为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>和其他集合不一样，它里面是不能有<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值的，而其他集合里面有的是可以传<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>的，所以这边采用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>一个一个的加，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>方法如果传入的值为空的话，就会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">报异常</strong>；（add()实际调用的是addLast()，下面再讲）</p>\n</blockquote>\n<h2 id=\"haddlast\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">addLast()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这个方法的意思是添加数据到尾部，下面图片方框中的位与算法是实现循环队列这个功能的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">核心算法</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">还记得上面初始化时候，不管传入的是什么数值，最后出来的都是<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>(整数次)方。这个算法就是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>右边为<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span>时，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为0时，结果为0；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为负数时，-1=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span></strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">举一些例子：当<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span><span class=\"mrel\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">=</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">8</span></span></span></span>，<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span><span class=\"mrel\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">=</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">7</span></span></span></span></p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">4&amp;7=4    9&amp;7=1    22&amp;7=6</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">0&amp;7=0</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">-1&amp;7=7    -2&amp;7=6    -8&amp;7=0</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108095155.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">doubleCapacity()</strong>扩容为原来的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">2倍</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108103710.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">方便理解，我画下上扩容的流程图，比如head在中间：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108112208.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hpollfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">pollFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">移除头部数据</p>\n<h3 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108114243.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">删除的时候并没有像<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>一样移动数据，而只是移动了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的位置</p>\n</blockquote>\n<h3 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108114844.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hgetfirstpeekfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">getFirst()和peekFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这两个方法都是一样的，都是直接返回<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的数据，区别就是一个会抛异常，一个不会</p>\n<h3 id=\"h-12\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码分析</span></h3>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">getFirst()</strong></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;E&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">getFirst</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">@SuppressWarnings</span>(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"unchecked\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;result&nbsp;=&nbsp;(E)&nbsp;elements[head];<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;(result&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">null</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;NoSuchElementException();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;result;<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">peekFirst()</strong></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;E&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">peekFirst</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;elements[head]&nbsp;is&nbsp;null&nbsp;if&nbsp;deque&nbsp;empty</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;(E)&nbsp;elements[head];<br>}<br></code></pre>\n<h2 id=\"haddfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">addFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-13\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108131919.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这里还是用了上面讲了位与算法，算出<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>的值，然后插入数据</p>\n<h3 id=\"h-14\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108133154.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hclear\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-15\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">清空这个操作是从<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的元素开始删除，直到<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>=<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">tail</code>，清空完成；</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108134034.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hsize\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">size()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个获取队列的大小也是用了上面讲的位与算法，用尾部减去了头部，然后位与数组的长度-1。为什么要这么弄呢？直接向<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>一样定义个size不好嘛？<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">你不觉得这样更方便吗？少了一个变量，就少维护了一个变量，就少了一个安全隐患啊</strong></p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">size</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;(tail&nbsp;-&nbsp;head)&nbsp;&amp;&nbsp;(elements.length&nbsp;-&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>);<br>}<br></code></pre>\n<h2 id=\"h-16\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上面的方法基本上有<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">位与</code>这个算法的身影，可见这个是核心了；如果不了解位运算的话，可以看<a href=\"https://mjava.top/java/java-base-wei/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">位运算</a>这篇文章；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">核心算法：</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>右边为<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span>时，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为0时，结果为0；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为负数时，-1=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span></strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>无参构造方法是直接初始化一个容量为16的空数组，而上篇<a href=\"https://mjava.top/java/java-arraylist-source-1\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">ArrayList</a>文章里，它无参构造方法是初始化了一个<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">空数组</strong>，在第一次添加数据的时候才进行扩容到10；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>每次扩容为原来数组长度的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">2倍</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>不能插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值</p></div>","slug":"java/java-arraydeque-source-1","published":1,"updated":"2021-10-08T08:29:56.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6egr002ovpuc586l5fer","content":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p>\n</blockquote>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">前言</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上篇文章说<a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>也可以实现<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能，但是我们一般要用队列功能的话推荐使用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>,因为他层是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">数组</strong>，而队列和栈都是只要<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">操作头部或尾部</strong>，所以这样的话数组的性能就比链表快一点。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>都是通过实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口来获得<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能。而<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口通过继承<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Queue</code>这个接口来取得队列功能，然后在这个基础进行扩展，实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">双端队列</code>，由此可以获得<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能。为了空间能得到充分利用，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>使用了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">循环队列</code>；还有<a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>可以插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值，而<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>是不能插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>的。</p>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">什么是双端队列？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">简单来说，就是两端都可以操作的队列（🌚说了和没说一样…）。哈哈，还是看图吧</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">一般队列是这样的：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108104246.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">双端队列是这样的</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108104215.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">总的来说，普通队列只可在头部删除元素和尾部添加元素，而双端队列头部和尾部都可以添加和删除元素</strong></p>\n<h2 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">什么是循环队列？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">不如说你定了个5容量大小的数组，你第一次插入的位置是下标为2，当你添加第4个元素的时候，他不会进行扩容，而是通过<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头尾指针</strong>进行对比，然后把数据插入到下标为0的位置上。当<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头尾指针相等时</strong>，表示这个队列数组已经满了，这时才会扩容。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108104300.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里的数组从上向下的顺序，有人会问为什么头尾指针都指向第三个方格呢？因为这边演示的是第一个元素插入到下标为2的位置嘛。。当然，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>是从0开始的，所以初始化时头尾指针都是指向下标为0的位置上。</p>\n</blockquote>\n<h2 id=\"hdeque\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">Deque有什么？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">话不多说，看图：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200107134323.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>具体实现的方法主要在蓝色的方框里，其他两个颜色的方框都是通过调用蓝色方框里的这些方法来实现相关功能的，可以再看一张我画的脑图：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200107232905.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这边队列的每种功能都有两个方法，其中<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">remove()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">element()</code>如果操作失败会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">报异常</strong>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">offer()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">poll()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">peek()</code>操作失败会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">返回null或者false</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">其实真正用到的就<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">深红色方框</strong>里写的这些方法，所以本文我就说这四个方法，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addLast()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">pollFirst</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">getFirst()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addFirst()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">peekFirst</code>；</p>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">内部变量</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">ArrayDeque内部就只有4个变量，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">对象数组element[]</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头指针head</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">尾指针tail</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">MIN_INITIAL_CAPACITY表示最小初始化容量为8</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200107235523.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">构造方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">构造方法和其他集合一样，有<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">有参构造</strong>和<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">无参构造</strong></p>\n<h3 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">无参构造</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">很简单，直接初始化一个<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">容量为16</strong>的对象数组</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;Object[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">16</span>];<br>&#125;<br></code></pre>\n<h3 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">有参构造</span></h3>\n<h4 id=\"hint\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">传入参数为int数</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;numElements)</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(numElements);<br>&#125;<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">allocateElements(int numElements)</strong>分配空数组以容纳给定数量的元素。</li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">allocateElements</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;numElements)</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;Object[calculateSize(numElements)];<br>&#125;<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">calculateSize(int numElements)</strong>调整传入的值大小</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108003104.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">上面的算法中用到了位运算，如果不了解位运算的话，可以看<a href=\"https://mjava.top/java/java-base-wei/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">位运算</a>这篇文章。这里把数值设置成2的n次方(是整数次)，是为了满足下面要说的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">循环队列</code>这个算法</strong></p>\n<h4 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">传入的参数为集合对象</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(c.size());<br>&nbsp;&nbsp;&nbsp;&nbsp;addAll(c);<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">第一步调用了和上面一样的方法，这里多了个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addAll()</code>方法</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">addAll(Collection<!--? extends E--> c)</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108003710.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这边复制时并没有用和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>一样的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">System.arraycopy()</code>方法，而是采用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">for循环</code>来调用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>方法进行一个一个添加的；为什么这么做呢？因为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>和其他集合不一样，它里面是不能有<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值的，而其他集合里面有的是可以传<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>的，所以这边采用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>一个一个的加，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>方法如果传入的值为空的话，就会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">报异常</strong>；（add()实际调用的是addLast()，下面再讲）</p>\n</blockquote>\n<h2 id=\"haddlast\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">addLast()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这个方法的意思是添加数据到尾部，下面图片方框中的位与算法是实现循环队列这个功能的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">核心算法</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">还记得上面初始化时候，不管传入的是什么数值，最后出来的都是<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>(整数次)方。这个算法就是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>右边为<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span>时，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为0时，结果为0；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为负数时，-1=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span></strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">举一些例子：当<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span><span class=\"mrel\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">=</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">8</span></span></span></span>，<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span><span class=\"mrel\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">=</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">7</span></span></span></span></p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">4&amp;7=4    9&amp;7=1    22&amp;7=6</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">0&amp;7=0</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">-1&amp;7=7    -2&amp;7=6    -8&amp;7=0</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108095155.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">doubleCapacity()</strong>扩容为原来的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">2倍</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108103710.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">方便理解，我画下上扩容的流程图，比如head在中间：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108112208.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hpollfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">pollFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">移除头部数据</p>\n<h3 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108114243.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">删除的时候并没有像<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>一样移动数据，而只是移动了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的位置</p>\n</blockquote>\n<h3 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108114844.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hgetfirstpeekfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">getFirst()和peekFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这两个方法都是一样的，都是直接返回<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的数据，区别就是一个会抛异常，一个不会</p>\n<h3 id=\"h-12\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码分析</span></h3>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">getFirst()</strong></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;E&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">getFirst</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">@SuppressWarnings</span>(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"unchecked\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;result&nbsp;=&nbsp;(E)&nbsp;elements[head];<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;(result&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">null</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;NoSuchElementException();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;result;<br>&#125;<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">peekFirst()</strong></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;E&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">peekFirst</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;elements[head]&nbsp;is&nbsp;null&nbsp;if&nbsp;deque&nbsp;empty</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;(E)&nbsp;elements[head];<br>&#125;<br></code></pre>\n<h2 id=\"haddfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">addFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-13\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108131919.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这里还是用了上面讲了位与算法，算出<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>的值，然后插入数据</p>\n<h3 id=\"h-14\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108133154.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hclear\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-15\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">清空这个操作是从<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的元素开始删除，直到<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>=<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">tail</code>，清空完成；</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108134034.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hsize\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">size()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个获取队列的大小也是用了上面讲的位与算法，用尾部减去了头部，然后位与数组的长度-1。为什么要这么弄呢？直接向<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>一样定义个size不好嘛？<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">你不觉得这样更方便吗？少了一个变量，就少维护了一个变量，就少了一个安全隐患啊</strong></p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">size</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;(tail&nbsp;-&nbsp;head)&nbsp;&amp;&nbsp;(elements.length&nbsp;-&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>);<br>&#125;<br></code></pre>\n<h2 id=\"h-16\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上面的方法基本上有<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">位与</code>这个算法的身影，可见这个是核心了；如果不了解位运算的话，可以看<a href=\"https://mjava.top/java/java-base-wei/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">位运算</a>这篇文章；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">核心算法：</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>右边为<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span>时，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为0时，结果为0；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为负数时，-1=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span></strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>无参构造方法是直接初始化一个容量为16的空数组，而上篇<a href=\"https://mjava.top/java/java-arraylist-source-1\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">ArrayList</a>文章里，它无参构造方法是初始化了一个<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">空数组</strong>，在第一次添加数据的时候才进行扩容到10；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>每次扩容为原来数组长度的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">2倍</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>不能插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值</p></div>","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p>\n</blockquote>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">前言</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上篇文章说<a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>也可以实现<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能，但是我们一般要用队列功能的话推荐使用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>,因为他层是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">数组</strong>，而队列和栈都是只要<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">操作头部或尾部</strong>，所以这样的话数组的性能就比链表快一点。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>都是通过实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口来获得<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能。而<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口通过继承<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Queue</code>这个接口来取得队列功能，然后在这个基础进行扩展，实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">双端队列</code>，由此可以获得<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能。为了空间能得到充分利用，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>使用了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">循环队列</code>；还有<a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>可以插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值，而<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>是不能插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>的。</p>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">什么是双端队列？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">简单来说，就是两端都可以操作的队列（🌚说了和没说一样…）。哈哈，还是看图吧</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">一般队列是这样的：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108104246.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">双端队列是这样的</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108104215.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">总的来说，普通队列只可在头部删除元素和尾部添加元素，而双端队列头部和尾部都可以添加和删除元素</strong></p>\n<h2 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">什么是循环队列？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">不如说你定了个5容量大小的数组，你第一次插入的位置是下标为2，当你添加第4个元素的时候，他不会进行扩容，而是通过<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头尾指针</strong>进行对比，然后把数据插入到下标为0的位置上。当<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头尾指针相等时</strong>，表示这个队列数组已经满了，这时才会扩容。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108104300.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里的数组从上向下的顺序，有人会问为什么头尾指针都指向第三个方格呢？因为这边演示的是第一个元素插入到下标为2的位置嘛。。当然，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>是从0开始的，所以初始化时头尾指针都是指向下标为0的位置上。</p>\n</blockquote>\n<h2 id=\"hdeque\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">Deque有什么？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">话不多说，看图：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200107134323.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>具体实现的方法主要在蓝色的方框里，其他两个颜色的方框都是通过调用蓝色方框里的这些方法来实现相关功能的，可以再看一张我画的脑图：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200107232905.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这边队列的每种功能都有两个方法，其中<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">remove()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">element()</code>如果操作失败会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">报异常</strong>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">offer()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">poll()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">peek()</code>操作失败会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">返回null或者false</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">其实真正用到的就<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">深红色方框</strong>里写的这些方法，所以本文我就说这四个方法，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addLast()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">pollFirst</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">getFirst()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addFirst()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">peekFirst</code>；</p>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">内部变量</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">ArrayDeque内部就只有4个变量，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">对象数组element[]</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头指针head</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">尾指针tail</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">MIN_INITIAL_CAPACITY表示最小初始化容量为8</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200107235523.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">构造方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">构造方法和其他集合一样，有<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">有参构造</strong>和<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">无参构造</strong></p>\n<h3 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">无参构造</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">很简单，直接初始化一个<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">容量为16</strong>的对象数组</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;Object[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">16</span>];<br>&#125;<br></code></pre>\n<h3 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">有参构造</span></h3>\n<h4 id=\"hint\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">传入参数为int数</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;numElements)</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(numElements);<br>&#125;<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">allocateElements(int numElements)</strong>分配空数组以容纳给定数量的元素。</li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">allocateElements</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;numElements)</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;Object[calculateSize(numElements)];<br>&#125;<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">calculateSize(int numElements)</strong>调整传入的值大小</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108003104.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">上面的算法中用到了位运算，如果不了解位运算的话，可以看<a href=\"https://mjava.top/java/java-base-wei/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">位运算</a>这篇文章。这里把数值设置成2的n次方(是整数次)，是为了满足下面要说的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">循环队列</code>这个算法</strong></p>\n<h4 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">传入的参数为集合对象</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(c.size());<br>&nbsp;&nbsp;&nbsp;&nbsp;addAll(c);<br>&#125;<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">第一步调用了和上面一样的方法，这里多了个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addAll()</code>方法</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">addAll(Collection<!--? extends E--> c)</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108003710.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这边复制时并没有用和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>一样的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">System.arraycopy()</code>方法，而是采用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">for循环</code>来调用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>方法进行一个一个添加的；为什么这么做呢？因为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>和其他集合不一样，它里面是不能有<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值的，而其他集合里面有的是可以传<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>的，所以这边采用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>一个一个的加，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>方法如果传入的值为空的话，就会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">报异常</strong>；（add()实际调用的是addLast()，下面再讲）</p>\n</blockquote>\n<h2 id=\"haddlast\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">addLast()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这个方法的意思是添加数据到尾部，下面图片方框中的位与算法是实现循环队列这个功能的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">核心算法</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">还记得上面初始化时候，不管传入的是什么数值，最后出来的都是<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>(整数次)方。这个算法就是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>右边为<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span>时，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为0时，结果为0；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为负数时，-1=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span></strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">举一些例子：当<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span><span class=\"mrel\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">=</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">8</span></span></span></span>，<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span><span class=\"mrel\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">=</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">7</span></span></span></span></p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">4&amp;7=4    9&amp;7=1    22&amp;7=6</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">0&amp;7=0</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">-1&amp;7=7    -2&amp;7=6    -8&amp;7=0</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108095155.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">doubleCapacity()</strong>扩容为原来的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">2倍</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108103710.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">方便理解，我画下上扩容的流程图，比如head在中间：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108112208.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hpollfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">pollFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">移除头部数据</p>\n<h3 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108114243.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">删除的时候并没有像<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>一样移动数据，而只是移动了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的位置</p>\n</blockquote>\n<h3 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108114844.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hgetfirstpeekfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">getFirst()和peekFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这两个方法都是一样的，都是直接返回<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的数据，区别就是一个会抛异常，一个不会</p>\n<h3 id=\"h-12\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码分析</span></h3>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">getFirst()</strong></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;E&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">getFirst</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">@SuppressWarnings</span>(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"unchecked\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;result&nbsp;=&nbsp;(E)&nbsp;elements[head];<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;(result&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">null</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;NoSuchElementException();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;result;<br>&#125;<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">peekFirst()</strong></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;E&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">peekFirst</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;elements[head]&nbsp;is&nbsp;null&nbsp;if&nbsp;deque&nbsp;empty</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;(E)&nbsp;elements[head];<br>&#125;<br></code></pre>\n<h2 id=\"haddfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">addFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-13\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108131919.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这里还是用了上面讲了位与算法，算出<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>的值，然后插入数据</p>\n<h3 id=\"h-14\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108133154.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hclear\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-15\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">清空这个操作是从<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的元素开始删除，直到<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>=<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">tail</code>，清空完成；</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200108134034.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hsize\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">size()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个获取队列的大小也是用了上面讲的位与算法，用尾部减去了头部，然后位与数组的长度-1。为什么要这么弄呢？直接向<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>一样定义个size不好嘛？<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">你不觉得这样更方便吗？少了一个变量，就少维护了一个变量，就少了一个安全隐患啊</strong></p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">size</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;(tail&nbsp;-&nbsp;head)&nbsp;&amp;&nbsp;(elements.length&nbsp;-&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>);<br>&#125;<br></code></pre>\n<h2 id=\"h-16\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上面的方法基本上有<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">位与</code>这个算法的身影，可见这个是核心了；如果不了解位运算的话，可以看<a href=\"https://mjava.top/java/java-base-wei/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">位运算</a>这篇文章；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">核心算法：</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>右边为<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span>时，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为0时，结果为0；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为负数时，-1=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span></strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>无参构造方法是直接初始化一个容量为16的空数组，而上篇<a href=\"https://mjava.top/java/java-arraylist-source-1\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">ArrayList</a>文章里，它无参构造方法是初始化了一个<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">空数组</strong>，在第一次添加数据的时候才进行扩容到10；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>每次扩容为原来数组长度的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">2倍</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>不能插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值</p></div>"},{"title":"Java包装类缓存机制","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:08:18.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n\n\n## 面试题\n\n首先,来看一道常见的面试题,下面代码运行后会输出什么?\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200603110911.png)\n\n上面代码运行后,最终会输出`false`和`true`;为什么会这样呢?\n\n按道理来说,在Java中`==`是比较两个对象的地址,上面代码中`i3`和`i4`是两个不同的对象,理应也应该返回是`false`,怎么返回是`true`呢?让我们慢慢往下看\n\n## Integer的缓存机制\n\n让我们来看看他的源代码.\n\n当执行`Integer i=128;`这个语句时,Java会调用`valueOf(int i)`方法,然后`自动装箱`的方式,让其变成`Integer i=new Integer(128)`,具体源码如下:\n\n```java\npublic static Integer valueOf(int i) {\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    //装箱\n    return new Integer(i);\n}\n```\n\n从上面的源码中可以看到,在装箱之前会执行一个`if`语句,这个`if`语句就是判断传入的值是否在缓存内,如果在缓存内,就直接返回缓存内的值,如果不在缓存内,就装箱,在堆内创建一个新空间来存放.\n\n```java\n//Integer包装类缓存源码\nprivate static class IntegerCache {\n        static final int low = -128;\n        static final int high;\n        static final Integer cache[];\n        static {\n            // high value may be configured by property\n            int h = 127;\n            String integerCacheHighPropValue =\n                sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\");\n            if (integerCacheHighPropValue != null) {\n                try {\n                    int i = parseInt(integerCacheHighPropValue);\n                    i = Math.max(i, 127);\n                    // Maximum array size is Integer.MAX_VALUE\n                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n                } catch( NumberFormatException nfe) {\n                    // If the property cannot be parsed into an int, ignore it.\n                }\n            }\n            high = h;\n            cache = new Integer[(high - low) + 1];\n            int j = low;\n            for(int k = 0; k < cache.length; k++)\n                cache[k] = new Integer(j++);\n            // range [-128, 127] must be interned (JLS7 5.1.7)\n            assert IntegerCache.high >= 127;\n        }\n        private IntegerCache() {}\n    }\n```\n\n从源码中可以看到,`Integer`的缓存范围是`-128~127`,所以过程大致如下:\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200603114246.png)\n\n按照上面这个方法,只要在数据在缓存池范围内的,都会引用缓存在堆内的地址,所有上面的`i3==i4`会输出为`true`;而不在缓存范围内的,就会在堆中开放新的空间来存放对象,所以地址不同,用`==`比较返回也不同;\n\n## 其他包装类缓存机制\n\n除了`Integer`之外,其他的包装类也使用了缓存技术;\n\n### Long\n\n> 缓存范围-128~127\n\n\n\n```java\npublic static Long valueOf(long l) {\n    final int offset = 128;\n    if (l >= -128 && l <= 127) { // will cache\n        return LongCache.cache[(int)l + offset];\n    }\n    return new Long(l);\n}\n\n\nprivate static class LongCache {\n    private LongCache(){}\n\n    static final Long cache[] = new Long[-(-128) + 127 + 1];\n\n    static {\n        for(int i = 0; i < cache.length; i++)\n            cache[i] = new Long(i - 128);\n    }\n}\n```\n\n### Byte\n\n> 缓存范围-128~127   (byte范围:一个byte占8位,所以取值范围是**-2^7~2^7-1**)\n\n\n\n```java\npublic static Byte valueOf(byte b) {\n    final int offset = 128;\n    return ByteCache.cache[(int)b + offset];\n}\n\nprivate static class ByteCache {\n    private ByteCache(){}\n\n    static final Byte cache[] = new Byte[-(-128) + 127 + 1];\n\n    static {\n        for(int i = 0; i < cache.length; i++)\n            cache[i] = new Byte((byte)(i - 128));\n    }\n}\n```\n\n### Character\n\n> 缓存范围0~127  (ascii码范围) \n\n\n\n```java\npublic static Character valueOf(char c) {\n    if (c <= 127) { // must cache\n        return CharacterCache.cache[(int)c];\n    }\n    return new Character(c);\n}\n\nprivate static class CharacterCache {\n    private CharacterCache(){}\n\n    static final Character cache[] = new Character[127 + 1];\n\n    static {\n        for (int i = 0; i < cache.length; i++)\n            cache[i] = new Character((char)i);\n    }\n}\n```\n\n### Short\n\n> 缓存范围-128~127\n\n\n\n```java\npublic static Short valueOf(short s) {\n    final int offset = 128;\n    int sAsInt = s;\n    if (sAsInt >= -128 && sAsInt <= 127) { // must cache\n        return ShortCache.cache[sAsInt + offset];\n    }\n    return new Short(s);\n}\n\nprivate static class ShortCache {\n    private ShortCache(){}\n\n    static final Short cache[] = new Short[-(-128) + 127 + 1];\n\n    static {\n        for(int i = 0; i < cache.length; i++)\n            cache[i] = new Short((short)(i - 128));\n    }\n}\n```\n\n### Boolean\n\n> 缓存范围 `true`  `false`     它只设置了两个静态变量用来充当缓存\n\n\n\n```java\npublic static final Boolean TRUE = new Boolean(true);\npublic static final Boolean FALSE = new Boolean(false);\n\npublic static Boolean valueOf(boolean b) {\n    return (b ? TRUE : FALSE);\n}\n```\n\n## 建议\n\n包装类对比数据是否相同的时候,建议采用重写的`equals()`方法.","source":"_posts/java/java-base-data-pack.md","raw":"---\ntitle: Java包装类缓存机制\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:08:18\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\ncategories:\n- Java\n---\n\n\n\n\n\n## 面试题\n\n首先,来看一道常见的面试题,下面代码运行后会输出什么?\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200603110911.png)\n\n上面代码运行后,最终会输出`false`和`true`;为什么会这样呢?\n\n按道理来说,在Java中`==`是比较两个对象的地址,上面代码中`i3`和`i4`是两个不同的对象,理应也应该返回是`false`,怎么返回是`true`呢?让我们慢慢往下看\n\n## Integer的缓存机制\n\n让我们来看看他的源代码.\n\n当执行`Integer i=128;`这个语句时,Java会调用`valueOf(int i)`方法,然后`自动装箱`的方式,让其变成`Integer i=new Integer(128)`,具体源码如下:\n\n```java\npublic static Integer valueOf(int i) {\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    //装箱\n    return new Integer(i);\n}\n```\n\n从上面的源码中可以看到,在装箱之前会执行一个`if`语句,这个`if`语句就是判断传入的值是否在缓存内,如果在缓存内,就直接返回缓存内的值,如果不在缓存内,就装箱,在堆内创建一个新空间来存放.\n\n```java\n//Integer包装类缓存源码\nprivate static class IntegerCache {\n        static final int low = -128;\n        static final int high;\n        static final Integer cache[];\n        static {\n            // high value may be configured by property\n            int h = 127;\n            String integerCacheHighPropValue =\n                sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\");\n            if (integerCacheHighPropValue != null) {\n                try {\n                    int i = parseInt(integerCacheHighPropValue);\n                    i = Math.max(i, 127);\n                    // Maximum array size is Integer.MAX_VALUE\n                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n                } catch( NumberFormatException nfe) {\n                    // If the property cannot be parsed into an int, ignore it.\n                }\n            }\n            high = h;\n            cache = new Integer[(high - low) + 1];\n            int j = low;\n            for(int k = 0; k < cache.length; k++)\n                cache[k] = new Integer(j++);\n            // range [-128, 127] must be interned (JLS7 5.1.7)\n            assert IntegerCache.high >= 127;\n        }\n        private IntegerCache() {}\n    }\n```\n\n从源码中可以看到,`Integer`的缓存范围是`-128~127`,所以过程大致如下:\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200603114246.png)\n\n按照上面这个方法,只要在数据在缓存池范围内的,都会引用缓存在堆内的地址,所有上面的`i3==i4`会输出为`true`;而不在缓存范围内的,就会在堆中开放新的空间来存放对象,所以地址不同,用`==`比较返回也不同;\n\n## 其他包装类缓存机制\n\n除了`Integer`之外,其他的包装类也使用了缓存技术;\n\n### Long\n\n> 缓存范围-128~127\n\n\n\n```java\npublic static Long valueOf(long l) {\n    final int offset = 128;\n    if (l >= -128 && l <= 127) { // will cache\n        return LongCache.cache[(int)l + offset];\n    }\n    return new Long(l);\n}\n\n\nprivate static class LongCache {\n    private LongCache(){}\n\n    static final Long cache[] = new Long[-(-128) + 127 + 1];\n\n    static {\n        for(int i = 0; i < cache.length; i++)\n            cache[i] = new Long(i - 128);\n    }\n}\n```\n\n### Byte\n\n> 缓存范围-128~127   (byte范围:一个byte占8位,所以取值范围是**-2^7~2^7-1**)\n\n\n\n```java\npublic static Byte valueOf(byte b) {\n    final int offset = 128;\n    return ByteCache.cache[(int)b + offset];\n}\n\nprivate static class ByteCache {\n    private ByteCache(){}\n\n    static final Byte cache[] = new Byte[-(-128) + 127 + 1];\n\n    static {\n        for(int i = 0; i < cache.length; i++)\n            cache[i] = new Byte((byte)(i - 128));\n    }\n}\n```\n\n### Character\n\n> 缓存范围0~127  (ascii码范围) \n\n\n\n```java\npublic static Character valueOf(char c) {\n    if (c <= 127) { // must cache\n        return CharacterCache.cache[(int)c];\n    }\n    return new Character(c);\n}\n\nprivate static class CharacterCache {\n    private CharacterCache(){}\n\n    static final Character cache[] = new Character[127 + 1];\n\n    static {\n        for (int i = 0; i < cache.length; i++)\n            cache[i] = new Character((char)i);\n    }\n}\n```\n\n### Short\n\n> 缓存范围-128~127\n\n\n\n```java\npublic static Short valueOf(short s) {\n    final int offset = 128;\n    int sAsInt = s;\n    if (sAsInt >= -128 && sAsInt <= 127) { // must cache\n        return ShortCache.cache[sAsInt + offset];\n    }\n    return new Short(s);\n}\n\nprivate static class ShortCache {\n    private ShortCache(){}\n\n    static final Short cache[] = new Short[-(-128) + 127 + 1];\n\n    static {\n        for(int i = 0; i < cache.length; i++)\n            cache[i] = new Short((short)(i - 128));\n    }\n}\n```\n\n### Boolean\n\n> 缓存范围 `true`  `false`     它只设置了两个静态变量用来充当缓存\n\n\n\n```java\npublic static final Boolean TRUE = new Boolean(true);\npublic static final Boolean FALSE = new Boolean(false);\n\npublic static Boolean valueOf(boolean b) {\n    return (b ? TRUE : FALSE);\n}\n```\n\n## 建议\n\n包装类对比数据是否相同的时候,建议采用重写的`equals()`方法.","slug":"java/java-base-data-pack","published":1,"updated":"2021-10-08T08:32:19.596Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6egs002svpucena3et9t","content":"<h2 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h2><p>首先,来看一道常见的面试题,下面代码运行后会输出什么?</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200603110911.png\" alt=\"图片\"></p>\n<p>上面代码运行后,最终会输出<code>false</code>和<code>true</code>;为什么会这样呢?</p>\n<p>按道理来说,在Java中<code>==</code>是比较两个对象的地址,上面代码中<code>i3</code>和<code>i4</code>是两个不同的对象,理应也应该返回是<code>false</code>,怎么返回是<code>true</code>呢?让我们慢慢往下看</p>\n<h2 id=\"Integer的缓存机制\"><a href=\"#Integer的缓存机制\" class=\"headerlink\" title=\"Integer的缓存机制\"></a>Integer的缓存机制</h2><p>让我们来看看他的源代码.</p>\n<p>当执行<code>Integer i=128;</code>这个语句时,Java会调用<code>valueOf(int i)</code>方法,然后<code>自动装箱</code>的方式,让其变成<code>Integer i=new Integer(128)</code>,具体源码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    <span class=\"comment\">//装箱</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的源码中可以看到,在装箱之前会执行一个<code>if</code>语句,这个<code>if</code>语句就是判断传入的值是否在缓存内,如果在缓存内,就直接返回缓存内的值,如果不在缓存内,就装箱,在堆内创建一个新空间来存放.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Integer包装类缓存源码</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IntegerCache</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">low</span> <span class=\"operator\">=</span> -<span class=\"number\">128</span>;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> high;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer cache[];</span><br><span class=\"line\">        <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// high value may be configured by property</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> <span class=\"number\">127</span>;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">integerCacheHighPropValue</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                sun.misc.VM.getSavedProperty(<span class=\"string\">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (integerCacheHighPropValue != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> parseInt(integerCacheHighPropValue);</span><br><span class=\"line\">                    i = Math.max(i, <span class=\"number\">127</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class=\"line\">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>( NumberFormatException nfe) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            high = h;</span><br><span class=\"line\">            cache = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[(high - low) + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> low;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; cache.length; k++)</span><br><span class=\"line\">                cache[k] = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(j++);</span><br><span class=\"line\">            <span class=\"comment\">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> IntegerCache.high &gt;= <span class=\"number\">127</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"title function_\">IntegerCache</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>从源码中可以看到,<code>Integer</code>的缓存范围是<code>-128~127</code>,所以过程大致如下:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200603114246.png\" alt=\"图片\"></p>\n<p>按照上面这个方法,只要在数据在缓存池范围内的,都会引用缓存在堆内的地址,所有上面的<code>i3==i4</code>会输出为<code>true</code>;而不在缓存范围内的,就会在堆中开放新的空间来存放对象,所以地址不同,用<code>==</code>比较返回也不同;</p>\n<h2 id=\"其他包装类缓存机制\"><a href=\"#其他包装类缓存机制\" class=\"headerlink\" title=\"其他包装类缓存机制\"></a>其他包装类缓存机制</h2><p>除了<code>Integer</code>之外,其他的包装类也使用了缓存技术;</p>\n<h3 id=\"Long\"><a href=\"#Long\" class=\"headerlink\" title=\"Long\"></a>Long</h3><blockquote>\n<p>缓存范围-128~127</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Long <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">long</span> l)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &gt;= -<span class=\"number\">128</span> &amp;&amp; l &lt;= <span class=\"number\">127</span>) &#123; <span class=\"comment\">// will cache</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> LongCache.cache[(<span class=\"type\">int</span>)l + offset];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Long</span>(l);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LongCache</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Long cache[] = <span class=\"keyword\">new</span> <span class=\"title class_\">Long</span>[-(-<span class=\"number\">128</span>) + <span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Long</span>(i - <span class=\"number\">128</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Byte\"><a href=\"#Byte\" class=\"headerlink\" title=\"Byte\"></a>Byte</h3><blockquote>\n<p>缓存范围-128<del>127   (byte范围:一个byte占8位,所以取值范围是**-2^7</del>2^7-1**)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Byte <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">byte</span> b)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ByteCache.cache[(<span class=\"type\">int</span>)b + offset];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ByteCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">ByteCache</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Byte cache[] = <span class=\"keyword\">new</span> <span class=\"title class_\">Byte</span>[-(-<span class=\"number\">128</span>) + <span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Byte</span>((<span class=\"type\">byte</span>)(i - <span class=\"number\">128</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Character\"><a href=\"#Character\" class=\"headerlink\" title=\"Character\"></a>Character</h3><blockquote>\n<p>缓存范围0~127  (ascii码范围) </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Character <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">char</span> c)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c &lt;= <span class=\"number\">127</span>) &#123; <span class=\"comment\">// must cache</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> CharacterCache.cache[(<span class=\"type\">int</span>)c];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CharacterCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">CharacterCache</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Character cache[] = <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>[<span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>((<span class=\"type\">char</span>)i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Short\"><a href=\"#Short\" class=\"headerlink\" title=\"Short\"></a>Short</h3><blockquote>\n<p>缓存范围-128~127</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Short <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">short</span> s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sAsInt</span> <span class=\"operator\">=</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sAsInt &gt;= -<span class=\"number\">128</span> &amp;&amp; sAsInt &lt;= <span class=\"number\">127</span>) &#123; <span class=\"comment\">// must cache</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ShortCache.cache[sAsInt + offset];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Short</span>(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ShortCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">ShortCache</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Short cache[] = <span class=\"keyword\">new</span> <span class=\"title class_\">Short</span>[-(-<span class=\"number\">128</span>) + <span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Short</span>((<span class=\"type\">short</span>)(i - <span class=\"number\">128</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h3><blockquote>\n<p>缓存范围 <code>true</code>  <code>false</code>     它只设置了两个静态变量用来充当缓存</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Boolean</span> <span class=\"variable\">TRUE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Boolean</span> <span class=\"variable\">FALSE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Boolean <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">boolean</span> b)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b ? TRUE : FALSE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><p>包装类对比数据是否相同的时候,建议采用重写的<code>equals()</code>方法.</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h2><p>首先,来看一道常见的面试题,下面代码运行后会输出什么?</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200603110911.png\" alt=\"图片\"></p>\n<p>上面代码运行后,最终会输出<code>false</code>和<code>true</code>;为什么会这样呢?</p>\n<p>按道理来说,在Java中<code>==</code>是比较两个对象的地址,上面代码中<code>i3</code>和<code>i4</code>是两个不同的对象,理应也应该返回是<code>false</code>,怎么返回是<code>true</code>呢?让我们慢慢往下看</p>\n<h2 id=\"Integer的缓存机制\"><a href=\"#Integer的缓存机制\" class=\"headerlink\" title=\"Integer的缓存机制\"></a>Integer的缓存机制</h2><p>让我们来看看他的源代码.</p>\n<p>当执行<code>Integer i=128;</code>这个语句时,Java会调用<code>valueOf(int i)</code>方法,然后<code>自动装箱</code>的方式,让其变成<code>Integer i=new Integer(128)</code>,具体源码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">int</span> i)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    <span class=\"comment\">//装箱</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的源码中可以看到,在装箱之前会执行一个<code>if</code>语句,这个<code>if</code>语句就是判断传入的值是否在缓存内,如果在缓存内,就直接返回缓存内的值,如果不在缓存内,就装箱,在堆内创建一个新空间来存放.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Integer包装类缓存源码</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IntegerCache</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">low</span> <span class=\"operator\">=</span> -<span class=\"number\">128</span>;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> high;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer cache[];</span><br><span class=\"line\">        <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// high value may be configured by property</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">h</span> <span class=\"operator\">=</span> <span class=\"number\">127</span>;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">integerCacheHighPropValue</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                sun.misc.VM.getSavedProperty(<span class=\"string\">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (integerCacheHighPropValue != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> parseInt(integerCacheHighPropValue);</span><br><span class=\"line\">                    i = Math.max(i, <span class=\"number\">127</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class=\"line\">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>( NumberFormatException nfe) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            high = h;</span><br><span class=\"line\">            cache = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>[(high - low) + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> low;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; k &lt; cache.length; k++)</span><br><span class=\"line\">                cache[k] = <span class=\"keyword\">new</span> <span class=\"title class_\">Integer</span>(j++);</span><br><span class=\"line\">            <span class=\"comment\">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> IntegerCache.high &gt;= <span class=\"number\">127</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"title function_\">IntegerCache</span><span class=\"params\">()</span> &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>从源码中可以看到,<code>Integer</code>的缓存范围是<code>-128~127</code>,所以过程大致如下:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200603114246.png\" alt=\"图片\"></p>\n<p>按照上面这个方法,只要在数据在缓存池范围内的,都会引用缓存在堆内的地址,所有上面的<code>i3==i4</code>会输出为<code>true</code>;而不在缓存范围内的,就会在堆中开放新的空间来存放对象,所以地址不同,用<code>==</code>比较返回也不同;</p>\n<h2 id=\"其他包装类缓存机制\"><a href=\"#其他包装类缓存机制\" class=\"headerlink\" title=\"其他包装类缓存机制\"></a>其他包装类缓存机制</h2><p>除了<code>Integer</code>之外,其他的包装类也使用了缓存技术;</p>\n<h3 id=\"Long\"><a href=\"#Long\" class=\"headerlink\" title=\"Long\"></a>Long</h3><blockquote>\n<p>缓存范围-128~127</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Long <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">long</span> l)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &gt;= -<span class=\"number\">128</span> &amp;&amp; l &lt;= <span class=\"number\">127</span>) &#123; <span class=\"comment\">// will cache</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> LongCache.cache[(<span class=\"type\">int</span>)l + offset];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Long</span>(l);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LongCache</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Long cache[] = <span class=\"keyword\">new</span> <span class=\"title class_\">Long</span>[-(-<span class=\"number\">128</span>) + <span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Long</span>(i - <span class=\"number\">128</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Byte\"><a href=\"#Byte\" class=\"headerlink\" title=\"Byte\"></a>Byte</h3><blockquote>\n<p>缓存范围-128<del>127   (byte范围:一个byte占8位,所以取值范围是**-2^7</del>2^7-1**)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Byte <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">byte</span> b)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ByteCache.cache[(<span class=\"type\">int</span>)b + offset];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ByteCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">ByteCache</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Byte cache[] = <span class=\"keyword\">new</span> <span class=\"title class_\">Byte</span>[-(-<span class=\"number\">128</span>) + <span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Byte</span>((<span class=\"type\">byte</span>)(i - <span class=\"number\">128</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Character\"><a href=\"#Character\" class=\"headerlink\" title=\"Character\"></a>Character</h3><blockquote>\n<p>缓存范围0~127  (ascii码范围) </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Character <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">char</span> c)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c &lt;= <span class=\"number\">127</span>) &#123; <span class=\"comment\">// must cache</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> CharacterCache.cache[(<span class=\"type\">int</span>)c];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CharacterCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">CharacterCache</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Character cache[] = <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>[<span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>((<span class=\"type\">char</span>)i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Short\"><a href=\"#Short\" class=\"headerlink\" title=\"Short\"></a>Short</h3><blockquote>\n<p>缓存范围-128~127</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Short <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">short</span> s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sAsInt</span> <span class=\"operator\">=</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sAsInt &gt;= -<span class=\"number\">128</span> &amp;&amp; sAsInt &lt;= <span class=\"number\">127</span>) &#123; <span class=\"comment\">// must cache</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ShortCache.cache[sAsInt + offset];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Short</span>(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ShortCache</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">ShortCache</span><span class=\"params\">()</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Short cache[] = <span class=\"keyword\">new</span> <span class=\"title class_\">Short</span>[-(-<span class=\"number\">128</span>) + <span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Short</span>((<span class=\"type\">short</span>)(i - <span class=\"number\">128</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h3><blockquote>\n<p>缓存范围 <code>true</code>  <code>false</code>     它只设置了两个静态变量用来充当缓存</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Boolean</span> <span class=\"variable\">TRUE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Boolean</span> <span class=\"variable\">FALSE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Boolean <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">boolean</span> b)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b ? TRUE : FALSE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><p>包装类对比数据是否相同的时候,建议采用重写的<code>equals()</code>方法.</p>\n"},{"title":"【图】用图片告诉你Java中的位运算","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-30T14:17:30.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230221924.jpg)\n\n## 前言\n\n​        虽然位运算在实际开发中并不常用,但是在各种算法中却常常见到它们的身影.因为是直接操作二进制的,所以机器执行起来就快很多,所以尽管实际业务中不常用,但如果你不想只做个码农,这个基础还是要掌握的;\n\n讲位操作之前,就必须要知道<font color=orange>原码、反码、补码</font>\n\n> 其中正数的<font color=orange>原码=反码=补码</font>\n\n## 原码、反码、补码\n\n> 在机器的内存中,一个负数的表示是<font color=orange>这个负数的绝对值取原码,再取反码,再加一</font>,最后出现的就是这个负数在内存中的表示的二进制数值\n\n比如说-9在内存中的二进制码,这里用8位表示:\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230212102.png)\n\n最后<font color=orange>-9在内存中的二进制值为11110111</font>\n\n> 在二进制中,最高位为符号位,<font color=red>0代表正,1代表负</font>\n\n## 位运算\n\n### 左移和右移\n\n在`Java`中的`int`类型有<font color=orange>4字节</font>,一个字节有<font color=orange>8位</font>,所以这边用32位表示一个数\n\n#### 负数的左移和右移\n\n> <font color=orange>这边负数表示是在内存中表示的二进制值</font>\n>\n> 右移时:最高位<font color=orange>补符号位1</font>\n>\n> 左移时:末尾补0\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230212836.png)\n\n#### 正数的左移和右移\n\n> 右移时:最高位<font color=orange>补符号位0</font>\n>\n> 左移时:末尾补0\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230212951.png)\n\n### 无符号右移\n\n>无论是正数还是负数,右移<font color=orange>最高位一律补0</font>\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230213359.png)\n\n### &(位与)\n\n> 当相对应的位都为1时,等于1,否则等于0\n\n为了方便表示,接下来全部都用8位表示一个数\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230215214.png)\n\n### |(位或)\n\n> 当相对应的位有一个为1时,等于1,否则等于0\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230215609.png)\n\n### ^(异或)\n\n> 当相对应的位不同时,等于1,相同时等于0\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230220948.png)\n\n### ~(取反)\n\n> 1等于0,0等于1\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230220449.png)\n\n## 总结\n\n| 含义       | 运算符 | 说明                                                         |\n| ---------- | ------ | ------------------------------------------------------------ |\n| 左移       | <<     | 末尾补0                                                      |\n| 右移       | \\>>    | 负数:最高位<font color=orange>补符号位1</font>      正数:最高位<font color=orange>补符号位0</font> |\n| 无符号右移 | \\>>>   | 无论是正数还是负数,右移<font color=orange>最高位一律补0</font> |\n| &(位与)    | &      | 当相对应的位都为1时,等于1,否则等于0                          |\n| \\|(位或)   | \\|     | 当相对应的位有一个为1时,等于1,否则等于0                      |\n| ^(异或)    | ^      | 当相对应的位 不同时,等于1  相同时,等于0                      |\n| ~(取反)    | ~      | 1等于0,0等于1                                                |\n\n> 最后有个小技巧,<font color=orange>向左位移几位就是乘以2的几次方,比如9向左移n位,就是</font>\n\n$$\n9向左移n位=9*2^n\n$$\n\n> <font color=orange>向右移几位就是除以2的几次方然后向下取整,比如9向右移动n位,就是</font>\n\n$$\n9向右移n位=⌊9/2^n⌋\n$$\n\n<font color=red>注:⌊⌋是数学符号向下取整,例如:2.25向下取整是2;   -2.25向下取整是-3; 具体的话可以看看这篇文章[向上取整与向下取整函数](https://www.shuxuele.com/sets/function-floor-ceiling.html);该技巧不适用无符号右移</font>\n\n","source":"_posts/java/java-base-wei.md","raw":"---\ntitle: 【图】用图片告诉你Java中的位运算\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-30 22:17:30\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\ncategories:\n- Java\n---\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230221924.jpg)\n\n## 前言\n\n​        虽然位运算在实际开发中并不常用,但是在各种算法中却常常见到它们的身影.因为是直接操作二进制的,所以机器执行起来就快很多,所以尽管实际业务中不常用,但如果你不想只做个码农,这个基础还是要掌握的;\n\n讲位操作之前,就必须要知道<font color=orange>原码、反码、补码</font>\n\n> 其中正数的<font color=orange>原码=反码=补码</font>\n\n## 原码、反码、补码\n\n> 在机器的内存中,一个负数的表示是<font color=orange>这个负数的绝对值取原码,再取反码,再加一</font>,最后出现的就是这个负数在内存中的表示的二进制数值\n\n比如说-9在内存中的二进制码,这里用8位表示:\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230212102.png)\n\n最后<font color=orange>-9在内存中的二进制值为11110111</font>\n\n> 在二进制中,最高位为符号位,<font color=red>0代表正,1代表负</font>\n\n## 位运算\n\n### 左移和右移\n\n在`Java`中的`int`类型有<font color=orange>4字节</font>,一个字节有<font color=orange>8位</font>,所以这边用32位表示一个数\n\n#### 负数的左移和右移\n\n> <font color=orange>这边负数表示是在内存中表示的二进制值</font>\n>\n> 右移时:最高位<font color=orange>补符号位1</font>\n>\n> 左移时:末尾补0\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230212836.png)\n\n#### 正数的左移和右移\n\n> 右移时:最高位<font color=orange>补符号位0</font>\n>\n> 左移时:末尾补0\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230212951.png)\n\n### 无符号右移\n\n>无论是正数还是负数,右移<font color=orange>最高位一律补0</font>\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230213359.png)\n\n### &(位与)\n\n> 当相对应的位都为1时,等于1,否则等于0\n\n为了方便表示,接下来全部都用8位表示一个数\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230215214.png)\n\n### |(位或)\n\n> 当相对应的位有一个为1时,等于1,否则等于0\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230215609.png)\n\n### ^(异或)\n\n> 当相对应的位不同时,等于1,相同时等于0\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230220948.png)\n\n### ~(取反)\n\n> 1等于0,0等于1\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230220449.png)\n\n## 总结\n\n| 含义       | 运算符 | 说明                                                         |\n| ---------- | ------ | ------------------------------------------------------------ |\n| 左移       | <<     | 末尾补0                                                      |\n| 右移       | \\>>    | 负数:最高位<font color=orange>补符号位1</font>      正数:最高位<font color=orange>补符号位0</font> |\n| 无符号右移 | \\>>>   | 无论是正数还是负数,右移<font color=orange>最高位一律补0</font> |\n| &(位与)    | &      | 当相对应的位都为1时,等于1,否则等于0                          |\n| \\|(位或)   | \\|     | 当相对应的位有一个为1时,等于1,否则等于0                      |\n| ^(异或)    | ^      | 当相对应的位 不同时,等于1  相同时,等于0                      |\n| ~(取反)    | ~      | 1等于0,0等于1                                                |\n\n> 最后有个小技巧,<font color=orange>向左位移几位就是乘以2的几次方,比如9向左移n位,就是</font>\n\n$$\n9向左移n位=9*2^n\n$$\n\n> <font color=orange>向右移几位就是除以2的几次方然后向下取整,比如9向右移动n位,就是</font>\n\n$$\n9向右移n位=⌊9/2^n⌋\n$$\n\n<font color=red>注:⌊⌋是数学符号向下取整,例如:2.25向下取整是2;   -2.25向下取整是-3; 具体的话可以看看这篇文章[向上取整与向下取整函数](https://www.shuxuele.com/sets/function-floor-ceiling.html);该技巧不适用无符号右移</font>\n\n","slug":"java/java-base-wei","published":1,"updated":"2021-10-08T08:33:16.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6egt002vvpuc52hr078a","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230221924.jpg\" alt=\"图片\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​        虽然位运算在实际开发中并不常用,但是在各种算法中却常常见到它们的身影.因为是直接操作二进制的,所以机器执行起来就快很多,所以尽管实际业务中不常用,但如果你不想只做个码农,这个基础还是要掌握的;</p>\n<p>讲位操作之前,就必须要知道<font color=orange>原码、反码、补码</font></p>\n<blockquote>\n<p>其中正数的<font color=orange>原码&#x3D;反码&#x3D;补码</font></p>\n</blockquote>\n<h2 id=\"原码、反码、补码\"><a href=\"#原码、反码、补码\" class=\"headerlink\" title=\"原码、反码、补码\"></a>原码、反码、补码</h2><blockquote>\n<p>在机器的内存中,一个负数的表示是<font color=orange>这个负数的绝对值取原码,再取反码,再加一</font>,最后出现的就是这个负数在内存中的表示的二进制数值</p>\n</blockquote>\n<p>比如说-9在内存中的二进制码,这里用8位表示:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230212102.png\" alt=\"图片\"></p>\n<p>最后<font color=orange>-9在内存中的二进制值为11110111</font></p>\n<blockquote>\n<p>在二进制中,最高位为符号位,<font color=red>0代表正,1代表负</font></p>\n</blockquote>\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><h3 id=\"左移和右移\"><a href=\"#左移和右移\" class=\"headerlink\" title=\"左移和右移\"></a>左移和右移</h3><p>在<code>Java</code>中的<code>int</code>类型有<font color=orange>4字节</font>,一个字节有<font color=orange>8位</font>,所以这边用32位表示一个数</p>\n<h4 id=\"负数的左移和右移\"><a href=\"#负数的左移和右移\" class=\"headerlink\" title=\"负数的左移和右移\"></a>负数的左移和右移</h4><blockquote>\n<p><font color=orange>这边负数表示是在内存中表示的二进制值</font></p>\n<p>右移时:最高位<font color=orange>补符号位1</font></p>\n<p>左移时:末尾补0</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230212836.png\" alt=\"图片\"></p>\n<h4 id=\"正数的左移和右移\"><a href=\"#正数的左移和右移\" class=\"headerlink\" title=\"正数的左移和右移\"></a>正数的左移和右移</h4><blockquote>\n<p>右移时:最高位<font color=orange>补符号位0</font></p>\n<p>左移时:末尾补0</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230212951.png\" alt=\"图片\"></p>\n<h3 id=\"无符号右移\"><a href=\"#无符号右移\" class=\"headerlink\" title=\"无符号右移\"></a>无符号右移</h3><blockquote>\n<p>无论是正数还是负数,右移<font color=orange>最高位一律补0</font></p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230213359.png\" alt=\"图片\"></p>\n<h3 id=\"amp-位与\"><a href=\"#amp-位与\" class=\"headerlink\" title=\"&amp;(位与)\"></a>&amp;(位与)</h3><blockquote>\n<p>当相对应的位都为1时,等于1,否则等于0</p>\n</blockquote>\n<p>为了方便表示,接下来全部都用8位表示一个数</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230215214.png\" alt=\"图片\"></p>\n<h3 id=\"位或\"><a href=\"#位或\" class=\"headerlink\" title=\"|(位或)\"></a>|(位或)</h3><blockquote>\n<p>当相对应的位有一个为1时,等于1,否则等于0</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230215609.png\" alt=\"图片\"></p>\n<h3 id=\"异或\"><a href=\"#异或\" class=\"headerlink\" title=\"^(异或)\"></a>^(异或)</h3><blockquote>\n<p>当相对应的位不同时,等于1,相同时等于0</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230220948.png\" alt=\"图片\"></p>\n<h3 id=\"取反\"><a href=\"#取反\" class=\"headerlink\" title=\"~(取反)\"></a>~(取反)</h3><blockquote>\n<p>1等于0,0等于1</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230220449.png\" alt=\"图片\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><table>\n<thead>\n<tr>\n<th>含义</th>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>左移</td>\n<td>&lt;&lt;</td>\n<td>末尾补0</td>\n</tr>\n<tr>\n<td>右移</td>\n<td>&gt;&gt;</td>\n<td>负数:最高位<font color=orange>补符号位1</font>      正数:最高位<font color=orange>补符号位0</font></td>\n</tr>\n<tr>\n<td>无符号右移</td>\n<td>&gt;&gt;&gt;</td>\n<td>无论是正数还是负数,右移<font color=orange>最高位一律补0</font></td>\n</tr>\n<tr>\n<td>&amp;(位与)</td>\n<td>&amp;</td>\n<td>当相对应的位都为1时,等于1,否则等于0</td>\n</tr>\n<tr>\n<td>|(位或)</td>\n<td>|</td>\n<td>当相对应的位有一个为1时,等于1,否则等于0</td>\n</tr>\n<tr>\n<td>^(异或)</td>\n<td>^</td>\n<td>当相对应的位 不同时,等于1  相同时,等于0</td>\n</tr>\n<tr>\n<td>~(取反)</td>\n<td>~</td>\n<td>1等于0,0等于1</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>最后有个小技巧,<font color=orange>向左位移几位就是乘以2的几次方,比如9向左移n位,就是</font></p>\n</blockquote>\n<p>$$<br>9向左移n位&#x3D;9*2^n<br>$$</p>\n<blockquote>\n<p><font color=orange>向右移几位就是除以2的几次方然后向下取整,比如9向右移动n位,就是</font></p>\n</blockquote>\n<p>$$<br>9向右移n位&#x3D;⌊9&#x2F;2^n⌋<br>$$</p>\n<p><font color=red>注:⌊⌋是数学符号向下取整,例如:2.25向下取整是2;   -2.25向下取整是-3; 具体的话可以看看这篇文章<a href=\"https://www.shuxuele.com/sets/function-floor-ceiling.html\">向上取整与向下取整函数</a>;该技巧不适用无符号右移</font></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230221924.jpg\" alt=\"图片\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​        虽然位运算在实际开发中并不常用,但是在各种算法中却常常见到它们的身影.因为是直接操作二进制的,所以机器执行起来就快很多,所以尽管实际业务中不常用,但如果你不想只做个码农,这个基础还是要掌握的;</p>\n<p>讲位操作之前,就必须要知道<font color=orange>原码、反码、补码</font></p>\n<blockquote>\n<p>其中正数的<font color=orange>原码&#x3D;反码&#x3D;补码</font></p>\n</blockquote>\n<h2 id=\"原码、反码、补码\"><a href=\"#原码、反码、补码\" class=\"headerlink\" title=\"原码、反码、补码\"></a>原码、反码、补码</h2><blockquote>\n<p>在机器的内存中,一个负数的表示是<font color=orange>这个负数的绝对值取原码,再取反码,再加一</font>,最后出现的就是这个负数在内存中的表示的二进制数值</p>\n</blockquote>\n<p>比如说-9在内存中的二进制码,这里用8位表示:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230212102.png\" alt=\"图片\"></p>\n<p>最后<font color=orange>-9在内存中的二进制值为11110111</font></p>\n<blockquote>\n<p>在二进制中,最高位为符号位,<font color=red>0代表正,1代表负</font></p>\n</blockquote>\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><h3 id=\"左移和右移\"><a href=\"#左移和右移\" class=\"headerlink\" title=\"左移和右移\"></a>左移和右移</h3><p>在<code>Java</code>中的<code>int</code>类型有<font color=orange>4字节</font>,一个字节有<font color=orange>8位</font>,所以这边用32位表示一个数</p>\n<h4 id=\"负数的左移和右移\"><a href=\"#负数的左移和右移\" class=\"headerlink\" title=\"负数的左移和右移\"></a>负数的左移和右移</h4><blockquote>\n<p><font color=orange>这边负数表示是在内存中表示的二进制值</font></p>\n<p>右移时:最高位<font color=orange>补符号位1</font></p>\n<p>左移时:末尾补0</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230212836.png\" alt=\"图片\"></p>\n<h4 id=\"正数的左移和右移\"><a href=\"#正数的左移和右移\" class=\"headerlink\" title=\"正数的左移和右移\"></a>正数的左移和右移</h4><blockquote>\n<p>右移时:最高位<font color=orange>补符号位0</font></p>\n<p>左移时:末尾补0</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230212951.png\" alt=\"图片\"></p>\n<h3 id=\"无符号右移\"><a href=\"#无符号右移\" class=\"headerlink\" title=\"无符号右移\"></a>无符号右移</h3><blockquote>\n<p>无论是正数还是负数,右移<font color=orange>最高位一律补0</font></p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230213359.png\" alt=\"图片\"></p>\n<h3 id=\"amp-位与\"><a href=\"#amp-位与\" class=\"headerlink\" title=\"&amp;(位与)\"></a>&amp;(位与)</h3><blockquote>\n<p>当相对应的位都为1时,等于1,否则等于0</p>\n</blockquote>\n<p>为了方便表示,接下来全部都用8位表示一个数</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230215214.png\" alt=\"图片\"></p>\n<h3 id=\"位或\"><a href=\"#位或\" class=\"headerlink\" title=\"|(位或)\"></a>|(位或)</h3><blockquote>\n<p>当相对应的位有一个为1时,等于1,否则等于0</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230215609.png\" alt=\"图片\"></p>\n<h3 id=\"异或\"><a href=\"#异或\" class=\"headerlink\" title=\"^(异或)\"></a>^(异或)</h3><blockquote>\n<p>当相对应的位不同时,等于1,相同时等于0</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230220948.png\" alt=\"图片\"></p>\n<h3 id=\"取反\"><a href=\"#取反\" class=\"headerlink\" title=\"~(取反)\"></a>~(取反)</h3><blockquote>\n<p>1等于0,0等于1</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191230220449.png\" alt=\"图片\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><table>\n<thead>\n<tr>\n<th>含义</th>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>左移</td>\n<td>&lt;&lt;</td>\n<td>末尾补0</td>\n</tr>\n<tr>\n<td>右移</td>\n<td>&gt;&gt;</td>\n<td>负数:最高位<font color=orange>补符号位1</font>      正数:最高位<font color=orange>补符号位0</font></td>\n</tr>\n<tr>\n<td>无符号右移</td>\n<td>&gt;&gt;&gt;</td>\n<td>无论是正数还是负数,右移<font color=orange>最高位一律补0</font></td>\n</tr>\n<tr>\n<td>&amp;(位与)</td>\n<td>&amp;</td>\n<td>当相对应的位都为1时,等于1,否则等于0</td>\n</tr>\n<tr>\n<td>|(位或)</td>\n<td>|</td>\n<td>当相对应的位有一个为1时,等于1,否则等于0</td>\n</tr>\n<tr>\n<td>^(异或)</td>\n<td>^</td>\n<td>当相对应的位 不同时,等于1  相同时,等于0</td>\n</tr>\n<tr>\n<td>~(取反)</td>\n<td>~</td>\n<td>1等于0,0等于1</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>最后有个小技巧,<font color=orange>向左位移几位就是乘以2的几次方,比如9向左移n位,就是</font></p>\n</blockquote>\n<p>$$<br>9向左移n位&#x3D;9*2^n<br>$$</p>\n<blockquote>\n<p><font color=orange>向右移几位就是除以2的几次方然后向下取整,比如9向右移动n位,就是</font></p>\n</blockquote>\n<p>$$<br>9向右移n位&#x3D;⌊9&#x2F;2^n⌋<br>$$</p>\n<p><font color=red>注:⌊⌋是数学符号向下取整,例如:2.25向下取整是2;   -2.25向下取整是-3; 具体的话可以看看这篇文章<a href=\"https://www.shuxuele.com/sets/function-floor-ceiling.html\">向上取整与向下取整函数</a>;该技巧不适用无符号右移</font></p>\n"},{"title":"Java的==和equals","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-08-20T11:22:50.000Z","password":null,"summary":null,"_content":"在平常工作和学习中，我们一般用==和equals来比较两个对象或数据是否相等。但是什么时候用equals，什么时候用==一直都不怎么清楚，今天整理了下；\n\n## 首先看看Java的栈空间和堆空间的地址引用\n![Java栈空间和堆空间](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/javaand1.png)\n\n##  ==的说明\n  在Java中，==对比的是两个对象在空间里的地址是否一致,比如上图的s2==s3返回的是false，s5==s6返回的是为true。话不多说，上代码。\n```java\npublic class demo2 {\n    public static void main(String[] args) {\n        String s1=new String(\"t1\");\n        String s2=new String(\"t2\");\n        String s3=new String(\"t2\");\n\n        String s4=new String(\"t3\");\n        String s5=\"t3\";\n        String s6=\"t3\";\n\n        System.out.println(\"s2==s3:\"+(s2==s3));\n        System.out.println(\"s5==s6:\"+(s5==s6));\n    }\n}\n```\n结果：\n![控制台输出](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/javaand2.png)\n\n>这是因为==比的是在空间里的地址，s2和s3在堆里面是两个不同的对象，所以地址也不同，自然返回就是false。s5和s6是Java的基础数据类型，指向的是常量池里同一个引用，所以地址也相同，返回的就是true。\n\n## equals的说明\n  每个Object里的equals都不一样，我们看看String里的源码\n```java\npublic boolean equals(Object anObject) {\n    if (this == anObject) {\n        return true;\n    }\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n```\n* 首先它会对比地址，如果地址相等，就直接返回true\n* 如果地址不相等，就会对比里面的每一个字符，直到完全相等，然后返回true\n\n## 总结\n　　所以一般如果是对比两个对象是否相等的话，用==就可以。但是如果你要对比两个值是否相等的话，就要用equals了，因为如果用==就会出现上面明明值相等,返回却是false的情况。\n","source":"_posts/java/java-equals.md","raw":"---\ntitle: Java的==和equals\ntop: false\ncover: false\ntoc: true\nmathjax: true\ncategories:\n  - Java\ntags:\n  - Java\ndate: 2019-08-20 19:22:50\npassword:\nsummary:\n---\n在平常工作和学习中，我们一般用==和equals来比较两个对象或数据是否相等。但是什么时候用equals，什么时候用==一直都不怎么清楚，今天整理了下；\n\n## 首先看看Java的栈空间和堆空间的地址引用\n![Java栈空间和堆空间](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/javaand1.png)\n\n##  ==的说明\n  在Java中，==对比的是两个对象在空间里的地址是否一致,比如上图的s2==s3返回的是false，s5==s6返回的是为true。话不多说，上代码。\n```java\npublic class demo2 {\n    public static void main(String[] args) {\n        String s1=new String(\"t1\");\n        String s2=new String(\"t2\");\n        String s3=new String(\"t2\");\n\n        String s4=new String(\"t3\");\n        String s5=\"t3\";\n        String s6=\"t3\";\n\n        System.out.println(\"s2==s3:\"+(s2==s3));\n        System.out.println(\"s5==s6:\"+(s5==s6));\n    }\n}\n```\n结果：\n![控制台输出](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/javaand2.png)\n\n>这是因为==比的是在空间里的地址，s2和s3在堆里面是两个不同的对象，所以地址也不同，自然返回就是false。s5和s6是Java的基础数据类型，指向的是常量池里同一个引用，所以地址也相同，返回的就是true。\n\n## equals的说明\n  每个Object里的equals都不一样，我们看看String里的源码\n```java\npublic boolean equals(Object anObject) {\n    if (this == anObject) {\n        return true;\n    }\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n```\n* 首先它会对比地址，如果地址相等，就直接返回true\n* 如果地址不相等，就会对比里面的每一个字符，直到完全相等，然后返回true\n\n## 总结\n　　所以一般如果是对比两个对象是否相等的话，用==就可以。但是如果你要对比两个值是否相等的话，就要用equals了，因为如果用==就会出现上面明明值相等,返回却是false的情况。\n","slug":"java/java-equals","published":1,"updated":"2021-10-08T08:33:33.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6egu002zvpuchh96d7vr","content":"<p>在平常工作和学习中，我们一般用&#x3D;&#x3D;和equals来比较两个对象或数据是否相等。但是什么时候用equals，什么时候用&#x3D;&#x3D;一直都不怎么清楚，今天整理了下；</p>\n<h2 id=\"首先看看Java的栈空间和堆空间的地址引用\"><a href=\"#首先看看Java的栈空间和堆空间的地址引用\" class=\"headerlink\" title=\"首先看看Java的栈空间和堆空间的地址引用\"></a>首先看看Java的栈空间和堆空间的地址引用</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/javaand1.png\" alt=\"Java栈空间和堆空间\"></p>\n<h2 id=\"x3D-x3D-的说明\"><a href=\"#x3D-x3D-的说明\" class=\"headerlink\" title=\"&#x3D;&#x3D;的说明\"></a>&#x3D;&#x3D;的说明</h2><p>  在Java中，&#x3D;&#x3D;对比的是两个对象在空间里的地址是否一致,比如上图的s2&#x3D;&#x3D;s3返回的是false，s5&#x3D;&#x3D;s6返回的是为true。话不多说，上代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        String s1=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        String s2=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        String s3=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String s4=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;t3&quot;</span>);</span><br><span class=\"line\">        String s5=<span class=\"string\">&quot;t3&quot;</span>;</span><br><span class=\"line\">        String s6=<span class=\"string\">&quot;t3&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;s2==s3:&quot;</span>+(s2==s3));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;s5==s6:&quot;</span>+(s5==s6));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/javaand2.png\" alt=\"控制台输出\"></p>\n<blockquote>\n<p>这是因为&#x3D;&#x3D;比的是在空间里的地址，s2和s3在堆里面是两个不同的对象，所以地址也不同，自然返回就是false。s5和s6是Java的基础数据类型，指向的是常量池里同一个引用，所以地址也相同，返回的就是true。</p>\n</blockquote>\n<h2 id=\"equals的说明\"><a href=\"#equals的说明\" class=\"headerlink\" title=\"equals的说明\"></a>equals的说明</h2><p>  每个Object里的equals都不一样，我们看看String里的源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object anObject)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span> == anObject) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anObject <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">anotherString</span> <span class=\"operator\">=</span> (String)anObject;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> value.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == anotherString.value.length) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> v1[] = value;</span><br><span class=\"line\">            <span class=\"type\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n-- != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (v1[i] != v2[i])</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>首先它会对比地址，如果地址相等，就直接返回true</li>\n<li>如果地址不相等，就会对比里面的每一个字符，直到完全相等，然后返回true</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>　　所以一般如果是对比两个对象是否相等的话，用&#x3D;&#x3D;就可以。但是如果你要对比两个值是否相等的话，就要用equals了，因为如果用&#x3D;&#x3D;就会出现上面明明值相等,返回却是false的情况。</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p>在平常工作和学习中，我们一般用&#x3D;&#x3D;和equals来比较两个对象或数据是否相等。但是什么时候用equals，什么时候用&#x3D;&#x3D;一直都不怎么清楚，今天整理了下；</p>\n<h2 id=\"首先看看Java的栈空间和堆空间的地址引用\"><a href=\"#首先看看Java的栈空间和堆空间的地址引用\" class=\"headerlink\" title=\"首先看看Java的栈空间和堆空间的地址引用\"></a>首先看看Java的栈空间和堆空间的地址引用</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/javaand1.png\" alt=\"Java栈空间和堆空间\"></p>\n<h2 id=\"x3D-x3D-的说明\"><a href=\"#x3D-x3D-的说明\" class=\"headerlink\" title=\"&#x3D;&#x3D;的说明\"></a>&#x3D;&#x3D;的说明</h2><p>  在Java中，&#x3D;&#x3D;对比的是两个对象在空间里的地址是否一致,比如上图的s2&#x3D;&#x3D;s3返回的是false，s5&#x3D;&#x3D;s6返回的是为true。话不多说，上代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        String s1=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        String s2=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        String s3=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String s4=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;t3&quot;</span>);</span><br><span class=\"line\">        String s5=<span class=\"string\">&quot;t3&quot;</span>;</span><br><span class=\"line\">        String s6=<span class=\"string\">&quot;t3&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;s2==s3:&quot;</span>+(s2==s3));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;s5==s6:&quot;</span>+(s5==s6));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>结果：<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/javaand2.png\" alt=\"控制台输出\"></p>\n<blockquote>\n<p>这是因为&#x3D;&#x3D;比的是在空间里的地址，s2和s3在堆里面是两个不同的对象，所以地址也不同，自然返回就是false。s5和s6是Java的基础数据类型，指向的是常量池里同一个引用，所以地址也相同，返回的就是true。</p>\n</blockquote>\n<h2 id=\"equals的说明\"><a href=\"#equals的说明\" class=\"headerlink\" title=\"equals的说明\"></a>equals的说明</h2><p>  每个Object里的equals都不一样，我们看看String里的源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object anObject)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span> == anObject) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anObject <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">anotherString</span> <span class=\"operator\">=</span> (String)anObject;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> value.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == anotherString.value.length) &#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> v1[] = value;</span><br><span class=\"line\">            <span class=\"type\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n-- != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (v1[i] != v2[i])</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>首先它会对比地址，如果地址相等，就直接返回true</li>\n<li>如果地址不相等，就会对比里面的每一个字符，直到完全相等，然后返回true</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>　　所以一般如果是对比两个对象是否相等的话，用&#x3D;&#x3D;就可以。但是如果你要对比两个值是否相等的话，就要用equals了，因为如果用&#x3D;&#x3D;就会出现上面明明值相等,返回却是false的情况。</p>\n"},{"title":"【源码解析】想了解LinkedList？看这篇文章就对了","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-04T16:21:43.000Z","password":null,"summary":null,"keywords":null,"description":"LinkedList由于实现了Deque这个接口，所以可以当栈和队列使用。不过一般要用栈或队列的时候推荐使用ArrayDeque,所以这里就不讲LinkedList的栈和队列功能了🌚。还是和上篇ArrayList一样，讲些常用的方法...","_content":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p>\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">本文基于JDK1.8</p>\n</blockquote>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">前言</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>由于实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口，所以可以当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>使用。不过一般要用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>或<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>的时候推荐使用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>,所以这里就不讲<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>的栈和队列功能了🌚。还是和上篇<a href=\"https://mjava.top/java/java-arraylist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">ArrayList</a>一样，讲些常用的方法。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>内部是由<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">双链表</strong>组成的，里面存放着一个个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>，每个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>又包含三个元素(<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">prev</code>,<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">item</code>,<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">next</code>):</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">prev:</strong>指向前一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">item:</strong>存放存入的数据</li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">next:</strong>指向下一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">链表的第一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">prev</code>为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>，最后个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">next</code>为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code></p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">我简单的画了一张图，可以看下</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个prev和next并不是指向null，因为内存中没有为null分配空间，这边是表示是prev和next为null；</p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104213058.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">本文内容</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104164627.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">内部变量</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">相比于<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Arraylist</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>内部变量就少得多，就只有三个，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">size</code>存这当前元素的个数，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">first</code>指向链表的第一个，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">last</code>指向列表的最后一个</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104170249.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">构造方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">无参构造方法</span></h3>\n<h4 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br></code></pre>\n<h4 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">无参构造只是初始化了数据，并未做任何操作<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">(初始化  size=0  first=null   last=null)</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104172851.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">有参构造方法</span></h3>\n<h4 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;oldList=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>List&lt;String&gt;&nbsp;newList=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;(oldList);<br></code></pre>\n<h4 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">由于篇幅有限，addAll()方法这边就不讲了，后面另写文章再讲，里面的操作就相当于把集合里的元素复制到新集合里面。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104174143.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hget\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">get方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hgetintindex\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">get(int index)</span></h3>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里先讲get()方法，然后再讲add()方法，原因是插入方法里用到的调用的方法个get()方法里是一样的</p>\n</blockquote>\n<h4 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰2\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰3\"</span>);<br>list.get(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">2</span>);<br></code></pre>\n<h4 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104183636.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">checkElementIndex(int index)</strong>检查越界</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104183853.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104183939.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">node(int index)</strong>查找Node</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200109160648.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hadd\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"haddee\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add(E e)</span></h3>\n<h4 id=\"h-12\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br></code></pre>\n<h4 id=\"h-13\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104175255.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">linkLast(E e)</strong>连接最后一个元素</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104175907.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">Node&lt;E&gt;</strong>内部类</li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">就像开头说的，每个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>里有三个，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">prev:</strong>指向前一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">item:</strong>存放存入的数据，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">next:</strong>指向下一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">Node</span>&lt;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">E</span>&gt;&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;item;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;prev;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Node(Node&lt;E&gt;&nbsp;prev,&nbsp;E&nbsp;element,&nbsp;Node&lt;E&gt;&nbsp;next)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.item&nbsp;=&nbsp;element;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.next&nbsp;=&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.prev&nbsp;=&nbsp;prev;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<h4 id=\"h-14\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">第一次添加时的流程示意图</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104224556.jpg\" alt=\"第一次添加时的流程示意图\" title=\"第一次添加时的流程示意图\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">第一次添加时的流程示意图</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">不是第一次添加</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104213234.jpg\" alt=\"不是第一次添加\" title=\"不是第一次添加\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">不是第一次添加</figcaption></figure>\n<h3 id=\"haddintindexeelement\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add(int index, E element)</span></h3>\n<h4 id=\"h-15\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.add(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hk\"</span>);<br></code></pre>\n<h4 id=\"h-16\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">这边插入元素时，先判断插入的位置是不是尾部，如果不尾部的话，先调用和get()那个一样的方法，来查找要插入位置的当前元素，然后进行插入操作</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104185743.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">checkPositionIndex(int index)</strong>检查是否越界</li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个检查越界的方法个get()检查越界的方法有点不同，它是可以等于<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">size</code>的，因为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">linkedList</code>的索引设计也是从<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">0</code>开始的，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">所以size永远比索引大1</strong></p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104190000.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104190144.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">linkBefore(E e, Node&lt;E&gt; succ)</strong>插入元素操作</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104191607.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h4 id=\"h-17\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上面说的可能有点绕，看看流程图就明白了，哈哈</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">添加的位置为第一个</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104213757.jpg\" alt=\"添加的位置为第一个\" title=\"添加的位置为第一个\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">添加的位置为第一个</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">添加的位置为中间</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104213437.jpg\" alt=\"添加的位置为中间\" title=\"添加的位置为中间\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">添加的位置为中间</figcaption></figure>\n<h2 id=\"hset\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">set方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hsetintindexeelement\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">set(int index, E element)</span></h3>\n<h4 id=\"h-18\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.set(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">0</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br></code></pre>\n<h4 id=\"h-19\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这里大多调用的是和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">get()</code>里一样的方法</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104194247.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hremove\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hremoveintindex\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove(int index)</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">按索引删除，先找到被删除的Node，然后解除相关链接，设置Node里三大元素为null，删除后返回被删除Node里的item</p>\n<h4 id=\"h-20\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.remove(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>);<br></code></pre>\n<h4 id=\"h-21\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104205658.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">unlink(Node&lt;E&gt; x)</strong>解除Node的连接，然后返回被解除链接的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">item</code></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104222250.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h4 id=\"h-22\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">第一个元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104215754.jpg\" alt=\"删除的是链表里的第一个元素\" title=\"删除的是链表里的第一个元素\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">删除的是链表里的第一个元素</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">中间元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104215947.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">最后一个元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104220851.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"hremoveobjecto\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove(Object o)</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这个删除就比较<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">慢</code>了，它是从头开始一一对比，时间复杂度为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">O(n)</code>，这个删除也是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">只删除最早添加的数据</strong></p>\n<h4 id=\"h-23\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.remove(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br></code></pre>\n<h4 id=\"h-24\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">unlink()</code>方法就是上面讲的那个</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104223708.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hclear\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hclear-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear()</span></h3>\n<h4 id=\"h-25\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.clear();<br></code></pre>\n<h4 id=\"h-26\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104224213.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-27\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>里删除，添加操作一般就两个步骤，变换前后Node指向的地址，删除操作把对应Node里的三个变量都设置为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>，方便<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">GC</code>回收。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">如果要删除元素时，最好选择传入索引删除，他比直接传入要删除的对象的方法要快很多</p></div>","source":"_posts/java/java-linkedlist-source-1.md","raw":"---\ntitle: 【源码解析】想了解LinkedList？看这篇文章就对了\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-05 00:21:43\npassword:\nsummary:\nkeywords:\ndescription: LinkedList由于实现了Deque这个接口，所以可以当栈和队列使用。不过一般要用栈或队列的时候推荐使用ArrayDeque,所以这里就不讲LinkedList的栈和队列功能了🌚。还是和上篇ArrayList一样，讲些常用的方法...\ntags:\n- Java\n- 源码分析\n- LinkedList\ncategories:\n- Java\n---\n<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p>\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">本文基于JDK1.8</p>\n</blockquote>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">前言</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>由于实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口，所以可以当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>使用。不过一般要用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>或<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>的时候推荐使用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>,所以这里就不讲<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>的栈和队列功能了🌚。还是和上篇<a href=\"https://mjava.top/java/java-arraylist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">ArrayList</a>一样，讲些常用的方法。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>内部是由<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">双链表</strong>组成的，里面存放着一个个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>，每个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>又包含三个元素(<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">prev</code>,<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">item</code>,<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">next</code>):</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">prev:</strong>指向前一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">item:</strong>存放存入的数据</li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">next:</strong>指向下一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">链表的第一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">prev</code>为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>，最后个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">next</code>为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code></p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">我简单的画了一张图，可以看下</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个prev和next并不是指向null，因为内存中没有为null分配空间，这边是表示是prev和next为null；</p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104213058.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">本文内容</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104164627.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">内部变量</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">相比于<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Arraylist</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>内部变量就少得多，就只有三个，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">size</code>存这当前元素的个数，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">first</code>指向链表的第一个，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">last</code>指向列表的最后一个</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104170249.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">构造方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">无参构造方法</span></h3>\n<h4 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br></code></pre>\n<h4 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">无参构造只是初始化了数据，并未做任何操作<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">(初始化  size=0  first=null   last=null)</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104172851.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">有参构造方法</span></h3>\n<h4 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;oldList=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>List&lt;String&gt;&nbsp;newList=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;(oldList);<br></code></pre>\n<h4 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">由于篇幅有限，addAll()方法这边就不讲了，后面另写文章再讲，里面的操作就相当于把集合里的元素复制到新集合里面。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104174143.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hget\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">get方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hgetintindex\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">get(int index)</span></h3>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里先讲get()方法，然后再讲add()方法，原因是插入方法里用到的调用的方法个get()方法里是一样的</p>\n</blockquote>\n<h4 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰2\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰3\"</span>);<br>list.get(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">2</span>);<br></code></pre>\n<h4 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104183636.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">checkElementIndex(int index)</strong>检查越界</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104183853.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104183939.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">node(int index)</strong>查找Node</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200109160648.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hadd\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"haddee\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add(E e)</span></h3>\n<h4 id=\"h-12\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br></code></pre>\n<h4 id=\"h-13\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104175255.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">linkLast(E e)</strong>连接最后一个元素</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104175907.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">Node&lt;E&gt;</strong>内部类</li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">就像开头说的，每个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>里有三个，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">prev:</strong>指向前一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">item:</strong>存放存入的数据，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">next:</strong>指向下一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">Node</span>&lt;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">E</span>&gt;&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;item;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;prev;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Node(Node&lt;E&gt;&nbsp;prev,&nbsp;E&nbsp;element,&nbsp;Node&lt;E&gt;&nbsp;next)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.item&nbsp;=&nbsp;element;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.next&nbsp;=&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.prev&nbsp;=&nbsp;prev;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<h4 id=\"h-14\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">第一次添加时的流程示意图</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104224556.jpg\" alt=\"第一次添加时的流程示意图\" title=\"第一次添加时的流程示意图\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">第一次添加时的流程示意图</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">不是第一次添加</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104213234.jpg\" alt=\"不是第一次添加\" title=\"不是第一次添加\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">不是第一次添加</figcaption></figure>\n<h3 id=\"haddintindexeelement\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add(int index, E element)</span></h3>\n<h4 id=\"h-15\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.add(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hk\"</span>);<br></code></pre>\n<h4 id=\"h-16\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">这边插入元素时，先判断插入的位置是不是尾部，如果不尾部的话，先调用和get()那个一样的方法，来查找要插入位置的当前元素，然后进行插入操作</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104185743.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">checkPositionIndex(int index)</strong>检查是否越界</li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个检查越界的方法个get()检查越界的方法有点不同，它是可以等于<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">size</code>的，因为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">linkedList</code>的索引设计也是从<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">0</code>开始的，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">所以size永远比索引大1</strong></p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104190000.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104190144.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">linkBefore(E e, Node&lt;E&gt; succ)</strong>插入元素操作</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104191607.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h4 id=\"h-17\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上面说的可能有点绕，看看流程图就明白了，哈哈</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">添加的位置为第一个</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104213757.jpg\" alt=\"添加的位置为第一个\" title=\"添加的位置为第一个\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">添加的位置为第一个</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">添加的位置为中间</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104213437.jpg\" alt=\"添加的位置为中间\" title=\"添加的位置为中间\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">添加的位置为中间</figcaption></figure>\n<h2 id=\"hset\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">set方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hsetintindexeelement\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">set(int index, E element)</span></h3>\n<h4 id=\"h-18\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.set(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">0</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br></code></pre>\n<h4 id=\"h-19\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这里大多调用的是和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">get()</code>里一样的方法</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104194247.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hremove\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hremoveintindex\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove(int index)</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">按索引删除，先找到被删除的Node，然后解除相关链接，设置Node里三大元素为null，删除后返回被删除Node里的item</p>\n<h4 id=\"h-20\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.remove(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>);<br></code></pre>\n<h4 id=\"h-21\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104205658.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">unlink(Node&lt;E&gt; x)</strong>解除Node的连接，然后返回被解除链接的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">item</code></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104222250.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h4 id=\"h-22\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">第一个元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104215754.jpg\" alt=\"删除的是链表里的第一个元素\" title=\"删除的是链表里的第一个元素\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">删除的是链表里的第一个元素</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">中间元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104215947.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">最后一个元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104220851.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"hremoveobjecto\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove(Object o)</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这个删除就比较<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">慢</code>了，它是从头开始一一对比，时间复杂度为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">O(n)</code>，这个删除也是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">只删除最早添加的数据</strong></p>\n<h4 id=\"h-23\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.remove(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br></code></pre>\n<h4 id=\"h-24\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">unlink()</code>方法就是上面讲的那个</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104223708.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hclear\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hclear-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear()</span></h3>\n<h4 id=\"h-25\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.clear();<br></code></pre>\n<h4 id=\"h-26\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104224213.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-27\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>里删除，添加操作一般就两个步骤，变换前后Node指向的地址，删除操作把对应Node里的三个变量都设置为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>，方便<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">GC</code>回收。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">如果要删除元素时，最好选择传入索引删除，他比直接传入要删除的对象的方法要快很多</p></div>","slug":"java/java-linkedlist-source-1","published":1,"updated":"2021-10-08T08:33:45.209Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6egv0032vpuc4zwh10o5","content":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p>\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">本文基于JDK1.8</p>\n</blockquote>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">前言</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>由于实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口，所以可以当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>使用。不过一般要用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>或<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>的时候推荐使用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>,所以这里就不讲<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>的栈和队列功能了🌚。还是和上篇<a href=\"https://mjava.top/java/java-arraylist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">ArrayList</a>一样，讲些常用的方法。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>内部是由<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">双链表</strong>组成的，里面存放着一个个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>，每个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>又包含三个元素(<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">prev</code>,<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">item</code>,<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">next</code>):</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">prev:</strong>指向前一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">item:</strong>存放存入的数据</li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">next:</strong>指向下一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">链表的第一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">prev</code>为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>，最后个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">next</code>为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code></p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">我简单的画了一张图，可以看下</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个prev和next并不是指向null，因为内存中没有为null分配空间，这边是表示是prev和next为null；</p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104213058.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">本文内容</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104164627.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">内部变量</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">相比于<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Arraylist</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>内部变量就少得多，就只有三个，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">size</code>存这当前元素的个数，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">first</code>指向链表的第一个，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">last</code>指向列表的最后一个</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104170249.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">构造方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">无参构造方法</span></h3>\n<h4 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br></code></pre>\n<h4 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">无参构造只是初始化了数据，并未做任何操作<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">(初始化  size=0  first=null   last=null)</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104172851.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">有参构造方法</span></h3>\n<h4 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;oldList=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>List&lt;String&gt;&nbsp;newList=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;(oldList);<br></code></pre>\n<h4 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">由于篇幅有限，addAll()方法这边就不讲了，后面另写文章再讲，里面的操作就相当于把集合里的元素复制到新集合里面。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104174143.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hget\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">get方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hgetintindex\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">get(int index)</span></h3>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里先讲get()方法，然后再讲add()方法，原因是插入方法里用到的调用的方法个get()方法里是一样的</p>\n</blockquote>\n<h4 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰2\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰3\"</span>);<br>list.get(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">2</span>);<br></code></pre>\n<h4 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104183636.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">checkElementIndex(int index)</strong>检查越界</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104183853.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104183939.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">node(int index)</strong>查找Node</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200109160648.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hadd\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"haddee\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add(E e)</span></h3>\n<h4 id=\"h-12\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br></code></pre>\n<h4 id=\"h-13\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104175255.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">linkLast(E e)</strong>连接最后一个元素</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104175907.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">Node&lt;E&gt;</strong>内部类</li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">就像开头说的，每个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>里有三个，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">prev:</strong>指向前一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">item:</strong>存放存入的数据，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">next:</strong>指向下一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">Node</span>&lt;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">E</span>&gt;&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;item;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;prev;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Node(Node&lt;E&gt;&nbsp;prev,&nbsp;E&nbsp;element,&nbsp;Node&lt;E&gt;&nbsp;next)&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.item&nbsp;=&nbsp;element;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.next&nbsp;=&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.prev&nbsp;=&nbsp;prev;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br>&#125;<br></code></pre>\n<h4 id=\"h-14\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">第一次添加时的流程示意图</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104224556.jpg\" alt=\"第一次添加时的流程示意图\" title=\"第一次添加时的流程示意图\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">第一次添加时的流程示意图</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">不是第一次添加</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104213234.jpg\" alt=\"不是第一次添加\" title=\"不是第一次添加\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">不是第一次添加</figcaption></figure>\n<h3 id=\"haddintindexeelement\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add(int index, E element)</span></h3>\n<h4 id=\"h-15\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.add(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hk\"</span>);<br></code></pre>\n<h4 id=\"h-16\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">这边插入元素时，先判断插入的位置是不是尾部，如果不尾部的话，先调用和get()那个一样的方法，来查找要插入位置的当前元素，然后进行插入操作</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104185743.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">checkPositionIndex(int index)</strong>检查是否越界</li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个检查越界的方法个get()检查越界的方法有点不同，它是可以等于<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">size</code>的，因为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">linkedList</code>的索引设计也是从<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">0</code>开始的，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">所以size永远比索引大1</strong></p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104190000.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104190144.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">linkBefore(E e, Node&lt;E&gt; succ)</strong>插入元素操作</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104191607.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h4 id=\"h-17\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上面说的可能有点绕，看看流程图就明白了，哈哈</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">添加的位置为第一个</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104213757.jpg\" alt=\"添加的位置为第一个\" title=\"添加的位置为第一个\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">添加的位置为第一个</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">添加的位置为中间</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104213437.jpg\" alt=\"添加的位置为中间\" title=\"添加的位置为中间\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">添加的位置为中间</figcaption></figure>\n<h2 id=\"hset\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">set方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hsetintindexeelement\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">set(int index, E element)</span></h3>\n<h4 id=\"h-18\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.set(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">0</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br></code></pre>\n<h4 id=\"h-19\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这里大多调用的是和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">get()</code>里一样的方法</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104194247.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hremove\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hremoveintindex\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove(int index)</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">按索引删除，先找到被删除的Node，然后解除相关链接，设置Node里三大元素为null，删除后返回被删除Node里的item</p>\n<h4 id=\"h-20\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.remove(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>);<br></code></pre>\n<h4 id=\"h-21\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104205658.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">unlink(Node&lt;E&gt; x)</strong>解除Node的连接，然后返回被解除链接的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">item</code></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104222250.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h4 id=\"h-22\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">第一个元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104215754.jpg\" alt=\"删除的是链表里的第一个元素\" title=\"删除的是链表里的第一个元素\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">删除的是链表里的第一个元素</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">中间元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104215947.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">最后一个元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104220851.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"hremoveobjecto\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove(Object o)</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这个删除就比较<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">慢</code>了，它是从头开始一一对比，时间复杂度为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">O(n)</code>，这个删除也是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">只删除最早添加的数据</strong></p>\n<h4 id=\"h-23\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.remove(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br></code></pre>\n<h4 id=\"h-24\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">unlink()</code>方法就是上面讲的那个</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104223708.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hclear\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hclear-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear()</span></h3>\n<h4 id=\"h-25\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.clear();<br></code></pre>\n<h4 id=\"h-26\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104224213.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-27\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>里删除，添加操作一般就两个步骤，变换前后Node指向的地址，删除操作把对应Node里的三个变量都设置为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>，方便<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">GC</code>回收。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">如果要删除元素时，最好选择传入索引删除，他比直接传入要删除的对象的方法要快很多</p></div>","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p>\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">本文基于JDK1.8</p>\n</blockquote>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">前言</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>由于实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口，所以可以当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>使用。不过一般要用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>或<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>的时候推荐使用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>,所以这里就不讲<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>的栈和队列功能了🌚。还是和上篇<a href=\"https://mjava.top/java/java-arraylist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">ArrayList</a>一样，讲些常用的方法。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>内部是由<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">双链表</strong>组成的，里面存放着一个个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>，每个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>又包含三个元素(<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">prev</code>,<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">item</code>,<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">next</code>):</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">prev:</strong>指向前一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">item:</strong>存放存入的数据</li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">next:</strong>指向下一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">链表的第一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">prev</code>为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>，最后个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">next</code>为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code></p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">我简单的画了一张图，可以看下</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个prev和next并不是指向null，因为内存中没有为null分配空间，这边是表示是prev和next为null；</p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104213058.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">本文内容</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104164627.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">内部变量</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">相比于<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Arraylist</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>内部变量就少得多，就只有三个，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">size</code>存这当前元素的个数，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">first</code>指向链表的第一个，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">last</code>指向列表的最后一个</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104170249.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">构造方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">无参构造方法</span></h3>\n<h4 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br></code></pre>\n<h4 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">无参构造只是初始化了数据，并未做任何操作<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">(初始化  size=0  first=null   last=null)</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104172851.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">有参构造方法</span></h3>\n<h4 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;oldList=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>List&lt;String&gt;&nbsp;newList=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;(oldList);<br></code></pre>\n<h4 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">由于篇幅有限，addAll()方法这边就不讲了，后面另写文章再讲，里面的操作就相当于把集合里的元素复制到新集合里面。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104174143.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hget\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">get方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hgetintindex\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">get(int index)</span></h3>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里先讲get()方法，然后再讲add()方法，原因是插入方法里用到的调用的方法个get()方法里是一样的</p>\n</blockquote>\n<h4 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰2\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰3\"</span>);<br>list.get(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">2</span>);<br></code></pre>\n<h4 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104183636.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">checkElementIndex(int index)</strong>检查越界</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104183853.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104183939.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">node(int index)</strong>查找Node</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200109160648.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hadd\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"haddee\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add(E e)</span></h3>\n<h4 id=\"h-12\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br></code></pre>\n<h4 id=\"h-13\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104175255.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">linkLast(E e)</strong>连接最后一个元素</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104175907.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">Node&lt;E&gt;</strong>内部类</li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">就像开头说的，每个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>里有三个，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">prev:</strong>指向前一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">item:</strong>存放存入的数据，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">next:</strong>指向下一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">Node</span>&lt;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">E</span>&gt;&nbsp;</span>&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;item;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;prev;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Node(Node&lt;E&gt;&nbsp;prev,&nbsp;E&nbsp;element,&nbsp;Node&lt;E&gt;&nbsp;next)&nbsp;&#123;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.item&nbsp;=&nbsp;element;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.next&nbsp;=&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.prev&nbsp;=&nbsp;prev;<br>&nbsp;&nbsp;&nbsp;&nbsp;&#125;<br>&#125;<br></code></pre>\n<h4 id=\"h-14\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">第一次添加时的流程示意图</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104224556.jpg\" alt=\"第一次添加时的流程示意图\" title=\"第一次添加时的流程示意图\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">第一次添加时的流程示意图</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">不是第一次添加</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104213234.jpg\" alt=\"不是第一次添加\" title=\"不是第一次添加\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">不是第一次添加</figcaption></figure>\n<h3 id=\"haddintindexeelement\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add(int index, E element)</span></h3>\n<h4 id=\"h-15\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.add(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hk\"</span>);<br></code></pre>\n<h4 id=\"h-16\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">这边插入元素时，先判断插入的位置是不是尾部，如果不尾部的话，先调用和get()那个一样的方法，来查找要插入位置的当前元素，然后进行插入操作</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104185743.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">checkPositionIndex(int index)</strong>检查是否越界</li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个检查越界的方法个get()检查越界的方法有点不同，它是可以等于<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">size</code>的，因为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">linkedList</code>的索引设计也是从<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">0</code>开始的，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">所以size永远比索引大1</strong></p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104190000.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104190144.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">linkBefore(E e, Node&lt;E&gt; succ)</strong>插入元素操作</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104191607.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h4 id=\"h-17\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上面说的可能有点绕，看看流程图就明白了，哈哈</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">添加的位置为第一个</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104213757.jpg\" alt=\"添加的位置为第一个\" title=\"添加的位置为第一个\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">添加的位置为第一个</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">添加的位置为中间</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104213437.jpg\" alt=\"添加的位置为中间\" title=\"添加的位置为中间\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">添加的位置为中间</figcaption></figure>\n<h2 id=\"hset\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">set方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hsetintindexeelement\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">set(int index, E element)</span></h3>\n<h4 id=\"h-18\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.set(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">0</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br></code></pre>\n<h4 id=\"h-19\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这里大多调用的是和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">get()</code>里一样的方法</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104194247.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hremove\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hremoveintindex\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove(int index)</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">按索引删除，先找到被删除的Node，然后解除相关链接，设置Node里三大元素为null，删除后返回被删除Node里的item</p>\n<h4 id=\"h-20\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.remove(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>);<br></code></pre>\n<h4 id=\"h-21\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104205658.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">unlink(Node&lt;E&gt; x)</strong>解除Node的连接，然后返回被解除链接的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">item</code></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104222250.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h4 id=\"h-22\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">第一个元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104215754.jpg\" alt=\"删除的是链表里的第一个元素\" title=\"删除的是链表里的第一个元素\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">删除的是链表里的第一个元素</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">中间元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104215947.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">最后一个元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104220851.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"hremoveobjecto\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove(Object o)</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这个删除就比较<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">慢</code>了，它是从头开始一一对比，时间复杂度为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">O(n)</code>，这个删除也是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">只删除最早添加的数据</strong></p>\n<h4 id=\"h-23\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.remove(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br></code></pre>\n<h4 id=\"h-24\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">unlink()</code>方法就是上面讲的那个</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104223708.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hclear\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hclear-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear()</span></h3>\n<h4 id=\"h-25\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.clear();<br></code></pre>\n<h4 id=\"h-26\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://xhh.dengzii.com/blog/20200104224213.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-27\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>里删除，添加操作一般就两个步骤，变换前后Node指向的地址，删除操作把对应Node里的三个变量都设置为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>，方便<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">GC</code>回收。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">如果要删除元素时，最好选择传入索引删除，他比直接传入要删除的对象的方法要快很多</p></div>"},{"title":"Java中String判断为空的4大方法比较","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-08-20T10:59:15.000Z","password":null,"summary":null,"_content":"\n## 一.四大方法\n```java\npublic class demo1 {\n   public static void main(String[] args) {\n       String a=\"\";\n       String a2=new String();\n\n       System.out.println(a==\"\");\n       System.out.println(a2==\"\");\n       System.out.println(\"------------------------------\");\n       System.out.println(a==null);\n       System.out.println(a2==null);\n       System.out.println(\"------------------------------\");\n       System.out.println(a.length()<=0);\n       System.out.println(a2.length()<=0);\n       System.out.println(\"------------------------------\");\n       System.out.println(a.isEmpty());\n       System.out.println(a2.isEmpty());\n       System.out.println(\"------------------------------\");\n       \n   }\n}\n```\n## 二.输出结果\n![控制台输出](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/javaands1.png)\n\n>可以看到用\"==\"判断的那组出现了不一致的情况\n","source":"_posts/java/java-isnull-four.md","raw":"---\ntitle: Java中String判断为空的4大方法比较\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Java\ncategories:\n  - Java\ndate: 2019-08-20 18:59:15\npassword:\nsummary:\n---\n\n## 一.四大方法\n```java\npublic class demo1 {\n   public static void main(String[] args) {\n       String a=\"\";\n       String a2=new String();\n\n       System.out.println(a==\"\");\n       System.out.println(a2==\"\");\n       System.out.println(\"------------------------------\");\n       System.out.println(a==null);\n       System.out.println(a2==null);\n       System.out.println(\"------------------------------\");\n       System.out.println(a.length()<=0);\n       System.out.println(a2.length()<=0);\n       System.out.println(\"------------------------------\");\n       System.out.println(a.isEmpty());\n       System.out.println(a2.isEmpty());\n       System.out.println(\"------------------------------\");\n       \n   }\n}\n```\n## 二.输出结果\n![控制台输出](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/javaands1.png)\n\n>可以看到用\"==\"判断的那组出现了不一致的情况\n","slug":"java/java-isnull-four","published":1,"updated":"2021-10-08T08:33:40.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6egw0036vpuc40e08klv","content":"<h2 id=\"一-四大方法\"><a href=\"#一-四大方法\" class=\"headerlink\" title=\"一.四大方法\"></a>一.四大方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo1</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       String a=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">       String a2=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(a==<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">       System.out.println(a2==<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;------------------------------&quot;</span>);</span><br><span class=\"line\">       System.out.println(a==<span class=\"literal\">null</span>);</span><br><span class=\"line\">       System.out.println(a2==<span class=\"literal\">null</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;------------------------------&quot;</span>);</span><br><span class=\"line\">       System.out.println(a.length()&lt;=<span class=\"number\">0</span>);</span><br><span class=\"line\">       System.out.println(a2.length()&lt;=<span class=\"number\">0</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;------------------------------&quot;</span>);</span><br><span class=\"line\">       System.out.println(a.isEmpty());</span><br><span class=\"line\">       System.out.println(a2.isEmpty());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;------------------------------&quot;</span>);</span><br><span class=\"line\">       </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-输出结果\"><a href=\"#二-输出结果\" class=\"headerlink\" title=\"二.输出结果\"></a>二.输出结果</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/javaands1.png\" alt=\"控制台输出\"></p>\n<blockquote>\n<p>可以看到用”&#x3D;&#x3D;”判断的那组出现了不一致的情况</p>\n</blockquote>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"一-四大方法\"><a href=\"#一-四大方法\" class=\"headerlink\" title=\"一.四大方法\"></a>一.四大方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">demo1</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       String a=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">       String a2=<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(a==<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">       System.out.println(a2==<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;------------------------------&quot;</span>);</span><br><span class=\"line\">       System.out.println(a==<span class=\"literal\">null</span>);</span><br><span class=\"line\">       System.out.println(a2==<span class=\"literal\">null</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;------------------------------&quot;</span>);</span><br><span class=\"line\">       System.out.println(a.length()&lt;=<span class=\"number\">0</span>);</span><br><span class=\"line\">       System.out.println(a2.length()&lt;=<span class=\"number\">0</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;------------------------------&quot;</span>);</span><br><span class=\"line\">       System.out.println(a.isEmpty());</span><br><span class=\"line\">       System.out.println(a2.isEmpty());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;------------------------------&quot;</span>);</span><br><span class=\"line\">       </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二-输出结果\"><a href=\"#二-输出结果\" class=\"headerlink\" title=\"二.输出结果\"></a>二.输出结果</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/javaands1.png\" alt=\"控制台输出\"></p>\n<blockquote>\n<p>可以看到用”&#x3D;&#x3D;”判断的那组出现了不一致的情况</p>\n</blockquote>\n"},{"title":"JDKproxy和Cglib初探","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:09:47.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n# JDKproxy和Cglib初探\n\n\n\n## 简介\n\n在Java中，动态代理机制的出现，使得Java开发人员不用手工编写代理类，只要简单地制定一组接口及委托类对象，便能动态地获得代理类。动态代理在Java中有着广泛的应用，比如Spring AOP，Hibernate数据查询、测试框架的后端mock、RPC，Java注解对象获取等。\n\n## JDK原生动态代理(JDKProxy)\n\n`JDKProxy`只能对`实现了接口的类`生成代理，而不能针对`普通类` 。`JDKProxy`原生的`反射API`进行操作，在生成类上比较高效。\n\n### 使用\n\n![](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729000830.png)\n\n```java\ninterface TestInterface{\n    void test();\n}\nclass TestClass implements TestInterface{\n    @Override\n    public void test(){\n        System.out.println(\"JDK动态代理\");\n    }\n}\n\n//主方法\npublic class JDKProxy {\n    public static void main(String[] args) {\n        TestClass testClass=new TestClass();\n        ProxyHandle proxyHandle=new ProxyHandle(testClass);\n        //使用接口\n        TestInterface testClass1= (TestInterface) Proxy.newProxyInstance(\n                testClass.getClass().getClassLoader(),\n                testClass.getClass().getInterfaces(),proxyHandle);\n        testClass1.test();\n        System.out.println(\"代理类名称：\"+testClass1.getClass());\n    }\n}\n\n//代理\nclass ProxyHandle implements InvocationHandler{\n\n    private Object originaObj;\n    public ProxyHandle(Object o){\n        this.originaObj=o;\n    }\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"前置\");\n        Object object=method.invoke(originaObj,args);\n        System.out.println(\"后置\");\n        return object;\n    }\n}\n```\n\n```\n输出结果：\n\t前置\n    JDK动态代理\n    后置\n    代理类名称：class com.example.demo.aop.$Proxy0\n```\n\n\n\n## Cglib\n\n`Cglib`代理是针对`所有类`（包括实现接口的类和普通的类）实现代理，主要是对指定的类**生成一个子类**，覆盖其中的方法(**所以该类或方法不能声明称final的**) 。`Cglib`使用`ASM框架`直接对字节码进行操作，在类的执行过程中比较高效\n\n### 使用\n\n![](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729001250.png)\n\n```java\ninterface InterTest{\n    void t1();\n}\n\nclass InterClass implements InterTest{\n    @Override\n    public void t1() {\n        System.out.println(\"我是接口测试方法\");\n    }\n}\n\npublic class CglibTest {\n\n    public static void main(String[] args) {\n        /**\n         * 普通类\n         * */\n        Enhancer enhancer=new Enhancer();\n        enhancer.setSuperclass(CG.class);\n        enhancer.setCallback(new MethodInterceptor() {\n            @Override\n            public Object intercept(Object o, Method method,\n                                    Object[] objects,\n                                    MethodProxy methodProxy) throws Throwable {\n                System.out.println(\"前置\");\n                Object object=methodProxy.invokeSuper(o,objects);\n                System.out.println(\"后置\");\n                return object;\n            }\n        });\n        CG cglibTest= (CG) enhancer.create();\n        cglibTest.test();\n        System.out.println(\"代理类名称1：\"+cglibTest.getClass());\n\n        /*\n         * 实现了接口的类\n         * */\n        Enhancer enhancer2=new Enhancer();\n        enhancer2.setSuperclass(InterClass.class);\n        enhancer2.setCallback(new MethodInterceptor() {\n            @Override\n            public Object intercept(Object o, Method method,\n                                    Object[] objects,\n                                    MethodProxy methodProxy) throws Throwable {\n                System.out.println(\"接口类前置\");\n                Object object=methodProxy.invokeSuper(o,objects);\n                System.out.println(\"接口类后置\");\n                return object;\n            }\n        });\n        InterClass interClass= (InterClass) enhancer2.create();\n        interClass.t1();\n        System.out.println(\"代理类名称2：\"+interClass.getClass());\n    }\n}\n\nclass CG{\n    public void test(){\n        System.out.println(\"代理类测试\");\n    }\n}\n```\n\n```\n输出结果：\n\t前置\n    代理类测试\n    后置\n    代理类名称1：class com.example.demo.aop.CG$$EnhancerByCGLIB$$5c6cbf31\n    \n    接口类前置\n    我是接口测试方法\n    接口类后置\n    代理类名称2：class com.example.demo.aop.InterClass$$EnhancerByCGLIB$$80c75859\n\n```","source":"_posts/java/jdkproxy-cglib.md","raw":"---\ntitle: JDKproxy和Cglib初探\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:09:47\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\ncategories:\n- Java\n---\n\n# JDKproxy和Cglib初探\n\n\n\n## 简介\n\n在Java中，动态代理机制的出现，使得Java开发人员不用手工编写代理类，只要简单地制定一组接口及委托类对象，便能动态地获得代理类。动态代理在Java中有着广泛的应用，比如Spring AOP，Hibernate数据查询、测试框架的后端mock、RPC，Java注解对象获取等。\n\n## JDK原生动态代理(JDKProxy)\n\n`JDKProxy`只能对`实现了接口的类`生成代理，而不能针对`普通类` 。`JDKProxy`原生的`反射API`进行操作，在生成类上比较高效。\n\n### 使用\n\n![](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729000830.png)\n\n```java\ninterface TestInterface{\n    void test();\n}\nclass TestClass implements TestInterface{\n    @Override\n    public void test(){\n        System.out.println(\"JDK动态代理\");\n    }\n}\n\n//主方法\npublic class JDKProxy {\n    public static void main(String[] args) {\n        TestClass testClass=new TestClass();\n        ProxyHandle proxyHandle=new ProxyHandle(testClass);\n        //使用接口\n        TestInterface testClass1= (TestInterface) Proxy.newProxyInstance(\n                testClass.getClass().getClassLoader(),\n                testClass.getClass().getInterfaces(),proxyHandle);\n        testClass1.test();\n        System.out.println(\"代理类名称：\"+testClass1.getClass());\n    }\n}\n\n//代理\nclass ProxyHandle implements InvocationHandler{\n\n    private Object originaObj;\n    public ProxyHandle(Object o){\n        this.originaObj=o;\n    }\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"前置\");\n        Object object=method.invoke(originaObj,args);\n        System.out.println(\"后置\");\n        return object;\n    }\n}\n```\n\n```\n输出结果：\n\t前置\n    JDK动态代理\n    后置\n    代理类名称：class com.example.demo.aop.$Proxy0\n```\n\n\n\n## Cglib\n\n`Cglib`代理是针对`所有类`（包括实现接口的类和普通的类）实现代理，主要是对指定的类**生成一个子类**，覆盖其中的方法(**所以该类或方法不能声明称final的**) 。`Cglib`使用`ASM框架`直接对字节码进行操作，在类的执行过程中比较高效\n\n### 使用\n\n![](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729001250.png)\n\n```java\ninterface InterTest{\n    void t1();\n}\n\nclass InterClass implements InterTest{\n    @Override\n    public void t1() {\n        System.out.println(\"我是接口测试方法\");\n    }\n}\n\npublic class CglibTest {\n\n    public static void main(String[] args) {\n        /**\n         * 普通类\n         * */\n        Enhancer enhancer=new Enhancer();\n        enhancer.setSuperclass(CG.class);\n        enhancer.setCallback(new MethodInterceptor() {\n            @Override\n            public Object intercept(Object o, Method method,\n                                    Object[] objects,\n                                    MethodProxy methodProxy) throws Throwable {\n                System.out.println(\"前置\");\n                Object object=methodProxy.invokeSuper(o,objects);\n                System.out.println(\"后置\");\n                return object;\n            }\n        });\n        CG cglibTest= (CG) enhancer.create();\n        cglibTest.test();\n        System.out.println(\"代理类名称1：\"+cglibTest.getClass());\n\n        /*\n         * 实现了接口的类\n         * */\n        Enhancer enhancer2=new Enhancer();\n        enhancer2.setSuperclass(InterClass.class);\n        enhancer2.setCallback(new MethodInterceptor() {\n            @Override\n            public Object intercept(Object o, Method method,\n                                    Object[] objects,\n                                    MethodProxy methodProxy) throws Throwable {\n                System.out.println(\"接口类前置\");\n                Object object=methodProxy.invokeSuper(o,objects);\n                System.out.println(\"接口类后置\");\n                return object;\n            }\n        });\n        InterClass interClass= (InterClass) enhancer2.create();\n        interClass.t1();\n        System.out.println(\"代理类名称2：\"+interClass.getClass());\n    }\n}\n\nclass CG{\n    public void test(){\n        System.out.println(\"代理类测试\");\n    }\n}\n```\n\n```\n输出结果：\n\t前置\n    代理类测试\n    后置\n    代理类名称1：class com.example.demo.aop.CG$$EnhancerByCGLIB$$5c6cbf31\n    \n    接口类前置\n    我是接口测试方法\n    接口类后置\n    代理类名称2：class com.example.demo.aop.InterClass$$EnhancerByCGLIB$$80c75859\n\n```","slug":"java/jdkproxy-cglib","published":1,"updated":"2021-10-08T08:59:07.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6egx0038vpuc4w4xa0wk","content":"<h1 id=\"JDKproxy和Cglib初探\"><a href=\"#JDKproxy和Cglib初探\" class=\"headerlink\" title=\"JDKproxy和Cglib初探\"></a>JDKproxy和Cglib初探</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在Java中，动态代理机制的出现，使得Java开发人员不用手工编写代理类，只要简单地制定一组接口及委托类对象，便能动态地获得代理类。动态代理在Java中有着广泛的应用，比如Spring AOP，Hibernate数据查询、测试框架的后端mock、RPC，Java注解对象获取等。</p>\n<h2 id=\"JDK原生动态代理-JDKProxy\"><a href=\"#JDK原生动态代理-JDKProxy\" class=\"headerlink\" title=\"JDK原生动态代理(JDKProxy)\"></a>JDK原生动态代理(JDKProxy)</h2><p><code>JDKProxy</code>只能对<code>实现了接口的类</code>生成代理，而不能针对<code>普通类</code> 。<code>JDKProxy</code>原生的<code>反射API</code>进行操作，在生成类上比较高效。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729000830.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">TestInterface</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TestInterface</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;JDK动态代理&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//主方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JDKProxy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        TestClass testClass=<span class=\"keyword\">new</span> <span class=\"title class_\">TestClass</span>();</span><br><span class=\"line\">        ProxyHandle proxyHandle=<span class=\"keyword\">new</span> <span class=\"title class_\">ProxyHandle</span>(testClass);</span><br><span class=\"line\">        <span class=\"comment\">//使用接口</span></span><br><span class=\"line\">        TestInterface testClass1= (TestInterface) Proxy.newProxyInstance(</span><br><span class=\"line\">                testClass.getClass().getClassLoader(),</span><br><span class=\"line\">                testClass.getClass().getInterfaces(),proxyHandle);</span><br><span class=\"line\">        testClass1.test();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;代理类名称：&quot;</span>+testClass1.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProxyHandle</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object originaObj;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ProxyHandle</span><span class=\"params\">(Object o)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.originaObj=o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;前置&quot;</span>);</span><br><span class=\"line\">        Object object=method.invoke(originaObj,args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;后置&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输出结果：</span><br><span class=\"line\">\t前置</span><br><span class=\"line\">    JDK动态代理</span><br><span class=\"line\">    后置</span><br><span class=\"line\">    代理类名称：class com.example.demo.aop.$Proxy0</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Cglib\"><a href=\"#Cglib\" class=\"headerlink\" title=\"Cglib\"></a>Cglib</h2><p><code>Cglib</code>代理是针对<code>所有类</code>（包括实现接口的类和普通的类）实现代理，主要是对指定的类<strong>生成一个子类</strong>，覆盖其中的方法(<strong>所以该类或方法不能声明称final的</strong>) 。<code>Cglib</code>使用<code>ASM框架</code>直接对字节码进行操作，在类的执行过程中比较高效</p>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729001250.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">InterTest</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">t1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">InterClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InterTest</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是接口测试方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CglibTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 普通类</span></span><br><span class=\"line\"><span class=\"comment\">         * */</span></span><br><span class=\"line\">        Enhancer enhancer=<span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        enhancer.setSuperclass(CG.class);</span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> <span class=\"title class_\">MethodInterceptor</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object o, Method method,</span></span><br><span class=\"line\"><span class=\"params\">                                    Object[] objects,</span></span><br><span class=\"line\"><span class=\"params\">                                    MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;前置&quot;</span>);</span><br><span class=\"line\">                Object object=methodProxy.invokeSuper(o,objects);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;后置&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        CG cglibTest= (CG) enhancer.create();</span><br><span class=\"line\">        cglibTest.test();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;代理类名称1：&quot;</span>+cglibTest.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 实现了接口的类</span></span><br><span class=\"line\"><span class=\"comment\">         * */</span></span><br><span class=\"line\">        Enhancer enhancer2=<span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        enhancer2.setSuperclass(InterClass.class);</span><br><span class=\"line\">        enhancer2.setCallback(<span class=\"keyword\">new</span> <span class=\"title class_\">MethodInterceptor</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object o, Method method,</span></span><br><span class=\"line\"><span class=\"params\">                                    Object[] objects,</span></span><br><span class=\"line\"><span class=\"params\">                                    MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;接口类前置&quot;</span>);</span><br><span class=\"line\">                Object object=methodProxy.invokeSuper(o,objects);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;接口类后置&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        InterClass interClass= (InterClass) enhancer2.create();</span><br><span class=\"line\">        interClass.t1();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;代理类名称2：&quot;</span>+interClass.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CG</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;代理类测试&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输出结果：</span><br><span class=\"line\">\t前置</span><br><span class=\"line\">    代理类测试</span><br><span class=\"line\">    后置</span><br><span class=\"line\">    代理类名称1：class com.example.demo.aop.CG$$EnhancerByCGLIB$$5c6cbf31</span><br><span class=\"line\">    </span><br><span class=\"line\">    接口类前置</span><br><span class=\"line\">    我是接口测试方法</span><br><span class=\"line\">    接口类后置</span><br><span class=\"line\">    代理类名称2：class com.example.demo.aop.InterClass$$EnhancerByCGLIB$$80c75859</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h1 id=\"JDKproxy和Cglib初探\"><a href=\"#JDKproxy和Cglib初探\" class=\"headerlink\" title=\"JDKproxy和Cglib初探\"></a>JDKproxy和Cglib初探</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在Java中，动态代理机制的出现，使得Java开发人员不用手工编写代理类，只要简单地制定一组接口及委托类对象，便能动态地获得代理类。动态代理在Java中有着广泛的应用，比如Spring AOP，Hibernate数据查询、测试框架的后端mock、RPC，Java注解对象获取等。</p>\n<h2 id=\"JDK原生动态代理-JDKProxy\"><a href=\"#JDK原生动态代理-JDKProxy\" class=\"headerlink\" title=\"JDK原生动态代理(JDKProxy)\"></a>JDK原生动态代理(JDKProxy)</h2><p><code>JDKProxy</code>只能对<code>实现了接口的类</code>生成代理，而不能针对<code>普通类</code> 。<code>JDKProxy</code>原生的<code>反射API</code>进行操作，在生成类上比较高效。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729000830.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">TestInterface</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">TestInterface</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;JDK动态代理&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//主方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JDKProxy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        TestClass testClass=<span class=\"keyword\">new</span> <span class=\"title class_\">TestClass</span>();</span><br><span class=\"line\">        ProxyHandle proxyHandle=<span class=\"keyword\">new</span> <span class=\"title class_\">ProxyHandle</span>(testClass);</span><br><span class=\"line\">        <span class=\"comment\">//使用接口</span></span><br><span class=\"line\">        TestInterface testClass1= (TestInterface) Proxy.newProxyInstance(</span><br><span class=\"line\">                testClass.getClass().getClassLoader(),</span><br><span class=\"line\">                testClass.getClass().getInterfaces(),proxyHandle);</span><br><span class=\"line\">        testClass1.test();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;代理类名称：&quot;</span>+testClass1.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProxyHandle</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InvocationHandler</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object originaObj;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ProxyHandle</span><span class=\"params\">(Object o)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.originaObj=o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;前置&quot;</span>);</span><br><span class=\"line\">        Object object=method.invoke(originaObj,args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;后置&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输出结果：</span><br><span class=\"line\">\t前置</span><br><span class=\"line\">    JDK动态代理</span><br><span class=\"line\">    后置</span><br><span class=\"line\">    代理类名称：class com.example.demo.aop.$Proxy0</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"Cglib\"><a href=\"#Cglib\" class=\"headerlink\" title=\"Cglib\"></a>Cglib</h2><p><code>Cglib</code>代理是针对<code>所有类</code>（包括实现接口的类和普通的类）实现代理，主要是对指定的类<strong>生成一个子类</strong>，覆盖其中的方法(<strong>所以该类或方法不能声明称final的</strong>) 。<code>Cglib</code>使用<code>ASM框架</code>直接对字节码进行操作，在类的执行过程中比较高效</p>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729001250.png\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">InterTest</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">t1</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">InterClass</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">InterTest</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;我是接口测试方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CglibTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 普通类</span></span><br><span class=\"line\"><span class=\"comment\">         * */</span></span><br><span class=\"line\">        Enhancer enhancer=<span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        enhancer.setSuperclass(CG.class);</span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> <span class=\"title class_\">MethodInterceptor</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object o, Method method,</span></span><br><span class=\"line\"><span class=\"params\">                                    Object[] objects,</span></span><br><span class=\"line\"><span class=\"params\">                                    MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;前置&quot;</span>);</span><br><span class=\"line\">                Object object=methodProxy.invokeSuper(o,objects);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;后置&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        CG cglibTest= (CG) enhancer.create();</span><br><span class=\"line\">        cglibTest.test();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;代理类名称1：&quot;</span>+cglibTest.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 实现了接口的类</span></span><br><span class=\"line\"><span class=\"comment\">         * */</span></span><br><span class=\"line\">        Enhancer enhancer2=<span class=\"keyword\">new</span> <span class=\"title class_\">Enhancer</span>();</span><br><span class=\"line\">        enhancer2.setSuperclass(InterClass.class);</span><br><span class=\"line\">        enhancer2.setCallback(<span class=\"keyword\">new</span> <span class=\"title class_\">MethodInterceptor</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Object <span class=\"title function_\">intercept</span><span class=\"params\">(Object o, Method method,</span></span><br><span class=\"line\"><span class=\"params\">                                    Object[] objects,</span></span><br><span class=\"line\"><span class=\"params\">                                    MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;接口类前置&quot;</span>);</span><br><span class=\"line\">                Object object=methodProxy.invokeSuper(o,objects);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;接口类后置&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        InterClass interClass= (InterClass) enhancer2.create();</span><br><span class=\"line\">        interClass.t1();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;代理类名称2：&quot;</span>+interClass.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CG</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;代理类测试&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">输出结果：</span><br><span class=\"line\">\t前置</span><br><span class=\"line\">    代理类测试</span><br><span class=\"line\">    后置</span><br><span class=\"line\">    代理类名称1：class com.example.demo.aop.CG$$EnhancerByCGLIB$$5c6cbf31</span><br><span class=\"line\">    </span><br><span class=\"line\">    接口类前置</span><br><span class=\"line\">    我是接口测试方法</span><br><span class=\"line\">    接口类后置</span><br><span class=\"line\">    代理类名称2：class com.example.demo.aop.InterClass$$EnhancerByCGLIB$$80c75859</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"浅谈MDC","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:10:47.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## MDC是什么？\n\n`MDC` 全拼 `Mapped Diagnostic Contexts`，是`SLF4J`类日志系统中实现分布式多线程日志数据传递的重要工具；可利用`MDC`将一些运行时的上下文数据打印出来。目前只有`log4j`和`logback`提供原生的`MDC`支持；\n\n## 简单使用\n\n`MDC`里面提供的都是静态方法，所以可以直接调用\n\n```java\n// 设置一个key\nMDC.put(\"name\",\"灰色Code\");\n\n// 获取一个key的值\nMDC.get(\"name\");\n    \n// 删除一个key\nMDC.remove(\"name\");\n    \n// 清空MDC里的内容\nMDC.clear();\n\n// 获取上下文中的map\nMap<String,String> map = MDC.getCopyOfContextMap();\n\n// 设置MDC的map\nMDC.setContextMap(map);\n```\n\n\n\n## 源码解析\n\n### MDC\n\n通过阅读`MDC`的源码可以发现，它其实是调用了`MDCAdapter`的接口来实现的\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729200214.png)\n\n\n\n### MDCAdapter\n\n`MDCAdapter`接口有三个实现类，而`MDC`是调用了`LogbackMDCAdapter`里的方法(在MDC里有一个静态代码块，实例化了这个对象)\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729201118.png)\n\n### LogbackMDCAdapter\n\n**而**`LogbackMDCAdapter`主要是用`ThreadLocal`在线程上下文中维护一个`HashMap`来实现的\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729201650-20211008163421103.png)\n\n## 总结\n\n怎么样,实现原理是不是很简单，就这么短短几行代码，就实现了听起来很高大上的`MDC`。\n\n所以简单来说，`MDC`就是利用`ThreadLocal`在线程中维护了一个`HashMap`，利用`HashMap`来存放数据","source":"_posts/java/mdc-test.md","raw":"---\ntitle: 浅谈MDC\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:10:47\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Logback\n- MDC\ncategories:\n- Java\n---\n\n\n\n## MDC是什么？\n\n`MDC` 全拼 `Mapped Diagnostic Contexts`，是`SLF4J`类日志系统中实现分布式多线程日志数据传递的重要工具；可利用`MDC`将一些运行时的上下文数据打印出来。目前只有`log4j`和`logback`提供原生的`MDC`支持；\n\n## 简单使用\n\n`MDC`里面提供的都是静态方法，所以可以直接调用\n\n```java\n// 设置一个key\nMDC.put(\"name\",\"灰色Code\");\n\n// 获取一个key的值\nMDC.get(\"name\");\n    \n// 删除一个key\nMDC.remove(\"name\");\n    \n// 清空MDC里的内容\nMDC.clear();\n\n// 获取上下文中的map\nMap<String,String> map = MDC.getCopyOfContextMap();\n\n// 设置MDC的map\nMDC.setContextMap(map);\n```\n\n\n\n## 源码解析\n\n### MDC\n\n通过阅读`MDC`的源码可以发现，它其实是调用了`MDCAdapter`的接口来实现的\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729200214.png)\n\n\n\n### MDCAdapter\n\n`MDCAdapter`接口有三个实现类，而`MDC`是调用了`LogbackMDCAdapter`里的方法(在MDC里有一个静态代码块，实例化了这个对象)\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729201118.png)\n\n### LogbackMDCAdapter\n\n**而**`LogbackMDCAdapter`主要是用`ThreadLocal`在线程上下文中维护一个`HashMap`来实现的\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729201650-20211008163421103.png)\n\n## 总结\n\n怎么样,实现原理是不是很简单，就这么短短几行代码，就实现了听起来很高大上的`MDC`。\n\n所以简单来说，`MDC`就是利用`ThreadLocal`在线程中维护了一个`HashMap`，利用`HashMap`来存放数据","slug":"java/mdc-test","published":1,"updated":"2021-10-08T08:34:35.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6egy003dvpuc9s37dz12","content":"<h2 id=\"MDC是什么？\"><a href=\"#MDC是什么？\" class=\"headerlink\" title=\"MDC是什么？\"></a>MDC是什么？</h2><p><code>MDC</code> 全拼 <code>Mapped Diagnostic Contexts</code>，是<code>SLF4J</code>类日志系统中实现分布式多线程日志数据传递的重要工具；可利用<code>MDC</code>将一些运行时的上下文数据打印出来。目前只有<code>log4j</code>和<code>logback</code>提供原生的<code>MDC</code>支持；</p>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p><code>MDC</code>里面提供的都是静态方法，所以可以直接调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置一个key</span></span><br><span class=\"line\">MDC.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;灰色Code&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取一个key的值</span></span><br><span class=\"line\">MDC.get(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 删除一个key</span></span><br><span class=\"line\">MDC.remove(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 清空MDC里的内容</span></span><br><span class=\"line\">MDC.clear();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取上下文中的map</span></span><br><span class=\"line\">Map&lt;String,String&gt; map = MDC.getCopyOfContextMap();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置MDC的map</span></span><br><span class=\"line\">MDC.setContextMap(map);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><h3 id=\"MDC\"><a href=\"#MDC\" class=\"headerlink\" title=\"MDC\"></a>MDC</h3><p>通过阅读<code>MDC</code>的源码可以发现，它其实是调用了<code>MDCAdapter</code>的接口来实现的</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729200214.png\" alt=\"图片\"></p>\n<h3 id=\"MDCAdapter\"><a href=\"#MDCAdapter\" class=\"headerlink\" title=\"MDCAdapter\"></a>MDCAdapter</h3><p><code>MDCAdapter</code>接口有三个实现类，而<code>MDC</code>是调用了<code>LogbackMDCAdapter</code>里的方法(在MDC里有一个静态代码块，实例化了这个对象)</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729201118.png\" alt=\"图片\"></p>\n<h3 id=\"LogbackMDCAdapter\"><a href=\"#LogbackMDCAdapter\" class=\"headerlink\" title=\"LogbackMDCAdapter\"></a>LogbackMDCAdapter</h3><p><strong>而</strong><code>LogbackMDCAdapter</code>主要是用<code>ThreadLocal</code>在线程上下文中维护一个<code>HashMap</code>来实现的</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729201650-20211008163421103.png\" alt=\"图片\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>怎么样,实现原理是不是很简单，就这么短短几行代码，就实现了听起来很高大上的<code>MDC</code>。</p>\n<p>所以简单来说，<code>MDC</code>就是利用<code>ThreadLocal</code>在线程中维护了一个<code>HashMap</code>，利用<code>HashMap</code>来存放数据</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"MDC是什么？\"><a href=\"#MDC是什么？\" class=\"headerlink\" title=\"MDC是什么？\"></a>MDC是什么？</h2><p><code>MDC</code> 全拼 <code>Mapped Diagnostic Contexts</code>，是<code>SLF4J</code>类日志系统中实现分布式多线程日志数据传递的重要工具；可利用<code>MDC</code>将一些运行时的上下文数据打印出来。目前只有<code>log4j</code>和<code>logback</code>提供原生的<code>MDC</code>支持；</p>\n<h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p><code>MDC</code>里面提供的都是静态方法，所以可以直接调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置一个key</span></span><br><span class=\"line\">MDC.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;灰色Code&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取一个key的值</span></span><br><span class=\"line\">MDC.get(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 删除一个key</span></span><br><span class=\"line\">MDC.remove(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 清空MDC里的内容</span></span><br><span class=\"line\">MDC.clear();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取上下文中的map</span></span><br><span class=\"line\">Map&lt;String,String&gt; map = MDC.getCopyOfContextMap();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置MDC的map</span></span><br><span class=\"line\">MDC.setContextMap(map);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><h3 id=\"MDC\"><a href=\"#MDC\" class=\"headerlink\" title=\"MDC\"></a>MDC</h3><p>通过阅读<code>MDC</code>的源码可以发现，它其实是调用了<code>MDCAdapter</code>的接口来实现的</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729200214.png\" alt=\"图片\"></p>\n<h3 id=\"MDCAdapter\"><a href=\"#MDCAdapter\" class=\"headerlink\" title=\"MDCAdapter\"></a>MDCAdapter</h3><p><code>MDCAdapter</code>接口有三个实现类，而<code>MDC</code>是调用了<code>LogbackMDCAdapter</code>里的方法(在MDC里有一个静态代码块，实例化了这个对象)</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729201118.png\" alt=\"图片\"></p>\n<h3 id=\"LogbackMDCAdapter\"><a href=\"#LogbackMDCAdapter\" class=\"headerlink\" title=\"LogbackMDCAdapter\"></a>LogbackMDCAdapter</h3><p><strong>而</strong><code>LogbackMDCAdapter</code>主要是用<code>ThreadLocal</code>在线程上下文中维护一个<code>HashMap</code>来实现的</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200729201650-20211008163421103.png\" alt=\"图片\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>怎么样,实现原理是不是很简单，就这么短短几行代码，就实现了听起来很高大上的<code>MDC</code>。</p>\n<p>所以简单来说，<code>MDC</code>就是利用<code>ThreadLocal</code>在线程中维护了一个<code>HashMap</code>，利用<code>HashMap</code>来存放数据</p>\n"},{"title":"Nacos报[NACOS HTTP-POST]","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-14T15:50:58.000Z","password":null,"summary":null,"_content":"\n## 问题\n\n　由于项目使用阿里的Nacos来管理项目的配置文件，今天所有使用Nacos的项目的日志都报[NACOS HTTP-POST] The maximum number of tolerable server reconnection errors has been reached这个错误。\n\n## 解决方法\n\n　查阅资料后说是连接超过了最大重试次数。Nacos有个maxRetry这个配置参数，默认是3;可是和SpringCloud整合后在application文件中找不到这个参数，只好另寻方法；\n\n　由于项目都是Docker容器化的，先前出现过连接不到Nacos的问题,于是就查看了各个Docker容器的IP。\n\n### 修正Nacos的地址\n\n　查阅后发现，是因为同事吧服务器重启了一遍，导致Docker服务也重启了，然后Docker容器里的IP全部都变了。因为同一台服务器上我们各个容器间的访问是通过Docker容器内部IP的，也就是172.16.x.x这个IP段。所以导致访问不到报错。\n\n```properties\nspring.cloud.nacos.config.server-addr=172.16.X.X     //更改到最新nacos的地址\n```","source":"_posts/java/nacos-post-error.md","raw":"---\ntitle: Nacos报[NACOS HTTP-POST]\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-11-14 23:50:58\npassword:\nsummary:\ntags:\n  - Nacos\ncategories:\n  - Java\n---\n\n## 问题\n\n　由于项目使用阿里的Nacos来管理项目的配置文件，今天所有使用Nacos的项目的日志都报[NACOS HTTP-POST] The maximum number of tolerable server reconnection errors has been reached这个错误。\n\n## 解决方法\n\n　查阅资料后说是连接超过了最大重试次数。Nacos有个maxRetry这个配置参数，默认是3;可是和SpringCloud整合后在application文件中找不到这个参数，只好另寻方法；\n\n　由于项目都是Docker容器化的，先前出现过连接不到Nacos的问题,于是就查看了各个Docker容器的IP。\n\n### 修正Nacos的地址\n\n　查阅后发现，是因为同事吧服务器重启了一遍，导致Docker服务也重启了，然后Docker容器里的IP全部都变了。因为同一台服务器上我们各个容器间的访问是通过Docker容器内部IP的，也就是172.16.x.x这个IP段。所以导致访问不到报错。\n\n```properties\nspring.cloud.nacos.config.server-addr=172.16.X.X     //更改到最新nacos的地址\n```","slug":"java/nacos-post-error","published":1,"updated":"2021-10-08T07:57:24.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6egz003fvpuc3e5y2fmy","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>　由于项目使用阿里的Nacos来管理项目的配置文件，今天所有使用Nacos的项目的日志都报[NACOS HTTP-POST] The maximum number of tolerable server reconnection errors has been reached这个错误。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>　查阅资料后说是连接超过了最大重试次数。Nacos有个maxRetry这个配置参数，默认是3;可是和SpringCloud整合后在application文件中找不到这个参数，只好另寻方法；</p>\n<p>　由于项目都是Docker容器化的，先前出现过连接不到Nacos的问题,于是就查看了各个Docker容器的IP。</p>\n<h3 id=\"修正Nacos的地址\"><a href=\"#修正Nacos的地址\" class=\"headerlink\" title=\"修正Nacos的地址\"></a>修正Nacos的地址</h3><p>　查阅后发现，是因为同事吧服务器重启了一遍，导致Docker服务也重启了，然后Docker容器里的IP全部都变了。因为同一台服务器上我们各个容器间的访问是通过Docker容器内部IP的，也就是172.16.x.x这个IP段。所以导致访问不到报错。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.cloud.nacos.config.server-addr</span>=<span class=\"string\">172.16.X.X     //更改到最新nacos的地址</span></span><br></pre></td></tr></table></figure>","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>　由于项目使用阿里的Nacos来管理项目的配置文件，今天所有使用Nacos的项目的日志都报[NACOS HTTP-POST] The maximum number of tolerable server reconnection errors has been reached这个错误。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>　查阅资料后说是连接超过了最大重试次数。Nacos有个maxRetry这个配置参数，默认是3;可是和SpringCloud整合后在application文件中找不到这个参数，只好另寻方法；</p>\n<p>　由于项目都是Docker容器化的，先前出现过连接不到Nacos的问题,于是就查看了各个Docker容器的IP。</p>\n<h3 id=\"修正Nacos的地址\"><a href=\"#修正Nacos的地址\" class=\"headerlink\" title=\"修正Nacos的地址\"></a>修正Nacos的地址</h3><p>　查阅后发现，是因为同事吧服务器重启了一遍，导致Docker服务也重启了，然后Docker容器里的IP全部都变了。因为同一台服务器上我们各个容器间的访问是通过Docker容器内部IP的，也就是172.16.x.x这个IP段。所以导致访问不到报错。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.cloud.nacos.config.server-addr</span>=<span class=\"string\">172.16.X.X     //更改到最新nacos的地址</span></span><br></pre></td></tr></table></figure>"},{"title":"Base64影响泰文字段取值问题","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-08-14T02:39:23.000Z","password":null,"summary":null,"_content":"\n## 今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\n\n#### 查看日志\n\n>what,日志里面竟然有他们传过来的泰文的值\n\n#### 对比ios和android的数据\n\n>发现日志里的数据都是一样的，但是android上传的数据全部传入了mysql数据库，ios的除了泰文，其他的也都传到了库里\n\n#### 确定问题\n\n>最后对比发现，android的泰文字段三放在base64字段前面的然后传上来的，ios是放在base64字段后面传上来的，怀疑问题在此处\n\n#### 修复bug\n\n>于是叫ios也和android一样，把上传字段的顺序调整了以下，把泰文的字段放在base64字段前面，然后上传。改了之后试了以下，，竟然解决了，2222333333\n\n总结：暂时不知道具体什么原因，有可能是因为base64数据太长了，影响到泰文的字段存储了。\n","source":"_posts/java/problem-java-base64.md","raw":"---\ntitle: Base64影响泰文字段取值问题\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Java\n  - Base64\n  - Pit\ncategories:\n  - Java\ndate: 2019-08-14 10:39:23\npassword:\nsummary:\n---\n\n## 今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\n\n#### 查看日志\n\n>what,日志里面竟然有他们传过来的泰文的值\n\n#### 对比ios和android的数据\n\n>发现日志里的数据都是一样的，但是android上传的数据全部传入了mysql数据库，ios的除了泰文，其他的也都传到了库里\n\n#### 确定问题\n\n>最后对比发现，android的泰文字段三放在base64字段前面的然后传上来的，ios是放在base64字段后面传上来的，怀疑问题在此处\n\n#### 修复bug\n\n>于是叫ios也和android一样，把上传字段的顺序调整了以下，把泰文的字段放在base64字段前面，然后上传。改了之后试了以下，，竟然解决了，2222333333\n\n总结：暂时不知道具体什么原因，有可能是因为base64数据太长了，影响到泰文的字段存储了。\n","slug":"java/problem-java-base64","published":1,"updated":"2021-10-08T07:57:24.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eh0003kvpucb3qw2akd","content":"<h2 id=\"今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\"><a href=\"#今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\" class=\"headerlink\" title=\"今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\"></a>今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作</h2><h4 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h4><blockquote>\n<p>what,日志里面竟然有他们传过来的泰文的值</p>\n</blockquote>\n<h4 id=\"对比ios和android的数据\"><a href=\"#对比ios和android的数据\" class=\"headerlink\" title=\"对比ios和android的数据\"></a>对比ios和android的数据</h4><blockquote>\n<p>发现日志里的数据都是一样的，但是android上传的数据全部传入了mysql数据库，ios的除了泰文，其他的也都传到了库里</p>\n</blockquote>\n<h4 id=\"确定问题\"><a href=\"#确定问题\" class=\"headerlink\" title=\"确定问题\"></a>确定问题</h4><blockquote>\n<p>最后对比发现，android的泰文字段三放在base64字段前面的然后传上来的，ios是放在base64字段后面传上来的，怀疑问题在此处</p>\n</blockquote>\n<h4 id=\"修复bug\"><a href=\"#修复bug\" class=\"headerlink\" title=\"修复bug\"></a>修复bug</h4><blockquote>\n<p>于是叫ios也和android一样，把上传字段的顺序调整了以下，把泰文的字段放在base64字段前面，然后上传。改了之后试了以下，，竟然解决了，2222333333</p>\n</blockquote>\n<p>总结：暂时不知道具体什么原因，有可能是因为base64数据太长了，影响到泰文的字段存储了。</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\"><a href=\"#今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\" class=\"headerlink\" title=\"今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\"></a>今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作</h2><h4 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h4><blockquote>\n<p>what,日志里面竟然有他们传过来的泰文的值</p>\n</blockquote>\n<h4 id=\"对比ios和android的数据\"><a href=\"#对比ios和android的数据\" class=\"headerlink\" title=\"对比ios和android的数据\"></a>对比ios和android的数据</h4><blockquote>\n<p>发现日志里的数据都是一样的，但是android上传的数据全部传入了mysql数据库，ios的除了泰文，其他的也都传到了库里</p>\n</blockquote>\n<h4 id=\"确定问题\"><a href=\"#确定问题\" class=\"headerlink\" title=\"确定问题\"></a>确定问题</h4><blockquote>\n<p>最后对比发现，android的泰文字段三放在base64字段前面的然后传上来的，ios是放在base64字段后面传上来的，怀疑问题在此处</p>\n</blockquote>\n<h4 id=\"修复bug\"><a href=\"#修复bug\" class=\"headerlink\" title=\"修复bug\"></a>修复bug</h4><blockquote>\n<p>于是叫ios也和android一样，把上传字段的顺序调整了以下，把泰文的字段放在base64字段前面，然后上传。改了之后试了以下，，竟然解决了，2222333333</p>\n</blockquote>\n<p>总结：暂时不知道具体什么原因，有可能是因为base64数据太长了，影响到泰文的字段存储了。</p>\n"},{"title":"更新驱动到mysql-connector-java-8遇到的一些问题","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-25T09:07:12.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n# 更新驱动到mysql-connector-java-8遇到的一些问题\n\n\n\n## 问题\n\n### POM\n\n```java\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.16</version>\n</dependency>\n```\n\n## application.properties\n\n```properties\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n\n\n\n项目是`SpringBoot`构建的,数据库版本是:`MySQL5.7`,用了`mysql-connector-java-8`来链接数据库,`application.properties`也配置成`spring.datasource.driver-class-name=com.mysql.jdbc.Driver`,中间遇到了几个问题;\n\n### 问题一\n\n#### 描述\n\n如上配置后,控制台报了一下错误:\n\n```shell\nLoading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.\n```\n\n翻译过来后就是:\n\n加载类` com.mysql.jdbc.Driver`。 不推荐使用。 新的驱动程序类为` com.mysql.cj.jdbc.Driver`。 通过SPI自动注册驱动程序，通常不需要手动加载驱动程序类。\n\n#### 解决\n\n根据提示,解决方法有<font color=orange>两种</font>:\n\n- 更改`application.properties`文件\n\n```properties\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n//改成下面这样\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n```\n\n- 去掉`application.properties`文件中的`spring.datasource.driver-class-name`,因为它说会通过SPI自动注册的;\n\n### 问题二\n\n#### 描述\n\n数据库的数据时间总是和实际时间差8个小时\n\n#### 解决\n\n在数据库url添加`serverTimezone=GMT%2B8`\n\n```properties\nspring.datasource.url=jdbc:mysql://10.25.0.01:3307/db?useUnicode=true&autoReconnect=true&characterEncoding=UTF-8&serverTimezone=GMT%2B8\n```\n\n## 总结\n\n`mysql-connector-java`5.X的版本驱动名是:`com.mysql.jdbc.Driver`; 6.X及以上版本的驱动名是:`com.mysql.cj.jdbc.Driver`","source":"_posts/mysql/mysql-update-driver-connector-8.md","raw":"---\ntitle: 更新驱动到mysql-connector-java-8遇到的一些问题\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-25 17:07:12\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Pit\n- MySQL\ncategories:\n- MySQL\n---\n\n# 更新驱动到mysql-connector-java-8遇到的一些问题\n\n\n\n## 问题\n\n### POM\n\n```java\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.16</version>\n</dependency>\n```\n\n## application.properties\n\n```properties\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n\n\n\n项目是`SpringBoot`构建的,数据库版本是:`MySQL5.7`,用了`mysql-connector-java-8`来链接数据库,`application.properties`也配置成`spring.datasource.driver-class-name=com.mysql.jdbc.Driver`,中间遇到了几个问题;\n\n### 问题一\n\n#### 描述\n\n如上配置后,控制台报了一下错误:\n\n```shell\nLoading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.\n```\n\n翻译过来后就是:\n\n加载类` com.mysql.jdbc.Driver`。 不推荐使用。 新的驱动程序类为` com.mysql.cj.jdbc.Driver`。 通过SPI自动注册驱动程序，通常不需要手动加载驱动程序类。\n\n#### 解决\n\n根据提示,解决方法有<font color=orange>两种</font>:\n\n- 更改`application.properties`文件\n\n```properties\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n//改成下面这样\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n```\n\n- 去掉`application.properties`文件中的`spring.datasource.driver-class-name`,因为它说会通过SPI自动注册的;\n\n### 问题二\n\n#### 描述\n\n数据库的数据时间总是和实际时间差8个小时\n\n#### 解决\n\n在数据库url添加`serverTimezone=GMT%2B8`\n\n```properties\nspring.datasource.url=jdbc:mysql://10.25.0.01:3307/db?useUnicode=true&autoReconnect=true&characterEncoding=UTF-8&serverTimezone=GMT%2B8\n```\n\n## 总结\n\n`mysql-connector-java`5.X的版本驱动名是:`com.mysql.jdbc.Driver`; 6.X及以上版本的驱动名是:`com.mysql.cj.jdbc.Driver`","slug":"mysql/mysql-update-driver-connector-8","published":1,"updated":"2021-10-08T07:57:24.184Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eh0003mvpucgg9e42d0","content":"<h1 id=\"更新驱动到mysql-connector-java-8遇到的一些问题\"><a href=\"#更新驱动到mysql-connector-java-8遇到的一些问题\" class=\"headerlink\" title=\"更新驱动到mysql-connector-java-8遇到的一些问题\"></a>更新驱动到mysql-connector-java-8遇到的一些问题</h1><h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"POM\"><a href=\"#POM\" class=\"headerlink\" title=\"POM\"></a>POM</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">8.0</span><span class=\"number\">.16</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"application-properties\"><a href=\"#application-properties\" class=\"headerlink\" title=\"application.properties\"></a>application.properties</h2><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>项目是<code>SpringBoot</code>构建的,数据库版本是:<code>MySQL5.7</code>,用了<code>mysql-connector-java-8</code>来链接数据库,<code>application.properties</code>也配置成<code>spring.datasource.driver-class-name=com.mysql.jdbc.Driver</code>,中间遇到了几个问题;</p>\n<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><h4 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>如上配置后,控制台报了一下错误:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Loading class `com.mysql.jdbc.Driver&#x27;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&#x27;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</span><br></pre></td></tr></table></figure>\n\n<p>翻译过来后就是:</p>\n<p>加载类<code> com.mysql.jdbc.Driver</code>。 不推荐使用。 新的驱动程序类为<code> com.mysql.cj.jdbc.Driver</code>。 通过SPI自动注册驱动程序，通常不需要手动加载驱动程序类。</p>\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>根据提示,解决方法有<font color=orange>两种</font>:</p>\n<ul>\n<li>更改<code>application.properties</code>文件</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">//改成下面这样</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>去掉<code>application.properties</code>文件中的<code>spring.datasource.driver-class-name</code>,因为它说会通过SPI自动注册的;</li>\n</ul>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><h4 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>数据库的数据时间总是和实际时间差8个小时</p>\n<h4 id=\"解决-1\"><a href=\"#解决-1\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>在数据库url添加<code>serverTimezone=GMT%2B8</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.datasource.url</span>=<span class=\"string\">jdbc:mysql://10.25.0.01:3307/db?useUnicode=true&amp;autoReconnect=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>mysql-connector-java</code>5.X的版本驱动名是:<code>com.mysql.jdbc.Driver</code>; 6.X及以上版本的驱动名是:<code>com.mysql.cj.jdbc.Driver</code></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h1 id=\"更新驱动到mysql-connector-java-8遇到的一些问题\"><a href=\"#更新驱动到mysql-connector-java-8遇到的一些问题\" class=\"headerlink\" title=\"更新驱动到mysql-connector-java-8遇到的一些问题\"></a>更新驱动到mysql-connector-java-8遇到的一些问题</h1><h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"POM\"><a href=\"#POM\" class=\"headerlink\" title=\"POM\"></a>POM</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">8.0</span><span class=\"number\">.16</span>&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"application-properties\"><a href=\"#application-properties\" class=\"headerlink\" title=\"application.properties\"></a>application.properties</h2><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>项目是<code>SpringBoot</code>构建的,数据库版本是:<code>MySQL5.7</code>,用了<code>mysql-connector-java-8</code>来链接数据库,<code>application.properties</code>也配置成<code>spring.datasource.driver-class-name=com.mysql.jdbc.Driver</code>,中间遇到了几个问题;</p>\n<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><h4 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>如上配置后,控制台报了一下错误:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Loading class `com.mysql.jdbc.Driver&#x27;. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver&#x27;. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</span><br></pre></td></tr></table></figure>\n\n<p>翻译过来后就是:</p>\n<p>加载类<code> com.mysql.jdbc.Driver</code>。 不推荐使用。 新的驱动程序类为<code> com.mysql.cj.jdbc.Driver</code>。 通过SPI自动注册驱动程序，通常不需要手动加载驱动程序类。</p>\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>根据提示,解决方法有<font color=orange>两种</font>:</p>\n<ul>\n<li>更改<code>application.properties</code>文件</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">//改成下面这样</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>去掉<code>application.properties</code>文件中的<code>spring.datasource.driver-class-name</code>,因为它说会通过SPI自动注册的;</li>\n</ul>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><h4 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>数据库的数据时间总是和实际时间差8个小时</p>\n<h4 id=\"解决-1\"><a href=\"#解决-1\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>在数据库url添加<code>serverTimezone=GMT%2B8</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.datasource.url</span>=<span class=\"string\">jdbc:mysql://10.25.0.01:3307/db?useUnicode=true&amp;autoReconnect=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>mysql-connector-java</code>5.X的版本驱动名是:<code>com.mysql.jdbc.Driver</code>; 6.X及以上版本的驱动名是:<code>com.mysql.cj.jdbc.Driver</code></p>\n"},{"title":"插入emoji到mysql时提示了一个表里不存在的字段的错误","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-29T09:16:27.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 1.问题描述\n\n由于公司前端有需求，需要在`tiny_user_info`表的`nickname`这个字段里存入emoji表情，于是我熟练地将这个字段修改为`utf8mb4`，改好后测试插入一条带emoji数据。于是报了这个错误：\n\n```shell\n[2020-04-29 15:57:25] [HY000][1366] Incorrect string value: '\\xF0\\x9F\\x98\\x98' for column 'user_name' at row 14\n```\n\n当时我就傻了，我这个表里也没有`user_name`这个字段啊，怎么会报这个字段错误,我明明修改的是`nickname`这个字段啊。于是google和百度搜了一圈，无解。\n\n## ２.解决方案\n\n试了好几种方法，删字段，重新建。删表，重新建。都不行。。。。。静下心来，于是打算从mysql服务器入手。进入到mysql对应库的文件夹，发现`tiny_user_info`这个表有三个文件\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/OY1KhKo.png)\n\n和常见的多了一个`TRG`文件。这是一个触发器文件，打开一看，发现了`user_name`字段。。。。。。\n\n\n\n原来是同事在这个表里加了个触发器，当`tiny_user_info`里新增数据时，会触发新增到另一张表里，`nickname`的值同时会插入到另一张表的`user_name`字段，而他那张表的字段没有设置`utf8mb4编码`,所以导致插入失败。于是叫同事把他那张表设置一下`utf8mb4`编码后，就可以正常插入了。","source":"_posts/mysql/mysql-utf8mb4-error.md","raw":"---\ntitle: 插入emoji到mysql时提示了一个表里不存在的字段的错误\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-29 17:16:27\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Pit\n- MySQL\ncategories:\n- MySQL\n---\n\n## 1.问题描述\n\n由于公司前端有需求，需要在`tiny_user_info`表的`nickname`这个字段里存入emoji表情，于是我熟练地将这个字段修改为`utf8mb4`，改好后测试插入一条带emoji数据。于是报了这个错误：\n\n```shell\n[2020-04-29 15:57:25] [HY000][1366] Incorrect string value: '\\xF0\\x9F\\x98\\x98' for column 'user_name' at row 14\n```\n\n当时我就傻了，我这个表里也没有`user_name`这个字段啊，怎么会报这个字段错误,我明明修改的是`nickname`这个字段啊。于是google和百度搜了一圈，无解。\n\n## ２.解决方案\n\n试了好几种方法，删字段，重新建。删表，重新建。都不行。。。。。静下心来，于是打算从mysql服务器入手。进入到mysql对应库的文件夹，发现`tiny_user_info`这个表有三个文件\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/OY1KhKo.png)\n\n和常见的多了一个`TRG`文件。这是一个触发器文件，打开一看，发现了`user_name`字段。。。。。。\n\n\n\n原来是同事在这个表里加了个触发器，当`tiny_user_info`里新增数据时，会触发新增到另一张表里，`nickname`的值同时会插入到另一张表的`user_name`字段，而他那张表的字段没有设置`utf8mb4编码`,所以导致插入失败。于是叫同事把他那张表设置一下`utf8mb4`编码后，就可以正常插入了。","slug":"mysql/mysql-utf8mb4-error","published":1,"updated":"2021-10-08T08:55:29.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eh1003qvpucbyng5vbf","content":"<h2 id=\"1-问题描述\"><a href=\"#1-问题描述\" class=\"headerlink\" title=\"1.问题描述\"></a>1.问题描述</h2><p>由于公司前端有需求，需要在<code>tiny_user_info</code>表的<code>nickname</code>这个字段里存入emoji表情，于是我熟练地将这个字段修改为<code>utf8mb4</code>，改好后测试插入一条带emoji数据。于是报了这个错误：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[2020-04-29 15:57:25] [HY000][1366] Incorrect string value: &#x27;\\xF0\\x9F\\x98\\x98&#x27; for column &#x27;user_name&#x27; at row 14</span><br></pre></td></tr></table></figure>\n\n<p>当时我就傻了，我这个表里也没有<code>user_name</code>这个字段啊，怎么会报这个字段错误,我明明修改的是<code>nickname</code>这个字段啊。于是google和百度搜了一圈，无解。</p>\n<h2 id=\"２-解决方案\"><a href=\"#２-解决方案\" class=\"headerlink\" title=\"２.解决方案\"></a>２.解决方案</h2><p>试了好几种方法，删字段，重新建。删表，重新建。都不行。。。。。静下心来，于是打算从mysql服务器入手。进入到mysql对应库的文件夹，发现<code>tiny_user_info</code>这个表有三个文件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/OY1KhKo.png\" alt=\"图片\"></p>\n<p>和常见的多了一个<code>TRG</code>文件。这是一个触发器文件，打开一看，发现了<code>user_name</code>字段。。。。。。</p>\n<p>原来是同事在这个表里加了个触发器，当<code>tiny_user_info</code>里新增数据时，会触发新增到另一张表里，<code>nickname</code>的值同时会插入到另一张表的<code>user_name</code>字段，而他那张表的字段没有设置<code>utf8mb4编码</code>,所以导致插入失败。于是叫同事把他那张表设置一下<code>utf8mb4</code>编码后，就可以正常插入了。</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"1-问题描述\"><a href=\"#1-问题描述\" class=\"headerlink\" title=\"1.问题描述\"></a>1.问题描述</h2><p>由于公司前端有需求，需要在<code>tiny_user_info</code>表的<code>nickname</code>这个字段里存入emoji表情，于是我熟练地将这个字段修改为<code>utf8mb4</code>，改好后测试插入一条带emoji数据。于是报了这个错误：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[2020-04-29 15:57:25] [HY000][1366] Incorrect string value: &#x27;\\xF0\\x9F\\x98\\x98&#x27; for column &#x27;user_name&#x27; at row 14</span><br></pre></td></tr></table></figure>\n\n<p>当时我就傻了，我这个表里也没有<code>user_name</code>这个字段啊，怎么会报这个字段错误,我明明修改的是<code>nickname</code>这个字段啊。于是google和百度搜了一圈，无解。</p>\n<h2 id=\"２-解决方案\"><a href=\"#２-解决方案\" class=\"headerlink\" title=\"２.解决方案\"></a>２.解决方案</h2><p>试了好几种方法，删字段，重新建。删表，重新建。都不行。。。。。静下心来，于是打算从mysql服务器入手。进入到mysql对应库的文件夹，发现<code>tiny_user_info</code>这个表有三个文件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/OY1KhKo.png\" alt=\"图片\"></p>\n<p>和常见的多了一个<code>TRG</code>文件。这是一个触发器文件，打开一看，发现了<code>user_name</code>字段。。。。。。</p>\n<p>原来是同事在这个表里加了个触发器，当<code>tiny_user_info</code>里新增数据时，会触发新增到另一张表里，<code>nickname</code>的值同时会插入到另一张表的<code>user_name</code>字段，而他那张表的字段没有设置<code>utf8mb4编码</code>,所以导致插入失败。于是叫同事把他那张表设置一下<code>utf8mb4</code>编码后，就可以正常插入了。</p>\n"},{"title":"Git常用命令","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:16:56.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## Git简介\n\nGit 是用于 Linux[内核](https://baike.baidu.com/item/内核)开发的[版本控制](https://baike.baidu.com/item/版本控制)工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使[源代码](https://baike.baidu.com/item/源代码)的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。\n\ngit对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死\n\n\n\n## git结构\n\n> 网上有 我就不画了\n\n![git结构图](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200605001853-20211008165733528.png)\n\n\n\n- workspace    相当于就是我们的本地电脑上的文件\n\n- Index    缓存区\n- Repository    本地仓库\n- Remote    远程仓库(github/gitlab/gitee)\n\n\n\n## git命令\n\ngit官方提供的命令多达几百个,可是我们日常却用不到这么多\n\n所以我就整理了一下日常使用的命令\n\n现在关注微信公招:`灰色Code`\n\n回复关键字:`git`\n\n就可以获取思维导图高清图片及导图源地址\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200605002904-20211008165738915.jpg)","source":"_posts/recommend/git-commend-note.md","raw":"---\ntitle: Git常用命令\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:16:56\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Git\ncategories:\n- Java\n---\n\n\n\n## Git简介\n\nGit 是用于 Linux[内核](https://baike.baidu.com/item/内核)开发的[版本控制](https://baike.baidu.com/item/版本控制)工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使[源代码](https://baike.baidu.com/item/源代码)的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。\n\ngit对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死\n\n\n\n## git结构\n\n> 网上有 我就不画了\n\n![git结构图](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200605001853-20211008165733528.png)\n\n\n\n- workspace    相当于就是我们的本地电脑上的文件\n\n- Index    缓存区\n- Repository    本地仓库\n- Remote    远程仓库(github/gitlab/gitee)\n\n\n\n## git命令\n\ngit官方提供的命令多达几百个,可是我们日常却用不到这么多\n\n所以我就整理了一下日常使用的命令\n\n现在关注微信公招:`灰色Code`\n\n回复关键字:`git`\n\n就可以获取思维导图高清图片及导图源地址\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200605002904-20211008165738915.jpg)","slug":"recommend/git-commend-note","published":1,"updated":"2021-10-08T08:57:43.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eh2003tvpucbbvmft2q","content":"<h2 id=\"Git简介\"><a href=\"#Git简介\" class=\"headerlink\" title=\"Git简介\"></a>Git简介</h2><p>Git 是用于 Linux<a href=\"https://baike.baidu.com/item/%E5%86%85%E6%A0%B8\">内核</a>开发的<a href=\"https://baike.baidu.com/item/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\">版本控制</a>工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使<a href=\"https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81\">源代码</a>的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。</p>\n<p>git对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死</p>\n<h2 id=\"git结构\"><a href=\"#git结构\" class=\"headerlink\" title=\"git结构\"></a>git结构</h2><blockquote>\n<p>网上有 我就不画了</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200605001853-20211008165733528.png\" alt=\"git结构图\"></p>\n<ul>\n<li><p>workspace    相当于就是我们的本地电脑上的文件</p>\n</li>\n<li><p>Index    缓存区</p>\n</li>\n<li><p>Repository    本地仓库</p>\n</li>\n<li><p>Remote    远程仓库(github&#x2F;gitlab&#x2F;gitee)</p>\n</li>\n</ul>\n<h2 id=\"git命令\"><a href=\"#git命令\" class=\"headerlink\" title=\"git命令\"></a>git命令</h2><p>git官方提供的命令多达几百个,可是我们日常却用不到这么多</p>\n<p>所以我就整理了一下日常使用的命令</p>\n<p>现在关注微信公招:<code>灰色Code</code></p>\n<p>回复关键字:<code>git</code></p>\n<p>就可以获取思维导图高清图片及导图源地址</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200605002904-20211008165738915.jpg\" alt=\"图片\"></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"Git简介\"><a href=\"#Git简介\" class=\"headerlink\" title=\"Git简介\"></a>Git简介</h2><p>Git 是用于 Linux<a href=\"https://baike.baidu.com/item/%E5%86%85%E6%A0%B8\">内核</a>开发的<a href=\"https://baike.baidu.com/item/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\">版本控制</a>工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使<a href=\"https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81\">源代码</a>的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。</p>\n<p>git对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死</p>\n<h2 id=\"git结构\"><a href=\"#git结构\" class=\"headerlink\" title=\"git结构\"></a>git结构</h2><blockquote>\n<p>网上有 我就不画了</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200605001853-20211008165733528.png\" alt=\"git结构图\"></p>\n<ul>\n<li><p>workspace    相当于就是我们的本地电脑上的文件</p>\n</li>\n<li><p>Index    缓存区</p>\n</li>\n<li><p>Repository    本地仓库</p>\n</li>\n<li><p>Remote    远程仓库(github&#x2F;gitlab&#x2F;gitee)</p>\n</li>\n</ul>\n<h2 id=\"git命令\"><a href=\"#git命令\" class=\"headerlink\" title=\"git命令\"></a>git命令</h2><p>git官方提供的命令多达几百个,可是我们日常却用不到这么多</p>\n<p>所以我就整理了一下日常使用的命令</p>\n<p>现在关注微信公招:<code>灰色Code</code></p>\n<p>回复关键字:<code>git</code></p>\n<p>就可以获取思维导图高清图片及导图源地址</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200605002904-20211008165738915.jpg\" alt=\"图片\"></p>\n"},{"title":"【转】免费可商用，最值得收藏的10个插画素材网站","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-16T01:24:52.000Z","password":null,"summary":null,"keywords":null,"description":"现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。","_content":"\n> 转自[凯凯刘](http://liujinkai.com/2019/10/18/10-best-free-illustration/)\n\n现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。\n\n## IRA Design\n网站：https://iradesign.io/\n介绍：可以将元素进行组合形成自己喜欢的图片，有png和svg格式\n\n![图片](https://i.imgur.com/o7RSHIR.png)\n\n## Absurd Design\n网站：https://absurd.design/\n介绍：有些荒诞风格的矢量图，适用网站的落地页、APP等\n\n![图片](https://i.imgur.com/Onfxiy2.png)\n\n## Ouch!\n网站：https://icons8.com/ouch\n介绍：很多的免费图，各种分类\n\n![图片](https://i.imgur.com/BbQOgSx.png)\n\n## unDraw\n网站：https://undraw.co/\n内容：开源的矢量图库，各种你能想到的基本都有\n\n![图片](https://i.imgur.com/QQpXpob.png)\n\n## Pngtree\n网站：https://pngtree.com/\n介绍：上百万的素材资源可下载\n\n![图片](https://i.imgur.com/h0T33zI.png)\n\n## Drawkit\n网站：https://www.drawkit.io/\n介绍：有免费的下载资源集合\n\n![图片](https://i.imgur.com/1lxifSP.png)\n\n## Humaaans\n网站：[https://www.humaaans.com](https://www.humaaans.com/)\n内容：关于人物的插画图片站\n\n![图片](https://i.imgur.com/JK2AHoL.png)\n\n## Manypixels\n网站：https://www.manypixels.co/gallery/\n介绍：建筑、人物、科技、天气、运动，商业等类型的插画\n\n![图片](https://i.imgur.com/I5gyEaa.png)\n\n## Lukaszadam\n网站：https://lukaszadam.com/illustrations\n介绍：一些有趣的小图标的插画\n\n![图片](https://i.imgur.com/FFDYU4J.png)\n\n## Pixabay\n网站：https://pixabay.com/illustrations/search/\n介绍：收集了很多免费的插图素材，根据关键字可任意搜索\n\n![图片](https://i.imgur.com/xERrBBR.png)","source":"_posts/recommend/recommend-tool-1.md","raw":"---\ntitle: 【转】免费可商用，最值得收藏的10个插画素材网站\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-16 09:24:52\npassword:\nsummary:\nkeywords:\ndescription: 现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。\ntags:\n- UI\n- 推荐\ncategories:\n- Recommend\n---\n\n> 转自[凯凯刘](http://liujinkai.com/2019/10/18/10-best-free-illustration/)\n\n现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。\n\n## IRA Design\n网站：https://iradesign.io/\n介绍：可以将元素进行组合形成自己喜欢的图片，有png和svg格式\n\n![图片](https://i.imgur.com/o7RSHIR.png)\n\n## Absurd Design\n网站：https://absurd.design/\n介绍：有些荒诞风格的矢量图，适用网站的落地页、APP等\n\n![图片](https://i.imgur.com/Onfxiy2.png)\n\n## Ouch!\n网站：https://icons8.com/ouch\n介绍：很多的免费图，各种分类\n\n![图片](https://i.imgur.com/BbQOgSx.png)\n\n## unDraw\n网站：https://undraw.co/\n内容：开源的矢量图库，各种你能想到的基本都有\n\n![图片](https://i.imgur.com/QQpXpob.png)\n\n## Pngtree\n网站：https://pngtree.com/\n介绍：上百万的素材资源可下载\n\n![图片](https://i.imgur.com/h0T33zI.png)\n\n## Drawkit\n网站：https://www.drawkit.io/\n介绍：有免费的下载资源集合\n\n![图片](https://i.imgur.com/1lxifSP.png)\n\n## Humaaans\n网站：[https://www.humaaans.com](https://www.humaaans.com/)\n内容：关于人物的插画图片站\n\n![图片](https://i.imgur.com/JK2AHoL.png)\n\n## Manypixels\n网站：https://www.manypixels.co/gallery/\n介绍：建筑、人物、科技、天气、运动，商业等类型的插画\n\n![图片](https://i.imgur.com/I5gyEaa.png)\n\n## Lukaszadam\n网站：https://lukaszadam.com/illustrations\n介绍：一些有趣的小图标的插画\n\n![图片](https://i.imgur.com/FFDYU4J.png)\n\n## Pixabay\n网站：https://pixabay.com/illustrations/search/\n介绍：收集了很多免费的插图素材，根据关键字可任意搜索\n\n![图片](https://i.imgur.com/xERrBBR.png)","slug":"recommend/recommend-tool-1","published":1,"updated":"2021-10-08T07:57:24.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eh3003wvpuc7hdt5eex","content":"<blockquote>\n<p>转自<a href=\"http://liujinkai.com/2019/10/18/10-best-free-illustration/\">凯凯刘</a></p>\n</blockquote>\n<p>现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。</p>\n<h2 id=\"IRA-Design\"><a href=\"#IRA-Design\" class=\"headerlink\" title=\"IRA Design\"></a>IRA Design</h2><p>网站：<a href=\"https://iradesign.io/\">https://iradesign.io/</a><br>介绍：可以将元素进行组合形成自己喜欢的图片，有png和svg格式</p>\n<p><img src=\"https://i.imgur.com/o7RSHIR.png\" alt=\"图片\"></p>\n<h2 id=\"Absurd-Design\"><a href=\"#Absurd-Design\" class=\"headerlink\" title=\"Absurd Design\"></a>Absurd Design</h2><p>网站：<a href=\"https://absurd.design/\">https://absurd.design/</a><br>介绍：有些荒诞风格的矢量图，适用网站的落地页、APP等</p>\n<p><img src=\"https://i.imgur.com/Onfxiy2.png\" alt=\"图片\"></p>\n<h2 id=\"Ouch\"><a href=\"#Ouch\" class=\"headerlink\" title=\"Ouch!\"></a>Ouch!</h2><p>网站：<a href=\"https://icons8.com/ouch\">https://icons8.com/ouch</a><br>介绍：很多的免费图，各种分类</p>\n<p><img src=\"https://i.imgur.com/BbQOgSx.png\" alt=\"图片\"></p>\n<h2 id=\"unDraw\"><a href=\"#unDraw\" class=\"headerlink\" title=\"unDraw\"></a>unDraw</h2><p>网站：<a href=\"https://undraw.co/\">https://undraw.co/</a><br>内容：开源的矢量图库，各种你能想到的基本都有</p>\n<p><img src=\"https://i.imgur.com/QQpXpob.png\" alt=\"图片\"></p>\n<h2 id=\"Pngtree\"><a href=\"#Pngtree\" class=\"headerlink\" title=\"Pngtree\"></a>Pngtree</h2><p>网站：<a href=\"https://pngtree.com/\">https://pngtree.com/</a><br>介绍：上百万的素材资源可下载</p>\n<p><img src=\"https://i.imgur.com/h0T33zI.png\" alt=\"图片\"></p>\n<h2 id=\"Drawkit\"><a href=\"#Drawkit\" class=\"headerlink\" title=\"Drawkit\"></a>Drawkit</h2><p>网站：<a href=\"https://www.drawkit.io/\">https://www.drawkit.io/</a><br>介绍：有免费的下载资源集合</p>\n<p><img src=\"https://i.imgur.com/1lxifSP.png\" alt=\"图片\"></p>\n<h2 id=\"Humaaans\"><a href=\"#Humaaans\" class=\"headerlink\" title=\"Humaaans\"></a>Humaaans</h2><p>网站：<a href=\"https://www.humaaans.com/\">https://www.humaaans.com</a><br>内容：关于人物的插画图片站</p>\n<p><img src=\"https://i.imgur.com/JK2AHoL.png\" alt=\"图片\"></p>\n<h2 id=\"Manypixels\"><a href=\"#Manypixels\" class=\"headerlink\" title=\"Manypixels\"></a>Manypixels</h2><p>网站：<a href=\"https://www.manypixels.co/gallery/\">https://www.manypixels.co/gallery/</a><br>介绍：建筑、人物、科技、天气、运动，商业等类型的插画</p>\n<p><img src=\"https://i.imgur.com/I5gyEaa.png\" alt=\"图片\"></p>\n<h2 id=\"Lukaszadam\"><a href=\"#Lukaszadam\" class=\"headerlink\" title=\"Lukaszadam\"></a>Lukaszadam</h2><p>网站：<a href=\"https://lukaszadam.com/illustrations\">https://lukaszadam.com/illustrations</a><br>介绍：一些有趣的小图标的插画</p>\n<p><img src=\"https://i.imgur.com/FFDYU4J.png\" alt=\"图片\"></p>\n<h2 id=\"Pixabay\"><a href=\"#Pixabay\" class=\"headerlink\" title=\"Pixabay\"></a>Pixabay</h2><p>网站：<a href=\"https://pixabay.com/illustrations/search/\">https://pixabay.com/illustrations/search/</a><br>介绍：收集了很多免费的插图素材，根据关键字可任意搜索</p>\n<p><img src=\"https://i.imgur.com/xERrBBR.png\" alt=\"图片\"></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<blockquote>\n<p>转自<a href=\"http://liujinkai.com/2019/10/18/10-best-free-illustration/\">凯凯刘</a></p>\n</blockquote>\n<p>现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。</p>\n<h2 id=\"IRA-Design\"><a href=\"#IRA-Design\" class=\"headerlink\" title=\"IRA Design\"></a>IRA Design</h2><p>网站：<a href=\"https://iradesign.io/\">https://iradesign.io/</a><br>介绍：可以将元素进行组合形成自己喜欢的图片，有png和svg格式</p>\n<p><img src=\"https://i.imgur.com/o7RSHIR.png\" alt=\"图片\"></p>\n<h2 id=\"Absurd-Design\"><a href=\"#Absurd-Design\" class=\"headerlink\" title=\"Absurd Design\"></a>Absurd Design</h2><p>网站：<a href=\"https://absurd.design/\">https://absurd.design/</a><br>介绍：有些荒诞风格的矢量图，适用网站的落地页、APP等</p>\n<p><img src=\"https://i.imgur.com/Onfxiy2.png\" alt=\"图片\"></p>\n<h2 id=\"Ouch\"><a href=\"#Ouch\" class=\"headerlink\" title=\"Ouch!\"></a>Ouch!</h2><p>网站：<a href=\"https://icons8.com/ouch\">https://icons8.com/ouch</a><br>介绍：很多的免费图，各种分类</p>\n<p><img src=\"https://i.imgur.com/BbQOgSx.png\" alt=\"图片\"></p>\n<h2 id=\"unDraw\"><a href=\"#unDraw\" class=\"headerlink\" title=\"unDraw\"></a>unDraw</h2><p>网站：<a href=\"https://undraw.co/\">https://undraw.co/</a><br>内容：开源的矢量图库，各种你能想到的基本都有</p>\n<p><img src=\"https://i.imgur.com/QQpXpob.png\" alt=\"图片\"></p>\n<h2 id=\"Pngtree\"><a href=\"#Pngtree\" class=\"headerlink\" title=\"Pngtree\"></a>Pngtree</h2><p>网站：<a href=\"https://pngtree.com/\">https://pngtree.com/</a><br>介绍：上百万的素材资源可下载</p>\n<p><img src=\"https://i.imgur.com/h0T33zI.png\" alt=\"图片\"></p>\n<h2 id=\"Drawkit\"><a href=\"#Drawkit\" class=\"headerlink\" title=\"Drawkit\"></a>Drawkit</h2><p>网站：<a href=\"https://www.drawkit.io/\">https://www.drawkit.io/</a><br>介绍：有免费的下载资源集合</p>\n<p><img src=\"https://i.imgur.com/1lxifSP.png\" alt=\"图片\"></p>\n<h2 id=\"Humaaans\"><a href=\"#Humaaans\" class=\"headerlink\" title=\"Humaaans\"></a>Humaaans</h2><p>网站：<a href=\"https://www.humaaans.com/\">https://www.humaaans.com</a><br>内容：关于人物的插画图片站</p>\n<p><img src=\"https://i.imgur.com/JK2AHoL.png\" alt=\"图片\"></p>\n<h2 id=\"Manypixels\"><a href=\"#Manypixels\" class=\"headerlink\" title=\"Manypixels\"></a>Manypixels</h2><p>网站：<a href=\"https://www.manypixels.co/gallery/\">https://www.manypixels.co/gallery/</a><br>介绍：建筑、人物、科技、天气、运动，商业等类型的插画</p>\n<p><img src=\"https://i.imgur.com/I5gyEaa.png\" alt=\"图片\"></p>\n<h2 id=\"Lukaszadam\"><a href=\"#Lukaszadam\" class=\"headerlink\" title=\"Lukaszadam\"></a>Lukaszadam</h2><p>网站：<a href=\"https://lukaszadam.com/illustrations\">https://lukaszadam.com/illustrations</a><br>介绍：一些有趣的小图标的插画</p>\n<p><img src=\"https://i.imgur.com/FFDYU4J.png\" alt=\"图片\"></p>\n<h2 id=\"Pixabay\"><a href=\"#Pixabay\" class=\"headerlink\" title=\"Pixabay\"></a>Pixabay</h2><p>网站：<a href=\"https://pixabay.com/illustrations/search/\">https://pixabay.com/illustrations/search/</a><br>介绍：收集了很多免费的插图素材，根据关键字可任意搜索</p>\n<p><img src=\"https://i.imgur.com/xERrBBR.png\" alt=\"图片\"></p>\n"},{"title":"RocketMQ集群搭建","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2019-10-09T12:55:36.000Z","password":null,"summary":null,"_content":"\n  本文只讲RocketMQ集群的搭建(异步复制)，具体理论知识后续会在写新文章详细介绍;\n\n\n\n## 环境\n\n- JDK1.8\n- Centos7\n\n\n\n## 主机-两台\n\n- centos7_1 :172.16.54.130\n- centos7_2 :172.16.54.128\n\n\n\n## 软件资源\n\n- JDK1.8 :https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n- RocketMQ4.5.2 :http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip\n\n\n\n## 安装JDK\n\n  首先分别在两台主机上安装JDK1.8，具体安装方法这里就不说了，网上随便搜一搜都有；\n\n\n\n## 配置RocketMQ\n\n  把下载的RocketMQ包分别上传到两台服务器上，然后用命令解压:\n\n  ```shell\n# unzip rocketmq-all-4.5.2-bin-release.zip\n  ```\n\n### 编写配置文件\n\n  这一步很重要，集群的搭建关键在于配置文件的编写，首先看看RocketMQ配置文件的解析:\n\n```properties\n#所属集群名字 \nbrokerClusterName=rocketmq-cluster\n\n#broker名字，每队master和slave保持一致\nbrokerName=broker-a\n\n#0 表示 Master，>0 表示 Slave\nbrokerId=0 \n\n#指定主机ip\nbrokerIP1 = 主机IP\n\n#nameServer地址，分号分割\nnamesrvAddr=主机IP:9876;主机IP:9876\n\n#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数 \ndefaultTopicQueueNums=4\n\n#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭 \nautoCreateTopicEnable=true\n\n#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭 \nautoCreateSubscriptionGroup=true\n\n#Broker 对外服务的监听端口 \nlistenPort=10911\n\n#删除文件时间点，默认凌晨 4点\n deleteWhen=04\n\n#文件保留时间，默认 48 小时 \nfileReservedTime=120\n\n#commitLog每个文件的大小默认1G \nmapedFileSizeCommitLog=1073741824\n\n#ConsumeQueue每个文件默认存30W条，根据业务情况调整\nmapedFileSizeConsumeQueue=300000\n\n#检测物理文件磁盘空间\ndiskMaxUsedSpaceRatio=88\n\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/store/checkpoint\n\n#Broker 的角色\n#- ASYNC_MASTER 异步复制Master\n#- SYNC_MASTER 同步双写Master\n#- SLAVE \nbrokerRole=ASYNC_MASTER\n\n#刷盘方式\n#- ASYNC_FLUSH 异步刷盘\n#- SYNC_FLUSH 同步刷盘 flushDiskType=ASYNC_FLUSH\n#checkTransactionMessageEnable=false\n\n#abort 文件存储路径\nabortFile=/usr/javawork/apache-rocketmq/store/abort\n\n#限制的消息大小 maxMessageSize=65536\n```\n\n以上配置可根据个人需求加入到自己的配置文件中；RocketMQ官方已经为我们创建好了简单的集群配置文件，进去解压后的文件夹，在进入到conf文件夹，可以看到里面有三个文件夹：\n\n- 2m-2s-async :2个master，2个slave，async异步复制\n- 2m-2s-sync :2个master，2个slave，sync同步双写\n- 2m-noslave :2个master,没有slave\n\n这里我们用async异步复制模式，进入文件夹，分别编辑：\n\n#### centos7_1主机编辑如下两个配置文件\n\n> 注意，master和slave的文件存储路径不能用同一个路径，所以必须要区分开。\n\n##### broker-a.properties\n\n```properties\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=ASYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nnamesrvAddr=172.16.54.128:9876;172.16.54.130:9876\nlistenPort=10911\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/master/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/master/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/master/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/master/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/master/store/checkpoint\n```\n\n*这个监听端口设置设置成10911后还会自动监听10909,10912这两个端口，所以要配置文件要避免设置到相应的端口。*\n\n##### broker-a-s.properties\n\n```properties\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=1\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SLAVE\nflushDiskType=ASYNC_FLUSH\nnamesrvAddr=172.16.54.128:9876;172.16.54.130:9876\nlistenPort=20911\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/slave/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/slave/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/slave/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/slave/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/slave/store/checkpoint\n```\n\n*这个监听端口设置设置成20911后还会自动监听20909,20912这两个端口，所以要配置文件要避免设置到相应的端口。*\n\n\n\n#### centos7_2主机编辑如下两个配置文件\n\n##### 和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\n\n\n\n## 设置RocketMQ运行的JVM内存(非必须)\n\n> 此项设置非必须，如果你主机内存很大的话可以不设置，RocketMQ默认要8G。\n\n  进入rocketmq-all-4.5.2-bin-release/bin目录，两台主机分别设置runbroker.sh和runserver.sh这两个文件。\n\n- runbroker.sh：找到如下一行配置\n\n```properties\nJAVA_OPT=\"${JAVA_OPT} -server -Xms8g -Xmx8g -Xmn4g\"\n\n改成：\nJAVA_OPT=\"${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m\"\n```\n\n- runserver.sh: 找到如下一行配置\n\n```properties\nJAVA_OPT=\"${JAVA_OPT} -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n\n改成：\nJAVA_OPT=\"${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n```\n\n\n\n## 启动RocketMQ\n\n> 启动RocketMQ前为了方便访问，先关闭两台主机的防火墙。执行如下命令：\n>\n> ```shell\n> # service firewalld stop\n> ```\n>\n> \n\n  进入rocketmq-all-4.5.2-bin-release/bin这个目录，两台主机分别执行以下命令：\n\n- 启动namesrv\n\n```shell\n# nohup sh mqnamesrv &\n```\n\n- 启动broker-master\n\n```shell\n# nohup sh mqbroker -c ../conf/2m-2s-async/broker-a.properties &\n```\n\n- 启动broker-slave\n\n```shell\n# nohup sh mqbroker -c ../conf/2m-2s-async/broker-a-s.properties &\n```\n\n*注意两台主机启动broker时后面的-c记得加载你配置好的配置文件路径，别加载错了*\n\n\n\n## 搭建Console可视化控制台\n\n  任意一台机器或者本地下载Console源码，地址：https://github.com/apache/rocketmq-externals，或者有git的话直接用命令拉取：\n\n```shell\n# git clone https://github.com/apache/rocketmq-externals.git\n```\n\n进去目录：\n\n```shell\n# cd rocketmq-externals-master/rocketmq-console\n```\n\n修改配置文件：\n\n```shell\n# vim src/main/resources/application.properties\n```\n\n添加两个namesvr的主机ip\n\n```properties\nrocketmq.config.namesrvAddr=172.16.54.128:9876;172.16.54.130:9876\n```\n\n然后进项目跟目录，运行项目\n\n```shell\n# mvn sprint-boot:run\n```\n\n浏览器访问：\n\n![可视化Console界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/rocketmq_console.png)","source":"_posts/rocketmq/rocketmq-cluster-build.md","raw":"---\ntitle: RocketMQ集群搭建\ntop: true\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - RocketMQ\n  - Linux\ncategories:\n  - RocketMQ\ndate: 2019-10-09 20:55:36\npassword:\nsummary:\n---\n\n  本文只讲RocketMQ集群的搭建(异步复制)，具体理论知识后续会在写新文章详细介绍;\n\n\n\n## 环境\n\n- JDK1.8\n- Centos7\n\n\n\n## 主机-两台\n\n- centos7_1 :172.16.54.130\n- centos7_2 :172.16.54.128\n\n\n\n## 软件资源\n\n- JDK1.8 :https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n- RocketMQ4.5.2 :http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip\n\n\n\n## 安装JDK\n\n  首先分别在两台主机上安装JDK1.8，具体安装方法这里就不说了，网上随便搜一搜都有；\n\n\n\n## 配置RocketMQ\n\n  把下载的RocketMQ包分别上传到两台服务器上，然后用命令解压:\n\n  ```shell\n# unzip rocketmq-all-4.5.2-bin-release.zip\n  ```\n\n### 编写配置文件\n\n  这一步很重要，集群的搭建关键在于配置文件的编写，首先看看RocketMQ配置文件的解析:\n\n```properties\n#所属集群名字 \nbrokerClusterName=rocketmq-cluster\n\n#broker名字，每队master和slave保持一致\nbrokerName=broker-a\n\n#0 表示 Master，>0 表示 Slave\nbrokerId=0 \n\n#指定主机ip\nbrokerIP1 = 主机IP\n\n#nameServer地址，分号分割\nnamesrvAddr=主机IP:9876;主机IP:9876\n\n#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数 \ndefaultTopicQueueNums=4\n\n#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭 \nautoCreateTopicEnable=true\n\n#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭 \nautoCreateSubscriptionGroup=true\n\n#Broker 对外服务的监听端口 \nlistenPort=10911\n\n#删除文件时间点，默认凌晨 4点\n deleteWhen=04\n\n#文件保留时间，默认 48 小时 \nfileReservedTime=120\n\n#commitLog每个文件的大小默认1G \nmapedFileSizeCommitLog=1073741824\n\n#ConsumeQueue每个文件默认存30W条，根据业务情况调整\nmapedFileSizeConsumeQueue=300000\n\n#检测物理文件磁盘空间\ndiskMaxUsedSpaceRatio=88\n\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/store/checkpoint\n\n#Broker 的角色\n#- ASYNC_MASTER 异步复制Master\n#- SYNC_MASTER 同步双写Master\n#- SLAVE \nbrokerRole=ASYNC_MASTER\n\n#刷盘方式\n#- ASYNC_FLUSH 异步刷盘\n#- SYNC_FLUSH 同步刷盘 flushDiskType=ASYNC_FLUSH\n#checkTransactionMessageEnable=false\n\n#abort 文件存储路径\nabortFile=/usr/javawork/apache-rocketmq/store/abort\n\n#限制的消息大小 maxMessageSize=65536\n```\n\n以上配置可根据个人需求加入到自己的配置文件中；RocketMQ官方已经为我们创建好了简单的集群配置文件，进去解压后的文件夹，在进入到conf文件夹，可以看到里面有三个文件夹：\n\n- 2m-2s-async :2个master，2个slave，async异步复制\n- 2m-2s-sync :2个master，2个slave，sync同步双写\n- 2m-noslave :2个master,没有slave\n\n这里我们用async异步复制模式，进入文件夹，分别编辑：\n\n#### centos7_1主机编辑如下两个配置文件\n\n> 注意，master和slave的文件存储路径不能用同一个路径，所以必须要区分开。\n\n##### broker-a.properties\n\n```properties\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=ASYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nnamesrvAddr=172.16.54.128:9876;172.16.54.130:9876\nlistenPort=10911\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/master/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/master/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/master/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/master/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/master/store/checkpoint\n```\n\n*这个监听端口设置设置成10911后还会自动监听10909,10912这两个端口，所以要配置文件要避免设置到相应的端口。*\n\n##### broker-a-s.properties\n\n```properties\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=1\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SLAVE\nflushDiskType=ASYNC_FLUSH\nnamesrvAddr=172.16.54.128:9876;172.16.54.130:9876\nlistenPort=20911\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/slave/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/slave/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/slave/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/slave/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/slave/store/checkpoint\n```\n\n*这个监听端口设置设置成20911后还会自动监听20909,20912这两个端口，所以要配置文件要避免设置到相应的端口。*\n\n\n\n#### centos7_2主机编辑如下两个配置文件\n\n##### 和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\n\n\n\n## 设置RocketMQ运行的JVM内存(非必须)\n\n> 此项设置非必须，如果你主机内存很大的话可以不设置，RocketMQ默认要8G。\n\n  进入rocketmq-all-4.5.2-bin-release/bin目录，两台主机分别设置runbroker.sh和runserver.sh这两个文件。\n\n- runbroker.sh：找到如下一行配置\n\n```properties\nJAVA_OPT=\"${JAVA_OPT} -server -Xms8g -Xmx8g -Xmn4g\"\n\n改成：\nJAVA_OPT=\"${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m\"\n```\n\n- runserver.sh: 找到如下一行配置\n\n```properties\nJAVA_OPT=\"${JAVA_OPT} -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n\n改成：\nJAVA_OPT=\"${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n```\n\n\n\n## 启动RocketMQ\n\n> 启动RocketMQ前为了方便访问，先关闭两台主机的防火墙。执行如下命令：\n>\n> ```shell\n> # service firewalld stop\n> ```\n>\n> \n\n  进入rocketmq-all-4.5.2-bin-release/bin这个目录，两台主机分别执行以下命令：\n\n- 启动namesrv\n\n```shell\n# nohup sh mqnamesrv &\n```\n\n- 启动broker-master\n\n```shell\n# nohup sh mqbroker -c ../conf/2m-2s-async/broker-a.properties &\n```\n\n- 启动broker-slave\n\n```shell\n# nohup sh mqbroker -c ../conf/2m-2s-async/broker-a-s.properties &\n```\n\n*注意两台主机启动broker时后面的-c记得加载你配置好的配置文件路径，别加载错了*\n\n\n\n## 搭建Console可视化控制台\n\n  任意一台机器或者本地下载Console源码，地址：https://github.com/apache/rocketmq-externals，或者有git的话直接用命令拉取：\n\n```shell\n# git clone https://github.com/apache/rocketmq-externals.git\n```\n\n进去目录：\n\n```shell\n# cd rocketmq-externals-master/rocketmq-console\n```\n\n修改配置文件：\n\n```shell\n# vim src/main/resources/application.properties\n```\n\n添加两个namesvr的主机ip\n\n```properties\nrocketmq.config.namesrvAddr=172.16.54.128:9876;172.16.54.130:9876\n```\n\n然后进项目跟目录，运行项目\n\n```shell\n# mvn sprint-boot:run\n```\n\n浏览器访问：\n\n![可视化Console界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/rocketmq_console.png)","slug":"rocketmq/rocketmq-cluster-build","published":1,"updated":"2021-10-08T08:54:31.945Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eh4003zvpuc7wd8hzno","content":"<p>  本文只讲RocketMQ集群的搭建(异步复制)，具体理论知识后续会在写新文章详细介绍;</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>JDK1.8</li>\n<li>Centos7</li>\n</ul>\n<h2 id=\"主机-两台\"><a href=\"#主机-两台\" class=\"headerlink\" title=\"主机-两台\"></a>主机-两台</h2><ul>\n<li>centos7_1 :172.16.54.130</li>\n<li>centos7_2 :172.16.54.128</li>\n</ul>\n<h2 id=\"软件资源\"><a href=\"#软件资源\" class=\"headerlink\" title=\"软件资源\"></a>软件资源</h2><ul>\n<li>JDK1.8 :<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li>\n<li>RocketMQ4.5.2 :<a href=\"http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip\">http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip</a></li>\n</ul>\n<h2 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h2><p>  首先分别在两台主机上安装JDK1.8，具体安装方法这里就不说了，网上随便搜一搜都有；</p>\n<h2 id=\"配置RocketMQ\"><a href=\"#配置RocketMQ\" class=\"headerlink\" title=\"配置RocketMQ\"></a>配置RocketMQ</h2><p>  把下载的RocketMQ包分别上传到两台服务器上，然后用命令解压:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">unzip rocketmq-all-4.5.2-bin-release.zip</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编写配置文件\"><a href=\"#编写配置文件\" class=\"headerlink\" title=\"编写配置文件\"></a>编写配置文件</h3><p>  这一步很重要，集群的搭建关键在于配置文件的编写，首先看看RocketMQ配置文件的解析:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#所属集群名字 </span></span><br><span class=\"line\"><span class=\"attr\">brokerClusterName</span>=<span class=\"string\">rocketmq-cluster</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#broker名字，每队master和slave保持一致</span></span><br><span class=\"line\"><span class=\"attr\">brokerName</span>=<span class=\"string\">broker-a</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class=\"line\"><span class=\"attr\">brokerId</span>=<span class=\"string\">0 </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#指定主机ip</span></span><br><span class=\"line\"><span class=\"attr\">brokerIP1</span> = <span class=\"string\">主机IP</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#nameServer地址，分号分割</span></span><br><span class=\"line\"><span class=\"attr\">namesrvAddr</span>=<span class=\"string\">主机IP:9876;主机IP:9876</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数 </span></span><br><span class=\"line\"><span class=\"attr\">defaultTopicQueueNums</span>=<span class=\"string\">4</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭 </span></span><br><span class=\"line\"><span class=\"attr\">autoCreateTopicEnable</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭 </span></span><br><span class=\"line\"><span class=\"attr\">autoCreateSubscriptionGroup</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#Broker 对外服务的监听端口 </span></span><br><span class=\"line\"><span class=\"attr\">listenPort</span>=<span class=\"string\">10911</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#删除文件时间点，默认凌晨 4点</span></span><br><span class=\"line\"> <span class=\"attr\">deleteWhen</span>=<span class=\"string\">04</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#文件保留时间，默认 48 小时 </span></span><br><span class=\"line\"><span class=\"attr\">fileReservedTime</span>=<span class=\"string\">120</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#commitLog每个文件的大小默认1G </span></span><br><span class=\"line\"><span class=\"attr\">mapedFileSizeCommitLog</span>=<span class=\"string\">1073741824</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class=\"line\"><span class=\"attr\">mapedFileSizeConsumeQueue</span>=<span class=\"string\">300000</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#检测物理文件磁盘空间</span></span><br><span class=\"line\"><span class=\"attr\">diskMaxUsedSpaceRatio</span>=<span class=\"string\">88</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathRootDir</span>=<span class=\"string\">/usr/local/rocketmq/store</span></span><br><span class=\"line\"><span class=\"comment\">#commitLog 存储路径 </span></span><br><span class=\"line\"><span class=\"attr\">storePathCommitLog</span>=<span class=\"string\">/usr/local/rocketmq/store/commitlog</span></span><br><span class=\"line\"><span class=\"comment\">#消费队列存储路径存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathConsumeQueue</span>=<span class=\"string\">/usr/local/rocketmq/store/consumequeue</span></span><br><span class=\"line\"><span class=\"comment\">#消息索引存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathIndex</span>=<span class=\"string\">/usr/local/rocketmq/store/index</span></span><br><span class=\"line\"><span class=\"comment\">#checkpoint 文件存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storeCheckpoint</span>=<span class=\"string\">/usr/local/rocketmq/store/checkpoint</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#Broker 的角色</span></span><br><span class=\"line\"><span class=\"comment\">#- ASYNC_MASTER 异步复制Master</span></span><br><span class=\"line\"><span class=\"comment\">#- SYNC_MASTER 同步双写Master</span></span><br><span class=\"line\"><span class=\"comment\">#- SLAVE </span></span><br><span class=\"line\"><span class=\"attr\">brokerRole</span>=<span class=\"string\">ASYNC_MASTER</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#刷盘方式</span></span><br><span class=\"line\"><span class=\"comment\">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class=\"line\"><span class=\"comment\">#- SYNC_FLUSH 同步刷盘 flushDiskType=ASYNC_FLUSH</span></span><br><span class=\"line\"><span class=\"comment\">#checkTransactionMessageEnable=false</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#abort 文件存储路径</span></span><br><span class=\"line\"><span class=\"attr\">abortFile</span>=<span class=\"string\">/usr/javawork/apache-rocketmq/store/abort</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#限制的消息大小 maxMessageSize=65536</span></span><br></pre></td></tr></table></figure>\n\n<p>以上配置可根据个人需求加入到自己的配置文件中；RocketMQ官方已经为我们创建好了简单的集群配置文件，进去解压后的文件夹，在进入到conf文件夹，可以看到里面有三个文件夹：</p>\n<ul>\n<li>2m-2s-async :2个master，2个slave，async异步复制</li>\n<li>2m-2s-sync :2个master，2个slave，sync同步双写</li>\n<li>2m-noslave :2个master,没有slave</li>\n</ul>\n<p>这里我们用async异步复制模式，进入文件夹，分别编辑：</p>\n<h4 id=\"centos7-1主机编辑如下两个配置文件\"><a href=\"#centos7-1主机编辑如下两个配置文件\" class=\"headerlink\" title=\"centos7_1主机编辑如下两个配置文件\"></a>centos7_1主机编辑如下两个配置文件</h4><blockquote>\n<p>注意，master和slave的文件存储路径不能用同一个路径，所以必须要区分开。</p>\n</blockquote>\n<h5 id=\"broker-a-properties\"><a href=\"#broker-a-properties\" class=\"headerlink\" title=\"broker-a.properties\"></a>broker-a.properties</h5><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">brokerClusterName</span>=<span class=\"string\">DefaultCluster</span></span><br><span class=\"line\"><span class=\"attr\">brokerName</span>=<span class=\"string\">broker-a</span></span><br><span class=\"line\"><span class=\"attr\">brokerId</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"attr\">deleteWhen</span>=<span class=\"string\">04</span></span><br><span class=\"line\"><span class=\"attr\">fileReservedTime</span>=<span class=\"string\">48</span></span><br><span class=\"line\"><span class=\"attr\">brokerRole</span>=<span class=\"string\">ASYNC_MASTER</span></span><br><span class=\"line\"><span class=\"attr\">flushDiskType</span>=<span class=\"string\">ASYNC_FLUSH</span></span><br><span class=\"line\"><span class=\"attr\">namesrvAddr</span>=<span class=\"string\">172.16.54.128:9876;172.16.54.130:9876</span></span><br><span class=\"line\"><span class=\"attr\">listenPort</span>=<span class=\"string\">10911</span></span><br><span class=\"line\"><span class=\"comment\">#存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathRootDir</span>=<span class=\"string\">/usr/local/rocketmq/master/store</span></span><br><span class=\"line\"><span class=\"comment\">#commitLog 存储路径 </span></span><br><span class=\"line\"><span class=\"attr\">storePathCommitLog</span>=<span class=\"string\">/usr/local/rocketmq/master/store/commitlog</span></span><br><span class=\"line\"><span class=\"comment\">#消费队列存储路径存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathConsumeQueue</span>=<span class=\"string\">/usr/local/rocketmq/master/store/consumequeue</span></span><br><span class=\"line\"><span class=\"comment\">#消息索引存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathIndex</span>=<span class=\"string\">/usr/local/rocketmq/master/store/index</span></span><br><span class=\"line\"><span class=\"comment\">#checkpoint 文件存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storeCheckpoint</span>=<span class=\"string\">/usr/local/rocketmq/master/store/checkpoint</span></span><br></pre></td></tr></table></figure>\n\n<p><em>这个监听端口设置设置成10911后还会自动监听10909,10912这两个端口，所以要配置文件要避免设置到相应的端口。</em></p>\n<h5 id=\"broker-a-s-properties\"><a href=\"#broker-a-s-properties\" class=\"headerlink\" title=\"broker-a-s.properties\"></a>broker-a-s.properties</h5><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">brokerClusterName</span>=<span class=\"string\">DefaultCluster</span></span><br><span class=\"line\"><span class=\"attr\">brokerName</span>=<span class=\"string\">broker-a</span></span><br><span class=\"line\"><span class=\"attr\">brokerId</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">deleteWhen</span>=<span class=\"string\">04</span></span><br><span class=\"line\"><span class=\"attr\">fileReservedTime</span>=<span class=\"string\">48</span></span><br><span class=\"line\"><span class=\"attr\">brokerRole</span>=<span class=\"string\">SLAVE</span></span><br><span class=\"line\"><span class=\"attr\">flushDiskType</span>=<span class=\"string\">ASYNC_FLUSH</span></span><br><span class=\"line\"><span class=\"attr\">namesrvAddr</span>=<span class=\"string\">172.16.54.128:9876;172.16.54.130:9876</span></span><br><span class=\"line\"><span class=\"attr\">listenPort</span>=<span class=\"string\">20911</span></span><br><span class=\"line\"><span class=\"comment\">#存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathRootDir</span>=<span class=\"string\">/usr/local/rocketmq/slave/store</span></span><br><span class=\"line\"><span class=\"comment\">#commitLog 存储路径 </span></span><br><span class=\"line\"><span class=\"attr\">storePathCommitLog</span>=<span class=\"string\">/usr/local/rocketmq/slave/store/commitlog</span></span><br><span class=\"line\"><span class=\"comment\">#消费队列存储路径存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathConsumeQueue</span>=<span class=\"string\">/usr/local/rocketmq/slave/store/consumequeue</span></span><br><span class=\"line\"><span class=\"comment\">#消息索引存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathIndex</span>=<span class=\"string\">/usr/local/rocketmq/slave/store/index</span></span><br><span class=\"line\"><span class=\"comment\">#checkpoint 文件存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storeCheckpoint</span>=<span class=\"string\">/usr/local/rocketmq/slave/store/checkpoint</span></span><br></pre></td></tr></table></figure>\n\n<p><em>这个监听端口设置设置成20911后还会自动监听20909,20912这两个端口，所以要配置文件要避免设置到相应的端口。</em></p>\n<h4 id=\"centos7-2主机编辑如下两个配置文件\"><a href=\"#centos7-2主机编辑如下两个配置文件\" class=\"headerlink\" title=\"centos7_2主机编辑如下两个配置文件\"></a>centos7_2主机编辑如下两个配置文件</h4><h5 id=\"和centos7-1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\"><a href=\"#和centos7-1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\" class=\"headerlink\" title=\"和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\"></a>和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。</h5><h2 id=\"设置RocketMQ运行的JVM内存-非必须\"><a href=\"#设置RocketMQ运行的JVM内存-非必须\" class=\"headerlink\" title=\"设置RocketMQ运行的JVM内存(非必须)\"></a>设置RocketMQ运行的JVM内存(非必须)</h2><blockquote>\n<p>此项设置非必须，如果你主机内存很大的话可以不设置，RocketMQ默认要8G。</p>\n</blockquote>\n<p>  进入rocketmq-all-4.5.2-bin-release&#x2F;bin目录，两台主机分别设置runbroker.sh和runserver.sh这两个文件。</p>\n<ul>\n<li>runbroker.sh：找到如下一行配置</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">JAVA_OPT</span>=<span class=\"string\">&quot;$&#123;JAVA_OPT&#125; -server -Xms8g -Xmx8g -Xmn4g&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">改成：</span></span><br><span class=\"line\"><span class=\"attr\">JAVA_OPT</span>=<span class=\"string\">&quot;$&#123;JAVA_OPT&#125; -server -Xms512m -Xmx512m -Xmn256m&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>runserver.sh: 找到如下一行配置</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">JAVA_OPT</span>=<span class=\"string\">&quot;$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">改成：</span></span><br><span class=\"line\"><span class=\"attr\">JAVA_OPT</span>=<span class=\"string\">&quot;$&#123;JAVA_OPT&#125; -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动RocketMQ\"><a href=\"#启动RocketMQ\" class=\"headerlink\" title=\"启动RocketMQ\"></a>启动RocketMQ</h2><blockquote>\n<p>启动RocketMQ前为了方便访问，先关闭两台主机的防火墙。执行如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">service firewalld stop</span></span><br></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p>  进入rocketmq-all-4.5.2-bin-release&#x2F;bin这个目录，两台主机分别执行以下命令：</p>\n<ul>\n<li>启动namesrv</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">nohup</span> sh mqnamesrv &amp;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动broker-master</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">nohup</span> sh mqbroker -c ../conf/2m-2s-async/broker-a.properties &amp;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动broker-slave</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">nohup</span> sh mqbroker -c ../conf/2m-2s-async/broker-a-s.properties &amp;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>注意两台主机启动broker时后面的-c记得加载你配置好的配置文件路径，别加载错了</em></p>\n<h2 id=\"搭建Console可视化控制台\"><a href=\"#搭建Console可视化控制台\" class=\"headerlink\" title=\"搭建Console可视化控制台\"></a>搭建Console可视化控制台</h2><p>  任意一台机器或者本地下载Console源码，地址：<a href=\"https://github.com/apache/rocketmq-externals%EF%BC%8C%E6%88%96%E8%80%85%E6%9C%89git%E7%9A%84%E8%AF%9D%E7%9B%B4%E6%8E%A5%E7%94%A8%E5%91%BD%E4%BB%A4%E6%8B%89%E5%8F%96%EF%BC%9A\">https://github.com/apache/rocketmq-externals，或者有git的话直接用命令拉取：</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">git <span class=\"built_in\">clone</span> https://github.com/apache/rocketmq-externals.git</span></span><br></pre></td></tr></table></figure>\n\n<p>进去目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> rocketmq-externals-master/rocketmq-console</span></span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">vim src/main/resources/application.properties</span></span><br></pre></td></tr></table></figure>\n\n<p>添加两个namesvr的主机ip</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rocketmq.config.namesrvAddr</span>=<span class=\"string\">172.16.54.128:9876;172.16.54.130:9876</span></span><br></pre></td></tr></table></figure>\n\n<p>然后进项目跟目录，运行项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mvn sprint-boot:run</span></span><br></pre></td></tr></table></figure>\n\n<p>浏览器访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/rocketmq_console.png\" alt=\"可视化Console界面\"></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p>  本文只讲RocketMQ集群的搭建(异步复制)，具体理论知识后续会在写新文章详细介绍;</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>JDK1.8</li>\n<li>Centos7</li>\n</ul>\n<h2 id=\"主机-两台\"><a href=\"#主机-两台\" class=\"headerlink\" title=\"主机-两台\"></a>主机-两台</h2><ul>\n<li>centos7_1 :172.16.54.130</li>\n<li>centos7_2 :172.16.54.128</li>\n</ul>\n<h2 id=\"软件资源\"><a href=\"#软件资源\" class=\"headerlink\" title=\"软件资源\"></a>软件资源</h2><ul>\n<li>JDK1.8 :<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li>\n<li>RocketMQ4.5.2 :<a href=\"http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip\">http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip</a></li>\n</ul>\n<h2 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h2><p>  首先分别在两台主机上安装JDK1.8，具体安装方法这里就不说了，网上随便搜一搜都有；</p>\n<h2 id=\"配置RocketMQ\"><a href=\"#配置RocketMQ\" class=\"headerlink\" title=\"配置RocketMQ\"></a>配置RocketMQ</h2><p>  把下载的RocketMQ包分别上传到两台服务器上，然后用命令解压:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">unzip rocketmq-all-4.5.2-bin-release.zip</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编写配置文件\"><a href=\"#编写配置文件\" class=\"headerlink\" title=\"编写配置文件\"></a>编写配置文件</h3><p>  这一步很重要，集群的搭建关键在于配置文件的编写，首先看看RocketMQ配置文件的解析:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#所属集群名字 </span></span><br><span class=\"line\"><span class=\"attr\">brokerClusterName</span>=<span class=\"string\">rocketmq-cluster</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#broker名字，每队master和slave保持一致</span></span><br><span class=\"line\"><span class=\"attr\">brokerName</span>=<span class=\"string\">broker-a</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class=\"line\"><span class=\"attr\">brokerId</span>=<span class=\"string\">0 </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#指定主机ip</span></span><br><span class=\"line\"><span class=\"attr\">brokerIP1</span> = <span class=\"string\">主机IP</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#nameServer地址，分号分割</span></span><br><span class=\"line\"><span class=\"attr\">namesrvAddr</span>=<span class=\"string\">主机IP:9876;主机IP:9876</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数 </span></span><br><span class=\"line\"><span class=\"attr\">defaultTopicQueueNums</span>=<span class=\"string\">4</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭 </span></span><br><span class=\"line\"><span class=\"attr\">autoCreateTopicEnable</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭 </span></span><br><span class=\"line\"><span class=\"attr\">autoCreateSubscriptionGroup</span>=<span class=\"string\">true</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#Broker 对外服务的监听端口 </span></span><br><span class=\"line\"><span class=\"attr\">listenPort</span>=<span class=\"string\">10911</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#删除文件时间点，默认凌晨 4点</span></span><br><span class=\"line\"> <span class=\"attr\">deleteWhen</span>=<span class=\"string\">04</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#文件保留时间，默认 48 小时 </span></span><br><span class=\"line\"><span class=\"attr\">fileReservedTime</span>=<span class=\"string\">120</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#commitLog每个文件的大小默认1G </span></span><br><span class=\"line\"><span class=\"attr\">mapedFileSizeCommitLog</span>=<span class=\"string\">1073741824</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class=\"line\"><span class=\"attr\">mapedFileSizeConsumeQueue</span>=<span class=\"string\">300000</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#检测物理文件磁盘空间</span></span><br><span class=\"line\"><span class=\"attr\">diskMaxUsedSpaceRatio</span>=<span class=\"string\">88</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathRootDir</span>=<span class=\"string\">/usr/local/rocketmq/store</span></span><br><span class=\"line\"><span class=\"comment\">#commitLog 存储路径 </span></span><br><span class=\"line\"><span class=\"attr\">storePathCommitLog</span>=<span class=\"string\">/usr/local/rocketmq/store/commitlog</span></span><br><span class=\"line\"><span class=\"comment\">#消费队列存储路径存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathConsumeQueue</span>=<span class=\"string\">/usr/local/rocketmq/store/consumequeue</span></span><br><span class=\"line\"><span class=\"comment\">#消息索引存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathIndex</span>=<span class=\"string\">/usr/local/rocketmq/store/index</span></span><br><span class=\"line\"><span class=\"comment\">#checkpoint 文件存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storeCheckpoint</span>=<span class=\"string\">/usr/local/rocketmq/store/checkpoint</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#Broker 的角色</span></span><br><span class=\"line\"><span class=\"comment\">#- ASYNC_MASTER 异步复制Master</span></span><br><span class=\"line\"><span class=\"comment\">#- SYNC_MASTER 同步双写Master</span></span><br><span class=\"line\"><span class=\"comment\">#- SLAVE </span></span><br><span class=\"line\"><span class=\"attr\">brokerRole</span>=<span class=\"string\">ASYNC_MASTER</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#刷盘方式</span></span><br><span class=\"line\"><span class=\"comment\">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class=\"line\"><span class=\"comment\">#- SYNC_FLUSH 同步刷盘 flushDiskType=ASYNC_FLUSH</span></span><br><span class=\"line\"><span class=\"comment\">#checkTransactionMessageEnable=false</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#abort 文件存储路径</span></span><br><span class=\"line\"><span class=\"attr\">abortFile</span>=<span class=\"string\">/usr/javawork/apache-rocketmq/store/abort</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#限制的消息大小 maxMessageSize=65536</span></span><br></pre></td></tr></table></figure>\n\n<p>以上配置可根据个人需求加入到自己的配置文件中；RocketMQ官方已经为我们创建好了简单的集群配置文件，进去解压后的文件夹，在进入到conf文件夹，可以看到里面有三个文件夹：</p>\n<ul>\n<li>2m-2s-async :2个master，2个slave，async异步复制</li>\n<li>2m-2s-sync :2个master，2个slave，sync同步双写</li>\n<li>2m-noslave :2个master,没有slave</li>\n</ul>\n<p>这里我们用async异步复制模式，进入文件夹，分别编辑：</p>\n<h4 id=\"centos7-1主机编辑如下两个配置文件\"><a href=\"#centos7-1主机编辑如下两个配置文件\" class=\"headerlink\" title=\"centos7_1主机编辑如下两个配置文件\"></a>centos7_1主机编辑如下两个配置文件</h4><blockquote>\n<p>注意，master和slave的文件存储路径不能用同一个路径，所以必须要区分开。</p>\n</blockquote>\n<h5 id=\"broker-a-properties\"><a href=\"#broker-a-properties\" class=\"headerlink\" title=\"broker-a.properties\"></a>broker-a.properties</h5><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">brokerClusterName</span>=<span class=\"string\">DefaultCluster</span></span><br><span class=\"line\"><span class=\"attr\">brokerName</span>=<span class=\"string\">broker-a</span></span><br><span class=\"line\"><span class=\"attr\">brokerId</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"attr\">deleteWhen</span>=<span class=\"string\">04</span></span><br><span class=\"line\"><span class=\"attr\">fileReservedTime</span>=<span class=\"string\">48</span></span><br><span class=\"line\"><span class=\"attr\">brokerRole</span>=<span class=\"string\">ASYNC_MASTER</span></span><br><span class=\"line\"><span class=\"attr\">flushDiskType</span>=<span class=\"string\">ASYNC_FLUSH</span></span><br><span class=\"line\"><span class=\"attr\">namesrvAddr</span>=<span class=\"string\">172.16.54.128:9876;172.16.54.130:9876</span></span><br><span class=\"line\"><span class=\"attr\">listenPort</span>=<span class=\"string\">10911</span></span><br><span class=\"line\"><span class=\"comment\">#存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathRootDir</span>=<span class=\"string\">/usr/local/rocketmq/master/store</span></span><br><span class=\"line\"><span class=\"comment\">#commitLog 存储路径 </span></span><br><span class=\"line\"><span class=\"attr\">storePathCommitLog</span>=<span class=\"string\">/usr/local/rocketmq/master/store/commitlog</span></span><br><span class=\"line\"><span class=\"comment\">#消费队列存储路径存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathConsumeQueue</span>=<span class=\"string\">/usr/local/rocketmq/master/store/consumequeue</span></span><br><span class=\"line\"><span class=\"comment\">#消息索引存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathIndex</span>=<span class=\"string\">/usr/local/rocketmq/master/store/index</span></span><br><span class=\"line\"><span class=\"comment\">#checkpoint 文件存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storeCheckpoint</span>=<span class=\"string\">/usr/local/rocketmq/master/store/checkpoint</span></span><br></pre></td></tr></table></figure>\n\n<p><em>这个监听端口设置设置成10911后还会自动监听10909,10912这两个端口，所以要配置文件要避免设置到相应的端口。</em></p>\n<h5 id=\"broker-a-s-properties\"><a href=\"#broker-a-s-properties\" class=\"headerlink\" title=\"broker-a-s.properties\"></a>broker-a-s.properties</h5><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">brokerClusterName</span>=<span class=\"string\">DefaultCluster</span></span><br><span class=\"line\"><span class=\"attr\">brokerName</span>=<span class=\"string\">broker-a</span></span><br><span class=\"line\"><span class=\"attr\">brokerId</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">deleteWhen</span>=<span class=\"string\">04</span></span><br><span class=\"line\"><span class=\"attr\">fileReservedTime</span>=<span class=\"string\">48</span></span><br><span class=\"line\"><span class=\"attr\">brokerRole</span>=<span class=\"string\">SLAVE</span></span><br><span class=\"line\"><span class=\"attr\">flushDiskType</span>=<span class=\"string\">ASYNC_FLUSH</span></span><br><span class=\"line\"><span class=\"attr\">namesrvAddr</span>=<span class=\"string\">172.16.54.128:9876;172.16.54.130:9876</span></span><br><span class=\"line\"><span class=\"attr\">listenPort</span>=<span class=\"string\">20911</span></span><br><span class=\"line\"><span class=\"comment\">#存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathRootDir</span>=<span class=\"string\">/usr/local/rocketmq/slave/store</span></span><br><span class=\"line\"><span class=\"comment\">#commitLog 存储路径 </span></span><br><span class=\"line\"><span class=\"attr\">storePathCommitLog</span>=<span class=\"string\">/usr/local/rocketmq/slave/store/commitlog</span></span><br><span class=\"line\"><span class=\"comment\">#消费队列存储路径存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathConsumeQueue</span>=<span class=\"string\">/usr/local/rocketmq/slave/store/consumequeue</span></span><br><span class=\"line\"><span class=\"comment\">#消息索引存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathIndex</span>=<span class=\"string\">/usr/local/rocketmq/slave/store/index</span></span><br><span class=\"line\"><span class=\"comment\">#checkpoint 文件存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storeCheckpoint</span>=<span class=\"string\">/usr/local/rocketmq/slave/store/checkpoint</span></span><br></pre></td></tr></table></figure>\n\n<p><em>这个监听端口设置设置成20911后还会自动监听20909,20912这两个端口，所以要配置文件要避免设置到相应的端口。</em></p>\n<h4 id=\"centos7-2主机编辑如下两个配置文件\"><a href=\"#centos7-2主机编辑如下两个配置文件\" class=\"headerlink\" title=\"centos7_2主机编辑如下两个配置文件\"></a>centos7_2主机编辑如下两个配置文件</h4><h5 id=\"和centos7-1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\"><a href=\"#和centos7-1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\" class=\"headerlink\" title=\"和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\"></a>和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。</h5><h2 id=\"设置RocketMQ运行的JVM内存-非必须\"><a href=\"#设置RocketMQ运行的JVM内存-非必须\" class=\"headerlink\" title=\"设置RocketMQ运行的JVM内存(非必须)\"></a>设置RocketMQ运行的JVM内存(非必须)</h2><blockquote>\n<p>此项设置非必须，如果你主机内存很大的话可以不设置，RocketMQ默认要8G。</p>\n</blockquote>\n<p>  进入rocketmq-all-4.5.2-bin-release&#x2F;bin目录，两台主机分别设置runbroker.sh和runserver.sh这两个文件。</p>\n<ul>\n<li>runbroker.sh：找到如下一行配置</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">JAVA_OPT</span>=<span class=\"string\">&quot;$&#123;JAVA_OPT&#125; -server -Xms8g -Xmx8g -Xmn4g&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">改成：</span></span><br><span class=\"line\"><span class=\"attr\">JAVA_OPT</span>=<span class=\"string\">&quot;$&#123;JAVA_OPT&#125; -server -Xms512m -Xmx512m -Xmn256m&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>runserver.sh: 找到如下一行配置</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">JAVA_OPT</span>=<span class=\"string\">&quot;$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">改成：</span></span><br><span class=\"line\"><span class=\"attr\">JAVA_OPT</span>=<span class=\"string\">&quot;$&#123;JAVA_OPT&#125; -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动RocketMQ\"><a href=\"#启动RocketMQ\" class=\"headerlink\" title=\"启动RocketMQ\"></a>启动RocketMQ</h2><blockquote>\n<p>启动RocketMQ前为了方便访问，先关闭两台主机的防火墙。执行如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">service firewalld stop</span></span><br></pre></td></tr></table></figure>\n\n\n</blockquote>\n<p>  进入rocketmq-all-4.5.2-bin-release&#x2F;bin这个目录，两台主机分别执行以下命令：</p>\n<ul>\n<li>启动namesrv</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">nohup</span> sh mqnamesrv &amp;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动broker-master</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">nohup</span> sh mqbroker -c ../conf/2m-2s-async/broker-a.properties &amp;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动broker-slave</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">nohup</span> sh mqbroker -c ../conf/2m-2s-async/broker-a-s.properties &amp;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>注意两台主机启动broker时后面的-c记得加载你配置好的配置文件路径，别加载错了</em></p>\n<h2 id=\"搭建Console可视化控制台\"><a href=\"#搭建Console可视化控制台\" class=\"headerlink\" title=\"搭建Console可视化控制台\"></a>搭建Console可视化控制台</h2><p>  任意一台机器或者本地下载Console源码，地址：<a href=\"https://github.com/apache/rocketmq-externals%EF%BC%8C%E6%88%96%E8%80%85%E6%9C%89git%E7%9A%84%E8%AF%9D%E7%9B%B4%E6%8E%A5%E7%94%A8%E5%91%BD%E4%BB%A4%E6%8B%89%E5%8F%96%EF%BC%9A\">https://github.com/apache/rocketmq-externals，或者有git的话直接用命令拉取：</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">git <span class=\"built_in\">clone</span> https://github.com/apache/rocketmq-externals.git</span></span><br></pre></td></tr></table></figure>\n\n<p>进去目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">cd</span> rocketmq-externals-master/rocketmq-console</span></span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">vim src/main/resources/application.properties</span></span><br></pre></td></tr></table></figure>\n\n<p>添加两个namesvr的主机ip</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">rocketmq.config.namesrvAddr</span>=<span class=\"string\">172.16.54.128:9876;172.16.54.130:9876</span></span><br></pre></td></tr></table></figure>\n\n<p>然后进项目跟目录，运行项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mvn sprint-boot:run</span></span><br></pre></td></tr></table></figure>\n\n<p>浏览器访问：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/rocketmq_console.png\" alt=\"可视化Console界面\"></p>\n"},{"title":"什么是HTTP协议？","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-06-04T03:44:00.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n![http协议](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/jdFFPmbCNQCyhttp%E5%8D%8F%E8%AE%AE.png)\n\n## 版本介绍\n\nHTTP 协议不用我多说了吧，大家都知道，现在我 web 开发一般都是使用 HTTP 协议来进行通信的。到目前为止，HTTP 进行了几次版本更新，HTTP 1.1 就是表示HTTP 的 1.1 版本。1.1 版本也是目前大部分网站所用的版本。\n\n### HTTP 0.9\n\n- 发布时间：1991 年\n- 简介：梦开始的地方，只接受GET一种请求方法，没有在通讯中指定版本号，且不支持请求头。由于该版本不支持POST方法，因此客户端无法向服务器传递太多信息。\n\n### HTTP 1.0\n\n- 发布时间：1996 年 5 月\n- 简介：这是第一个在通讯中指定版本号的HTTP协议版本。同时比 0.9 版本增加大量新特性。非持续连接，每次都要重新与服务器建立连接。\n\n### HTTP 1.1\n\n- 发布时间：1997 年1月\n- 简介：默认采用持续连接（Connection: keep-alive），能很好地配合代理服务器工作。还支持以[管道方式](https://zh.wikipedia.org/wiki/HTTP管线化)在同时发送多个请求，以便降低线路负载，提高传输速度。同时这也是目前最流行的版本。\n\nHTTP/1.1相较于HTTP/1.0协议的区别主要体现在：\n\n- 缓存处理\n- 带宽优化及网络连接的使用\n- 错误通知的管理\n- 消息在网络中的发送\n- 互联网地址的维护\n- 安全性及完整性\n\n### HTTP 2.0\n\n- 发布时间：2015 年 5 月\n- 简介：HTTP/2 是 [HTTP](https://zh.wikipedia.org/wiki/HTTP) 协议自 1999 年 HTTP 1.1 的改进版 RFC 2616 发布后的首个更新，主要基于 [SPDY](https://zh.wikipedia.org/wiki/SPDY) 协议。它由[互联网工程任务组](https://zh.wikipedia.org/wiki/互联网工程任务组)（IETF）的Hypertext Transfer Protocol Bis（httpbis）工作小组进行开发。该组织于 2014 年 12 月将 HTTP/2 标准提议递交至 [IESG](https://zh.wikipedia.org/w/index.php?title=IESG&action=edit&redlink=1) 进行讨论，于 2015 年 2 月 17 日被批准。\n\n## 报文格式\n\n### 请求报文\n\n请求报文分为 4 个部分，分别是请求行、请求头、换行行、请求数据，每个部分的末尾都会带上回车符（CR，ASCII：0d）和换行符（LF，ASCII：0a）\n\n其中请求行分为请求方法、请求的 URL 地址、HTTP 版本号，每个字段用**空格**（ASCII：20）来分隔\n\n请求头部分可以有多行，每行用回车符和换行符区分\n\n![HTTP1.1_请求报文](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/dmhMuYZ.png)\n\n为了方便理解，我们可以用 Wireshark 来抓取一个 HTTP 请求来看看，并把它和上图进行关联\n\n![HTTP报文格式](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/KziYgTc.png)\n\n### 响应报文\n\n响应报文和请求报文基本差不多，唯一有区别就第一行状态行和请求报文的第一行请求行有区别。\n\n状态行也分为三个部分，分别是 HTTP 版本、状态码、状态码描述，每个部分用空格进行分隔。\n\n响应头和请求头一样，可以有多行\n\n![HTTP响应报文 (1)](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/TIHv2ArvWDqDHTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%20(1).jpg)\n\n同样，用 Wireshark 抓取一个响应报文，来和上图进行一一对应。\n\n\n![HTTP响应报文 (2)](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/QP0vZ8wcnVZnHTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%20(2).png)\n\n## 持续连接和非持续连接\n\n上面说了，HTTP 1.1 的连接由原来的非持续连接变为了持续连接（Connection: keep-alive）。那么这两个有什么区别呢？\n\n**非持续连接**指的是当向服务器多次请求资源时，每次都需要单独的进行 TCP 的连接和断开。\n\n**持续连接**指的是当向服务器请求资源时，可以共用一个 TCP 连接来进行资源的传输。\n\n> 尽管 HTTP 1.1 默认使用持续连接，但是也可以配置为非持续连接，设置方法：Connection 字段设置为 close\n\n为了好理解，为画了一张图，图中省略了 TCP 建立连接和断开连接的细致步骤。\n\n![HTTP持续连接和非持续连接](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/BmuEgd8fnYPUHTTP%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5%E5%92%8C%E9%9D%9E%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5.jpg)\n\n## 请求方法\n\n> 一般我们常用的只有 GET 和 POST 两个请求方法，但是如果遵循 REST 风格来进行 API 接口的设计，就可以用到下面的一些请求方法了。\n\n- OPTIONS：这个方法会请求服务器返回该资源所支持的所有HTTP**请求方法**。\n- GET：获取指定资源地址的数据，不推荐进行上传数据等操作。\n- HEAD：服务器在响应 HEAD 请求时不会回传 Body 资源的内容部分，这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。\n- POST：POST 请求会 向指定资源提交数据，请求服务器进行处理，请求数据会被包含在请求体中。\n- PUT：可以将指定资源的最新数据传送给服务器取代指定的资源的内容。\n- DELETE：删除指定资源的数据。\n- TRACE：TRACE 请求服务器回显其收到的请求信息，该方法主要用于 HTTP 请求的测试或诊断。\n- ......\n\n## 响应码\n\n### 1xx\n\nInformational（信息性状态码），表示接收的请求正在处理，具体可以查看 [RFC 文档](https://datatracker.ietf.org/doc/html/rfc2616#page-57)\n\n### 2xx\n\nSuccess（成功状态码），请求正常处理完毕，具体可以查看 [RFC 文档](https://datatracker.ietf.org/doc/html/rfc2616#page-58)\n\n### 3xx\n\nRedirection（重定向状态码），需要进行附加操作以完成请求，具体可以查看 [RFC 文档](https://datatracker.ietf.org/doc/html/rfc2616#page-61)\n\n### 4xx\n\nClient Error（客户端错误状态码），服务器无法处理请求，具体可以查看 [RFC 文档](https://datatracker.ietf.org/doc/html/rfc2616#page-65)\n\n### 5xx\n\nServer Error（服务器错误状态码），服务器处理请求出错，具体可以查看 [RFC 文档](https://datatracker.ietf.org/doc/html/rfc2616#page-70)","source":"_posts/protocol/0143CD7666CD44389FE6F565E10EEE1A.md","raw":"---\ntitle: 什么是HTTP协议？\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-06-04 11:44:00\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- HTTP协议\ncategories:\n- Protocol\n---\n\n![http协议](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/jdFFPmbCNQCyhttp%E5%8D%8F%E8%AE%AE.png)\n\n## 版本介绍\n\nHTTP 协议不用我多说了吧，大家都知道，现在我 web 开发一般都是使用 HTTP 协议来进行通信的。到目前为止，HTTP 进行了几次版本更新，HTTP 1.1 就是表示HTTP 的 1.1 版本。1.1 版本也是目前大部分网站所用的版本。\n\n### HTTP 0.9\n\n- 发布时间：1991 年\n- 简介：梦开始的地方，只接受GET一种请求方法，没有在通讯中指定版本号，且不支持请求头。由于该版本不支持POST方法，因此客户端无法向服务器传递太多信息。\n\n### HTTP 1.0\n\n- 发布时间：1996 年 5 月\n- 简介：这是第一个在通讯中指定版本号的HTTP协议版本。同时比 0.9 版本增加大量新特性。非持续连接，每次都要重新与服务器建立连接。\n\n### HTTP 1.1\n\n- 发布时间：1997 年1月\n- 简介：默认采用持续连接（Connection: keep-alive），能很好地配合代理服务器工作。还支持以[管道方式](https://zh.wikipedia.org/wiki/HTTP管线化)在同时发送多个请求，以便降低线路负载，提高传输速度。同时这也是目前最流行的版本。\n\nHTTP/1.1相较于HTTP/1.0协议的区别主要体现在：\n\n- 缓存处理\n- 带宽优化及网络连接的使用\n- 错误通知的管理\n- 消息在网络中的发送\n- 互联网地址的维护\n- 安全性及完整性\n\n### HTTP 2.0\n\n- 发布时间：2015 年 5 月\n- 简介：HTTP/2 是 [HTTP](https://zh.wikipedia.org/wiki/HTTP) 协议自 1999 年 HTTP 1.1 的改进版 RFC 2616 发布后的首个更新，主要基于 [SPDY](https://zh.wikipedia.org/wiki/SPDY) 协议。它由[互联网工程任务组](https://zh.wikipedia.org/wiki/互联网工程任务组)（IETF）的Hypertext Transfer Protocol Bis（httpbis）工作小组进行开发。该组织于 2014 年 12 月将 HTTP/2 标准提议递交至 [IESG](https://zh.wikipedia.org/w/index.php?title=IESG&action=edit&redlink=1) 进行讨论，于 2015 年 2 月 17 日被批准。\n\n## 报文格式\n\n### 请求报文\n\n请求报文分为 4 个部分，分别是请求行、请求头、换行行、请求数据，每个部分的末尾都会带上回车符（CR，ASCII：0d）和换行符（LF，ASCII：0a）\n\n其中请求行分为请求方法、请求的 URL 地址、HTTP 版本号，每个字段用**空格**（ASCII：20）来分隔\n\n请求头部分可以有多行，每行用回车符和换行符区分\n\n![HTTP1.1_请求报文](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/dmhMuYZ.png)\n\n为了方便理解，我们可以用 Wireshark 来抓取一个 HTTP 请求来看看，并把它和上图进行关联\n\n![HTTP报文格式](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/KziYgTc.png)\n\n### 响应报文\n\n响应报文和请求报文基本差不多，唯一有区别就第一行状态行和请求报文的第一行请求行有区别。\n\n状态行也分为三个部分，分别是 HTTP 版本、状态码、状态码描述，每个部分用空格进行分隔。\n\n响应头和请求头一样，可以有多行\n\n![HTTP响应报文 (1)](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/TIHv2ArvWDqDHTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%20(1).jpg)\n\n同样，用 Wireshark 抓取一个响应报文，来和上图进行一一对应。\n\n\n![HTTP响应报文 (2)](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/QP0vZ8wcnVZnHTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%20(2).png)\n\n## 持续连接和非持续连接\n\n上面说了，HTTP 1.1 的连接由原来的非持续连接变为了持续连接（Connection: keep-alive）。那么这两个有什么区别呢？\n\n**非持续连接**指的是当向服务器多次请求资源时，每次都需要单独的进行 TCP 的连接和断开。\n\n**持续连接**指的是当向服务器请求资源时，可以共用一个 TCP 连接来进行资源的传输。\n\n> 尽管 HTTP 1.1 默认使用持续连接，但是也可以配置为非持续连接，设置方法：Connection 字段设置为 close\n\n为了好理解，为画了一张图，图中省略了 TCP 建立连接和断开连接的细致步骤。\n\n![HTTP持续连接和非持续连接](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/BmuEgd8fnYPUHTTP%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5%E5%92%8C%E9%9D%9E%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5.jpg)\n\n## 请求方法\n\n> 一般我们常用的只有 GET 和 POST 两个请求方法，但是如果遵循 REST 风格来进行 API 接口的设计，就可以用到下面的一些请求方法了。\n\n- OPTIONS：这个方法会请求服务器返回该资源所支持的所有HTTP**请求方法**。\n- GET：获取指定资源地址的数据，不推荐进行上传数据等操作。\n- HEAD：服务器在响应 HEAD 请求时不会回传 Body 资源的内容部分，这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。\n- POST：POST 请求会 向指定资源提交数据，请求服务器进行处理，请求数据会被包含在请求体中。\n- PUT：可以将指定资源的最新数据传送给服务器取代指定的资源的内容。\n- DELETE：删除指定资源的数据。\n- TRACE：TRACE 请求服务器回显其收到的请求信息，该方法主要用于 HTTP 请求的测试或诊断。\n- ......\n\n## 响应码\n\n### 1xx\n\nInformational（信息性状态码），表示接收的请求正在处理，具体可以查看 [RFC 文档](https://datatracker.ietf.org/doc/html/rfc2616#page-57)\n\n### 2xx\n\nSuccess（成功状态码），请求正常处理完毕，具体可以查看 [RFC 文档](https://datatracker.ietf.org/doc/html/rfc2616#page-58)\n\n### 3xx\n\nRedirection（重定向状态码），需要进行附加操作以完成请求，具体可以查看 [RFC 文档](https://datatracker.ietf.org/doc/html/rfc2616#page-61)\n\n### 4xx\n\nClient Error（客户端错误状态码），服务器无法处理请求，具体可以查看 [RFC 文档](https://datatracker.ietf.org/doc/html/rfc2616#page-65)\n\n### 5xx\n\nServer Error（服务器错误状态码），服务器处理请求出错，具体可以查看 [RFC 文档](https://datatracker.ietf.org/doc/html/rfc2616#page-70)","slug":"protocol/0143CD7666CD44389FE6F565E10EEE1A","published":1,"updated":"2021-10-08T08:55:18.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eh50042vpuc0uoe3j2s","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/jdFFPmbCNQCyhttp%E5%8D%8F%E8%AE%AE.png\" alt=\"http协议\"></p>\n<h2 id=\"版本介绍\"><a href=\"#版本介绍\" class=\"headerlink\" title=\"版本介绍\"></a>版本介绍</h2><p>HTTP 协议不用我多说了吧，大家都知道，现在我 web 开发一般都是使用 HTTP 协议来进行通信的。到目前为止，HTTP 进行了几次版本更新，HTTP 1.1 就是表示HTTP 的 1.1 版本。1.1 版本也是目前大部分网站所用的版本。</p>\n<h3 id=\"HTTP-0-9\"><a href=\"#HTTP-0-9\" class=\"headerlink\" title=\"HTTP 0.9\"></a>HTTP 0.9</h3><ul>\n<li>发布时间：1991 年</li>\n<li>简介：梦开始的地方，只接受GET一种请求方法，没有在通讯中指定版本号，且不支持请求头。由于该版本不支持POST方法，因此客户端无法向服务器传递太多信息。</li>\n</ul>\n<h3 id=\"HTTP-1-0\"><a href=\"#HTTP-1-0\" class=\"headerlink\" title=\"HTTP 1.0\"></a>HTTP 1.0</h3><ul>\n<li>发布时间：1996 年 5 月</li>\n<li>简介：这是第一个在通讯中指定版本号的HTTP协议版本。同时比 0.9 版本增加大量新特性。非持续连接，每次都要重新与服务器建立连接。</li>\n</ul>\n<h3 id=\"HTTP-1-1\"><a href=\"#HTTP-1-1\" class=\"headerlink\" title=\"HTTP 1.1\"></a>HTTP 1.1</h3><ul>\n<li>发布时间：1997 年1月</li>\n<li>简介：默认采用持续连接（Connection: keep-alive），能很好地配合代理服务器工作。还支持以<a href=\"https://zh.wikipedia.org/wiki/HTTP%E7%AE%A1%E7%BA%BF%E5%8C%96\">管道方式</a>在同时发送多个请求，以便降低线路负载，提高传输速度。同时这也是目前最流行的版本。</li>\n</ul>\n<p>HTTP&#x2F;1.1相较于HTTP&#x2F;1.0协议的区别主要体现在：</p>\n<ul>\n<li>缓存处理</li>\n<li>带宽优化及网络连接的使用</li>\n<li>错误通知的管理</li>\n<li>消息在网络中的发送</li>\n<li>互联网地址的维护</li>\n<li>安全性及完整性</li>\n</ul>\n<h3 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP 2.0\"></a>HTTP 2.0</h3><ul>\n<li>发布时间：2015 年 5 月</li>\n<li>简介：HTTP&#x2F;2 是 <a href=\"https://zh.wikipedia.org/wiki/HTTP\">HTTP</a> 协议自 1999 年 HTTP 1.1 的改进版 RFC 2616 发布后的首个更新，主要基于 <a href=\"https://zh.wikipedia.org/wiki/SPDY\">SPDY</a> 协议。它由<a href=\"https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%B7%A5%E7%A8%8B%E4%BB%BB%E5%8A%A1%E7%BB%84\">互联网工程任务组</a>（IETF）的Hypertext Transfer Protocol Bis（httpbis）工作小组进行开发。该组织于 2014 年 12 月将 HTTP&#x2F;2 标准提议递交至 <a href=\"https://zh.wikipedia.org/w/index.php?title=IESG&action=edit&redlink=1\">IESG</a> 进行讨论，于 2015 年 2 月 17 日被批准。</li>\n</ul>\n<h2 id=\"报文格式\"><a href=\"#报文格式\" class=\"headerlink\" title=\"报文格式\"></a>报文格式</h2><h3 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h3><p>请求报文分为 4 个部分，分别是请求行、请求头、换行行、请求数据，每个部分的末尾都会带上回车符（CR，ASCII：0d）和换行符（LF，ASCII：0a）</p>\n<p>其中请求行分为请求方法、请求的 URL 地址、HTTP 版本号，每个字段用<strong>空格</strong>（ASCII：20）来分隔</p>\n<p>请求头部分可以有多行，每行用回车符和换行符区分</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/dmhMuYZ.png\" alt=\"HTTP1.1_请求报文\"></p>\n<p>为了方便理解，我们可以用 Wireshark 来抓取一个 HTTP 请求来看看，并把它和上图进行关联</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/KziYgTc.png\" alt=\"HTTP报文格式\"></p>\n<h3 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h3><p>响应报文和请求报文基本差不多，唯一有区别就第一行状态行和请求报文的第一行请求行有区别。</p>\n<p>状态行也分为三个部分，分别是 HTTP 版本、状态码、状态码描述，每个部分用空格进行分隔。</p>\n<p>响应头和请求头一样，可以有多行</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/TIHv2ArvWDqDHTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%20(1).jpg\" alt=\"HTTP响应报文 (1)\"></p>\n<p>同样，用 Wireshark 抓取一个响应报文，来和上图进行一一对应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/QP0vZ8wcnVZnHTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%20(2).png\" alt=\"HTTP响应报文 (2)\"></p>\n<h2 id=\"持续连接和非持续连接\"><a href=\"#持续连接和非持续连接\" class=\"headerlink\" title=\"持续连接和非持续连接\"></a>持续连接和非持续连接</h2><p>上面说了，HTTP 1.1 的连接由原来的非持续连接变为了持续连接（Connection: keep-alive）。那么这两个有什么区别呢？</p>\n<p><strong>非持续连接</strong>指的是当向服务器多次请求资源时，每次都需要单独的进行 TCP 的连接和断开。</p>\n<p><strong>持续连接</strong>指的是当向服务器请求资源时，可以共用一个 TCP 连接来进行资源的传输。</p>\n<blockquote>\n<p>尽管 HTTP 1.1 默认使用持续连接，但是也可以配置为非持续连接，设置方法：Connection 字段设置为 close</p>\n</blockquote>\n<p>为了好理解，为画了一张图，图中省略了 TCP 建立连接和断开连接的细致步骤。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/BmuEgd8fnYPUHTTP%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5%E5%92%8C%E9%9D%9E%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5.jpg\" alt=\"HTTP持续连接和非持续连接\"></p>\n<h2 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h2><blockquote>\n<p>一般我们常用的只有 GET 和 POST 两个请求方法，但是如果遵循 REST 风格来进行 API 接口的设计，就可以用到下面的一些请求方法了。</p>\n</blockquote>\n<ul>\n<li>OPTIONS：这个方法会请求服务器返回该资源所支持的所有HTTP<strong>请求方法</strong>。</li>\n<li>GET：获取指定资源地址的数据，不推荐进行上传数据等操作。</li>\n<li>HEAD：服务器在响应 HEAD 请求时不会回传 Body 资源的内容部分，这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。</li>\n<li>POST：POST 请求会 向指定资源提交数据，请求服务器进行处理，请求数据会被包含在请求体中。</li>\n<li>PUT：可以将指定资源的最新数据传送给服务器取代指定的资源的内容。</li>\n<li>DELETE：删除指定资源的数据。</li>\n<li>TRACE：TRACE 请求服务器回显其收到的请求信息，该方法主要用于 HTTP 请求的测试或诊断。</li>\n<li>……</li>\n</ul>\n<h2 id=\"响应码\"><a href=\"#响应码\" class=\"headerlink\" title=\"响应码\"></a>响应码</h2><h3 id=\"1xx\"><a href=\"#1xx\" class=\"headerlink\" title=\"1xx\"></a>1xx</h3><p>Informational（信息性状态码），表示接收的请求正在处理，具体可以查看 <a href=\"https://datatracker.ietf.org/doc/html/rfc2616#page-57\">RFC 文档</a></p>\n<h3 id=\"2xx\"><a href=\"#2xx\" class=\"headerlink\" title=\"2xx\"></a>2xx</h3><p>Success（成功状态码），请求正常处理完毕，具体可以查看 <a href=\"https://datatracker.ietf.org/doc/html/rfc2616#page-58\">RFC 文档</a></p>\n<h3 id=\"3xx\"><a href=\"#3xx\" class=\"headerlink\" title=\"3xx\"></a>3xx</h3><p>Redirection（重定向状态码），需要进行附加操作以完成请求，具体可以查看 <a href=\"https://datatracker.ietf.org/doc/html/rfc2616#page-61\">RFC 文档</a></p>\n<h3 id=\"4xx\"><a href=\"#4xx\" class=\"headerlink\" title=\"4xx\"></a>4xx</h3><p>Client Error（客户端错误状态码），服务器无法处理请求，具体可以查看 <a href=\"https://datatracker.ietf.org/doc/html/rfc2616#page-65\">RFC 文档</a></p>\n<h3 id=\"5xx\"><a href=\"#5xx\" class=\"headerlink\" title=\"5xx\"></a>5xx</h3><p>Server Error（服务器错误状态码），服务器处理请求出错，具体可以查看 <a href=\"https://datatracker.ietf.org/doc/html/rfc2616#page-70\">RFC 文档</a></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/jdFFPmbCNQCyhttp%E5%8D%8F%E8%AE%AE.png\" alt=\"http协议\"></p>\n<h2 id=\"版本介绍\"><a href=\"#版本介绍\" class=\"headerlink\" title=\"版本介绍\"></a>版本介绍</h2><p>HTTP 协议不用我多说了吧，大家都知道，现在我 web 开发一般都是使用 HTTP 协议来进行通信的。到目前为止，HTTP 进行了几次版本更新，HTTP 1.1 就是表示HTTP 的 1.1 版本。1.1 版本也是目前大部分网站所用的版本。</p>\n<h3 id=\"HTTP-0-9\"><a href=\"#HTTP-0-9\" class=\"headerlink\" title=\"HTTP 0.9\"></a>HTTP 0.9</h3><ul>\n<li>发布时间：1991 年</li>\n<li>简介：梦开始的地方，只接受GET一种请求方法，没有在通讯中指定版本号，且不支持请求头。由于该版本不支持POST方法，因此客户端无法向服务器传递太多信息。</li>\n</ul>\n<h3 id=\"HTTP-1-0\"><a href=\"#HTTP-1-0\" class=\"headerlink\" title=\"HTTP 1.0\"></a>HTTP 1.0</h3><ul>\n<li>发布时间：1996 年 5 月</li>\n<li>简介：这是第一个在通讯中指定版本号的HTTP协议版本。同时比 0.9 版本增加大量新特性。非持续连接，每次都要重新与服务器建立连接。</li>\n</ul>\n<h3 id=\"HTTP-1-1\"><a href=\"#HTTP-1-1\" class=\"headerlink\" title=\"HTTP 1.1\"></a>HTTP 1.1</h3><ul>\n<li>发布时间：1997 年1月</li>\n<li>简介：默认采用持续连接（Connection: keep-alive），能很好地配合代理服务器工作。还支持以<a href=\"https://zh.wikipedia.org/wiki/HTTP%E7%AE%A1%E7%BA%BF%E5%8C%96\">管道方式</a>在同时发送多个请求，以便降低线路负载，提高传输速度。同时这也是目前最流行的版本。</li>\n</ul>\n<p>HTTP&#x2F;1.1相较于HTTP&#x2F;1.0协议的区别主要体现在：</p>\n<ul>\n<li>缓存处理</li>\n<li>带宽优化及网络连接的使用</li>\n<li>错误通知的管理</li>\n<li>消息在网络中的发送</li>\n<li>互联网地址的维护</li>\n<li>安全性及完整性</li>\n</ul>\n<h3 id=\"HTTP-2-0\"><a href=\"#HTTP-2-0\" class=\"headerlink\" title=\"HTTP 2.0\"></a>HTTP 2.0</h3><ul>\n<li>发布时间：2015 年 5 月</li>\n<li>简介：HTTP&#x2F;2 是 <a href=\"https://zh.wikipedia.org/wiki/HTTP\">HTTP</a> 协议自 1999 年 HTTP 1.1 的改进版 RFC 2616 发布后的首个更新，主要基于 <a href=\"https://zh.wikipedia.org/wiki/SPDY\">SPDY</a> 协议。它由<a href=\"https://zh.wikipedia.org/wiki/%E4%BA%92%E8%81%94%E7%BD%91%E5%B7%A5%E7%A8%8B%E4%BB%BB%E5%8A%A1%E7%BB%84\">互联网工程任务组</a>（IETF）的Hypertext Transfer Protocol Bis（httpbis）工作小组进行开发。该组织于 2014 年 12 月将 HTTP&#x2F;2 标准提议递交至 <a href=\"https://zh.wikipedia.org/w/index.php?title=IESG&action=edit&redlink=1\">IESG</a> 进行讨论，于 2015 年 2 月 17 日被批准。</li>\n</ul>\n<h2 id=\"报文格式\"><a href=\"#报文格式\" class=\"headerlink\" title=\"报文格式\"></a>报文格式</h2><h3 id=\"请求报文\"><a href=\"#请求报文\" class=\"headerlink\" title=\"请求报文\"></a>请求报文</h3><p>请求报文分为 4 个部分，分别是请求行、请求头、换行行、请求数据，每个部分的末尾都会带上回车符（CR，ASCII：0d）和换行符（LF，ASCII：0a）</p>\n<p>其中请求行分为请求方法、请求的 URL 地址、HTTP 版本号，每个字段用<strong>空格</strong>（ASCII：20）来分隔</p>\n<p>请求头部分可以有多行，每行用回车符和换行符区分</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/dmhMuYZ.png\" alt=\"HTTP1.1_请求报文\"></p>\n<p>为了方便理解，我们可以用 Wireshark 来抓取一个 HTTP 请求来看看，并把它和上图进行关联</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/KziYgTc.png\" alt=\"HTTP报文格式\"></p>\n<h3 id=\"响应报文\"><a href=\"#响应报文\" class=\"headerlink\" title=\"响应报文\"></a>响应报文</h3><p>响应报文和请求报文基本差不多，唯一有区别就第一行状态行和请求报文的第一行请求行有区别。</p>\n<p>状态行也分为三个部分，分别是 HTTP 版本、状态码、状态码描述，每个部分用空格进行分隔。</p>\n<p>响应头和请求头一样，可以有多行</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/TIHv2ArvWDqDHTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%20(1).jpg\" alt=\"HTTP响应报文 (1)\"></p>\n<p>同样，用 Wireshark 抓取一个响应报文，来和上图进行一一对应。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/QP0vZ8wcnVZnHTTP%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%20(2).png\" alt=\"HTTP响应报文 (2)\"></p>\n<h2 id=\"持续连接和非持续连接\"><a href=\"#持续连接和非持续连接\" class=\"headerlink\" title=\"持续连接和非持续连接\"></a>持续连接和非持续连接</h2><p>上面说了，HTTP 1.1 的连接由原来的非持续连接变为了持续连接（Connection: keep-alive）。那么这两个有什么区别呢？</p>\n<p><strong>非持续连接</strong>指的是当向服务器多次请求资源时，每次都需要单独的进行 TCP 的连接和断开。</p>\n<p><strong>持续连接</strong>指的是当向服务器请求资源时，可以共用一个 TCP 连接来进行资源的传输。</p>\n<blockquote>\n<p>尽管 HTTP 1.1 默认使用持续连接，但是也可以配置为非持续连接，设置方法：Connection 字段设置为 close</p>\n</blockquote>\n<p>为了好理解，为画了一张图，图中省略了 TCP 建立连接和断开连接的细致步骤。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/BmuEgd8fnYPUHTTP%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5%E5%92%8C%E9%9D%9E%E6%8C%81%E7%BB%AD%E8%BF%9E%E6%8E%A5.jpg\" alt=\"HTTP持续连接和非持续连接\"></p>\n<h2 id=\"请求方法\"><a href=\"#请求方法\" class=\"headerlink\" title=\"请求方法\"></a>请求方法</h2><blockquote>\n<p>一般我们常用的只有 GET 和 POST 两个请求方法，但是如果遵循 REST 风格来进行 API 接口的设计，就可以用到下面的一些请求方法了。</p>\n</blockquote>\n<ul>\n<li>OPTIONS：这个方法会请求服务器返回该资源所支持的所有HTTP<strong>请求方法</strong>。</li>\n<li>GET：获取指定资源地址的数据，不推荐进行上传数据等操作。</li>\n<li>HEAD：服务器在响应 HEAD 请求时不会回传 Body 资源的内容部分，这样，我们可以不传输全部内容的情况下，就可以获取服务器的响应头信息。</li>\n<li>POST：POST 请求会 向指定资源提交数据，请求服务器进行处理，请求数据会被包含在请求体中。</li>\n<li>PUT：可以将指定资源的最新数据传送给服务器取代指定的资源的内容。</li>\n<li>DELETE：删除指定资源的数据。</li>\n<li>TRACE：TRACE 请求服务器回显其收到的请求信息，该方法主要用于 HTTP 请求的测试或诊断。</li>\n<li>……</li>\n</ul>\n<h2 id=\"响应码\"><a href=\"#响应码\" class=\"headerlink\" title=\"响应码\"></a>响应码</h2><h3 id=\"1xx\"><a href=\"#1xx\" class=\"headerlink\" title=\"1xx\"></a>1xx</h3><p>Informational（信息性状态码），表示接收的请求正在处理，具体可以查看 <a href=\"https://datatracker.ietf.org/doc/html/rfc2616#page-57\">RFC 文档</a></p>\n<h3 id=\"2xx\"><a href=\"#2xx\" class=\"headerlink\" title=\"2xx\"></a>2xx</h3><p>Success（成功状态码），请求正常处理完毕，具体可以查看 <a href=\"https://datatracker.ietf.org/doc/html/rfc2616#page-58\">RFC 文档</a></p>\n<h3 id=\"3xx\"><a href=\"#3xx\" class=\"headerlink\" title=\"3xx\"></a>3xx</h3><p>Redirection（重定向状态码），需要进行附加操作以完成请求，具体可以查看 <a href=\"https://datatracker.ietf.org/doc/html/rfc2616#page-61\">RFC 文档</a></p>\n<h3 id=\"4xx\"><a href=\"#4xx\" class=\"headerlink\" title=\"4xx\"></a>4xx</h3><p>Client Error（客户端错误状态码），服务器无法处理请求，具体可以查看 <a href=\"https://datatracker.ietf.org/doc/html/rfc2616#page-65\">RFC 文档</a></p>\n<h3 id=\"5xx\"><a href=\"#5xx\" class=\"headerlink\" title=\"5xx\"></a>5xx</h3><p>Server Error（服务器错误状态码），服务器处理请求出错，具体可以查看 <a href=\"https://datatracker.ietf.org/doc/html/rfc2616#page-70\">RFC 文档</a></p>\n"},{"title":"telnet使用smtp协议发送qq邮件","top":false,"cover":false,"toc":true,"mathjax":true,"p":"protocol/4dd3868b-e23e-4446-b7ec-fd95e98612f4","date":"2021-03-23T02:36:44.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 操作步骤\n\n1. `telnet`命令调试QQ邮箱的`smtp`服务器\n\n   ```shell\n   telnet smtp.qq.com 25\n   \n   # 响应\n   Trying 183.3.225.42...\n   Connected to smtp.qq.com.\n   Escape character is '^]'.\n   220 newxmesmtplogicsvrsza5.qq.com XMail Esmtp QQ Mail Server.\n   ```\n\n2. 使用`EHLO`命令，指示` ESMTP `会话开始。服务器可以在它对 `EHLO` 的响应中表明自己支持 `ESMTP` 命令\n\n   ```shell\n   EHLO smtp.qq.com\n   \n   # 响应\n   250-newxmesmtplogicsvrsza5.qq.com\n   250-PIPELINING\n   250-SIZE 73400320\n   250-STARTTLS\n   250-AUTH LOGIN PLAIN\n   250-AUTH=LOGIN\n   250-MAILCOMPRESS\n   250 8BITMIME\n   ```\n\n3. 使用`AUTH`关键字进行身份验证，这里使用`AUTH LOGIN`，然后输入`Base64`编码的用户名和QQ邮箱**授权码**\n\n   ```shell\n   AUTH LOGIN\n   // base64编码的`Username:`\n   $ 334 VXNlcm5hbWU6  \n   \n   // base64编码的`Password:`\n   $ 334 UGFzc3dvcmQ6\n   \n   # 响应\n   235 Authentication successful\n   ```\n\n4. 使用`MAIL`命令，通过标识邮件的发件人来标识邮件传输开始；以 `MAIL FROM` 的形式使用。\n\n   ```shell\n   MAIL FROM:<211019847@qq.com>\n   \n   # 响应\n   250 OK.\n   ```\n\n5. 使用`RCPT`命令标识邮件的收件人；以 `RCPT TO` 的形式使用。\n\n   ```shell\n   RCPT TO:<573419235@qq.com>\n   \n   # 响应\n   250 OK\n   ```\n\n6. 使用`DATA`命令发送数据，以`.`符号代表结束\n\n   ```shell\n   DATA\n   \n   # 响应\n   354 End data with <CR><LF>.<CR><LF>.\n   ```\n\n7. 输入内容\n\n   ```shell\n   FROM: 211019847@qq.com\n   TO: 573419235@qq.com\n   SUBJECT: shell email\n   \n   this is body msg!\n   .\n   ```\n\n8. 使用`QUIT`命令退出\n\n   ```shell\n   QUIT\n   \n   # 响应\n   221 Bye.\n   Connection closed by foreign host.\n   ```\n\n   \n\n此时，`573419235@qq.com`邮箱就会收到一封标题为**shell email**,内容为\n\n*this is body msg!*的邮件了。","source":"_posts/protocol/4dd3868b-e23e-4446-b7ec-fd95e98612f4.md","raw":"---\ntitle: telnet使用smtp协议发送qq邮件\ntop: false\ncover: false\ntoc: true\nmathjax: true\np: protocol/4dd3868b-e23e-4446-b7ec-fd95e98612f4\ndate: 2021-03-23 10:36:44\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- smtp\n- telnet\ncategories:\n- Protocol\n---\n\n## 操作步骤\n\n1. `telnet`命令调试QQ邮箱的`smtp`服务器\n\n   ```shell\n   telnet smtp.qq.com 25\n   \n   # 响应\n   Trying 183.3.225.42...\n   Connected to smtp.qq.com.\n   Escape character is '^]'.\n   220 newxmesmtplogicsvrsza5.qq.com XMail Esmtp QQ Mail Server.\n   ```\n\n2. 使用`EHLO`命令，指示` ESMTP `会话开始。服务器可以在它对 `EHLO` 的响应中表明自己支持 `ESMTP` 命令\n\n   ```shell\n   EHLO smtp.qq.com\n   \n   # 响应\n   250-newxmesmtplogicsvrsza5.qq.com\n   250-PIPELINING\n   250-SIZE 73400320\n   250-STARTTLS\n   250-AUTH LOGIN PLAIN\n   250-AUTH=LOGIN\n   250-MAILCOMPRESS\n   250 8BITMIME\n   ```\n\n3. 使用`AUTH`关键字进行身份验证，这里使用`AUTH LOGIN`，然后输入`Base64`编码的用户名和QQ邮箱**授权码**\n\n   ```shell\n   AUTH LOGIN\n   // base64编码的`Username:`\n   $ 334 VXNlcm5hbWU6  \n   \n   // base64编码的`Password:`\n   $ 334 UGFzc3dvcmQ6\n   \n   # 响应\n   235 Authentication successful\n   ```\n\n4. 使用`MAIL`命令，通过标识邮件的发件人来标识邮件传输开始；以 `MAIL FROM` 的形式使用。\n\n   ```shell\n   MAIL FROM:<211019847@qq.com>\n   \n   # 响应\n   250 OK.\n   ```\n\n5. 使用`RCPT`命令标识邮件的收件人；以 `RCPT TO` 的形式使用。\n\n   ```shell\n   RCPT TO:<573419235@qq.com>\n   \n   # 响应\n   250 OK\n   ```\n\n6. 使用`DATA`命令发送数据，以`.`符号代表结束\n\n   ```shell\n   DATA\n   \n   # 响应\n   354 End data with <CR><LF>.<CR><LF>.\n   ```\n\n7. 输入内容\n\n   ```shell\n   FROM: 211019847@qq.com\n   TO: 573419235@qq.com\n   SUBJECT: shell email\n   \n   this is body msg!\n   .\n   ```\n\n8. 使用`QUIT`命令退出\n\n   ```shell\n   QUIT\n   \n   # 响应\n   221 Bye.\n   Connection closed by foreign host.\n   ```\n\n   \n\n此时，`573419235@qq.com`邮箱就会收到一封标题为**shell email**,内容为\n\n*this is body msg!*的邮件了。","slug":"protocol/4dd3868b-e23e-4446-b7ec-fd95e98612f4","published":1,"updated":"2021-10-08T07:57:24.185Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eh60046vpuc7vj87ztt","content":"<h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><ol>\n<li><p><code>telnet</code>命令调试QQ邮箱的<code>smtp</code>服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">telnet smtp.qq.com 25</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">响应</span></span><br><span class=\"line\">Trying 183.3.225.42...</span><br><span class=\"line\">Connected to smtp.qq.com.</span><br><span class=\"line\">Escape character is &#x27;^]&#x27;.</span><br><span class=\"line\">220 newxmesmtplogicsvrsza5.qq.com XMail Esmtp QQ Mail Server.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>EHLO</code>命令，指示<code>ESMTP</code>会话开始。服务器可以在它对 <code>EHLO</code> 的响应中表明自己支持 <code>ESMTP</code> 命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">EHLO smtp.qq.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">响应</span></span><br><span class=\"line\">250-newxmesmtplogicsvrsza5.qq.com</span><br><span class=\"line\">250-PIPELINING</span><br><span class=\"line\">250-SIZE 73400320</span><br><span class=\"line\">250-STARTTLS</span><br><span class=\"line\">250-AUTH LOGIN PLAIN</span><br><span class=\"line\">250-AUTH=LOGIN</span><br><span class=\"line\">250-MAILCOMPRESS</span><br><span class=\"line\">250 8BITMIME</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>AUTH</code>关键字进行身份验证，这里使用<code>AUTH LOGIN</code>，然后输入<code>Base64</code>编码的用户名和QQ邮箱<strong>授权码</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">AUTH LOGIN</span><br><span class=\"line\">// base64编码的`Username:`</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">334 VXNlcm5hbWU6</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">// base64编码的`Password:`</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">334 UGFzc3dvcmQ6</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">响应</span></span><br><span class=\"line\">235 Authentication successful</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>MAIL</code>命令，通过标识邮件的发件人来标识邮件传输开始；以 <code>MAIL FROM</code> 的形式使用。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">MAIL FROM:&lt;211019847@qq.com&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">响应</span></span><br><span class=\"line\">250 OK.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>RCPT</code>命令标识邮件的收件人；以 <code>RCPT TO</code> 的形式使用。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">RCPT TO:&lt;573419235@qq.com&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">响应</span></span><br><span class=\"line\">250 OK</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>DATA</code>命令发送数据，以<code>.</code>符号代表结束</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">DATA</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">响应</span></span><br><span class=\"line\">354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输入内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM: 211019847@qq.com</span><br><span class=\"line\">TO: 573419235@qq.com</span><br><span class=\"line\">SUBJECT: shell email</span><br><span class=\"line\"></span><br><span class=\"line\">this is body msg!</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>QUIT</code>命令退出</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">QUIT</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">响应</span></span><br><span class=\"line\">221 Bye.</span><br><span class=\"line\">Connection closed by foreign host.</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>此时，<code>573419235@qq.com</code>邮箱就会收到一封标题为<strong>shell email</strong>,内容为</p>\n<p>*this is body msg!*的邮件了。</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"操作步骤\"><a href=\"#操作步骤\" class=\"headerlink\" title=\"操作步骤\"></a>操作步骤</h2><ol>\n<li><p><code>telnet</code>命令调试QQ邮箱的<code>smtp</code>服务器</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">telnet smtp.qq.com 25</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">响应</span></span><br><span class=\"line\">Trying 183.3.225.42...</span><br><span class=\"line\">Connected to smtp.qq.com.</span><br><span class=\"line\">Escape character is &#x27;^]&#x27;.</span><br><span class=\"line\">220 newxmesmtplogicsvrsza5.qq.com XMail Esmtp QQ Mail Server.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>EHLO</code>命令，指示<code>ESMTP</code>会话开始。服务器可以在它对 <code>EHLO</code> 的响应中表明自己支持 <code>ESMTP</code> 命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">EHLO smtp.qq.com</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">响应</span></span><br><span class=\"line\">250-newxmesmtplogicsvrsza5.qq.com</span><br><span class=\"line\">250-PIPELINING</span><br><span class=\"line\">250-SIZE 73400320</span><br><span class=\"line\">250-STARTTLS</span><br><span class=\"line\">250-AUTH LOGIN PLAIN</span><br><span class=\"line\">250-AUTH=LOGIN</span><br><span class=\"line\">250-MAILCOMPRESS</span><br><span class=\"line\">250 8BITMIME</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>AUTH</code>关键字进行身份验证，这里使用<code>AUTH LOGIN</code>，然后输入<code>Base64</code>编码的用户名和QQ邮箱<strong>授权码</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">AUTH LOGIN</span><br><span class=\"line\">// base64编码的`Username:`</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">334 VXNlcm5hbWU6</span>  </span><br><span class=\"line\"></span><br><span class=\"line\">// base64编码的`Password:`</span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">334 UGFzc3dvcmQ6</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">响应</span></span><br><span class=\"line\">235 Authentication successful</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>MAIL</code>命令，通过标识邮件的发件人来标识邮件传输开始；以 <code>MAIL FROM</code> 的形式使用。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">MAIL FROM:&lt;211019847@qq.com&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">响应</span></span><br><span class=\"line\">250 OK.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>RCPT</code>命令标识邮件的收件人；以 <code>RCPT TO</code> 的形式使用。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">RCPT TO:&lt;573419235@qq.com&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">响应</span></span><br><span class=\"line\">250 OK</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>DATA</code>命令发送数据，以<code>.</code>符号代表结束</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">DATA</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">响应</span></span><br><span class=\"line\">354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>输入内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">FROM: 211019847@qq.com</span><br><span class=\"line\">TO: 573419235@qq.com</span><br><span class=\"line\">SUBJECT: shell email</span><br><span class=\"line\"></span><br><span class=\"line\">this is body msg!</span><br><span class=\"line\">.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用<code>QUIT</code>命令退出</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">QUIT</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">响应</span></span><br><span class=\"line\">221 Bye.</span><br><span class=\"line\">Connection closed by foreign host.</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>此时，<code>573419235@qq.com</code>邮箱就会收到一封标题为<strong>shell email</strong>,内容为</p>\n<p>*this is body msg!*的邮件了。</p>\n"},{"title":"快速搭建一个SpringGateway网关","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-05-07T05:05:58.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n## ☝️搭建脚手架\n\n我们可以去 [Spring initializer](https://start.spring.io) 网站或者用 IDEA 来快速创建出一个 Spring Cloud Gateway 项目。\n\n这里我们选择的注册中心是 Zookeeper，你也可以自己选择其他的注册中心来注册你的项目，比如阿里巴巴的 Nacos 等。\n\n![%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE%20f074aa733bd04ab885cacd0c71d9f94c/Untitled.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Untitled-20211008165402994.png)\n\n配置完相关信息后，点击下面的 `GENERATE` 按钮就可以导出项目的 `zip` 压缩包，解压后用 IDE 打开。\n\n打开后就是这个样子：\n\n![%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE%20f074aa733bd04ab885cacd0c71d9f94c/Untitled%201.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Untitled%201.png)\n\n## ✌️配置路由\n\n### Ymal 方式配置\n\n为了方便配置，我们把 `application.properties` 改成 `application.yml` 。\n\n然后配置一个转发到百度到路由。\n\n```yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n        - id: route-demo\n          uri: https://baidu.com\n          predicates:\n            - Path=/**\n```\n\n在配置中，我加来一个谓词 `Path` ，表示所有当请求都会匹配到这个路由下，然后转发到 `uri` 配置到网址里。所以当我们打开浏览器访问 `[http://localhost:8080/](http://localhost:8080/)` 是就会自动跳转到百度到首页。\n\n### Java 代码方式配置\n\n除了用配置文件配置路由外，我们还可以用代码的方式来配置路由。\n\n下面来展示一下代码方式配置的路由：\n\n```java\n@Bean\npublic RouteLocator routesConfig(RouteLocatorBuilder builder){\n\treturn builder.routes()\n\t\t\t.route(\"route-demo\",r -> r.path(\"/**\").uri(\"https://baidu.com\"))\n\t\t\t.build();\n}\n```\n\n这几行代码实现的是和上面配置一样的功能，当访问 `[http://localhost:8080/](http://localhost:8080/)` 时也会跳转到百度首页。\n\n## 👌注册到 Zookeeper\n\n接下来演示一下如何把网关注册到 Zookeeper。\n\n首先在我们本地搭建好 Zookeeper，我这边是直接用 Docker 启动了一个 Zookeeper。\n\n然后在配置文件添加如下配置：\n\n```yaml\nspring:\n  application:\n    name: weidain-gateway\n  cloud:\n    zookeeper:\n      connect-string: localhost:2181\n```\n\n上面到 `weidain-gateway` 是我们注册到 Zookeeper 上到服务名，地址 `[localhost:2181](http://localhost:2181)` 是我们本地 Zookeeper 注册中心到地址。\n\n启动项目后，我们用 Zookeeper 可视化工具就可以看到注册中心多了一个 `services`  节点，节点下面有我们注册上去的 `weidain-gateway` 服务\n\n![%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE%20f074aa733bd04ab885cacd0c71d9f94c/Untitled%202.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Untitled%202.png)\n\n下面就是我们网关服务注册到 Zookeeper 到数据：\n\n```json\n{\n    \"name\": \"weidain-gateway\",\n    \"id\": \"8c802a81-12e7-4f72-9034-aee00c0745bb\",\n    \"address\": \"169.254.238.114\",\n    \"port\": 8080,\n    \"sslPort\": null,\n    \"payload\": {\n        \"@class\": \"org.springframework.cloud.zookeeper.discovery.ZookeeperInstance\",\n        \"id\": \"application-1\",\n        \"name\": \"weidain-gateway\",\n        \"metadata\": {\n            \"instance_status\": \"UP\"\n        }\n    },\n    \"registrationTimeUTC\": 1620118042689,\n    \"serviceType\": \"DYNAMIC\",\n    \"uriSpec\": {\n        \"parts\": [\n            {\n                \"value\": \"scheme\",\n                \"variable\": true\n            },\n            {\n                \"value\": \"://\",\n                \"variable\": false\n            },\n            {\n                \"value\": \"address\",\n                \"variable\": true\n            },\n            {\n                \"value\": \":\",\n                \"variable\": false\n            },\n            {\n                \"value\": \"port\",\n                \"variable\": true\n            }\n        ]\n    }\n}\n```","source":"_posts/spring/9944CC0FEBD34A3EBD04EAA1564F4C3A.md","raw":"---\ntitle: 快速搭建一个SpringGateway网关\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-05-07 13:05:58\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- SpringCloud\n- Gateway\ncategories:\n- Spring\n---\n\n\n## ☝️搭建脚手架\n\n我们可以去 [Spring initializer](https://start.spring.io) 网站或者用 IDEA 来快速创建出一个 Spring Cloud Gateway 项目。\n\n这里我们选择的注册中心是 Zookeeper，你也可以自己选择其他的注册中心来注册你的项目，比如阿里巴巴的 Nacos 等。\n\n![%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE%20f074aa733bd04ab885cacd0c71d9f94c/Untitled.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Untitled-20211008165402994.png)\n\n配置完相关信息后，点击下面的 `GENERATE` 按钮就可以导出项目的 `zip` 压缩包，解压后用 IDE 打开。\n\n打开后就是这个样子：\n\n![%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE%20f074aa733bd04ab885cacd0c71d9f94c/Untitled%201.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Untitled%201.png)\n\n## ✌️配置路由\n\n### Ymal 方式配置\n\n为了方便配置，我们把 `application.properties` 改成 `application.yml` 。\n\n然后配置一个转发到百度到路由。\n\n```yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n        - id: route-demo\n          uri: https://baidu.com\n          predicates:\n            - Path=/**\n```\n\n在配置中，我加来一个谓词 `Path` ，表示所有当请求都会匹配到这个路由下，然后转发到 `uri` 配置到网址里。所以当我们打开浏览器访问 `[http://localhost:8080/](http://localhost:8080/)` 是就会自动跳转到百度到首页。\n\n### Java 代码方式配置\n\n除了用配置文件配置路由外，我们还可以用代码的方式来配置路由。\n\n下面来展示一下代码方式配置的路由：\n\n```java\n@Bean\npublic RouteLocator routesConfig(RouteLocatorBuilder builder){\n\treturn builder.routes()\n\t\t\t.route(\"route-demo\",r -> r.path(\"/**\").uri(\"https://baidu.com\"))\n\t\t\t.build();\n}\n```\n\n这几行代码实现的是和上面配置一样的功能，当访问 `[http://localhost:8080/](http://localhost:8080/)` 时也会跳转到百度首页。\n\n## 👌注册到 Zookeeper\n\n接下来演示一下如何把网关注册到 Zookeeper。\n\n首先在我们本地搭建好 Zookeeper，我这边是直接用 Docker 启动了一个 Zookeeper。\n\n然后在配置文件添加如下配置：\n\n```yaml\nspring:\n  application:\n    name: weidain-gateway\n  cloud:\n    zookeeper:\n      connect-string: localhost:2181\n```\n\n上面到 `weidain-gateway` 是我们注册到 Zookeeper 上到服务名，地址 `[localhost:2181](http://localhost:2181)` 是我们本地 Zookeeper 注册中心到地址。\n\n启动项目后，我们用 Zookeeper 可视化工具就可以看到注册中心多了一个 `services`  节点，节点下面有我们注册上去的 `weidain-gateway` 服务\n\n![%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE%20f074aa733bd04ab885cacd0c71d9f94c/Untitled%202.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Untitled%202.png)\n\n下面就是我们网关服务注册到 Zookeeper 到数据：\n\n```json\n{\n    \"name\": \"weidain-gateway\",\n    \"id\": \"8c802a81-12e7-4f72-9034-aee00c0745bb\",\n    \"address\": \"169.254.238.114\",\n    \"port\": 8080,\n    \"sslPort\": null,\n    \"payload\": {\n        \"@class\": \"org.springframework.cloud.zookeeper.discovery.ZookeeperInstance\",\n        \"id\": \"application-1\",\n        \"name\": \"weidain-gateway\",\n        \"metadata\": {\n            \"instance_status\": \"UP\"\n        }\n    },\n    \"registrationTimeUTC\": 1620118042689,\n    \"serviceType\": \"DYNAMIC\",\n    \"uriSpec\": {\n        \"parts\": [\n            {\n                \"value\": \"scheme\",\n                \"variable\": true\n            },\n            {\n                \"value\": \"://\",\n                \"variable\": false\n            },\n            {\n                \"value\": \"address\",\n                \"variable\": true\n            },\n            {\n                \"value\": \":\",\n                \"variable\": false\n            },\n            {\n                \"value\": \"port\",\n                \"variable\": true\n            }\n        ]\n    }\n}\n```","slug":"spring/9944CC0FEBD34A3EBD04EAA1564F4C3A","published":1,"updated":"2021-10-08T08:54:23.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eh8004avpuc8sa8f6md","content":"<h2 id=\"☝️搭建脚手架\"><a href=\"#☝️搭建脚手架\" class=\"headerlink\" title=\"☝️搭建脚手架\"></a>☝️搭建脚手架</h2><p>我们可以去 <a href=\"https://start.spring.io/\">Spring initializer</a> 网站或者用 IDEA 来快速创建出一个 Spring Cloud Gateway 项目。</p>\n<p>这里我们选择的注册中心是 Zookeeper，你也可以自己选择其他的注册中心来注册你的项目，比如阿里巴巴的 Nacos 等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Untitled-20211008165402994.png\" alt=\"%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE%20f074aa733bd04ab885cacd0c71d9f94c/Untitled.png\"></p>\n<p>配置完相关信息后，点击下面的 <code>GENERATE</code> 按钮就可以导出项目的 <code>zip</code> 压缩包，解压后用 IDE 打开。</p>\n<p>打开后就是这个样子：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Untitled%201.png\" alt=\"%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE%20f074aa733bd04ab885cacd0c71d9f94c/Untitled%201.png\"></p>\n<h2 id=\"✌️配置路由\"><a href=\"#✌️配置路由\" class=\"headerlink\" title=\"✌️配置路由\"></a>✌️配置路由</h2><h3 id=\"Ymal-方式配置\"><a href=\"#Ymal-方式配置\" class=\"headerlink\" title=\"Ymal 方式配置\"></a>Ymal 方式配置</h3><p>为了方便配置，我们把 <code>application.properties</code> 改成 <code>application.yml</code> 。</p>\n<p>然后配置一个转发到百度到路由。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">route-demo</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">https://baidu.com</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/**</span></span><br></pre></td></tr></table></figure>\n\n<p>在配置中，我加来一个谓词 <code>Path</code> ，表示所有当请求都会匹配到这个路由下，然后转发到 <code>uri</code> 配置到网址里。所以当我们打开浏览器访问 <code>[http://localhost:8080/](http://localhost:8080/)</code> 是就会自动跳转到百度到首页。</p>\n<h3 id=\"Java-代码方式配置\"><a href=\"#Java-代码方式配置\" class=\"headerlink\" title=\"Java 代码方式配置\"></a>Java 代码方式配置</h3><p>除了用配置文件配置路由外，我们还可以用代码的方式来配置路由。</p>\n<p>下面来展示一下代码方式配置的路由：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> RouteLocator <span class=\"title function_\">routesConfig</span><span class=\"params\">(RouteLocatorBuilder builder)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> builder.routes()</span><br><span class=\"line\">\t\t\t.route(<span class=\"string\">&quot;route-demo&quot;</span>,r -&gt; r.path(<span class=\"string\">&quot;/**&quot;</span>).uri(<span class=\"string\">&quot;https://baidu.com&quot;</span>))</span><br><span class=\"line\">\t\t\t.build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这几行代码实现的是和上面配置一样的功能，当访问 <code>[http://localhost:8080/](http://localhost:8080/)</code> 时也会跳转到百度首页。</p>\n<h2 id=\"👌注册到-Zookeeper\"><a href=\"#👌注册到-Zookeeper\" class=\"headerlink\" title=\"👌注册到 Zookeeper\"></a>👌注册到 Zookeeper</h2><p>接下来演示一下如何把网关注册到 Zookeeper。</p>\n<p>首先在我们本地搭建好 Zookeeper，我这边是直接用 Docker 启动了一个 Zookeeper。</p>\n<p>然后在配置文件添加如下配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">weidain-gateway</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">zookeeper:</span></span><br><span class=\"line\">      <span class=\"attr\">connect-string:</span> <span class=\"string\">localhost:2181</span></span><br></pre></td></tr></table></figure>\n\n<p>上面到 <code>weidain-gateway</code> 是我们注册到 Zookeeper 上到服务名，地址 <code>[localhost:2181](http://localhost:2181)</code> 是我们本地 Zookeeper 注册中心到地址。</p>\n<p>启动项目后，我们用 Zookeeper 可视化工具就可以看到注册中心多了一个 <code>services</code>  节点，节点下面有我们注册上去的 <code>weidain-gateway</code> 服务</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Untitled%202.png\" alt=\"%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE%20f074aa733bd04ab885cacd0c71d9f94c/Untitled%202.png\"></p>\n<p>下面就是我们网关服务注册到 Zookeeper 到数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;weidain-gateway&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;8c802a81-12e7-4f72-9034-aee00c0745bb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;address&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;169.254.238.114&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;port&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">8080</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;sslPort&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">null</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;payload&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;application-1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;weidain-gateway&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;metadata&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;instance_status&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UP&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;registrationTimeUTC&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1620118042689</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;serviceType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;DYNAMIC&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;uriSpec&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;parts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;scheme&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;://&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;address&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;port&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"☝️搭建脚手架\"><a href=\"#☝️搭建脚手架\" class=\"headerlink\" title=\"☝️搭建脚手架\"></a>☝️搭建脚手架</h2><p>我们可以去 <a href=\"https://start.spring.io/\">Spring initializer</a> 网站或者用 IDEA 来快速创建出一个 Spring Cloud Gateway 项目。</p>\n<p>这里我们选择的注册中心是 Zookeeper，你也可以自己选择其他的注册中心来注册你的项目，比如阿里巴巴的 Nacos 等。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Untitled-20211008165402994.png\" alt=\"%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE%20f074aa733bd04ab885cacd0c71d9f94c/Untitled.png\"></p>\n<p>配置完相关信息后，点击下面的 <code>GENERATE</code> 按钮就可以导出项目的 <code>zip</code> 压缩包，解压后用 IDE 打开。</p>\n<p>打开后就是这个样子：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Untitled%201.png\" alt=\"%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE%20f074aa733bd04ab885cacd0c71d9f94c/Untitled%201.png\"></p>\n<h2 id=\"✌️配置路由\"><a href=\"#✌️配置路由\" class=\"headerlink\" title=\"✌️配置路由\"></a>✌️配置路由</h2><h3 id=\"Ymal-方式配置\"><a href=\"#Ymal-方式配置\" class=\"headerlink\" title=\"Ymal 方式配置\"></a>Ymal 方式配置</h3><p>为了方便配置，我们把 <code>application.properties</code> 改成 <code>application.yml</code> 。</p>\n<p>然后配置一个转发到百度到路由。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">route-demo</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">https://baidu.com</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/**</span></span><br></pre></td></tr></table></figure>\n\n<p>在配置中，我加来一个谓词 <code>Path</code> ，表示所有当请求都会匹配到这个路由下，然后转发到 <code>uri</code> 配置到网址里。所以当我们打开浏览器访问 <code>[http://localhost:8080/](http://localhost:8080/)</code> 是就会自动跳转到百度到首页。</p>\n<h3 id=\"Java-代码方式配置\"><a href=\"#Java-代码方式配置\" class=\"headerlink\" title=\"Java 代码方式配置\"></a>Java 代码方式配置</h3><p>除了用配置文件配置路由外，我们还可以用代码的方式来配置路由。</p>\n<p>下面来展示一下代码方式配置的路由：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> RouteLocator <span class=\"title function_\">routesConfig</span><span class=\"params\">(RouteLocatorBuilder builder)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> builder.routes()</span><br><span class=\"line\">\t\t\t.route(<span class=\"string\">&quot;route-demo&quot;</span>,r -&gt; r.path(<span class=\"string\">&quot;/**&quot;</span>).uri(<span class=\"string\">&quot;https://baidu.com&quot;</span>))</span><br><span class=\"line\">\t\t\t.build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这几行代码实现的是和上面配置一样的功能，当访问 <code>[http://localhost:8080/](http://localhost:8080/)</code> 时也会跳转到百度首页。</p>\n<h2 id=\"👌注册到-Zookeeper\"><a href=\"#👌注册到-Zookeeper\" class=\"headerlink\" title=\"👌注册到 Zookeeper\"></a>👌注册到 Zookeeper</h2><p>接下来演示一下如何把网关注册到 Zookeeper。</p>\n<p>首先在我们本地搭建好 Zookeeper，我这边是直接用 Docker 启动了一个 Zookeeper。</p>\n<p>然后在配置文件添加如下配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">weidain-gateway</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">zookeeper:</span></span><br><span class=\"line\">      <span class=\"attr\">connect-string:</span> <span class=\"string\">localhost:2181</span></span><br></pre></td></tr></table></figure>\n\n<p>上面到 <code>weidain-gateway</code> 是我们注册到 Zookeeper 上到服务名，地址 <code>[localhost:2181](http://localhost:2181)</code> 是我们本地 Zookeeper 注册中心到地址。</p>\n<p>启动项目后，我们用 Zookeeper 可视化工具就可以看到注册中心多了一个 <code>services</code>  节点，节点下面有我们注册上去的 <code>weidain-gateway</code> 服务</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Untitled%202.png\" alt=\"%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%BD%91%E5%85%B3%E9%A1%B9%E7%9B%AE%20f074aa733bd04ab885cacd0c71d9f94c/Untitled%202.png\"></p>\n<p>下面就是我们网关服务注册到 Zookeeper 到数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;weidain-gateway&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;8c802a81-12e7-4f72-9034-aee00c0745bb&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;address&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;169.254.238.114&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;port&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">8080</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;sslPort&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">null</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;payload&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;application-1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;weidain-gateway&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;metadata&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;instance_status&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UP&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;registrationTimeUTC&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1620118042689</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;serviceType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;DYNAMIC&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;uriSpec&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;parts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;scheme&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;://&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;address&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;port&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>"},{"title":"Dubbo项目双注册中心","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-05-07T05:29:00.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n## 🤔为什么要双注册中心？\n\n当前 Dubbo 版本注册粒度是以接口粒度来注册的，而 SpringBoot 是以服务为粒度来注册的。而且 Dubbo 有自己的注册中心（当然 Spring Cloud Alibaba Dubbo 的注册中心可以挂靠在 Spring 上）。所以当一个项目既要调用 Dubbo 服务，又要提供自己的 Web 接口给网关调用时，就要为该项目设置两个注册中心，一个 Dubbo，一个 SpringBoot的（当然可以注册到同一个注册中心上）。\n\n## 🛠️创建一个 Dubbo 服务提供者\n\n我们先创建一个 Dubbo 服务提供者，然后把它注册到 Zoookeeper 上。我这边用到是 `2.7.10` 版本到 Dubbo，不同 Dubbo 版本到配置有所差异化。\n\npom 依赖：\n\n```xml\n<dependency>\n      <groupId>org.apache.dubbo</groupId>\n      <artifactId>dubbo-spring-boot-starter</artifactId>\n      <version>2.7.10</version>\n  </dependency>\n  <dependency>\n      <groupId>org.apache.dubbo</groupId>\n      <artifactId>dubbo-dependencies-zookeeper</artifactId>\n      <version>2.7.10</version>\n      <type>pom</type>\n  </dependency>\n```\n\n然后我们定义一个接口，返回一些文字，记得加上 `@DubboService` 注解，让 Dubbo 应用发现这个接口并注册到注册 Zookeeper 上。同时在启动类上面还要加上 `@EnableDubbo` 注解。当然你也可以用配置到方式来配置这些。\n\n```java\n@DubboService\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String hello() {\n        return \"hello! This is Dubbo's demo\";\n    }\n}\n```\n\n定义好接口后，我们在配置文件加上如下配置：\n\n```yaml\nserver:\n  port: 8787\ndubbo:\n  application:\n    id: dubbo-privode\n  protocol:\n    name: dubbo\n    port: 28808\n  registry:\n    address: zookeeper://localhost:2181\n```\n\n在上面配置中，我们定义来项目启动到端口为 `8787` ，然后配置了 Dubbo 的协议名称和端口，同时也配置了注册地址为本地的 Zookeeper 的地址。\n\n项目启动后，我们就可以看到 Zookeeper 的节点上多了一个 `dubbo` 节点，节点下面有我们注册上去的 Dubbo 接口\n\n![Dubbo%20%E9%A1%B9%E7%9B%AE%E5%8F%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%20a2369534007b4606b16f9819157f3c3a/Untitled.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/UwzF7YUntitled.png)\n\n## 🛠️创建一个服务消费者\n\n消费者基本和服务提供者配置相同，只是要额外加上 web 依赖，应为我们要对外提供 HTTP 接口。\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n然后 yml 配置稍作修改，改下端口什么的\n\n```yaml\nserver:\n  port: 8788\ndubbo:\n  application:\n    id: dubbo-consumer\n  protocol:\n    name: dubbo\n    port: 28808\n  registry:\n    address: zookeeper://localhost:2181\n```\n\n配置好后，我们创建一个对外的 HTTP 接口，并且调用上面服务提供者提供的服务，我们可以直接用注解 `@DubboReference` 来表示我们要调用 Dubbo 服务接口。\n\n```java\n@RestController\npublic class DubboConsumer {\n    @DubboReference\n    DemoService demoService;\n\n    @GetMapping(\"/consumer\")\n    public String dubboDemo(){\n        return demoService.hello();\n    }\n}\n```\n\n启动项目后，注册中心就会出现一个 `consumers` 节点，这个节点下面有我们注册上去是服务消费者。\n\n![Dubbo%20%E9%A1%B9%E7%9B%AE%E5%8F%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%20a2369534007b4606b16f9819157f3c3a/Untitled%201.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XuXwekUntitled%201.png)\n\n这时候我们直接访问 `[http://localhost:8788/consumer](http://localhost:8788/consumer)` 地址，页面就会响应 `hello! This is Dubbo's demo` 字符串，这是我们在服务提供者中定义返回的数据，说明我们成功调用了服务提供者提供的 Dubbo 服务。\n\n## 🔑为消费者再配置一个注册中心\n\n这时候如果我们网关要调用这个消费者提供的 HTTP 接口怎么办？\n\n你可能会想，可以直接把`http://localhost:8788/consumer` 这个地址配置到网关路由到 `uri` 字段上。但是我们一般项目不单单是只有一个，而且有时候地址也会变化，这时候网关就要用到服务名来调用对应到服务，网关一般以 `lb://service-name` 来调用对应到服务。\n\n如果网关想要以服务名来调用这个消费者，那么我们就要以服务名到方式来把这个消费者注册到 Zookeeper 上。\n\n由于 Spring Cloud 官方已经将 Zookeeper 整合进了 Spring Cloud 体系，所以我们可以直接用 Spring Cloud 下的包。需要添加如下依赖：\n\n```xml\n<dependencies>\n\t<dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-zookeeper-discovery</artifactId>\n  </dependency>\n</dependencies>\n\n<dependencyManagement>\n  <dependencies>\n      <dependency>\n          <groupId>org.springframework.cloud</groupId>\n          <artifactId>spring-cloud-dependencies</artifactId>\n          <version>Hoxton.SR11</version>\n          <type>pom</type>\n          <scope>import</scope>\n      </dependency>\n  </dependencies>\n</dependencyManagement>\n```\n\n同时配置文件需要再添加如下配置，下面的配置中我们指定了要注册到 Zookeeper 到服务名 `dubbo-consumer` ,配置了注册中心到地址。\n\n```yaml\nspring:\n  application:\n    name: dubbo-consumer\n  cloud:\n    zookeeper:\n      connect-string: localhost:2181\n```\n\n同时启动类也要加上 `@EnableDiscoveryClient` 注解，不然是不会注册到 Zookeeper 上到。\n\n启动项目后，我们就可以在 Zookeeper 的 `services` 节点下面看到我们的服务了\n\n![Dubbo%20%E9%A1%B9%E7%9B%AE%E5%8F%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%20a2369534007b4606b16f9819157f3c3a/Untitled%202.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/ClmFp6Untitled%202.png)\n\n同样的我们可以看到注册上去到数据：\n\n```json\n{\n    \"name\": \"dubbo-consumer\",\n    \"id\": \"beff8ece-85a3-47ed-bd0b-34fc193eb3f1\",\n    \"address\": \"169.254.238.114\",\n    \"port\": 8788,\n    \"sslPort\": null,\n    \"payload\": {\n        \"@class\": \"org.springframework.cloud.zookeeper.discovery.ZookeeperInstance\",\n        \"id\": \"application-1\",\n        \"name\": \"dubbo-consumer\",\n        \"metadata\": {\n            \"instance_status\": \"UP\"\n        }\n    },\n    \"registrationTimeUTC\": 1620123669588,\n    \"serviceType\": \"DYNAMIC\",\n    \"uriSpec\": {\n        \"parts\": [\n            {\n                \"value\": \"scheme\",\n                \"variable\": true\n            },\n            {\n                \"value\": \"://\",\n                \"variable\": false\n            },\n            {\n                \"value\": \"address\",\n                \"variable\": true\n            },\n            {\n                \"value\": \":\",\n                \"variable\": false\n            },\n            {\n                \"value\": \"port\",\n                \"variable\": true\n            }\n        ]\n    }\n}\n```\n\n## 🍰网关调用\n\n服务注册上去后，我们就可以修改下我们上节网关项目到路由配置，把它改成用服务名调用。我们可以修改 yml 配置，把 `uri` 改成服务调用的格式\n\n```yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n        - id: route-demo\n          uri: lb://dubbo-consumer\n          predicates:\n            - Path=/**\n```\n\n或者如果我们是用 Java 代码方式配置的路由可以改成如下代码：\n\n```java\n@Bean\npublic RouteLocator routesConfig(RouteLocatorBuilder builder){\n\treturn builder.routes()\n\t\t\t.route(\"route-demo\",r -> r.path(\"/**\").uri(\"lb://dubbo-consumer\"))\n\t\t\t.build();\n}\n```\n\n修改完成后，启动网关，然后访问网关地址 [`http://localhost:8080/consumer`](http://localhost:8080/consumer) 就可以看到页面显示 `hello! This is Dubbo's demo`\n","source":"_posts/spring/C2E28AA517AA45768B679D93F248B5DE.md","raw":"---\ntitle: Dubbo项目双注册中心\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-05-07 13:29:00\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Dubbbo\n- Spring\ncategories:\n- Dubbo\n---\n\n\n## 🤔为什么要双注册中心？\n\n当前 Dubbo 版本注册粒度是以接口粒度来注册的，而 SpringBoot 是以服务为粒度来注册的。而且 Dubbo 有自己的注册中心（当然 Spring Cloud Alibaba Dubbo 的注册中心可以挂靠在 Spring 上）。所以当一个项目既要调用 Dubbo 服务，又要提供自己的 Web 接口给网关调用时，就要为该项目设置两个注册中心，一个 Dubbo，一个 SpringBoot的（当然可以注册到同一个注册中心上）。\n\n## 🛠️创建一个 Dubbo 服务提供者\n\n我们先创建一个 Dubbo 服务提供者，然后把它注册到 Zoookeeper 上。我这边用到是 `2.7.10` 版本到 Dubbo，不同 Dubbo 版本到配置有所差异化。\n\npom 依赖：\n\n```xml\n<dependency>\n      <groupId>org.apache.dubbo</groupId>\n      <artifactId>dubbo-spring-boot-starter</artifactId>\n      <version>2.7.10</version>\n  </dependency>\n  <dependency>\n      <groupId>org.apache.dubbo</groupId>\n      <artifactId>dubbo-dependencies-zookeeper</artifactId>\n      <version>2.7.10</version>\n      <type>pom</type>\n  </dependency>\n```\n\n然后我们定义一个接口，返回一些文字，记得加上 `@DubboService` 注解，让 Dubbo 应用发现这个接口并注册到注册 Zookeeper 上。同时在启动类上面还要加上 `@EnableDubbo` 注解。当然你也可以用配置到方式来配置这些。\n\n```java\n@DubboService\npublic class DemoServiceImpl implements DemoService {\n    @Override\n    public String hello() {\n        return \"hello! This is Dubbo's demo\";\n    }\n}\n```\n\n定义好接口后，我们在配置文件加上如下配置：\n\n```yaml\nserver:\n  port: 8787\ndubbo:\n  application:\n    id: dubbo-privode\n  protocol:\n    name: dubbo\n    port: 28808\n  registry:\n    address: zookeeper://localhost:2181\n```\n\n在上面配置中，我们定义来项目启动到端口为 `8787` ，然后配置了 Dubbo 的协议名称和端口，同时也配置了注册地址为本地的 Zookeeper 的地址。\n\n项目启动后，我们就可以看到 Zookeeper 的节点上多了一个 `dubbo` 节点，节点下面有我们注册上去的 Dubbo 接口\n\n![Dubbo%20%E9%A1%B9%E7%9B%AE%E5%8F%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%20a2369534007b4606b16f9819157f3c3a/Untitled.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/UwzF7YUntitled.png)\n\n## 🛠️创建一个服务消费者\n\n消费者基本和服务提供者配置相同，只是要额外加上 web 依赖，应为我们要对外提供 HTTP 接口。\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-web</artifactId>\n</dependency>\n```\n\n然后 yml 配置稍作修改，改下端口什么的\n\n```yaml\nserver:\n  port: 8788\ndubbo:\n  application:\n    id: dubbo-consumer\n  protocol:\n    name: dubbo\n    port: 28808\n  registry:\n    address: zookeeper://localhost:2181\n```\n\n配置好后，我们创建一个对外的 HTTP 接口，并且调用上面服务提供者提供的服务，我们可以直接用注解 `@DubboReference` 来表示我们要调用 Dubbo 服务接口。\n\n```java\n@RestController\npublic class DubboConsumer {\n    @DubboReference\n    DemoService demoService;\n\n    @GetMapping(\"/consumer\")\n    public String dubboDemo(){\n        return demoService.hello();\n    }\n}\n```\n\n启动项目后，注册中心就会出现一个 `consumers` 节点，这个节点下面有我们注册上去是服务消费者。\n\n![Dubbo%20%E9%A1%B9%E7%9B%AE%E5%8F%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%20a2369534007b4606b16f9819157f3c3a/Untitled%201.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XuXwekUntitled%201.png)\n\n这时候我们直接访问 `[http://localhost:8788/consumer](http://localhost:8788/consumer)` 地址，页面就会响应 `hello! This is Dubbo's demo` 字符串，这是我们在服务提供者中定义返回的数据，说明我们成功调用了服务提供者提供的 Dubbo 服务。\n\n## 🔑为消费者再配置一个注册中心\n\n这时候如果我们网关要调用这个消费者提供的 HTTP 接口怎么办？\n\n你可能会想，可以直接把`http://localhost:8788/consumer` 这个地址配置到网关路由到 `uri` 字段上。但是我们一般项目不单单是只有一个，而且有时候地址也会变化，这时候网关就要用到服务名来调用对应到服务，网关一般以 `lb://service-name` 来调用对应到服务。\n\n如果网关想要以服务名来调用这个消费者，那么我们就要以服务名到方式来把这个消费者注册到 Zookeeper 上。\n\n由于 Spring Cloud 官方已经将 Zookeeper 整合进了 Spring Cloud 体系，所以我们可以直接用 Spring Cloud 下的包。需要添加如下依赖：\n\n```xml\n<dependencies>\n\t<dependency>\n      <groupId>org.springframework.cloud</groupId>\n      <artifactId>spring-cloud-starter-zookeeper-discovery</artifactId>\n  </dependency>\n</dependencies>\n\n<dependencyManagement>\n  <dependencies>\n      <dependency>\n          <groupId>org.springframework.cloud</groupId>\n          <artifactId>spring-cloud-dependencies</artifactId>\n          <version>Hoxton.SR11</version>\n          <type>pom</type>\n          <scope>import</scope>\n      </dependency>\n  </dependencies>\n</dependencyManagement>\n```\n\n同时配置文件需要再添加如下配置，下面的配置中我们指定了要注册到 Zookeeper 到服务名 `dubbo-consumer` ,配置了注册中心到地址。\n\n```yaml\nspring:\n  application:\n    name: dubbo-consumer\n  cloud:\n    zookeeper:\n      connect-string: localhost:2181\n```\n\n同时启动类也要加上 `@EnableDiscoveryClient` 注解，不然是不会注册到 Zookeeper 上到。\n\n启动项目后，我们就可以在 Zookeeper 的 `services` 节点下面看到我们的服务了\n\n![Dubbo%20%E9%A1%B9%E7%9B%AE%E5%8F%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%20a2369534007b4606b16f9819157f3c3a/Untitled%202.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/ClmFp6Untitled%202.png)\n\n同样的我们可以看到注册上去到数据：\n\n```json\n{\n    \"name\": \"dubbo-consumer\",\n    \"id\": \"beff8ece-85a3-47ed-bd0b-34fc193eb3f1\",\n    \"address\": \"169.254.238.114\",\n    \"port\": 8788,\n    \"sslPort\": null,\n    \"payload\": {\n        \"@class\": \"org.springframework.cloud.zookeeper.discovery.ZookeeperInstance\",\n        \"id\": \"application-1\",\n        \"name\": \"dubbo-consumer\",\n        \"metadata\": {\n            \"instance_status\": \"UP\"\n        }\n    },\n    \"registrationTimeUTC\": 1620123669588,\n    \"serviceType\": \"DYNAMIC\",\n    \"uriSpec\": {\n        \"parts\": [\n            {\n                \"value\": \"scheme\",\n                \"variable\": true\n            },\n            {\n                \"value\": \"://\",\n                \"variable\": false\n            },\n            {\n                \"value\": \"address\",\n                \"variable\": true\n            },\n            {\n                \"value\": \":\",\n                \"variable\": false\n            },\n            {\n                \"value\": \"port\",\n                \"variable\": true\n            }\n        ]\n    }\n}\n```\n\n## 🍰网关调用\n\n服务注册上去后，我们就可以修改下我们上节网关项目到路由配置，把它改成用服务名调用。我们可以修改 yml 配置，把 `uri` 改成服务调用的格式\n\n```yaml\nspring:\n  cloud:\n    gateway:\n      routes:\n        - id: route-demo\n          uri: lb://dubbo-consumer\n          predicates:\n            - Path=/**\n```\n\n或者如果我们是用 Java 代码方式配置的路由可以改成如下代码：\n\n```java\n@Bean\npublic RouteLocator routesConfig(RouteLocatorBuilder builder){\n\treturn builder.routes()\n\t\t\t.route(\"route-demo\",r -> r.path(\"/**\").uri(\"lb://dubbo-consumer\"))\n\t\t\t.build();\n}\n```\n\n修改完成后，启动网关，然后访问网关地址 [`http://localhost:8080/consumer`](http://localhost:8080/consumer) 就可以看到页面显示 `hello! This is Dubbo's demo`\n","slug":"spring/C2E28AA517AA45768B679D93F248B5DE","published":1,"updated":"2021-10-08T08:53:42.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eh9004dvpuc629p7zfs","content":"<h2 id=\"🤔为什么要双注册中心？\"><a href=\"#🤔为什么要双注册中心？\" class=\"headerlink\" title=\"🤔为什么要双注册中心？\"></a>🤔为什么要双注册中心？</h2><p>当前 Dubbo 版本注册粒度是以接口粒度来注册的，而 SpringBoot 是以服务为粒度来注册的。而且 Dubbo 有自己的注册中心（当然 Spring Cloud Alibaba Dubbo 的注册中心可以挂靠在 Spring 上）。所以当一个项目既要调用 Dubbo 服务，又要提供自己的 Web 接口给网关调用时，就要为该项目设置两个注册中心，一个 Dubbo，一个 SpringBoot的（当然可以注册到同一个注册中心上）。</p>\n<h2 id=\"🛠️创建一个-Dubbo-服务提供者\"><a href=\"#🛠️创建一个-Dubbo-服务提供者\" class=\"headerlink\" title=\"🛠️创建一个 Dubbo 服务提供者\"></a>🛠️创建一个 Dubbo 服务提供者</h2><p>我们先创建一个 Dubbo 服务提供者，然后把它注册到 Zoookeeper 上。我这边用到是 <code>2.7.10</code> 版本到 Dubbo，不同 Dubbo 版本到配置有所差异化。</p>\n<p>pom 依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后我们定义一个接口，返回一些文字，记得加上 <code>@DubboService</code> 注解，让 Dubbo 应用发现这个接口并注册到注册 Zookeeper 上。同时在启动类上面还要加上 <code>@EnableDubbo</code> 注解。当然你也可以用配置到方式来配置这些。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DubboService</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello! This is Dubbo&#x27;s demo&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义好接口后，我们在配置文件加上如下配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8787</span></span><br><span class=\"line\"><span class=\"attr\">dubbo:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"string\">dubbo-privode</span></span><br><span class=\"line\">  <span class=\"attr\">protocol:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">28808</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"string\">zookeeper://localhost:2181</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面配置中，我们定义来项目启动到端口为 <code>8787</code> ，然后配置了 Dubbo 的协议名称和端口，同时也配置了注册地址为本地的 Zookeeper 的地址。</p>\n<p>项目启动后，我们就可以看到 Zookeeper 的节点上多了一个 <code>dubbo</code> 节点，节点下面有我们注册上去的 Dubbo 接口</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/UwzF7YUntitled.png\" alt=\"Dubbo%20%E9%A1%B9%E7%9B%AE%E5%8F%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%20a2369534007b4606b16f9819157f3c3a/Untitled.png\"></p>\n<h2 id=\"🛠️创建一个服务消费者\"><a href=\"#🛠️创建一个服务消费者\" class=\"headerlink\" title=\"🛠️创建一个服务消费者\"></a>🛠️创建一个服务消费者</h2><p>消费者基本和服务提供者配置相同，只是要额外加上 web 依赖，应为我们要对外提供 HTTP 接口。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后 yml 配置稍作修改，改下端口什么的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8788</span></span><br><span class=\"line\"><span class=\"attr\">dubbo:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"string\">dubbo-consumer</span></span><br><span class=\"line\">  <span class=\"attr\">protocol:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">28808</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"string\">zookeeper://localhost:2181</span></span><br></pre></td></tr></table></figure>\n\n<p>配置好后，我们创建一个对外的 HTTP 接口，并且调用上面服务提供者提供的服务，我们可以直接用注解 <code>@DubboReference</code> 来表示我们要调用 Dubbo 服务接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DubboConsumer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@DubboReference</span></span><br><span class=\"line\">    DemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/consumer&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">dubboDemo</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demoService.hello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动项目后，注册中心就会出现一个 <code>consumers</code> 节点，这个节点下面有我们注册上去是服务消费者。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XuXwekUntitled%201.png\" alt=\"Dubbo%20%E9%A1%B9%E7%9B%AE%E5%8F%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%20a2369534007b4606b16f9819157f3c3a/Untitled%201.png\"></p>\n<p>这时候我们直接访问 <code>[http://localhost:8788/consumer](http://localhost:8788/consumer)</code> 地址，页面就会响应 <code>hello! This is Dubbo&#39;s demo</code> 字符串，这是我们在服务提供者中定义返回的数据，说明我们成功调用了服务提供者提供的 Dubbo 服务。</p>\n<h2 id=\"🔑为消费者再配置一个注册中心\"><a href=\"#🔑为消费者再配置一个注册中心\" class=\"headerlink\" title=\"🔑为消费者再配置一个注册中心\"></a>🔑为消费者再配置一个注册中心</h2><p>这时候如果我们网关要调用这个消费者提供的 HTTP 接口怎么办？</p>\n<p>你可能会想，可以直接把<code>http://localhost:8788/consumer</code> 这个地址配置到网关路由到 <code>uri</code> 字段上。但是我们一般项目不单单是只有一个，而且有时候地址也会变化，这时候网关就要用到服务名来调用对应到服务，网关一般以 <code>lb://service-name</code> 来调用对应到服务。</p>\n<p>如果网关想要以服务名来调用这个消费者，那么我们就要以服务名到方式来把这个消费者注册到 Zookeeper 上。</p>\n<p>由于 Spring Cloud 官方已经将 Zookeeper 整合进了 Spring Cloud 体系，所以我们可以直接用 Spring Cloud 下的包。需要添加如下依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>Hoxton.SR11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>同时配置文件需要再添加如下配置，下面的配置中我们指定了要注册到 Zookeeper 到服务名 <code>dubbo-consumer</code> ,配置了注册中心到地址。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo-consumer</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">zookeeper:</span></span><br><span class=\"line\">      <span class=\"attr\">connect-string:</span> <span class=\"string\">localhost:2181</span></span><br></pre></td></tr></table></figure>\n\n<p>同时启动类也要加上 <code>@EnableDiscoveryClient</code> 注解，不然是不会注册到 Zookeeper 上到。</p>\n<p>启动项目后，我们就可以在 Zookeeper 的 <code>services</code> 节点下面看到我们的服务了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/ClmFp6Untitled%202.png\" alt=\"Dubbo%20%E9%A1%B9%E7%9B%AE%E5%8F%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%20a2369534007b4606b16f9819157f3c3a/Untitled%202.png\"></p>\n<p>同样的我们可以看到注册上去到数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;dubbo-consumer&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;beff8ece-85a3-47ed-bd0b-34fc193eb3f1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;address&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;169.254.238.114&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;port&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">8788</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;sslPort&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">null</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;payload&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;application-1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;dubbo-consumer&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;metadata&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;instance_status&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UP&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;registrationTimeUTC&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1620123669588</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;serviceType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;DYNAMIC&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;uriSpec&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;parts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;scheme&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;://&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;address&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;port&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"🍰网关调用\"><a href=\"#🍰网关调用\" class=\"headerlink\" title=\"🍰网关调用\"></a>🍰网关调用</h2><p>服务注册上去后，我们就可以修改下我们上节网关项目到路由配置，把它改成用服务名调用。我们可以修改 yml 配置，把 <code>uri</code> 改成服务调用的格式</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">route-demo</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">lb://dubbo-consumer</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/**</span></span><br></pre></td></tr></table></figure>\n\n<p>或者如果我们是用 Java 代码方式配置的路由可以改成如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> RouteLocator <span class=\"title function_\">routesConfig</span><span class=\"params\">(RouteLocatorBuilder builder)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> builder.routes()</span><br><span class=\"line\">\t\t\t.route(<span class=\"string\">&quot;route-demo&quot;</span>,r -&gt; r.path(<span class=\"string\">&quot;/**&quot;</span>).uri(<span class=\"string\">&quot;lb://dubbo-consumer&quot;</span>))</span><br><span class=\"line\">\t\t\t.build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改完成后，启动网关，然后访问网关地址 <a href=\"http://localhost:8080/consumer\"><code>http://localhost:8080/consumer</code></a> 就可以看到页面显示 <code>hello! This is Dubbo&#39;s demo</code></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"🤔为什么要双注册中心？\"><a href=\"#🤔为什么要双注册中心？\" class=\"headerlink\" title=\"🤔为什么要双注册中心？\"></a>🤔为什么要双注册中心？</h2><p>当前 Dubbo 版本注册粒度是以接口粒度来注册的，而 SpringBoot 是以服务为粒度来注册的。而且 Dubbo 有自己的注册中心（当然 Spring Cloud Alibaba Dubbo 的注册中心可以挂靠在 Spring 上）。所以当一个项目既要调用 Dubbo 服务，又要提供自己的 Web 接口给网关调用时，就要为该项目设置两个注册中心，一个 Dubbo，一个 SpringBoot的（当然可以注册到同一个注册中心上）。</p>\n<h2 id=\"🛠️创建一个-Dubbo-服务提供者\"><a href=\"#🛠️创建一个-Dubbo-服务提供者\" class=\"headerlink\" title=\"🛠️创建一个 Dubbo 服务提供者\"></a>🛠️创建一个 Dubbo 服务提供者</h2><p>我们先创建一个 Dubbo 服务提供者，然后把它注册到 Zoookeeper 上。我这边用到是 <code>2.7.10</code> 版本到 Dubbo，不同 Dubbo 版本到配置有所差异化。</p>\n<p>pom 依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.dubbo<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>dubbo-dependencies-zookeeper<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.10<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后我们定义一个接口，返回一些文字，记得加上 <code>@DubboService</code> 注解，让 Dubbo 应用发现这个接口并注册到注册 Zookeeper 上。同时在启动类上面还要加上 <code>@EnableDubbo</code> 注解。当然你也可以用配置到方式来配置这些。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DubboService</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">DemoService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello! This is Dubbo&#x27;s demo&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义好接口后，我们在配置文件加上如下配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8787</span></span><br><span class=\"line\"><span class=\"attr\">dubbo:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"string\">dubbo-privode</span></span><br><span class=\"line\">  <span class=\"attr\">protocol:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">28808</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"string\">zookeeper://localhost:2181</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面配置中，我们定义来项目启动到端口为 <code>8787</code> ，然后配置了 Dubbo 的协议名称和端口，同时也配置了注册地址为本地的 Zookeeper 的地址。</p>\n<p>项目启动后，我们就可以看到 Zookeeper 的节点上多了一个 <code>dubbo</code> 节点，节点下面有我们注册上去的 Dubbo 接口</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/UwzF7YUntitled.png\" alt=\"Dubbo%20%E9%A1%B9%E7%9B%AE%E5%8F%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%20a2369534007b4606b16f9819157f3c3a/Untitled.png\"></p>\n<h2 id=\"🛠️创建一个服务消费者\"><a href=\"#🛠️创建一个服务消费者\" class=\"headerlink\" title=\"🛠️创建一个服务消费者\"></a>🛠️创建一个服务消费者</h2><p>消费者基本和服务提供者配置相同，只是要额外加上 web 依赖，应为我们要对外提供 HTTP 接口。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后 yml 配置稍作修改，改下端口什么的</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8788</span></span><br><span class=\"line\"><span class=\"attr\">dubbo:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">id:</span> <span class=\"string\">dubbo-consumer</span></span><br><span class=\"line\">  <span class=\"attr\">protocol:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">28808</span></span><br><span class=\"line\">  <span class=\"attr\">registry:</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"string\">zookeeper://localhost:2181</span></span><br></pre></td></tr></table></figure>\n\n<p>配置好后，我们创建一个对外的 HTTP 接口，并且调用上面服务提供者提供的服务，我们可以直接用注解 <code>@DubboReference</code> 来表示我们要调用 Dubbo 服务接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DubboConsumer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@DubboReference</span></span><br><span class=\"line\">    DemoService demoService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/consumer&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">dubboDemo</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> demoService.hello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>启动项目后，注册中心就会出现一个 <code>consumers</code> 节点，这个节点下面有我们注册上去是服务消费者。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XuXwekUntitled%201.png\" alt=\"Dubbo%20%E9%A1%B9%E7%9B%AE%E5%8F%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%20a2369534007b4606b16f9819157f3c3a/Untitled%201.png\"></p>\n<p>这时候我们直接访问 <code>[http://localhost:8788/consumer](http://localhost:8788/consumer)</code> 地址，页面就会响应 <code>hello! This is Dubbo&#39;s demo</code> 字符串，这是我们在服务提供者中定义返回的数据，说明我们成功调用了服务提供者提供的 Dubbo 服务。</p>\n<h2 id=\"🔑为消费者再配置一个注册中心\"><a href=\"#🔑为消费者再配置一个注册中心\" class=\"headerlink\" title=\"🔑为消费者再配置一个注册中心\"></a>🔑为消费者再配置一个注册中心</h2><p>这时候如果我们网关要调用这个消费者提供的 HTTP 接口怎么办？</p>\n<p>你可能会想，可以直接把<code>http://localhost:8788/consumer</code> 这个地址配置到网关路由到 <code>uri</code> 字段上。但是我们一般项目不单单是只有一个，而且有时候地址也会变化，这时候网关就要用到服务名来调用对应到服务，网关一般以 <code>lb://service-name</code> 来调用对应到服务。</p>\n<p>如果网关想要以服务名来调用这个消费者，那么我们就要以服务名到方式来把这个消费者注册到 Zookeeper 上。</p>\n<p>由于 Spring Cloud 官方已经将 Zookeeper 整合进了 Spring Cloud 体系，所以我们可以直接用 Spring Cloud 下的包。需要添加如下依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-zookeeper-discovery<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>Hoxton.SR11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>同时配置文件需要再添加如下配置，下面的配置中我们指定了要注册到 Zookeeper 到服务名 <code>dubbo-consumer</code> ,配置了注册中心到地址。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">application:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">dubbo-consumer</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">zookeeper:</span></span><br><span class=\"line\">      <span class=\"attr\">connect-string:</span> <span class=\"string\">localhost:2181</span></span><br></pre></td></tr></table></figure>\n\n<p>同时启动类也要加上 <code>@EnableDiscoveryClient</code> 注解，不然是不会注册到 Zookeeper 上到。</p>\n<p>启动项目后，我们就可以在 Zookeeper 的 <code>services</code> 节点下面看到我们的服务了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/ClmFp6Untitled%202.png\" alt=\"Dubbo%20%E9%A1%B9%E7%9B%AE%E5%8F%8C%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%20a2369534007b4606b16f9819157f3c3a/Untitled%202.png\"></p>\n<p>同样的我们可以看到注册上去到数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;dubbo-consumer&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;beff8ece-85a3-47ed-bd0b-34fc193eb3f1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;address&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;169.254.238.114&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;port&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">8788</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;sslPort&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">null</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;payload&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;@class&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;org.springframework.cloud.zookeeper.discovery.ZookeeperInstance&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;application-1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;dubbo-consumer&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;metadata&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;instance_status&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UP&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;registrationTimeUTC&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1620123669588</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;serviceType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;DYNAMIC&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;uriSpec&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;parts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;scheme&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;://&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;address&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;:&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">false</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;value&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;port&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">                <span class=\"attr\">&quot;variable&quot;</span><span class=\"punctuation\">:</span> <span class=\"keyword\">true</span></span><br><span class=\"line\">            <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">        <span class=\"punctuation\">]</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"🍰网关调用\"><a href=\"#🍰网关调用\" class=\"headerlink\" title=\"🍰网关调用\"></a>🍰网关调用</h2><p>服务注册上去后，我们就可以修改下我们上节网关项目到路由配置，把它改成用服务名调用。我们可以修改 yml 配置，把 <code>uri</code> 改成服务调用的格式</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">route-demo</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">lb://dubbo-consumer</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/**</span></span><br></pre></td></tr></table></figure>\n\n<p>或者如果我们是用 Java 代码方式配置的路由可以改成如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> RouteLocator <span class=\"title function_\">routesConfig</span><span class=\"params\">(RouteLocatorBuilder builder)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> builder.routes()</span><br><span class=\"line\">\t\t\t.route(<span class=\"string\">&quot;route-demo&quot;</span>,r -&gt; r.path(<span class=\"string\">&quot;/**&quot;</span>).uri(<span class=\"string\">&quot;lb://dubbo-consumer&quot;</span>))</span><br><span class=\"line\">\t\t\t.build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>修改完成后，启动网关，然后访问网关地址 <a href=\"http://localhost:8080/consumer\"><code>http://localhost:8080/consumer</code></a> 就可以看到页面显示 <code>hello! This is Dubbo&#39;s demo</code></p>\n"},{"title":"使用Nacos实现网关动态路由","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-05-08T14:47:54.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 背景\n\n网关作为一个主要的外部流量入口，其重启的次数当然是越少越好，所以不能有时候为了修改一个路由就重启整个网关服务，这样的话网关就不是一个高可用的网关。当然，有时候要新增或修改代码层面的自定义的过滤器时还是要重启网关的，所以我们能做的就是尽可能减少不必要的重启。这里就可以引入阿里巴巴开源的 [Nacos](https://nacos.io/zh-cn/) 了。\n\n## 什么是 Nacos？\n\nNaocs 是阿里巴巴开源的一款微服务组件，它提供注册中心和配置中心来供我们使用。并且 Nacos 同时支持 AP 模式和 CP 模式来供我们选择使用。具体可以查看[官方文档](https://nacos.io/zh-cn/docs/what-is-nacos.html)来进一步了解。\n\n## 安装 Nacos\n\n本地的话我这边建议直接用 Docker 来安装Nacos，省心省力。按照官方提供的方法，我们可以直接下载官方提供的 `docker-compose` 文件来启动 Nacos。\n\n```shell\n# 克隆项目\ngit clone https://github.com/nacos-group/nacos-docker.git\n## 进入项目目录 然后启动\ncd nacos-docker\ndocker-compose -f example/standalone-mysql-5.7.yaml up\n```\n\n我这边是启动了一个使用 MySQL 5.7 的单机 Nacos，如果你想使用其他的数据库或者启动集群的话可以参照一下[官方文档](https://nacos.io/zh-cn/docs/quick-start-docker.html)\n\n待启动完成后，就可以用浏览器打开 `http://localhost:8848/nacos` 进入 Nacos的管理台了。默认的登陆账号密码都是 `nacos`\n\n![image-20210508221303506](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/NMae2bimage-20210508221303506.png)\n\n## 网关使用 Nacos\n\n> 我这边 Spring Cloud 使用的版本号是 `2020.0.2` \n\n### Nacos 创建配置\n\n在开始配置网关项目前，我们先在 Nacos 里创建一个配置，等下网关启动的时候就用这个配置。\n\n```yaml\nserver:\n  port: 8989\n\nspring:\n  cloud:\n    gateway:\n      routes:\n        - id: route-demo\n          uri: https://baidu.com\n          predicates:\n            - Path=/**\n```\n\n在上面配置中，我们定义了项目启动端口为 `8989`，然后创建了一个路由，这个路由接收所有请求，然后转发到百度。\n\n![image-20210508222500763](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/9NZiPVimage-20210508222500763.png)\n\n### 依赖配置\n\n因为 Nacos 是阿里巴巴开源的，所以这里要用到 `spring-cloud-alibaba-dependencies` 这个依赖，在 Spring Cloud Gateway 项目里面添加如下依赖：\n\n```XML\n<dependencies>\n  <dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n  </dependency>\n</dependencies>\n\n<dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>com.alibaba.cloud</groupId>\n      <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n      <version>2021.1</version>\n      <type>pom</type>\n      <scope>import</scope>\n    </dependency>\n  </dependencies>\n</dependencyManagement>\n\n```\n\n### 配置文件\n\n导入依赖后，我们在 `resources` 文件夹下创建一个 `bootstrap.yml` 文件，然后在里面填入 Nacos 配置中心的相关的信息\n\n```yaml\nspring:\n  cloud:\n    nacos:\n      server-addr: localhost:8848\n      config:\n        prefix: gateway\n        file-extension: yml\n```\n\n上面配置中，`server-addr` 配置了本地 Nacos 的地址，`prefix` 配置了刚才配置文件的前缀，`file-extension` 配置了刚才 Nacos 上创建的文件扩展名。\n\n在 Nacos Spring Cloud 中，`dataId` 的完整格式如下：\n\n```\n${prefix}-${spring.profiles.active}.${file-extension}\n```\n\n- `prefix` 默认为 `spring.application.name` 的值，也可以通过配置项 `spring.cloud.nacos.config.prefix`来配置。\n- `spring.profiles.active` 即为当前环境对应的 profile，详情可以参考 [Spring Boot文档](https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html#boot-features-profiles)。 **注意：当 `spring.profiles.active` 为空时，对应的连接符 `-` 也将不存在，dataId 的拼接格式变成 `${prefix}.${file-extension}`**\n- `file-exetension` 为配置内容的数据格式，可以通过配置项 `spring.cloud.nacos.config.file-extension` 来配置。目前只支持 `properties` 和 `yaml` 类型。\n\n### 启动网关项目\n\n配置完成后，如果你和我用的 Spring Cloud 版本一样是 `2020.0.2` 版的话，你启动项目后会发现，欸？？怎么启动端口还是默认的 `8080` 呢？\n\n发生这种情况是因为项目没有读取 `bootstrap.yml` 文件，这是因为 Spring Cloud 从数字版开始，把 `bootstrap` 默认为关闭状态，此时如果要使用 `bootstrap` 的话就要导入以下依赖就可以了\n\n```xml\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-bootstrap</artifactId>\n</dependency>\n```\n\n导入依赖后再次启动网关，发现启动端口变成了我们刚在 Nacos 上配置的 `8989` 了，这时你打开浏览器访问 `http://localhost:8989` 就会跳转到百度首页了。\n\n## 动态路由\n\n其实到这一步，动态路由的工作基本上已经完成了，现在你可以在 Nacos 找到刚才配置 `gateway.yml`，然后点击右边的编辑按钮，修改一下配置的路由。比如我这边把它改成知乎的地址。\n\n![image-20210508224219917](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/34d52Bimage-20210508224219917.png)\n\n配置完后点击下面的发布，此时你不用任何操作，不用重启网关项目，直接再次访问 `http://localhost:8989` ，就会发现现在会跳转到知乎了。这样就实现了动态路由了。\n\n","source":"_posts/spring/EEF92888390B4E7C866FE7ADA6A0B42B.md","raw":"---\ntitle: 使用Nacos实现网关动态路由\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-05-08 22:47:54\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Nacos\n- Spring Cloud Gateway\ncategories:\n- Spring\n---\n\n## 背景\n\n网关作为一个主要的外部流量入口，其重启的次数当然是越少越好，所以不能有时候为了修改一个路由就重启整个网关服务，这样的话网关就不是一个高可用的网关。当然，有时候要新增或修改代码层面的自定义的过滤器时还是要重启网关的，所以我们能做的就是尽可能减少不必要的重启。这里就可以引入阿里巴巴开源的 [Nacos](https://nacos.io/zh-cn/) 了。\n\n## 什么是 Nacos？\n\nNaocs 是阿里巴巴开源的一款微服务组件，它提供注册中心和配置中心来供我们使用。并且 Nacos 同时支持 AP 模式和 CP 模式来供我们选择使用。具体可以查看[官方文档](https://nacos.io/zh-cn/docs/what-is-nacos.html)来进一步了解。\n\n## 安装 Nacos\n\n本地的话我这边建议直接用 Docker 来安装Nacos，省心省力。按照官方提供的方法，我们可以直接下载官方提供的 `docker-compose` 文件来启动 Nacos。\n\n```shell\n# 克隆项目\ngit clone https://github.com/nacos-group/nacos-docker.git\n## 进入项目目录 然后启动\ncd nacos-docker\ndocker-compose -f example/standalone-mysql-5.7.yaml up\n```\n\n我这边是启动了一个使用 MySQL 5.7 的单机 Nacos，如果你想使用其他的数据库或者启动集群的话可以参照一下[官方文档](https://nacos.io/zh-cn/docs/quick-start-docker.html)\n\n待启动完成后，就可以用浏览器打开 `http://localhost:8848/nacos` 进入 Nacos的管理台了。默认的登陆账号密码都是 `nacos`\n\n![image-20210508221303506](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/NMae2bimage-20210508221303506.png)\n\n## 网关使用 Nacos\n\n> 我这边 Spring Cloud 使用的版本号是 `2020.0.2` \n\n### Nacos 创建配置\n\n在开始配置网关项目前，我们先在 Nacos 里创建一个配置，等下网关启动的时候就用这个配置。\n\n```yaml\nserver:\n  port: 8989\n\nspring:\n  cloud:\n    gateway:\n      routes:\n        - id: route-demo\n          uri: https://baidu.com\n          predicates:\n            - Path=/**\n```\n\n在上面配置中，我们定义了项目启动端口为 `8989`，然后创建了一个路由，这个路由接收所有请求，然后转发到百度。\n\n![image-20210508222500763](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/9NZiPVimage-20210508222500763.png)\n\n### 依赖配置\n\n因为 Nacos 是阿里巴巴开源的，所以这里要用到 `spring-cloud-alibaba-dependencies` 这个依赖，在 Spring Cloud Gateway 项目里面添加如下依赖：\n\n```XML\n<dependencies>\n  <dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n  </dependency>\n</dependencies>\n\n<dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>com.alibaba.cloud</groupId>\n      <artifactId>spring-cloud-alibaba-dependencies</artifactId>\n      <version>2021.1</version>\n      <type>pom</type>\n      <scope>import</scope>\n    </dependency>\n  </dependencies>\n</dependencyManagement>\n\n```\n\n### 配置文件\n\n导入依赖后，我们在 `resources` 文件夹下创建一个 `bootstrap.yml` 文件，然后在里面填入 Nacos 配置中心的相关的信息\n\n```yaml\nspring:\n  cloud:\n    nacos:\n      server-addr: localhost:8848\n      config:\n        prefix: gateway\n        file-extension: yml\n```\n\n上面配置中，`server-addr` 配置了本地 Nacos 的地址，`prefix` 配置了刚才配置文件的前缀，`file-extension` 配置了刚才 Nacos 上创建的文件扩展名。\n\n在 Nacos Spring Cloud 中，`dataId` 的完整格式如下：\n\n```\n${prefix}-${spring.profiles.active}.${file-extension}\n```\n\n- `prefix` 默认为 `spring.application.name` 的值，也可以通过配置项 `spring.cloud.nacos.config.prefix`来配置。\n- `spring.profiles.active` 即为当前环境对应的 profile，详情可以参考 [Spring Boot文档](https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html#boot-features-profiles)。 **注意：当 `spring.profiles.active` 为空时，对应的连接符 `-` 也将不存在，dataId 的拼接格式变成 `${prefix}.${file-extension}`**\n- `file-exetension` 为配置内容的数据格式，可以通过配置项 `spring.cloud.nacos.config.file-extension` 来配置。目前只支持 `properties` 和 `yaml` 类型。\n\n### 启动网关项目\n\n配置完成后，如果你和我用的 Spring Cloud 版本一样是 `2020.0.2` 版的话，你启动项目后会发现，欸？？怎么启动端口还是默认的 `8080` 呢？\n\n发生这种情况是因为项目没有读取 `bootstrap.yml` 文件，这是因为 Spring Cloud 从数字版开始，把 `bootstrap` 默认为关闭状态，此时如果要使用 `bootstrap` 的话就要导入以下依赖就可以了\n\n```xml\n<dependency>\n  <groupId>org.springframework.cloud</groupId>\n  <artifactId>spring-cloud-starter-bootstrap</artifactId>\n</dependency>\n```\n\n导入依赖后再次启动网关，发现启动端口变成了我们刚在 Nacos 上配置的 `8989` 了，这时你打开浏览器访问 `http://localhost:8989` 就会跳转到百度首页了。\n\n## 动态路由\n\n其实到这一步，动态路由的工作基本上已经完成了，现在你可以在 Nacos 找到刚才配置 `gateway.yml`，然后点击右边的编辑按钮，修改一下配置的路由。比如我这边把它改成知乎的地址。\n\n![image-20210508224219917](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/34d52Bimage-20210508224219917.png)\n\n配置完后点击下面的发布，此时你不用任何操作，不用重启网关项目，直接再次访问 `http://localhost:8989` ，就会发现现在会跳转到知乎了。这样就实现了动态路由了。\n\n","slug":"spring/EEF92888390B4E7C866FE7ADA6A0B42B","published":1,"updated":"2021-10-08T08:53:11.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eh9004evpuc0wz47lkv","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>网关作为一个主要的外部流量入口，其重启的次数当然是越少越好，所以不能有时候为了修改一个路由就重启整个网关服务，这样的话网关就不是一个高可用的网关。当然，有时候要新增或修改代码层面的自定义的过滤器时还是要重启网关的，所以我们能做的就是尽可能减少不必要的重启。这里就可以引入阿里巴巴开源的 <a href=\"https://nacos.io/zh-cn/\">Nacos</a> 了。</p>\n<h2 id=\"什么是-Nacos？\"><a href=\"#什么是-Nacos？\" class=\"headerlink\" title=\"什么是 Nacos？\"></a>什么是 Nacos？</h2><p>Naocs 是阿里巴巴开源的一款微服务组件，它提供注册中心和配置中心来供我们使用。并且 Nacos 同时支持 AP 模式和 CP 模式来供我们选择使用。具体可以查看<a href=\"https://nacos.io/zh-cn/docs/what-is-nacos.html\">官方文档</a>来进一步了解。</p>\n<h2 id=\"安装-Nacos\"><a href=\"#安装-Nacos\" class=\"headerlink\" title=\"安装 Nacos\"></a>安装 Nacos</h2><p>本地的话我这边建议直接用 Docker 来安装Nacos，省心省力。按照官方提供的方法，我们可以直接下载官方提供的 <code>docker-compose</code> 文件来启动 Nacos。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">克隆项目</span></span><br><span class=\"line\">git clone https://github.com/nacos-group/nacos-docker.git</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 进入项目目录 然后启动</span></span></span><br><span class=\"line\">cd nacos-docker</span><br><span class=\"line\">docker-compose -f example/standalone-mysql-5.7.yaml up</span><br></pre></td></tr></table></figure>\n\n<p>我这边是启动了一个使用 MySQL 5.7 的单机 Nacos，如果你想使用其他的数据库或者启动集群的话可以参照一下<a href=\"https://nacos.io/zh-cn/docs/quick-start-docker.html\">官方文档</a></p>\n<p>待启动完成后，就可以用浏览器打开 <code>http://localhost:8848/nacos</code> 进入 Nacos的管理台了。默认的登陆账号密码都是 <code>nacos</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/NMae2bimage-20210508221303506.png\" alt=\"image-20210508221303506\"></p>\n<h2 id=\"网关使用-Nacos\"><a href=\"#网关使用-Nacos\" class=\"headerlink\" title=\"网关使用 Nacos\"></a>网关使用 Nacos</h2><blockquote>\n<p>我这边 Spring Cloud 使用的版本号是 <code>2020.0.2</code> </p>\n</blockquote>\n<h3 id=\"Nacos-创建配置\"><a href=\"#Nacos-创建配置\" class=\"headerlink\" title=\"Nacos 创建配置\"></a>Nacos 创建配置</h3><p>在开始配置网关项目前，我们先在 Nacos 里创建一个配置，等下网关启动的时候就用这个配置。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8989</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">route-demo</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">https://baidu.com</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/**</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面配置中，我们定义了项目启动端口为 <code>8989</code>，然后创建了一个路由，这个路由接收所有请求，然后转发到百度。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/9NZiPVimage-20210508222500763.png\" alt=\"image-20210508222500763\"></p>\n<h3 id=\"依赖配置\"><a href=\"#依赖配置\" class=\"headerlink\" title=\"依赖配置\"></a>依赖配置</h3><p>因为 Nacos 是阿里巴巴开源的，所以这里要用到 <code>spring-cloud-alibaba-dependencies</code> 这个依赖，在 Spring Cloud Gateway 项目里面添加如下依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2021.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>导入依赖后，我们在 <code>resources</code> 文件夹下创建一个 <code>bootstrap.yml</code> 文件，然后在里面填入 Nacos 配置中心的相关的信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"attr\">prefix:</span> <span class=\"string\">gateway</span></span><br><span class=\"line\">        <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br></pre></td></tr></table></figure>\n\n<p>上面配置中，<code>server-addr</code> 配置了本地 Nacos 的地址，<code>prefix</code> 配置了刚才配置文件的前缀，<code>file-extension</code> 配置了刚才 Nacos 上创建的文件扩展名。</p>\n<p>在 Nacos Spring Cloud 中，<code>dataId</code> 的完整格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&#123;prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;file-extension&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>prefix</code> 默认为 <code>spring.application.name</code> 的值，也可以通过配置项 <code>spring.cloud.nacos.config.prefix</code>来配置。</li>\n<li><code>spring.profiles.active</code> 即为当前环境对应的 profile，详情可以参考 <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html#boot-features-profiles\">Spring Boot文档</a>。 <strong>注意：当 <code>spring.profiles.active</code> 为空时，对应的连接符 <code>-</code> 也将不存在，dataId 的拼接格式变成 <code>$&#123;prefix&#125;.$&#123;file-extension&#125;</code></strong></li>\n<li><code>file-exetension</code> 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置。目前只支持 <code>properties</code> 和 <code>yaml</code> 类型。</li>\n</ul>\n<h3 id=\"启动网关项目\"><a href=\"#启动网关项目\" class=\"headerlink\" title=\"启动网关项目\"></a>启动网关项目</h3><p>配置完成后，如果你和我用的 Spring Cloud 版本一样是 <code>2020.0.2</code> 版的话，你启动项目后会发现，欸？？怎么启动端口还是默认的 <code>8080</code> 呢？</p>\n<p>发生这种情况是因为项目没有读取 <code>bootstrap.yml</code> 文件，这是因为 Spring Cloud 从数字版开始，把 <code>bootstrap</code> 默认为关闭状态，此时如果要使用 <code>bootstrap</code> 的话就要导入以下依赖就可以了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>导入依赖后再次启动网关，发现启动端口变成了我们刚在 Nacos 上配置的 <code>8989</code> 了，这时你打开浏览器访问 <code>http://localhost:8989</code> 就会跳转到百度首页了。</p>\n<h2 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h2><p>其实到这一步，动态路由的工作基本上已经完成了，现在你可以在 Nacos 找到刚才配置 <code>gateway.yml</code>，然后点击右边的编辑按钮，修改一下配置的路由。比如我这边把它改成知乎的地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/34d52Bimage-20210508224219917.png\" alt=\"image-20210508224219917\"></p>\n<p>配置完后点击下面的发布，此时你不用任何操作，不用重启网关项目，直接再次访问 <code>http://localhost:8989</code> ，就会发现现在会跳转到知乎了。这样就实现了动态路由了。</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>网关作为一个主要的外部流量入口，其重启的次数当然是越少越好，所以不能有时候为了修改一个路由就重启整个网关服务，这样的话网关就不是一个高可用的网关。当然，有时候要新增或修改代码层面的自定义的过滤器时还是要重启网关的，所以我们能做的就是尽可能减少不必要的重启。这里就可以引入阿里巴巴开源的 <a href=\"https://nacos.io/zh-cn/\">Nacos</a> 了。</p>\n<h2 id=\"什么是-Nacos？\"><a href=\"#什么是-Nacos？\" class=\"headerlink\" title=\"什么是 Nacos？\"></a>什么是 Nacos？</h2><p>Naocs 是阿里巴巴开源的一款微服务组件，它提供注册中心和配置中心来供我们使用。并且 Nacos 同时支持 AP 模式和 CP 模式来供我们选择使用。具体可以查看<a href=\"https://nacos.io/zh-cn/docs/what-is-nacos.html\">官方文档</a>来进一步了解。</p>\n<h2 id=\"安装-Nacos\"><a href=\"#安装-Nacos\" class=\"headerlink\" title=\"安装 Nacos\"></a>安装 Nacos</h2><p>本地的话我这边建议直接用 Docker 来安装Nacos，省心省力。按照官方提供的方法，我们可以直接下载官方提供的 <code>docker-compose</code> 文件来启动 Nacos。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">克隆项目</span></span><br><span class=\"line\">git clone https://github.com/nacos-group/nacos-docker.git</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\"><span class=\"comment\"># 进入项目目录 然后启动</span></span></span><br><span class=\"line\">cd nacos-docker</span><br><span class=\"line\">docker-compose -f example/standalone-mysql-5.7.yaml up</span><br></pre></td></tr></table></figure>\n\n<p>我这边是启动了一个使用 MySQL 5.7 的单机 Nacos，如果你想使用其他的数据库或者启动集群的话可以参照一下<a href=\"https://nacos.io/zh-cn/docs/quick-start-docker.html\">官方文档</a></p>\n<p>待启动完成后，就可以用浏览器打开 <code>http://localhost:8848/nacos</code> 进入 Nacos的管理台了。默认的登陆账号密码都是 <code>nacos</code></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/NMae2bimage-20210508221303506.png\" alt=\"image-20210508221303506\"></p>\n<h2 id=\"网关使用-Nacos\"><a href=\"#网关使用-Nacos\" class=\"headerlink\" title=\"网关使用 Nacos\"></a>网关使用 Nacos</h2><blockquote>\n<p>我这边 Spring Cloud 使用的版本号是 <code>2020.0.2</code> </p>\n</blockquote>\n<h3 id=\"Nacos-创建配置\"><a href=\"#Nacos-创建配置\" class=\"headerlink\" title=\"Nacos 创建配置\"></a>Nacos 创建配置</h3><p>在开始配置网关项目前，我们先在 Nacos 里创建一个配置，等下网关启动的时候就用这个配置。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8989</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">gateway:</span></span><br><span class=\"line\">      <span class=\"attr\">routes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">route-demo</span></span><br><span class=\"line\">          <span class=\"attr\">uri:</span> <span class=\"string\">https://baidu.com</span></span><br><span class=\"line\">          <span class=\"attr\">predicates:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"string\">Path=/**</span></span><br></pre></td></tr></table></figure>\n\n<p>在上面配置中，我们定义了项目启动端口为 <code>8989</code>，然后创建了一个路由，这个路由接收所有请求，然后转发到百度。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/9NZiPVimage-20210508222500763.png\" alt=\"image-20210508222500763\"></p>\n<h3 id=\"依赖配置\"><a href=\"#依赖配置\" class=\"headerlink\" title=\"依赖配置\"></a>依赖配置</h3><p>因为 Nacos 是阿里巴巴开源的，所以这里要用到 <code>spring-cloud-alibaba-dependencies</code> 这个依赖，在 Spring Cloud Gateway 项目里面添加如下依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2021.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">type</span>&gt;</span>pom<span class=\"tag\">&lt;/<span class=\"name\">type</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>import<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencyManagement</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>导入依赖后，我们在 <code>resources</code> 文件夹下创建一个 <code>bootstrap.yml</code> 文件，然后在里面填入 Nacos 配置中心的相关的信息</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">cloud:</span></span><br><span class=\"line\">    <span class=\"attr\">nacos:</span></span><br><span class=\"line\">      <span class=\"attr\">server-addr:</span> <span class=\"string\">localhost:8848</span></span><br><span class=\"line\">      <span class=\"attr\">config:</span></span><br><span class=\"line\">        <span class=\"attr\">prefix:</span> <span class=\"string\">gateway</span></span><br><span class=\"line\">        <span class=\"attr\">file-extension:</span> <span class=\"string\">yml</span></span><br></pre></td></tr></table></figure>\n\n<p>上面配置中，<code>server-addr</code> 配置了本地 Nacos 的地址，<code>prefix</code> 配置了刚才配置文件的前缀，<code>file-extension</code> 配置了刚才 Nacos 上创建的文件扩展名。</p>\n<p>在 Nacos Spring Cloud 中，<code>dataId</code> 的完整格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">$&#123;prefix&#125;-$&#123;spring.profiles.active&#125;.$&#123;file-extension&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>prefix</code> 默认为 <code>spring.application.name</code> 的值，也可以通过配置项 <code>spring.cloud.nacos.config.prefix</code>来配置。</li>\n<li><code>spring.profiles.active</code> 即为当前环境对应的 profile，详情可以参考 <a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-profiles.html#boot-features-profiles\">Spring Boot文档</a>。 <strong>注意：当 <code>spring.profiles.active</code> 为空时，对应的连接符 <code>-</code> 也将不存在，dataId 的拼接格式变成 <code>$&#123;prefix&#125;.$&#123;file-extension&#125;</code></strong></li>\n<li><code>file-exetension</code> 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置。目前只支持 <code>properties</code> 和 <code>yaml</code> 类型。</li>\n</ul>\n<h3 id=\"启动网关项目\"><a href=\"#启动网关项目\" class=\"headerlink\" title=\"启动网关项目\"></a>启动网关项目</h3><p>配置完成后，如果你和我用的 Spring Cloud 版本一样是 <code>2020.0.2</code> 版的话，你启动项目后会发现，欸？？怎么启动端口还是默认的 <code>8080</code> 呢？</p>\n<p>发生这种情况是因为项目没有读取 <code>bootstrap.yml</code> 文件，这是因为 Spring Cloud 从数字版开始，把 <code>bootstrap</code> 默认为关闭状态，此时如果要使用 <code>bootstrap</code> 的话就要导入以下依赖就可以了</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>导入依赖后再次启动网关，发现启动端口变成了我们刚在 Nacos 上配置的 <code>8989</code> 了，这时你打开浏览器访问 <code>http://localhost:8989</code> 就会跳转到百度首页了。</p>\n<h2 id=\"动态路由\"><a href=\"#动态路由\" class=\"headerlink\" title=\"动态路由\"></a>动态路由</h2><p>其实到这一步，动态路由的工作基本上已经完成了，现在你可以在 Nacos 找到刚才配置 <code>gateway.yml</code>，然后点击右边的编辑按钮，修改一下配置的路由。比如我这边把它改成知乎的地址。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/34d52Bimage-20210508224219917.png\" alt=\"image-20210508224219917\"></p>\n<p>配置完后点击下面的发布，此时你不用任何操作，不用重启网关项目，直接再次访问 <code>http://localhost:8989</code> ，就会发现现在会跳转到知乎了。这样就实现了动态路由了。</p>\n"},{"title":"RestTemplate简单使用","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-20T09:32:18.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## 前言\n\n\t本文只讲常用的**GET** 和**POST**请求,其他类型的请求(如**PUT**，**PATCH**)请求方式都差不多，有兴趣的可以查看RestTemplate源码。\n\n## GET\n\n> GET官方给了**getForEntity**和**getForObject**两种种方法，每个方法又有三个重载方法\n\n### 官方源码接口\n\n```java\n\t@Nullable\n\t<T> T getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T getForObject(String url, Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T getForObject(URI url, Class<T> responseType) throws RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Object... uriVariables)\n\t\t\tthrows RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Map<String, ?> uriVariables)\n\t\t\tthrows RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) throws RestClientException;\n```\n\n### 使用\n\n#### API接口\n\n>  首先我写了两个接口供RestTemplate调用\n\n```java\n@RestController\npublic class Test {\n\n    @GetMapping(\"/test\")\n    public JSONObject test(){\n        JSONObject jsonObject=new JSONObject();\n        jsonObject.put(\"name:\",\"Mr.Zheng\");\n        jsonObject.put(\"tag:\",\"Good\");\n        return jsonObject;\n    }\n\n    @GetMapping(\"/test/{name}\")\n    public JSONObject test2(@PathVariable String name){\n        JSONObject jsonObject=new JSONObject();\n        jsonObject.put(\"name:\",name);\n        jsonObject.put(\"tag:\",\"Good\");\n        return jsonObject;\n    }\n    \n}\n```\n\n#### getForObject\n\n##### 代码\n\n```java\n\t@Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n\n        //使用URI请求\n        URI uri=URI.create(\"http://localhost:8090/test\");\n        String response=template.getForObject(uri, String.class);\n        System.out.println(response);\n\n        //url带参数请求 \n        String response2=template.getForObject(\"http://localhost:8090/test/{name}\",String.class,\"hui1\");\n        System.out.println(response2);\n\n        //当url参数过多可以用map\n        Map<String,String> param=new HashMap<>();\n        param.put(\"name\",\"hui2\");\n        String reponse3=template.getForObject(\"http://localhost:8090/test/{name}\",String.class,param);\n        System.out.println(reponse3);\n    }\n```\n\n##### 结果:\n\n```java\n{\"name:\":\"Mr.Zheng\",\"tag:\":\"Good\"}\n{\"name:\":\"hui1\",\"tag:\":\"Good\"}\n{\"name:\":\"hui2\",\"tag:\":\"Good\"}\n```\n\n\n\n#### getForEntity\n\n##### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n\n        //使用URI请求\n        URI uri=URI.create(\"http://localhost:8090/test\");\n        ResponseEntity<String> response=template.getForEntity(uri, String.class);\n        System.out.println(response.getBody());\n\n        //url带参数请求\n        ResponseEntity<String> response2=template.getForEntity(\"http://localhost:8090/test/{name}\",String.class,\"hui1\");\n        System.out.println(response2.getBody());\n\n        //当url参数过多可以用map\n        Map<String,String> param=new HashMap<>();\n        param.put(\"name\",\"hui2\");\n        ResponseEntity<String> reponse3=template.getForEntity(\"http://localhost:8090/test/{name}\",String.class,param);\n        System.out.println(reponse3.getBody());\n    }\n```\n\n\n\n##### 结果\n\n```java\n{\"name:\":\"Mr.Zheng\",\"tag:\":\"Good\"}\n{\"name:\":\"hui1\",\"tag:\":\"Good\"}\n{\"name:\":\"hui2\",\"tag:\":\"Good\"}\n```\n\n\n\n### 小结\n\n可以看到**getForEntity**和**getForObject**的使用方法差不多，他们的区别就是\n\n- getForObject只返回结果，getForEntity包装了返回的信息，可以从中获取更多关于http请求的信息，比如请求头，请求状态等\n\n## POST\n\n> POST官方给了**postForLocation**,**postForObject**,**postForEntity**三种方法，每种又有三个重载方法\n\n### 官方源码接口\n\n```java\n\t@Nullable\n\tURI postForLocation(String url, @Nullable Object request, Object... uriVariables) throws RestClientException;\n\n\t@Nullable\n\tURI postForLocation(String url, @Nullable Object request, Map<String, ?> uriVariables)\n\t\t\tthrows RestClientException;\n\n\t@Nullable\n\tURI postForLocation(URI url, @Nullable Object request) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tObject... uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tMap<String, ?> uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(URI url, @Nullable Object request, Class<T> responseType) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tObject... uriVariables) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tMap<String, ?> uriVariables) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(URI url, @Nullable Object request, Class<T> responseType)\n\t\t\tthrows RestClientException;\n```\n\n\n\n### API接口\n\n```java\n@RestController\npublic class Test {\n    private static final Logger LOG= LoggerFactory.getLogger(Test.class);\n\n    @PostMapping(\"/test\")\n    public JSONObject test(@RequestBody JSONObject param){\n        LOG.info(\"param:{}\",param.toJSONString());\n        return param;\n    }\n\n    @PostMapping(\"/test/{urlParam}\")\n    public JSONObject test(@RequestBody JSONObject param,@PathVariable String urlParam){\n        LOG.info(\"param:{}\",param);\n        param.put(\"urlParam\",urlParam);\n        return param;\n    }\n    \n}\n```\n\n### postForObject\n\n#### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n        String baseURL=\"http://localhost:8090\";\n        JSONObject param=new JSONObject();\n        param.put(\"tag\",\"this is post request!!\");\n\n        //使用URI请求\n        URI uri=URI.create(baseURL+\"/test\");\n        String response=template.postForObject(uri,param,String.class);\n        System.out.println(response);\n\n        //url带参数请求\n        String response2=template.postForObject(baseURL+\"/test/{urlParam}\",param,String.class,\"this is urlParam\");\n        System.out.println(response2);\n\n        //当url参数过多可以用map\n        Map<String,String> mapParam=new HashMap<>();\n        mapParam.put(\"urlParam\",\"this is map param!!\");\n        String reponse3=template.postForObject(baseURL+\"/test/{urlParam}\",param,String.class,mapParam);\n        System.out.println(reponse3);\n    }\n```\n\n#### 结果\n\n```java\n{\"tag\":\"this is post request!!\"}\n{\"tag\":\"this is post request!!\",\"urlParam\":\"this is urlParam\"}\n{\"tag\":\"this is post request!!\",\"urlParam\":\"this is map param!!\"}\n```\n\n\n\n### postForEntity\n\n> postForEntity和postForObject用法类似，具体这里就写了。\n\n\n\n### postForLocation\n\n> 这个请求和其他请求不一样，可以看到他返回的是URI，这里具体讲一下\n\n#### 新写个API接口\n\n```java\n@RestController\npublic class UriTest {\n    private static final Logger LOG= LoggerFactory.getLogger(UriTest.class);\n\n    @PostMapping(\"/uri\")\n    public void uriTest(@RequestBody JSONObject param, HttpServletResponse response) throws IOException {\n        try {\n            //打印上传的参数\n            LOG.info(\"requestParam:{}\",param);\n            //跳转百度\n            response.sendRedirect(\"https://www.baidu.com\");\n        }catch (Exception e){\n            LOG.info(e.getMessage(),e);\n        }\n    }\n}\n```\n\n#### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n        String baseURL=\"http://localhost:8090\";\n        JSONObject param=new JSONObject();\n        param.put(\"info\",\"this is postForLocation test!!\");\n\n        URI response2=template.postForLocation(baseURL+\"/uri\",param);\n        System.out.println(response2);\n    }\n```\n\n#### 结果\n\n![代码运行结果](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191120165138-20211008164958814-20211008165045748.png)\n\n\n\n#### 服务端日志\n\n![服务端日志](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191120165302-20211008165107947.png)\n\n### 小结\n\n**postForObject**和**postForEntity**两个方法和GET请求的用法差不多，只是POST请求比GET请求多了个request请求体。而**postForLocation**方法一般用的比较少,一般只有后端发生301或302等跳转时用来获取跳转后的URL，方法的形参中不用定义返回的数据类型，默认是URI；","source":"_posts/spring/spring-boot-resttemplate-example.md","raw":"---\ntitle: RestTemplate简单使用\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-11-20 17:32:18\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n - SpringBoot\ncategories:\n - Spring\n---\n\n\n\n## 前言\n\n\t本文只讲常用的**GET** 和**POST**请求,其他类型的请求(如**PUT**，**PATCH**)请求方式都差不多，有兴趣的可以查看RestTemplate源码。\n\n## GET\n\n> GET官方给了**getForEntity**和**getForObject**两种种方法，每个方法又有三个重载方法\n\n### 官方源码接口\n\n```java\n\t@Nullable\n\t<T> T getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T getForObject(String url, Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T getForObject(URI url, Class<T> responseType) throws RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Object... uriVariables)\n\t\t\tthrows RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Map<String, ?> uriVariables)\n\t\t\tthrows RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) throws RestClientException;\n```\n\n### 使用\n\n#### API接口\n\n>  首先我写了两个接口供RestTemplate调用\n\n```java\n@RestController\npublic class Test {\n\n    @GetMapping(\"/test\")\n    public JSONObject test(){\n        JSONObject jsonObject=new JSONObject();\n        jsonObject.put(\"name:\",\"Mr.Zheng\");\n        jsonObject.put(\"tag:\",\"Good\");\n        return jsonObject;\n    }\n\n    @GetMapping(\"/test/{name}\")\n    public JSONObject test2(@PathVariable String name){\n        JSONObject jsonObject=new JSONObject();\n        jsonObject.put(\"name:\",name);\n        jsonObject.put(\"tag:\",\"Good\");\n        return jsonObject;\n    }\n    \n}\n```\n\n#### getForObject\n\n##### 代码\n\n```java\n\t@Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n\n        //使用URI请求\n        URI uri=URI.create(\"http://localhost:8090/test\");\n        String response=template.getForObject(uri, String.class);\n        System.out.println(response);\n\n        //url带参数请求 \n        String response2=template.getForObject(\"http://localhost:8090/test/{name}\",String.class,\"hui1\");\n        System.out.println(response2);\n\n        //当url参数过多可以用map\n        Map<String,String> param=new HashMap<>();\n        param.put(\"name\",\"hui2\");\n        String reponse3=template.getForObject(\"http://localhost:8090/test/{name}\",String.class,param);\n        System.out.println(reponse3);\n    }\n```\n\n##### 结果:\n\n```java\n{\"name:\":\"Mr.Zheng\",\"tag:\":\"Good\"}\n{\"name:\":\"hui1\",\"tag:\":\"Good\"}\n{\"name:\":\"hui2\",\"tag:\":\"Good\"}\n```\n\n\n\n#### getForEntity\n\n##### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n\n        //使用URI请求\n        URI uri=URI.create(\"http://localhost:8090/test\");\n        ResponseEntity<String> response=template.getForEntity(uri, String.class);\n        System.out.println(response.getBody());\n\n        //url带参数请求\n        ResponseEntity<String> response2=template.getForEntity(\"http://localhost:8090/test/{name}\",String.class,\"hui1\");\n        System.out.println(response2.getBody());\n\n        //当url参数过多可以用map\n        Map<String,String> param=new HashMap<>();\n        param.put(\"name\",\"hui2\");\n        ResponseEntity<String> reponse3=template.getForEntity(\"http://localhost:8090/test/{name}\",String.class,param);\n        System.out.println(reponse3.getBody());\n    }\n```\n\n\n\n##### 结果\n\n```java\n{\"name:\":\"Mr.Zheng\",\"tag:\":\"Good\"}\n{\"name:\":\"hui1\",\"tag:\":\"Good\"}\n{\"name:\":\"hui2\",\"tag:\":\"Good\"}\n```\n\n\n\n### 小结\n\n可以看到**getForEntity**和**getForObject**的使用方法差不多，他们的区别就是\n\n- getForObject只返回结果，getForEntity包装了返回的信息，可以从中获取更多关于http请求的信息，比如请求头，请求状态等\n\n## POST\n\n> POST官方给了**postForLocation**,**postForObject**,**postForEntity**三种方法，每种又有三个重载方法\n\n### 官方源码接口\n\n```java\n\t@Nullable\n\tURI postForLocation(String url, @Nullable Object request, Object... uriVariables) throws RestClientException;\n\n\t@Nullable\n\tURI postForLocation(String url, @Nullable Object request, Map<String, ?> uriVariables)\n\t\t\tthrows RestClientException;\n\n\t@Nullable\n\tURI postForLocation(URI url, @Nullable Object request) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tObject... uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tMap<String, ?> uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(URI url, @Nullable Object request, Class<T> responseType) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tObject... uriVariables) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tMap<String, ?> uriVariables) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(URI url, @Nullable Object request, Class<T> responseType)\n\t\t\tthrows RestClientException;\n```\n\n\n\n### API接口\n\n```java\n@RestController\npublic class Test {\n    private static final Logger LOG= LoggerFactory.getLogger(Test.class);\n\n    @PostMapping(\"/test\")\n    public JSONObject test(@RequestBody JSONObject param){\n        LOG.info(\"param:{}\",param.toJSONString());\n        return param;\n    }\n\n    @PostMapping(\"/test/{urlParam}\")\n    public JSONObject test(@RequestBody JSONObject param,@PathVariable String urlParam){\n        LOG.info(\"param:{}\",param);\n        param.put(\"urlParam\",urlParam);\n        return param;\n    }\n    \n}\n```\n\n### postForObject\n\n#### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n        String baseURL=\"http://localhost:8090\";\n        JSONObject param=new JSONObject();\n        param.put(\"tag\",\"this is post request!!\");\n\n        //使用URI请求\n        URI uri=URI.create(baseURL+\"/test\");\n        String response=template.postForObject(uri,param,String.class);\n        System.out.println(response);\n\n        //url带参数请求\n        String response2=template.postForObject(baseURL+\"/test/{urlParam}\",param,String.class,\"this is urlParam\");\n        System.out.println(response2);\n\n        //当url参数过多可以用map\n        Map<String,String> mapParam=new HashMap<>();\n        mapParam.put(\"urlParam\",\"this is map param!!\");\n        String reponse3=template.postForObject(baseURL+\"/test/{urlParam}\",param,String.class,mapParam);\n        System.out.println(reponse3);\n    }\n```\n\n#### 结果\n\n```java\n{\"tag\":\"this is post request!!\"}\n{\"tag\":\"this is post request!!\",\"urlParam\":\"this is urlParam\"}\n{\"tag\":\"this is post request!!\",\"urlParam\":\"this is map param!!\"}\n```\n\n\n\n### postForEntity\n\n> postForEntity和postForObject用法类似，具体这里就写了。\n\n\n\n### postForLocation\n\n> 这个请求和其他请求不一样，可以看到他返回的是URI，这里具体讲一下\n\n#### 新写个API接口\n\n```java\n@RestController\npublic class UriTest {\n    private static final Logger LOG= LoggerFactory.getLogger(UriTest.class);\n\n    @PostMapping(\"/uri\")\n    public void uriTest(@RequestBody JSONObject param, HttpServletResponse response) throws IOException {\n        try {\n            //打印上传的参数\n            LOG.info(\"requestParam:{}\",param);\n            //跳转百度\n            response.sendRedirect(\"https://www.baidu.com\");\n        }catch (Exception e){\n            LOG.info(e.getMessage(),e);\n        }\n    }\n}\n```\n\n#### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n        String baseURL=\"http://localhost:8090\";\n        JSONObject param=new JSONObject();\n        param.put(\"info\",\"this is postForLocation test!!\");\n\n        URI response2=template.postForLocation(baseURL+\"/uri\",param);\n        System.out.println(response2);\n    }\n```\n\n#### 结果\n\n![代码运行结果](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191120165138-20211008164958814-20211008165045748.png)\n\n\n\n#### 服务端日志\n\n![服务端日志](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191120165302-20211008165107947.png)\n\n### 小结\n\n**postForObject**和**postForEntity**两个方法和GET请求的用法差不多，只是POST请求比GET请求多了个request请求体。而**postForLocation**方法一般用的比较少,一般只有后端发生301或302等跳转时用来获取跳转后的URL，方法的形参中不用定义返回的数据类型，默认是URI；","slug":"spring/spring-boot-resttemplate-example","published":1,"updated":"2021-10-08T08:51:29.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehb004jvpuc8t0idfyx","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><pre><code>本文只讲常用的**GET** 和**POST**请求,其他类型的请求(如**PUT**，**PATCH**)请求方式都差不多，有兴趣的可以查看RestTemplate源码。\n</code></pre>\n<h2 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h2><blockquote>\n<p>GET官方给了<strong>getForEntity</strong>和<strong>getForObject</strong>两种种方法，每个方法又有三个重载方法</p>\n</blockquote>\n<h3 id=\"官方源码接口\"><a href=\"#官方源码接口\" class=\"headerlink\" title=\"官方源码接口\"></a>官方源码接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; T <span class=\"title function_\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; T <span class=\"title function_\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; T <span class=\"title function_\">getForObject</span><span class=\"params\">(URI url, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; ResponseEntity&lt;T&gt; <span class=\"title function_\">getForEntity</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; ResponseEntity&lt;T&gt; <span class=\"title function_\">getForEntity</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; ResponseEntity&lt;T&gt; <span class=\"title function_\">getForEntity</span><span class=\"params\">(URI url, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"API接口\"><a href=\"#API接口\" class=\"headerlink\" title=\"API接口\"></a>API接口</h4><blockquote>\n<p> 首先我写了两个接口供RestTemplate调用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JSONObject <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        JSONObject jsonObject=<span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;name:&quot;</span>,<span class=\"string\">&quot;Mr.Zheng&quot;</span>);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;tag:&quot;</span>,<span class=\"string\">&quot;Good&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/test/&#123;name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JSONObject <span class=\"title function_\">test2</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String name)</span>&#123;</span><br><span class=\"line\">        JSONObject jsonObject=<span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;name:&quot;</span>,name);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;tag:&quot;</span>,<span class=\"string\">&quot;Good&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getForObject\"><a href=\"#getForObject\" class=\"headerlink\" title=\"getForObject\"></a>getForObject</h4><h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       RestTemplate template=<span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//使用URI请求</span></span><br><span class=\"line\">       URI uri=URI.create(<span class=\"string\">&quot;http://localhost:8090/test&quot;</span>);</span><br><span class=\"line\">       String response=template.getForObject(uri, String.class);</span><br><span class=\"line\">       System.out.println(response);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//url带参数请求 </span></span><br><span class=\"line\">       String response2=template.getForObject(<span class=\"string\">&quot;http://localhost:8090/test/&#123;name&#125;&quot;</span>,String.class,<span class=\"string\">&quot;hui1&quot;</span>);</span><br><span class=\"line\">       System.out.println(response2);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//当url参数过多可以用map</span></span><br><span class=\"line\">       Map&lt;String,String&gt; param=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">       param.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;hui2&quot;</span>);</span><br><span class=\"line\">       String reponse3=template.getForObject(<span class=\"string\">&quot;http://localhost:8090/test/&#123;name&#125;&quot;</span>,String.class,param);</span><br><span class=\"line\">       System.out.println(reponse3);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果:\"></a>结果:</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&quot;name:&quot;</span>:<span class=\"string\">&quot;Mr.Zheng&quot;</span>,<span class=\"string\">&quot;tag:&quot;</span>:<span class=\"string\">&quot;Good&quot;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;name:&quot;</span>:<span class=\"string\">&quot;hui1&quot;</span>,<span class=\"string\">&quot;tag:&quot;</span>:<span class=\"string\">&quot;Good&quot;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;name:&quot;</span>:<span class=\"string\">&quot;hui2&quot;</span>,<span class=\"string\">&quot;tag:&quot;</span>:<span class=\"string\">&quot;Good&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"getForEntity\"><a href=\"#getForEntity\" class=\"headerlink\" title=\"getForEntity\"></a>getForEntity</h4><h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    RestTemplate template=<span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用URI请求</span></span><br><span class=\"line\">    URI uri=URI.create(<span class=\"string\">&quot;http://localhost:8090/test&quot;</span>);</span><br><span class=\"line\">    ResponseEntity&lt;String&gt; response=template.getForEntity(uri, String.class);</span><br><span class=\"line\">    System.out.println(response.getBody());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//url带参数请求</span></span><br><span class=\"line\">    ResponseEntity&lt;String&gt; response2=template.getForEntity(<span class=\"string\">&quot;http://localhost:8090/test/&#123;name&#125;&quot;</span>,String.class,<span class=\"string\">&quot;hui1&quot;</span>);</span><br><span class=\"line\">    System.out.println(response2.getBody());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当url参数过多可以用map</span></span><br><span class=\"line\">    Map&lt;String,String&gt; param=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;hui2&quot;</span>);</span><br><span class=\"line\">    ResponseEntity&lt;String&gt; reponse3=template.getForEntity(<span class=\"string\">&quot;http://localhost:8090/test/&#123;name&#125;&quot;</span>,String.class,param);</span><br><span class=\"line\">    System.out.println(reponse3.getBody());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"结果-1\"><a href=\"#结果-1\" class=\"headerlink\" title=\"结果\"></a>结果</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&quot;name:&quot;</span>:<span class=\"string\">&quot;Mr.Zheng&quot;</span>,<span class=\"string\">&quot;tag:&quot;</span>:<span class=\"string\">&quot;Good&quot;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;name:&quot;</span>:<span class=\"string\">&quot;hui1&quot;</span>,<span class=\"string\">&quot;tag:&quot;</span>:<span class=\"string\">&quot;Good&quot;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;name:&quot;</span>:<span class=\"string\">&quot;hui2&quot;</span>,<span class=\"string\">&quot;tag:&quot;</span>:<span class=\"string\">&quot;Good&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>可以看到<strong>getForEntity</strong>和<strong>getForObject</strong>的使用方法差不多，他们的区别就是</p>\n<ul>\n<li>getForObject只返回结果，getForEntity包装了返回的信息，可以从中获取更多关于http请求的信息，比如请求头，请求状态等</li>\n</ul>\n<h2 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h2><blockquote>\n<p>POST官方给了<strong>postForLocation</strong>,<strong>postForObject</strong>,<strong>postForEntity</strong>三种方法，每种又有三个重载方法</p>\n</blockquote>\n<h3 id=\"官方源码接口-1\"><a href=\"#官方源码接口-1\" class=\"headerlink\" title=\"官方源码接口\"></a>官方源码接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">URI <span class=\"title function_\">postForLocation</span><span class=\"params\">(String url, <span class=\"meta\">@Nullable</span> Object request, Object... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">URI <span class=\"title function_\">postForLocation</span><span class=\"params\">(String url, <span class=\"meta\">@Nullable</span> Object request, Map&lt;String, ?&gt; uriVariables)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">URI <span class=\"title function_\">postForLocation</span><span class=\"params\">(URI url, <span class=\"meta\">@Nullable</span> Object request)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; T <span class=\"title function_\">postForObject</span><span class=\"params\">(String url, <span class=\"meta\">@Nullable</span> Object request, Class&lt;T&gt; responseType,</span></span><br><span class=\"line\"><span class=\"params\">\t\tObject... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; T <span class=\"title function_\">postForObject</span><span class=\"params\">(String url, <span class=\"meta\">@Nullable</span> Object request, Class&lt;T&gt; responseType,</span></span><br><span class=\"line\"><span class=\"params\">\t\tMap&lt;String, ?&gt; uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; T <span class=\"title function_\">postForObject</span><span class=\"params\">(URI url, <span class=\"meta\">@Nullable</span> Object request, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; ResponseEntity&lt;T&gt; <span class=\"title function_\">postForEntity</span><span class=\"params\">(String url, <span class=\"meta\">@Nullable</span> Object request, Class&lt;T&gt; responseType,</span></span><br><span class=\"line\"><span class=\"params\">\t\tObject... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; ResponseEntity&lt;T&gt; <span class=\"title function_\">postForEntity</span><span class=\"params\">(String url, <span class=\"meta\">@Nullable</span> Object request, Class&lt;T&gt; responseType,</span></span><br><span class=\"line\"><span class=\"params\">\t\tMap&lt;String, ?&gt; uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; ResponseEntity&lt;T&gt; <span class=\"title function_\">postForEntity</span><span class=\"params\">(URI url, <span class=\"meta\">@Nullable</span> Object request, Class&lt;T&gt; responseType)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> RestClientException;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"API接口-1\"><a href=\"#API接口-1\" class=\"headerlink\" title=\"API接口\"></a>API接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOG= LoggerFactory.getLogger(Test.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JSONObject <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> JSONObject param)</span>&#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">&quot;param:&#123;&#125;&quot;</span>,param.toJSONString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/test/&#123;urlParam&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JSONObject <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> JSONObject param,<span class=\"meta\">@PathVariable</span> String urlParam)</span>&#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">&quot;param:&#123;&#125;&quot;</span>,param);</span><br><span class=\"line\">        param.put(<span class=\"string\">&quot;urlParam&quot;</span>,urlParam);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"postForObject\"><a href=\"#postForObject\" class=\"headerlink\" title=\"postForObject\"></a>postForObject</h3><h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    RestTemplate template=<span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    String baseURL=<span class=\"string\">&quot;http://localhost:8090&quot;</span>;</span><br><span class=\"line\">    JSONObject param=<span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;tag&quot;</span>,<span class=\"string\">&quot;this is post request!!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用URI请求</span></span><br><span class=\"line\">    URI uri=URI.create(baseURL+<span class=\"string\">&quot;/test&quot;</span>);</span><br><span class=\"line\">    String response=template.postForObject(uri,param,String.class);</span><br><span class=\"line\">    System.out.println(response);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//url带参数请求</span></span><br><span class=\"line\">    String response2=template.postForObject(baseURL+<span class=\"string\">&quot;/test/&#123;urlParam&#125;&quot;</span>,param,String.class,<span class=\"string\">&quot;this is urlParam&quot;</span>);</span><br><span class=\"line\">    System.out.println(response2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当url参数过多可以用map</span></span><br><span class=\"line\">    Map&lt;String,String&gt; mapParam=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    mapParam.put(<span class=\"string\">&quot;urlParam&quot;</span>,<span class=\"string\">&quot;this is map param!!&quot;</span>);</span><br><span class=\"line\">    String reponse3=template.postForObject(baseURL+<span class=\"string\">&quot;/test/&#123;urlParam&#125;&quot;</span>,param,String.class,mapParam);</span><br><span class=\"line\">    System.out.println(reponse3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结果-2\"><a href=\"#结果-2\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&quot;tag&quot;</span>:<span class=\"string\">&quot;this is post request!!&quot;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;tag&quot;</span>:<span class=\"string\">&quot;this is post request!!&quot;</span>,<span class=\"string\">&quot;urlParam&quot;</span>:<span class=\"string\">&quot;this is urlParam&quot;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;tag&quot;</span>:<span class=\"string\">&quot;this is post request!!&quot;</span>,<span class=\"string\">&quot;urlParam&quot;</span>:<span class=\"string\">&quot;this is map param!!&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"postForEntity\"><a href=\"#postForEntity\" class=\"headerlink\" title=\"postForEntity\"></a>postForEntity</h3><blockquote>\n<p>postForEntity和postForObject用法类似，具体这里就写了。</p>\n</blockquote>\n<h3 id=\"postForLocation\"><a href=\"#postForLocation\" class=\"headerlink\" title=\"postForLocation\"></a>postForLocation</h3><blockquote>\n<p>这个请求和其他请求不一样，可以看到他返回的是URI，这里具体讲一下</p>\n</blockquote>\n<h4 id=\"新写个API接口\"><a href=\"#新写个API接口\" class=\"headerlink\" title=\"新写个API接口\"></a>新写个API接口</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UriTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOG= LoggerFactory.getLogger(UriTest.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/uri&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">uriTest</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> JSONObject param, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//打印上传的参数</span></span><br><span class=\"line\">            LOG.info(<span class=\"string\">&quot;requestParam:&#123;&#125;&quot;</span>,param);</span><br><span class=\"line\">            <span class=\"comment\">//跳转百度</span></span><br><span class=\"line\">            response.sendRedirect(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            LOG.info(e.getMessage(),e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    RestTemplate template=<span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    String baseURL=<span class=\"string\">&quot;http://localhost:8090&quot;</span>;</span><br><span class=\"line\">    JSONObject param=<span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;info&quot;</span>,<span class=\"string\">&quot;this is postForLocation test!!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    URI response2=template.postForLocation(baseURL+<span class=\"string\">&quot;/uri&quot;</span>,param);</span><br><span class=\"line\">    System.out.println(response2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结果-3\"><a href=\"#结果-3\" class=\"headerlink\" title=\"结果\"></a>结果</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191120165138-20211008164958814-20211008165045748.png\" alt=\"代码运行结果\"></p>\n<h4 id=\"服务端日志\"><a href=\"#服务端日志\" class=\"headerlink\" title=\"服务端日志\"></a>服务端日志</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191120165302-20211008165107947.png\" alt=\"服务端日志\"></p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><strong>postForObject</strong>和<strong>postForEntity</strong>两个方法和GET请求的用法差不多，只是POST请求比GET请求多了个request请求体。而<strong>postForLocation</strong>方法一般用的比较少,一般只有后端发生301或302等跳转时用来获取跳转后的URL，方法的形参中不用定义返回的数据类型，默认是URI；</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><pre><code>本文只讲常用的**GET** 和**POST**请求,其他类型的请求(如**PUT**，**PATCH**)请求方式都差不多，有兴趣的可以查看RestTemplate源码。\n</code></pre>\n<h2 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h2><blockquote>\n<p>GET官方给了<strong>getForEntity</strong>和<strong>getForObject</strong>两种种方法，每个方法又有三个重载方法</p>\n</blockquote>\n<h3 id=\"官方源码接口\"><a href=\"#官方源码接口\" class=\"headerlink\" title=\"官方源码接口\"></a>官方源码接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; T <span class=\"title function_\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; T <span class=\"title function_\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; T <span class=\"title function_\">getForObject</span><span class=\"params\">(URI url, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; ResponseEntity&lt;T&gt; <span class=\"title function_\">getForEntity</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; ResponseEntity&lt;T&gt; <span class=\"title function_\">getForEntity</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; ResponseEntity&lt;T&gt; <span class=\"title function_\">getForEntity</span><span class=\"params\">(URI url, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"API接口\"><a href=\"#API接口\" class=\"headerlink\" title=\"API接口\"></a>API接口</h4><blockquote>\n<p> 首先我写了两个接口供RestTemplate调用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JSONObject <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        JSONObject jsonObject=<span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;name:&quot;</span>,<span class=\"string\">&quot;Mr.Zheng&quot;</span>);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;tag:&quot;</span>,<span class=\"string\">&quot;Good&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/test/&#123;name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JSONObject <span class=\"title function_\">test2</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> String name)</span>&#123;</span><br><span class=\"line\">        JSONObject jsonObject=<span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;name:&quot;</span>,name);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">&quot;tag:&quot;</span>,<span class=\"string\">&quot;Good&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getForObject\"><a href=\"#getForObject\" class=\"headerlink\" title=\"getForObject\"></a>getForObject</h4><h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       RestTemplate template=<span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//使用URI请求</span></span><br><span class=\"line\">       URI uri=URI.create(<span class=\"string\">&quot;http://localhost:8090/test&quot;</span>);</span><br><span class=\"line\">       String response=template.getForObject(uri, String.class);</span><br><span class=\"line\">       System.out.println(response);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//url带参数请求 </span></span><br><span class=\"line\">       String response2=template.getForObject(<span class=\"string\">&quot;http://localhost:8090/test/&#123;name&#125;&quot;</span>,String.class,<span class=\"string\">&quot;hui1&quot;</span>);</span><br><span class=\"line\">       System.out.println(response2);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//当url参数过多可以用map</span></span><br><span class=\"line\">       Map&lt;String,String&gt; param=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">       param.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;hui2&quot;</span>);</span><br><span class=\"line\">       String reponse3=template.getForObject(<span class=\"string\">&quot;http://localhost:8090/test/&#123;name&#125;&quot;</span>,String.class,param);</span><br><span class=\"line\">       System.out.println(reponse3);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果:\"></a>结果:</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&quot;name:&quot;</span>:<span class=\"string\">&quot;Mr.Zheng&quot;</span>,<span class=\"string\">&quot;tag:&quot;</span>:<span class=\"string\">&quot;Good&quot;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;name:&quot;</span>:<span class=\"string\">&quot;hui1&quot;</span>,<span class=\"string\">&quot;tag:&quot;</span>:<span class=\"string\">&quot;Good&quot;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;name:&quot;</span>:<span class=\"string\">&quot;hui2&quot;</span>,<span class=\"string\">&quot;tag:&quot;</span>:<span class=\"string\">&quot;Good&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"getForEntity\"><a href=\"#getForEntity\" class=\"headerlink\" title=\"getForEntity\"></a>getForEntity</h4><h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    RestTemplate template=<span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用URI请求</span></span><br><span class=\"line\">    URI uri=URI.create(<span class=\"string\">&quot;http://localhost:8090/test&quot;</span>);</span><br><span class=\"line\">    ResponseEntity&lt;String&gt; response=template.getForEntity(uri, String.class);</span><br><span class=\"line\">    System.out.println(response.getBody());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//url带参数请求</span></span><br><span class=\"line\">    ResponseEntity&lt;String&gt; response2=template.getForEntity(<span class=\"string\">&quot;http://localhost:8090/test/&#123;name&#125;&quot;</span>,String.class,<span class=\"string\">&quot;hui1&quot;</span>);</span><br><span class=\"line\">    System.out.println(response2.getBody());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当url参数过多可以用map</span></span><br><span class=\"line\">    Map&lt;String,String&gt; param=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;hui2&quot;</span>);</span><br><span class=\"line\">    ResponseEntity&lt;String&gt; reponse3=template.getForEntity(<span class=\"string\">&quot;http://localhost:8090/test/&#123;name&#125;&quot;</span>,String.class,param);</span><br><span class=\"line\">    System.out.println(reponse3.getBody());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h5 id=\"结果-1\"><a href=\"#结果-1\" class=\"headerlink\" title=\"结果\"></a>结果</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&quot;name:&quot;</span>:<span class=\"string\">&quot;Mr.Zheng&quot;</span>,<span class=\"string\">&quot;tag:&quot;</span>:<span class=\"string\">&quot;Good&quot;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;name:&quot;</span>:<span class=\"string\">&quot;hui1&quot;</span>,<span class=\"string\">&quot;tag:&quot;</span>:<span class=\"string\">&quot;Good&quot;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;name:&quot;</span>:<span class=\"string\">&quot;hui2&quot;</span>,<span class=\"string\">&quot;tag:&quot;</span>:<span class=\"string\">&quot;Good&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>可以看到<strong>getForEntity</strong>和<strong>getForObject</strong>的使用方法差不多，他们的区别就是</p>\n<ul>\n<li>getForObject只返回结果，getForEntity包装了返回的信息，可以从中获取更多关于http请求的信息，比如请求头，请求状态等</li>\n</ul>\n<h2 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h2><blockquote>\n<p>POST官方给了<strong>postForLocation</strong>,<strong>postForObject</strong>,<strong>postForEntity</strong>三种方法，每种又有三个重载方法</p>\n</blockquote>\n<h3 id=\"官方源码接口-1\"><a href=\"#官方源码接口-1\" class=\"headerlink\" title=\"官方源码接口\"></a>官方源码接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">URI <span class=\"title function_\">postForLocation</span><span class=\"params\">(String url, <span class=\"meta\">@Nullable</span> Object request, Object... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">URI <span class=\"title function_\">postForLocation</span><span class=\"params\">(String url, <span class=\"meta\">@Nullable</span> Object request, Map&lt;String, ?&gt; uriVariables)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">URI <span class=\"title function_\">postForLocation</span><span class=\"params\">(URI url, <span class=\"meta\">@Nullable</span> Object request)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; T <span class=\"title function_\">postForObject</span><span class=\"params\">(String url, <span class=\"meta\">@Nullable</span> Object request, Class&lt;T&gt; responseType,</span></span><br><span class=\"line\"><span class=\"params\">\t\tObject... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; T <span class=\"title function_\">postForObject</span><span class=\"params\">(String url, <span class=\"meta\">@Nullable</span> Object request, Class&lt;T&gt; responseType,</span></span><br><span class=\"line\"><span class=\"params\">\t\tMap&lt;String, ?&gt; uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; T <span class=\"title function_\">postForObject</span><span class=\"params\">(URI url, <span class=\"meta\">@Nullable</span> Object request, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; ResponseEntity&lt;T&gt; <span class=\"title function_\">postForEntity</span><span class=\"params\">(String url, <span class=\"meta\">@Nullable</span> Object request, Class&lt;T&gt; responseType,</span></span><br><span class=\"line\"><span class=\"params\">\t\tObject... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; ResponseEntity&lt;T&gt; <span class=\"title function_\">postForEntity</span><span class=\"params\">(String url, <span class=\"meta\">@Nullable</span> Object request, Class&lt;T&gt; responseType,</span></span><br><span class=\"line\"><span class=\"params\">\t\tMap&lt;String, ?&gt; uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; ResponseEntity&lt;T&gt; <span class=\"title function_\">postForEntity</span><span class=\"params\">(URI url, <span class=\"meta\">@Nullable</span> Object request, Class&lt;T&gt; responseType)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">throws</span> RestClientException;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"API接口-1\"><a href=\"#API接口-1\" class=\"headerlink\" title=\"API接口\"></a>API接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOG= LoggerFactory.getLogger(Test.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JSONObject <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> JSONObject param)</span>&#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">&quot;param:&#123;&#125;&quot;</span>,param.toJSONString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/test/&#123;urlParam&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> JSONObject <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> JSONObject param,<span class=\"meta\">@PathVariable</span> String urlParam)</span>&#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">&quot;param:&#123;&#125;&quot;</span>,param);</span><br><span class=\"line\">        param.put(<span class=\"string\">&quot;urlParam&quot;</span>,urlParam);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"postForObject\"><a href=\"#postForObject\" class=\"headerlink\" title=\"postForObject\"></a>postForObject</h3><h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    RestTemplate template=<span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    String baseURL=<span class=\"string\">&quot;http://localhost:8090&quot;</span>;</span><br><span class=\"line\">    JSONObject param=<span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;tag&quot;</span>,<span class=\"string\">&quot;this is post request!!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用URI请求</span></span><br><span class=\"line\">    URI uri=URI.create(baseURL+<span class=\"string\">&quot;/test&quot;</span>);</span><br><span class=\"line\">    String response=template.postForObject(uri,param,String.class);</span><br><span class=\"line\">    System.out.println(response);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//url带参数请求</span></span><br><span class=\"line\">    String response2=template.postForObject(baseURL+<span class=\"string\">&quot;/test/&#123;urlParam&#125;&quot;</span>,param,String.class,<span class=\"string\">&quot;this is urlParam&quot;</span>);</span><br><span class=\"line\">    System.out.println(response2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当url参数过多可以用map</span></span><br><span class=\"line\">    Map&lt;String,String&gt; mapParam=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    mapParam.put(<span class=\"string\">&quot;urlParam&quot;</span>,<span class=\"string\">&quot;this is map param!!&quot;</span>);</span><br><span class=\"line\">    String reponse3=template.postForObject(baseURL+<span class=\"string\">&quot;/test/&#123;urlParam&#125;&quot;</span>,param,String.class,mapParam);</span><br><span class=\"line\">    System.out.println(reponse3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结果-2\"><a href=\"#结果-2\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&quot;tag&quot;</span>:<span class=\"string\">&quot;this is post request!!&quot;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;tag&quot;</span>:<span class=\"string\">&quot;this is post request!!&quot;</span>,<span class=\"string\">&quot;urlParam&quot;</span>:<span class=\"string\">&quot;this is urlParam&quot;</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;tag&quot;</span>:<span class=\"string\">&quot;this is post request!!&quot;</span>,<span class=\"string\">&quot;urlParam&quot;</span>:<span class=\"string\">&quot;this is map param!!&quot;</span>&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"postForEntity\"><a href=\"#postForEntity\" class=\"headerlink\" title=\"postForEntity\"></a>postForEntity</h3><blockquote>\n<p>postForEntity和postForObject用法类似，具体这里就写了。</p>\n</blockquote>\n<h3 id=\"postForLocation\"><a href=\"#postForLocation\" class=\"headerlink\" title=\"postForLocation\"></a>postForLocation</h3><blockquote>\n<p>这个请求和其他请求不一样，可以看到他返回的是URI，这里具体讲一下</p>\n</blockquote>\n<h4 id=\"新写个API接口\"><a href=\"#新写个API接口\" class=\"headerlink\" title=\"新写个API接口\"></a>新写个API接口</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UriTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOG= LoggerFactory.getLogger(UriTest.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping(&quot;/uri&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">uriTest</span><span class=\"params\">(<span class=\"meta\">@RequestBody</span> JSONObject param, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//打印上传的参数</span></span><br><span class=\"line\">            LOG.info(<span class=\"string\">&quot;requestParam:&#123;&#125;&quot;</span>,param);</span><br><span class=\"line\">            <span class=\"comment\">//跳转百度</span></span><br><span class=\"line\">            response.sendRedirect(<span class=\"string\">&quot;https://www.baidu.com&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            LOG.info(e.getMessage(),e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    RestTemplate template=<span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">    String baseURL=<span class=\"string\">&quot;http://localhost:8090&quot;</span>;</span><br><span class=\"line\">    JSONObject param=<span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>();</span><br><span class=\"line\">    param.put(<span class=\"string\">&quot;info&quot;</span>,<span class=\"string\">&quot;this is postForLocation test!!&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    URI response2=template.postForLocation(baseURL+<span class=\"string\">&quot;/uri&quot;</span>,param);</span><br><span class=\"line\">    System.out.println(response2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结果-3\"><a href=\"#结果-3\" class=\"headerlink\" title=\"结果\"></a>结果</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191120165138-20211008164958814-20211008165045748.png\" alt=\"代码运行结果\"></p>\n<h4 id=\"服务端日志\"><a href=\"#服务端日志\" class=\"headerlink\" title=\"服务端日志\"></a>服务端日志</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191120165302-20211008165107947.png\" alt=\"服务端日志\"></p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><strong>postForObject</strong>和<strong>postForEntity</strong>两个方法和GET请求的用法差不多，只是POST请求比GET请求多了个request请求体。而<strong>postForLocation</strong>方法一般用的比较少,一般只有后端发生301或302等跳转时用来获取跳转后的URL，方法的形参中不用定义返回的数据类型，默认是URI；</p>\n"},{"title":"Fegin和RestTemplate添加全局请求头","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:14:43.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## Fegin添加全局请求头\n\n- 实现RequestInterceptor接口\n\n```java\n\n/**\n* 实现RequestInterceptor接口的apply方法\n*/\n@Configuration\npublic class FeignRequestInterceptor implements RequestInterceptor {\n    @Override\n    public void apply(RequestTemplate requestTemplate) {\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder\n                .getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        Enumeration<String> headerNames = request.getHeaderNames();\n        if (headerNames != null) {\n            while (headerNames.hasMoreElements()) {\n                String name = headerNames.nextElement();\n                String values = request.getHeader(name);\n                requestTemplate.header(name, values);\n\n            }\n        }\n    }\n}\n\n```\n\n- 在`@FeginClient`注释里`configuration`所填入的类文件中添加上面的拦截器\n\n  > 比如 \n  >\n  > ```java\n  > // configuration指定的类为FeignConfig\n  > \n  > @FeignClient(name = \"${TinyConfigServiceName}\",path=\"/config\",configuration = FeignConfig.class)\n  > ```\n  - 在FeignConfig类中添加拦截器\n\n    ```java\n    @Configuration\n    public class FeignConfig {\n        @Bean\n        public RequestInterceptor requestInterceptor(){\n            return new FeignRequestInterceptor();\n        }\n    }\n    ```\n\n    \n\n## RestTemplate添加全局请求头\n\n- 编写拦截器,实现`ClientHttpRequestInterceptor`接口的`intercept`方法\n\n  ```java\n  public class MyInterceptor implements ClientHttpRequestInterceptor {\n      @Override\n      public ClientHttpResponse intercept(HttpRequest httpRequest, byte[] bytes, ClientHttpRequestExecution clientHttpRequestExecution) throws IOException {\n          HttpHeaders httpHeaders=httpRequest.getHeaders();\n          ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder\n                  .getRequestAttributes();\n          HttpServletRequest request = attributes.getRequest();\n          Enumeration<String> headerNames = request.getHeaderNames();\n          if (headerNames != null) {\n              while (headerNames.hasMoreElements()) {\n                  String name = headerNames.nextElement();\n                  String values = request.getHeader(name);\n                  httpHeaders.add(name, values);\n              }\n          }\n          return clientHttpRequestExecution.execute(httpRequest,bytes);\n      }\n  }\n  ```\n\n  \n\n- 在springboot的启动类里添加`RestTemplate`\n\n  ```java\n  @SpringBootApplication\n  public class DemoApplication {\n  \n      public static void main(String[] args) {\n          SpringApplication.run(DemoApplication.class, args);\n      }\n  \n      //ioc添加RestTemplate\n      @Bean\n      public RestTemplate restTemplate(){\n          MyInterceptor myInterceptor=new MyInterceptor();\n          RestTemplate restTemplate=new RestTemplate();\n          restTemplate.setInterceptors(Collections.singletonList(myInterceptor));\n          return restTemplate;\n      }\n  \n  }\n  ```\n\n  ","source":"_posts/spring/fegin-resttemplate-addheard.md","raw":"---\ntitle: Fegin和RestTemplate添加全局请求头\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:14:43\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Fegin\n- Resttemplate\ncategories:\n- Spring\n---\n\n## Fegin添加全局请求头\n\n- 实现RequestInterceptor接口\n\n```java\n\n/**\n* 实现RequestInterceptor接口的apply方法\n*/\n@Configuration\npublic class FeignRequestInterceptor implements RequestInterceptor {\n    @Override\n    public void apply(RequestTemplate requestTemplate) {\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder\n                .getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        Enumeration<String> headerNames = request.getHeaderNames();\n        if (headerNames != null) {\n            while (headerNames.hasMoreElements()) {\n                String name = headerNames.nextElement();\n                String values = request.getHeader(name);\n                requestTemplate.header(name, values);\n\n            }\n        }\n    }\n}\n\n```\n\n- 在`@FeginClient`注释里`configuration`所填入的类文件中添加上面的拦截器\n\n  > 比如 \n  >\n  > ```java\n  > // configuration指定的类为FeignConfig\n  > \n  > @FeignClient(name = \"${TinyConfigServiceName}\",path=\"/config\",configuration = FeignConfig.class)\n  > ```\n  - 在FeignConfig类中添加拦截器\n\n    ```java\n    @Configuration\n    public class FeignConfig {\n        @Bean\n        public RequestInterceptor requestInterceptor(){\n            return new FeignRequestInterceptor();\n        }\n    }\n    ```\n\n    \n\n## RestTemplate添加全局请求头\n\n- 编写拦截器,实现`ClientHttpRequestInterceptor`接口的`intercept`方法\n\n  ```java\n  public class MyInterceptor implements ClientHttpRequestInterceptor {\n      @Override\n      public ClientHttpResponse intercept(HttpRequest httpRequest, byte[] bytes, ClientHttpRequestExecution clientHttpRequestExecution) throws IOException {\n          HttpHeaders httpHeaders=httpRequest.getHeaders();\n          ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder\n                  .getRequestAttributes();\n          HttpServletRequest request = attributes.getRequest();\n          Enumeration<String> headerNames = request.getHeaderNames();\n          if (headerNames != null) {\n              while (headerNames.hasMoreElements()) {\n                  String name = headerNames.nextElement();\n                  String values = request.getHeader(name);\n                  httpHeaders.add(name, values);\n              }\n          }\n          return clientHttpRequestExecution.execute(httpRequest,bytes);\n      }\n  }\n  ```\n\n  \n\n- 在springboot的启动类里添加`RestTemplate`\n\n  ```java\n  @SpringBootApplication\n  public class DemoApplication {\n  \n      public static void main(String[] args) {\n          SpringApplication.run(DemoApplication.class, args);\n      }\n  \n      //ioc添加RestTemplate\n      @Bean\n      public RestTemplate restTemplate(){\n          MyInterceptor myInterceptor=new MyInterceptor();\n          RestTemplate restTemplate=new RestTemplate();\n          restTemplate.setInterceptors(Collections.singletonList(myInterceptor));\n          return restTemplate;\n      }\n  \n  }\n  ```\n\n  ","slug":"spring/fegin-resttemplate-addheard","published":1,"updated":"2021-10-08T07:57:24.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehb004lvpuc7hlshdqd","content":"<h2 id=\"Fegin添加全局请求头\"><a href=\"#Fegin添加全局请求头\" class=\"headerlink\" title=\"Fegin添加全局请求头\"></a>Fegin添加全局请求头</h2><ul>\n<li>实现RequestInterceptor接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 实现RequestInterceptor接口的apply方法</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FeignRequestInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">RequestInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">apply</span><span class=\"params\">(RequestTemplate requestTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ServletRequestAttributes</span> <span class=\"variable\">attributes</span> <span class=\"operator\">=</span> (ServletRequestAttributes) RequestContextHolder</span><br><span class=\"line\">                .getRequestAttributes();</span><br><span class=\"line\">        <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> attributes.getRequest();</span><br><span class=\"line\">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (headerNames != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> headerNames.nextElement();</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">values</span> <span class=\"operator\">=</span> request.getHeader(name);</span><br><span class=\"line\">                requestTemplate.header(name, values);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>在<code>@FeginClient</code>注释里<code>configuration</code>所填入的类文件中添加上面的拦截器</p>\n<blockquote>\n<p>比如 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// configuration指定的类为FeignConfig</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient(name = &quot;$&#123;TinyConfigServiceName&#125;&quot;,path=&quot;/config&quot;,configuration = FeignConfig.class)</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li><p>在FeignConfig类中添加拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FeignConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RequestInterceptor <span class=\"title function_\">requestInterceptor</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FeignRequestInterceptor</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"RestTemplate添加全局请求头\"><a href=\"#RestTemplate添加全局请求头\" class=\"headerlink\" title=\"RestTemplate添加全局请求头\"></a>RestTemplate添加全局请求头</h2><ul>\n<li><p>编写拦截器,实现<code>ClientHttpRequestInterceptor</code>接口的<code>intercept</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClientHttpRequestInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ClientHttpResponse <span class=\"title function_\">intercept</span><span class=\"params\">(HttpRequest httpRequest, <span class=\"type\">byte</span>[] bytes, ClientHttpRequestExecution clientHttpRequestExecution)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        HttpHeaders httpHeaders=httpRequest.getHeaders();</span><br><span class=\"line\">        <span class=\"type\">ServletRequestAttributes</span> <span class=\"variable\">attributes</span> <span class=\"operator\">=</span> (ServletRequestAttributes) RequestContextHolder</span><br><span class=\"line\">                .getRequestAttributes();</span><br><span class=\"line\">        <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> attributes.getRequest();</span><br><span class=\"line\">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (headerNames != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> headerNames.nextElement();</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">values</span> <span class=\"operator\">=</span> request.getHeader(name);</span><br><span class=\"line\">                httpHeaders.add(name, values);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clientHttpRequestExecution.execute(httpRequest,bytes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>在springboot的启动类里添加<code>RestTemplate</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//ioc添加RestTemplate</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        MyInterceptor myInterceptor=<span class=\"keyword\">new</span> <span class=\"title class_\">MyInterceptor</span>();</span><br><span class=\"line\">        RestTemplate restTemplate=<span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">        restTemplate.setInterceptors(Collections.singletonList(myInterceptor));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"Fegin添加全局请求头\"><a href=\"#Fegin添加全局请求头\" class=\"headerlink\" title=\"Fegin添加全局请求头\"></a>Fegin添加全局请求头</h2><ul>\n<li>实现RequestInterceptor接口</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 实现RequestInterceptor接口的apply方法</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FeignRequestInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">RequestInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">apply</span><span class=\"params\">(RequestTemplate requestTemplate)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ServletRequestAttributes</span> <span class=\"variable\">attributes</span> <span class=\"operator\">=</span> (ServletRequestAttributes) RequestContextHolder</span><br><span class=\"line\">                .getRequestAttributes();</span><br><span class=\"line\">        <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> attributes.getRequest();</span><br><span class=\"line\">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (headerNames != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> headerNames.nextElement();</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">values</span> <span class=\"operator\">=</span> request.getHeader(name);</span><br><span class=\"line\">                requestTemplate.header(name, values);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>在<code>@FeginClient</code>注释里<code>configuration</code>所填入的类文件中添加上面的拦截器</p>\n<blockquote>\n<p>比如 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// configuration指定的类为FeignConfig</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@FeignClient(name = &quot;$&#123;TinyConfigServiceName&#125;&quot;,path=&quot;/config&quot;,configuration = FeignConfig.class)</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li><p>在FeignConfig类中添加拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FeignConfig</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RequestInterceptor <span class=\"title function_\">requestInterceptor</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FeignRequestInterceptor</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"RestTemplate添加全局请求头\"><a href=\"#RestTemplate添加全局请求头\" class=\"headerlink\" title=\"RestTemplate添加全局请求头\"></a>RestTemplate添加全局请求头</h2><ul>\n<li><p>编写拦截器,实现<code>ClientHttpRequestInterceptor</code>接口的<code>intercept</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ClientHttpRequestInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ClientHttpResponse <span class=\"title function_\">intercept</span><span class=\"params\">(HttpRequest httpRequest, <span class=\"type\">byte</span>[] bytes, ClientHttpRequestExecution clientHttpRequestExecution)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        HttpHeaders httpHeaders=httpRequest.getHeaders();</span><br><span class=\"line\">        <span class=\"type\">ServletRequestAttributes</span> <span class=\"variable\">attributes</span> <span class=\"operator\">=</span> (ServletRequestAttributes) RequestContextHolder</span><br><span class=\"line\">                .getRequestAttributes();</span><br><span class=\"line\">        <span class=\"type\">HttpServletRequest</span> <span class=\"variable\">request</span> <span class=\"operator\">=</span> attributes.getRequest();</span><br><span class=\"line\">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (headerNames != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> headerNames.nextElement();</span><br><span class=\"line\">                <span class=\"type\">String</span> <span class=\"variable\">values</span> <span class=\"operator\">=</span> request.getHeader(name);</span><br><span class=\"line\">                httpHeaders.add(name, values);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clientHttpRequestExecution.execute(httpRequest,bytes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>在springboot的启动类里添加<code>RestTemplate</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DemoApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//ioc添加RestTemplate</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RestTemplate <span class=\"title function_\">restTemplate</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        MyInterceptor myInterceptor=<span class=\"keyword\">new</span> <span class=\"title class_\">MyInterceptor</span>();</span><br><span class=\"line\">        RestTemplate restTemplate=<span class=\"keyword\">new</span> <span class=\"title class_\">RestTemplate</span>();</span><br><span class=\"line\">        restTemplate.setInterceptors(Collections.singletonList(myInterceptor));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"创建一个自定义注解","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-06-22T08:23:56.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 前言\n\n平时在用springBoot的使用，常常会用到`@Service`，`@Compent`等等注解，简化了我们的开发流程，提升了开发效率.那如何自己来写一个注解呢？下面就来介绍一下。\n\n\n\n## 写一个注解\n\n创建一个注解主要分两部分，一部分是创建**注解类**，一部分是创建一个**切面类**。\n\n### 创建注解类\n\n```java\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyAnn {\n    String value() default \"d\";\n}\n```\n\n创建注解类的关键字就是`@interface`，这个注解类设置了一个`value`变量，默认值为d；\n\n在注解类上面还有`@Target`和`@Retention`注解，下面来说说创建注解类时需要用到的几个注解：\n\n#### `@Target`\n\n用来标记这个注解可以用于哪些地方，与`ElementType`枚举类搭配使用，那这个枚举类里面有什么内容呢？\n\n```java\npublic enum ElementType {\n    /** 类，接口（包括注释类型）或枚举声明*/\n    TYPE,\n\n    /** 字段声明（包括枚举常量）*/\n    FIELD,\n\n    /** 方法声明*/\n    METHOD,\n\n    /** 形式参数（形参-调用方法时传入的参数）声明 */\n    PARAMETER,\n\n    /** 构造函数声明 */\n    CONSTRUCTOR,\n\n    /** 局部变量声明 */\n    LOCAL_VARIABLE,\n\n    /** 注释类型声明 */\n    ANNOTATION_TYPE,\n\n    /** 包声明 */\n    PACKAGE,\n\n    /**\n     * 类型参数声明\n     * java8新特性：\n     * @since 1.8\n     */\n    TYPE_PARAMETER,\n\n    /**\n     * 任何类型声明 \n     * java8新特性：\n     * @since 1.8\n     */\n    TYPE_USE\n}\n```\n\n#### `@Retention`\n\n该注解表示自定义注解的生命周期\n\n```java\npublic enum RetentionPolicy {\n    /**\n     * 注释将被编译器丢弃。\n     */\n    SOURCE,\n\n    /**\n     * 注释由编译器记录在类文件中\n     * 但不必在运行时由VM保留。 这是默认值\n     */\n    CLASS,\n\n    /**\n   \t *注释由编译器记录在类文件中，并且\n     *在运行时由VM保留，因此可以以反射方式读取它们。\n     */\n    RUNTIME\n}\n\n```\n\n## 写一个切面类\n\n因为用到了切面，所以我们要先导入`Spring AOP`这个依赖包。\n\n```xml\n<!--SpringBoot项目导入AOP-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n### 创建切面类\n\n```java\n@Aspect\n@Component\npublic class MyAnnAop {\n    private Logger logger= LoggerFactory.getLogger(MyAnnAop.class);\n    @Pointcut(\"@annotation(com.example.demo.annotation.MyAnn)\")\n    public void ann(){\n    }\n    @Before(\"ann()\")\n    public void before(JoinPoint joinPoint){\n        logger.info(\"打印：开始前\");\n    }\n    @AfterReturning(value = \"ann()\",returning = \"res\")\n    public Object dochange(JoinPoint joinPoint,Object res){\n        logger.info(\"AfterReturning通知开始-获取数据:{}\",res);\n        //获取数据\n        Map<String,String> map= (Map<String, String>) res;\n        //添加新值\n        map.put(\"s1\",\"我是在AOP中添加的新值\");\n        return map;\n    }\n}\n```\n\n### Spring AOP说明\n\n> 具体可以查阅Spring AOP相关资料\n\n| 注解              | 说明                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| `@Before`         | 前置通知，在连接点方法前调用                                 |\n| `@Around`         | 环绕通知，它将覆盖原有方法，但是允许你通过反射调用原有方法   |\n| `@After`          | 后置通知，在连接点方法后调用                                 |\n| `@AfterReturning` | 返回通知，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生异常 |\n| `@AfterThrowing`  | 异常通知，当连接点方法异常时调用                             |\n\n## 使用自定义的注解\n\n这里使用普通的`SpringBoot`来使用注解，创建一个**Service**,在里面使用注解，然后才控制层调用\n\n```java\n//服务层\n@Service\npublic class TestService {\n    @MyAnn\n    public Map test(){\n        Map<String,String>  map=new HashMap<>();\n        map.put(\"t1\",\"我是在Service设置的值\");\n        return map;\n    }\n}\n\n//控制层\n@RestController\npublic class Test2 {\n    private Logger logger= LoggerFactory.getLogger(Test2.class);\n\n    @Autowired\n    private TestService testService;\n\n    @GetMapping(\"/test\")\n    public String test(String id){\n        Map<String,String> s=testService.test();\n        logger.info(\"控制层输出：{}\",s.get(\"s1\"));\n        return \"sccess\";\n    }\n}\n```\n\n#### 输出\n\n```shell\ncom.example.demo.aop.MyAnnAop : AfterReturning通知开始-获取数据:{t1=我是在Service设置的值}\ncom.example.demo.web.Test2    : 控制层输出：我是在AOP中添加的新值\n```\n\n## 注意事项\n\n上面那样使用注解是没问题的，但是如果是下面这样使用，`AOP`就会**失效**\n\n```java\n@RestController\npublic class Test2 {\n    private Logger logger= LoggerFactory.getLogger(Test2.class);\n\n    @Autowired\n    private TestService testService;\n\n    @GetMapping(\"/test\")\n    public String test(String id){\n        Map<String,String> s=this.test2();\n        logger.info(\"控制层输出：{}\",s.get(\"s1\"));\n        return \"sccess\";\n    }\n\n    @MyAnn\n    public Map test2(){\n        Map<String,String>  map=new HashMap<>();\n        map.put(\"t1\",\"我是在控制层设置的值\");\n        return map;\n    }\n}\n```\n\n#### 输出\n\n```shell\ncom.example.demo.web.Test2       : 控制层输出：null\n```\n\n这是应为内部方法调用，调用的是具体方法，并没有调用使用AOP后生成的代理方法\n\n具体参考资料：\n\n- https://blog.csdn.net/Daybreak1209/article/details/82982674\n- https://blog.csdn.net/u013151053/article/details/106124048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase\n- https://zhewuzhou.github.io/2018/09/01/Spring_AOP_Trap/","source":"_posts/spring/apring-aop-ann.md","raw":"---\ntitle: 创建一个自定义注解\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-06-22 16:23:56\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Spring AOP\n- 注解\ncategories:\n- Spring\n---\n\n## 前言\n\n平时在用springBoot的使用，常常会用到`@Service`，`@Compent`等等注解，简化了我们的开发流程，提升了开发效率.那如何自己来写一个注解呢？下面就来介绍一下。\n\n\n\n## 写一个注解\n\n创建一个注解主要分两部分，一部分是创建**注解类**，一部分是创建一个**切面类**。\n\n### 创建注解类\n\n```java\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyAnn {\n    String value() default \"d\";\n}\n```\n\n创建注解类的关键字就是`@interface`，这个注解类设置了一个`value`变量，默认值为d；\n\n在注解类上面还有`@Target`和`@Retention`注解，下面来说说创建注解类时需要用到的几个注解：\n\n#### `@Target`\n\n用来标记这个注解可以用于哪些地方，与`ElementType`枚举类搭配使用，那这个枚举类里面有什么内容呢？\n\n```java\npublic enum ElementType {\n    /** 类，接口（包括注释类型）或枚举声明*/\n    TYPE,\n\n    /** 字段声明（包括枚举常量）*/\n    FIELD,\n\n    /** 方法声明*/\n    METHOD,\n\n    /** 形式参数（形参-调用方法时传入的参数）声明 */\n    PARAMETER,\n\n    /** 构造函数声明 */\n    CONSTRUCTOR,\n\n    /** 局部变量声明 */\n    LOCAL_VARIABLE,\n\n    /** 注释类型声明 */\n    ANNOTATION_TYPE,\n\n    /** 包声明 */\n    PACKAGE,\n\n    /**\n     * 类型参数声明\n     * java8新特性：\n     * @since 1.8\n     */\n    TYPE_PARAMETER,\n\n    /**\n     * 任何类型声明 \n     * java8新特性：\n     * @since 1.8\n     */\n    TYPE_USE\n}\n```\n\n#### `@Retention`\n\n该注解表示自定义注解的生命周期\n\n```java\npublic enum RetentionPolicy {\n    /**\n     * 注释将被编译器丢弃。\n     */\n    SOURCE,\n\n    /**\n     * 注释由编译器记录在类文件中\n     * 但不必在运行时由VM保留。 这是默认值\n     */\n    CLASS,\n\n    /**\n   \t *注释由编译器记录在类文件中，并且\n     *在运行时由VM保留，因此可以以反射方式读取它们。\n     */\n    RUNTIME\n}\n\n```\n\n## 写一个切面类\n\n因为用到了切面，所以我们要先导入`Spring AOP`这个依赖包。\n\n```xml\n<!--SpringBoot项目导入AOP-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n### 创建切面类\n\n```java\n@Aspect\n@Component\npublic class MyAnnAop {\n    private Logger logger= LoggerFactory.getLogger(MyAnnAop.class);\n    @Pointcut(\"@annotation(com.example.demo.annotation.MyAnn)\")\n    public void ann(){\n    }\n    @Before(\"ann()\")\n    public void before(JoinPoint joinPoint){\n        logger.info(\"打印：开始前\");\n    }\n    @AfterReturning(value = \"ann()\",returning = \"res\")\n    public Object dochange(JoinPoint joinPoint,Object res){\n        logger.info(\"AfterReturning通知开始-获取数据:{}\",res);\n        //获取数据\n        Map<String,String> map= (Map<String, String>) res;\n        //添加新值\n        map.put(\"s1\",\"我是在AOP中添加的新值\");\n        return map;\n    }\n}\n```\n\n### Spring AOP说明\n\n> 具体可以查阅Spring AOP相关资料\n\n| 注解              | 说明                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| `@Before`         | 前置通知，在连接点方法前调用                                 |\n| `@Around`         | 环绕通知，它将覆盖原有方法，但是允许你通过反射调用原有方法   |\n| `@After`          | 后置通知，在连接点方法后调用                                 |\n| `@AfterReturning` | 返回通知，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生异常 |\n| `@AfterThrowing`  | 异常通知，当连接点方法异常时调用                             |\n\n## 使用自定义的注解\n\n这里使用普通的`SpringBoot`来使用注解，创建一个**Service**,在里面使用注解，然后才控制层调用\n\n```java\n//服务层\n@Service\npublic class TestService {\n    @MyAnn\n    public Map test(){\n        Map<String,String>  map=new HashMap<>();\n        map.put(\"t1\",\"我是在Service设置的值\");\n        return map;\n    }\n}\n\n//控制层\n@RestController\npublic class Test2 {\n    private Logger logger= LoggerFactory.getLogger(Test2.class);\n\n    @Autowired\n    private TestService testService;\n\n    @GetMapping(\"/test\")\n    public String test(String id){\n        Map<String,String> s=testService.test();\n        logger.info(\"控制层输出：{}\",s.get(\"s1\"));\n        return \"sccess\";\n    }\n}\n```\n\n#### 输出\n\n```shell\ncom.example.demo.aop.MyAnnAop : AfterReturning通知开始-获取数据:{t1=我是在Service设置的值}\ncom.example.demo.web.Test2    : 控制层输出：我是在AOP中添加的新值\n```\n\n## 注意事项\n\n上面那样使用注解是没问题的，但是如果是下面这样使用，`AOP`就会**失效**\n\n```java\n@RestController\npublic class Test2 {\n    private Logger logger= LoggerFactory.getLogger(Test2.class);\n\n    @Autowired\n    private TestService testService;\n\n    @GetMapping(\"/test\")\n    public String test(String id){\n        Map<String,String> s=this.test2();\n        logger.info(\"控制层输出：{}\",s.get(\"s1\"));\n        return \"sccess\";\n    }\n\n    @MyAnn\n    public Map test2(){\n        Map<String,String>  map=new HashMap<>();\n        map.put(\"t1\",\"我是在控制层设置的值\");\n        return map;\n    }\n}\n```\n\n#### 输出\n\n```shell\ncom.example.demo.web.Test2       : 控制层输出：null\n```\n\n这是应为内部方法调用，调用的是具体方法，并没有调用使用AOP后生成的代理方法\n\n具体参考资料：\n\n- https://blog.csdn.net/Daybreak1209/article/details/82982674\n- https://blog.csdn.net/u013151053/article/details/106124048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase\n- https://zhewuzhou.github.io/2018/09/01/Spring_AOP_Trap/","slug":"spring/apring-aop-ann","published":1,"updated":"2021-10-08T07:57:24.188Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehc004pvpucb2a9d9jm","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>平时在用springBoot的使用，常常会用到<code>@Service</code>，<code>@Compent</code>等等注解，简化了我们的开发流程，提升了开发效率.那如何自己来写一个注解呢？下面就来介绍一下。</p>\n<h2 id=\"写一个注解\"><a href=\"#写一个注解\" class=\"headerlink\" title=\"写一个注解\"></a>写一个注解</h2><p>创建一个注解主要分两部分，一部分是创建<strong>注解类</strong>，一部分是创建一个<strong>切面类</strong>。</p>\n<h3 id=\"创建注解类\"><a href=\"#创建注解类\" class=\"headerlink\" title=\"创建注解类\"></a>创建注解类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnn &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;d&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建注解类的关键字就是<code>@interface</code>，这个注解类设置了一个<code>value</code>变量，默认值为d；</p>\n<p>在注解类上面还有<code>@Target</code>和<code>@Retention</code>注解，下面来说说创建注解类时需要用到的几个注解：</p>\n<h4 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"@Target\"></a><code>@Target</code></h4><p>用来标记这个注解可以用于哪些地方，与<code>ElementType</code>枚举类搭配使用，那这个枚举类里面有什么内容呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ElementType</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 类，接口（包括注释类型）或枚举声明*/</span></span><br><span class=\"line\">    TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 字段声明（包括枚举常量）*/</span></span><br><span class=\"line\">    FIELD,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 方法声明*/</span></span><br><span class=\"line\">    METHOD,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 形式参数（形参-调用方法时传入的参数）声明 */</span></span><br><span class=\"line\">    PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 构造函数声明 */</span></span><br><span class=\"line\">    CONSTRUCTOR,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 局部变量声明 */</span></span><br><span class=\"line\">    LOCAL_VARIABLE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 注释类型声明 */</span></span><br><span class=\"line\">    ANNOTATION_TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 包声明 */</span></span><br><span class=\"line\">    PACKAGE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 类型参数声明</span></span><br><span class=\"line\"><span class=\"comment\">     * java8新特性：</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TYPE_PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 任何类型声明 </span></span><br><span class=\"line\"><span class=\"comment\">     * java8新特性：</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TYPE_USE</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a><code>@Retention</code></h4><p>该注解表示自定义注解的生命周期</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">RetentionPolicy</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注释将被编译器丢弃。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    SOURCE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注释由编译器记录在类文件中</span></span><br><span class=\"line\"><span class=\"comment\">     * 但不必在运行时由VM保留。 这是默认值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    CLASS,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   \t *注释由编译器记录在类文件中，并且</span></span><br><span class=\"line\"><span class=\"comment\">     *在运行时由VM保留，因此可以以反射方式读取它们。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RUNTIME</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"写一个切面类\"><a href=\"#写一个切面类\" class=\"headerlink\" title=\"写一个切面类\"></a>写一个切面类</h2><p>因为用到了切面，所以我们要先导入<code>Spring AOP</code>这个依赖包。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--SpringBoot项目导入AOP--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建切面类\"><a href=\"#创建切面类\" class=\"headerlink\" title=\"创建切面类\"></a>创建切面类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAnnAop</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger= LoggerFactory.getLogger(MyAnnAop.class);</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;@annotation(com.example.demo.annotation.MyAnn)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ann</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;ann()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">(JoinPoint joinPoint)</span>&#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;打印：开始前&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(value = &quot;ann()&quot;,returning = &quot;res&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">dochange</span><span class=\"params\">(JoinPoint joinPoint,Object res)</span>&#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;AfterReturning通知开始-获取数据:&#123;&#125;&quot;</span>,res);</span><br><span class=\"line\">        <span class=\"comment\">//获取数据</span></span><br><span class=\"line\">        Map&lt;String,String&gt; map= (Map&lt;String, String&gt;) res;</span><br><span class=\"line\">        <span class=\"comment\">//添加新值</span></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;s1&quot;</span>,<span class=\"string\">&quot;我是在AOP中添加的新值&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Spring-AOP说明\"><a href=\"#Spring-AOP说明\" class=\"headerlink\" title=\"Spring AOP说明\"></a>Spring AOP说明</h3><blockquote>\n<p>具体可以查阅Spring AOP相关资料</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>@Before</code></td>\n<td>前置通知，在连接点方法前调用</td>\n</tr>\n<tr>\n<td><code>@Around</code></td>\n<td>环绕通知，它将覆盖原有方法，但是允许你通过反射调用原有方法</td>\n</tr>\n<tr>\n<td><code>@After</code></td>\n<td>后置通知，在连接点方法后调用</td>\n</tr>\n<tr>\n<td><code>@AfterReturning</code></td>\n<td>返回通知，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生异常</td>\n</tr>\n<tr>\n<td><code>@AfterThrowing</code></td>\n<td>异常通知，当连接点方法异常时调用</td>\n</tr>\n</tbody></table>\n<h2 id=\"使用自定义的注解\"><a href=\"#使用自定义的注解\" class=\"headerlink\" title=\"使用自定义的注解\"></a>使用自定义的注解</h2><p>这里使用普通的<code>SpringBoot</code>来使用注解，创建一个<strong>Service</strong>,在里面使用注解，然后才控制层调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//服务层</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@MyAnn</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt;  map=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;t1&quot;</span>,<span class=\"string\">&quot;我是在Service设置的值&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制层</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger= LoggerFactory.getLogger(Test2.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestService testService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">test</span><span class=\"params\">(String id)</span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; s=testService.test();</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;控制层输出：&#123;&#125;&quot;</span>,s.get(<span class=\"string\">&quot;s1&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;sccess&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">com.example.demo.aop.MyAnnAop : AfterReturning通知开始-获取数据:&#123;t1=我是在Service设置的值&#125;</span><br><span class=\"line\">com.example.demo.web.Test2    : 控制层输出：我是在AOP中添加的新值</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>上面那样使用注解是没问题的，但是如果是下面这样使用，<code>AOP</code>就会<strong>失效</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger= LoggerFactory.getLogger(Test2.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestService testService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">test</span><span class=\"params\">(String id)</span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; s=<span class=\"built_in\">this</span>.test2();</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;控制层输出：&#123;&#125;&quot;</span>,s.get(<span class=\"string\">&quot;s1&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;sccess&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MyAnn</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt;  map=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;t1&quot;</span>,<span class=\"string\">&quot;我是在控制层设置的值&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">com.example.demo.web.Test2       : 控制层输出：null</span><br></pre></td></tr></table></figure>\n\n<p>这是应为内部方法调用，调用的是具体方法，并没有调用使用AOP后生成的代理方法</p>\n<p>具体参考资料：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/Daybreak1209/article/details/82982674\">https://blog.csdn.net/Daybreak1209/article/details/82982674</a></li>\n<li><a href=\"https://blog.csdn.net/u013151053/article/details/106124048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase\">https://blog.csdn.net/u013151053/article/details/106124048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase</a></li>\n<li><a href=\"https://zhewuzhou.github.io/2018/09/01/Spring_AOP_Trap/\">https://zhewuzhou.github.io/2018/09/01/Spring_AOP_Trap/</a></li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>平时在用springBoot的使用，常常会用到<code>@Service</code>，<code>@Compent</code>等等注解，简化了我们的开发流程，提升了开发效率.那如何自己来写一个注解呢？下面就来介绍一下。</p>\n<h2 id=\"写一个注解\"><a href=\"#写一个注解\" class=\"headerlink\" title=\"写一个注解\"></a>写一个注解</h2><p>创建一个注解主要分两部分，一部分是创建<strong>注解类</strong>，一部分是创建一个<strong>切面类</strong>。</p>\n<h3 id=\"创建注解类\"><a href=\"#创建注解类\" class=\"headerlink\" title=\"创建注解类\"></a>创建注解类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnn &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"string\">&quot;d&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建注解类的关键字就是<code>@interface</code>，这个注解类设置了一个<code>value</code>变量，默认值为d；</p>\n<p>在注解类上面还有<code>@Target</code>和<code>@Retention</code>注解，下面来说说创建注解类时需要用到的几个注解：</p>\n<h4 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"@Target\"></a><code>@Target</code></h4><p>用来标记这个注解可以用于哪些地方，与<code>ElementType</code>枚举类搭配使用，那这个枚举类里面有什么内容呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">ElementType</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 类，接口（包括注释类型）或枚举声明*/</span></span><br><span class=\"line\">    TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 字段声明（包括枚举常量）*/</span></span><br><span class=\"line\">    FIELD,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 方法声明*/</span></span><br><span class=\"line\">    METHOD,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 形式参数（形参-调用方法时传入的参数）声明 */</span></span><br><span class=\"line\">    PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 构造函数声明 */</span></span><br><span class=\"line\">    CONSTRUCTOR,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 局部变量声明 */</span></span><br><span class=\"line\">    LOCAL_VARIABLE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 注释类型声明 */</span></span><br><span class=\"line\">    ANNOTATION_TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 包声明 */</span></span><br><span class=\"line\">    PACKAGE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 类型参数声明</span></span><br><span class=\"line\"><span class=\"comment\">     * java8新特性：</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TYPE_PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 任何类型声明 </span></span><br><span class=\"line\"><span class=\"comment\">     * java8新特性：</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TYPE_USE</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a><code>@Retention</code></h4><p>该注解表示自定义注解的生命周期</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">RetentionPolicy</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注释将被编译器丢弃。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    SOURCE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注释由编译器记录在类文件中</span></span><br><span class=\"line\"><span class=\"comment\">     * 但不必在运行时由VM保留。 这是默认值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    CLASS,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   \t *注释由编译器记录在类文件中，并且</span></span><br><span class=\"line\"><span class=\"comment\">     *在运行时由VM保留，因此可以以反射方式读取它们。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RUNTIME</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"写一个切面类\"><a href=\"#写一个切面类\" class=\"headerlink\" title=\"写一个切面类\"></a>写一个切面类</h2><p>因为用到了切面，所以我们要先导入<code>Spring AOP</code>这个依赖包。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--SpringBoot项目导入AOP--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建切面类\"><a href=\"#创建切面类\" class=\"headerlink\" title=\"创建切面类\"></a>创建切面类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyAnnAop</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger= LoggerFactory.getLogger(MyAnnAop.class);</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut(&quot;@annotation(com.example.demo.annotation.MyAnn)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ann</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Before(&quot;ann()&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">(JoinPoint joinPoint)</span>&#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;打印：开始前&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning(value = &quot;ann()&quot;,returning = &quot;res&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">dochange</span><span class=\"params\">(JoinPoint joinPoint,Object res)</span>&#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;AfterReturning通知开始-获取数据:&#123;&#125;&quot;</span>,res);</span><br><span class=\"line\">        <span class=\"comment\">//获取数据</span></span><br><span class=\"line\">        Map&lt;String,String&gt; map= (Map&lt;String, String&gt;) res;</span><br><span class=\"line\">        <span class=\"comment\">//添加新值</span></span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;s1&quot;</span>,<span class=\"string\">&quot;我是在AOP中添加的新值&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Spring-AOP说明\"><a href=\"#Spring-AOP说明\" class=\"headerlink\" title=\"Spring AOP说明\"></a>Spring AOP说明</h3><blockquote>\n<p>具体可以查阅Spring AOP相关资料</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>@Before</code></td>\n<td>前置通知，在连接点方法前调用</td>\n</tr>\n<tr>\n<td><code>@Around</code></td>\n<td>环绕通知，它将覆盖原有方法，但是允许你通过反射调用原有方法</td>\n</tr>\n<tr>\n<td><code>@After</code></td>\n<td>后置通知，在连接点方法后调用</td>\n</tr>\n<tr>\n<td><code>@AfterReturning</code></td>\n<td>返回通知，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生异常</td>\n</tr>\n<tr>\n<td><code>@AfterThrowing</code></td>\n<td>异常通知，当连接点方法异常时调用</td>\n</tr>\n</tbody></table>\n<h2 id=\"使用自定义的注解\"><a href=\"#使用自定义的注解\" class=\"headerlink\" title=\"使用自定义的注解\"></a>使用自定义的注解</h2><p>这里使用普通的<code>SpringBoot</code>来使用注解，创建一个<strong>Service</strong>,在里面使用注解，然后才控制层调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//服务层</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@MyAnn</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt;  map=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;t1&quot;</span>,<span class=\"string\">&quot;我是在Service设置的值&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制层</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger= LoggerFactory.getLogger(Test2.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestService testService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">test</span><span class=\"params\">(String id)</span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; s=testService.test();</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;控制层输出：&#123;&#125;&quot;</span>,s.get(<span class=\"string\">&quot;s1&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;sccess&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">com.example.demo.aop.MyAnnAop : AfterReturning通知开始-获取数据:&#123;t1=我是在Service设置的值&#125;</span><br><span class=\"line\">com.example.demo.web.Test2    : 控制层输出：我是在AOP中添加的新值</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>上面那样使用注解是没问题的，但是如果是下面这样使用，<code>AOP</code>就会<strong>失效</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger= LoggerFactory.getLogger(Test2.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestService testService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">test</span><span class=\"params\">(String id)</span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; s=<span class=\"built_in\">this</span>.test2();</span><br><span class=\"line\">        logger.info(<span class=\"string\">&quot;控制层输出：&#123;&#125;&quot;</span>,s.get(<span class=\"string\">&quot;s1&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;sccess&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MyAnn</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map <span class=\"title function_\">test2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt;  map=<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">&quot;t1&quot;</span>,<span class=\"string\">&quot;我是在控制层设置的值&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">com.example.demo.web.Test2       : 控制层输出：null</span><br></pre></td></tr></table></figure>\n\n<p>这是应为内部方法调用，调用的是具体方法，并没有调用使用AOP后生成的代理方法</p>\n<p>具体参考资料：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/Daybreak1209/article/details/82982674\">https://blog.csdn.net/Daybreak1209/article/details/82982674</a></li>\n<li><a href=\"https://blog.csdn.net/u013151053/article/details/106124048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase\">https://blog.csdn.net/u013151053/article/details/106124048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase</a></li>\n<li><a href=\"https://zhewuzhou.github.io/2018/09/01/Spring_AOP_Trap/\">https://zhewuzhou.github.io/2018/09/01/Spring_AOP_Trap/</a></li>\n</ul>\n"},{"title":"Vue Cli3-11创建项目慢的问题","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-09-05T08:33:23.000Z","password":null,"summary":null,"_content":"## 前言\n\n  这几天刚学习vue，于是下载了最新的vue cli3.11来搭建项目，可是搭建的时候一直卡在下载插件见面，就是下面这张图。\n\n![vuecreate](/images/vuecreate.png)\n\n网上查了说不能用国内的镜像，WTF，不是说国内的更快吗？好吧，我换！！！\n\n## 下载nrm\n\n  看清楚哦，是nrm部署npm！！！nrm 是一个 `npm` 源管理器，允许你快速地在 `npm` 源间切换。执行以下命令安装。\n\n```shell\nsudo npm install -g nrm\n```\n\n### 测试nrm是否安装成功\n\n```shell\nnrm -V\n```\n\n如果输出版本号，则说明安装成功。\n\n## 切换npm源\n\n  ```shell\nnrm ls\n  ```\n\n此命令会列出npm的所有源\n\n![nrmls](/images/nrmls.png)\n\n可以看到我现在使用的是淘宝的源，现在把他切换到npm的源。\n\n```shell\nnrm use npm\n```\n\n![nrmuse](/images/nrmuse.png)\n\n## 再次创建vue项目\n\n```shell\nvue create rrr2\n```\n![vuecreate2](/images/vuecreate2.png)\n![vuecreate3](/images/vuecreate3.png)\n\n项目成功创建！！！\n","source":"_posts/vue/vue-cli3-11-problem.md","raw":"---\ntitle: Vue Cli3-11创建项目慢的问题\ntop: false\ncover: false\ntoc: true\nmathjax: true\ncategories:\n  - Vue\ntags:\n  - Vue\n  - Pit\ndate: 2019-09-05 16:33:23\npassword:\nsummary:\n---\n## 前言\n\n  这几天刚学习vue，于是下载了最新的vue cli3.11来搭建项目，可是搭建的时候一直卡在下载插件见面，就是下面这张图。\n\n![vuecreate](/images/vuecreate.png)\n\n网上查了说不能用国内的镜像，WTF，不是说国内的更快吗？好吧，我换！！！\n\n## 下载nrm\n\n  看清楚哦，是nrm部署npm！！！nrm 是一个 `npm` 源管理器，允许你快速地在 `npm` 源间切换。执行以下命令安装。\n\n```shell\nsudo npm install -g nrm\n```\n\n### 测试nrm是否安装成功\n\n```shell\nnrm -V\n```\n\n如果输出版本号，则说明安装成功。\n\n## 切换npm源\n\n  ```shell\nnrm ls\n  ```\n\n此命令会列出npm的所有源\n\n![nrmls](/images/nrmls.png)\n\n可以看到我现在使用的是淘宝的源，现在把他切换到npm的源。\n\n```shell\nnrm use npm\n```\n\n![nrmuse](/images/nrmuse.png)\n\n## 再次创建vue项目\n\n```shell\nvue create rrr2\n```\n![vuecreate2](/images/vuecreate2.png)\n![vuecreate3](/images/vuecreate3.png)\n\n项目成功创建！！！\n","slug":"vue/vue-cli3-11-problem","published":1,"updated":"2021-10-08T07:57:24.192Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehd004rvpucbkso5p9z","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  这几天刚学习vue，于是下载了最新的vue cli3.11来搭建项目，可是搭建的时候一直卡在下载插件见面，就是下面这张图。</p>\n<p><img src=\"/images/vuecreate.png\" alt=\"vuecreate\"></p>\n<p>网上查了说不能用国内的镜像，WTF，不是说国内的更快吗？好吧，我换！！！</p>\n<h2 id=\"下载nrm\"><a href=\"#下载nrm\" class=\"headerlink\" title=\"下载nrm\"></a>下载nrm</h2><p>  看清楚哦，是nrm部署npm！！！nrm 是一个 <code>npm</code> 源管理器，允许你快速地在 <code>npm</code> 源间切换。执行以下命令安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install -g nrm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试nrm是否安装成功\"><a href=\"#测试nrm是否安装成功\" class=\"headerlink\" title=\"测试nrm是否安装成功\"></a>测试nrm是否安装成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm -V</span><br></pre></td></tr></table></figure>\n\n<p>如果输出版本号，则说明安装成功。</p>\n<h2 id=\"切换npm源\"><a href=\"#切换npm源\" class=\"headerlink\" title=\"切换npm源\"></a>切换npm源</h2>  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br></pre></td></tr></table></figure>\n\n<p>此命令会列出npm的所有源</p>\n<p><img src=\"/images/nrmls.png\" alt=\"nrmls\"></p>\n<p>可以看到我现在使用的是淘宝的源，现在把他切换到npm的源。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm use npm</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/nrmuse.png\" alt=\"nrmuse\"></p>\n<h2 id=\"再次创建vue项目\"><a href=\"#再次创建vue项目\" class=\"headerlink\" title=\"再次创建vue项目\"></a>再次创建vue项目</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue create rrr2</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/vuecreate2.png\" alt=\"vuecreate2\"><br><img src=\"/images/vuecreate3.png\" alt=\"vuecreate3\"></p>\n<p>项目成功创建！！！</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  这几天刚学习vue，于是下载了最新的vue cli3.11来搭建项目，可是搭建的时候一直卡在下载插件见面，就是下面这张图。</p>\n<p><img src=\"/images/vuecreate.png\" alt=\"vuecreate\"></p>\n<p>网上查了说不能用国内的镜像，WTF，不是说国内的更快吗？好吧，我换！！！</p>\n<h2 id=\"下载nrm\"><a href=\"#下载nrm\" class=\"headerlink\" title=\"下载nrm\"></a>下载nrm</h2><p>  看清楚哦，是nrm部署npm！！！nrm 是一个 <code>npm</code> 源管理器，允许你快速地在 <code>npm</code> 源间切换。执行以下命令安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install -g nrm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试nrm是否安装成功\"><a href=\"#测试nrm是否安装成功\" class=\"headerlink\" title=\"测试nrm是否安装成功\"></a>测试nrm是否安装成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm -V</span><br></pre></td></tr></table></figure>\n\n<p>如果输出版本号，则说明安装成功。</p>\n<h2 id=\"切换npm源\"><a href=\"#切换npm源\" class=\"headerlink\" title=\"切换npm源\"></a>切换npm源</h2>  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br></pre></td></tr></table></figure>\n\n<p>此命令会列出npm的所有源</p>\n<p><img src=\"/images/nrmls.png\" alt=\"nrmls\"></p>\n<p>可以看到我现在使用的是淘宝的源，现在把他切换到npm的源。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm use npm</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/nrmuse.png\" alt=\"nrmuse\"></p>\n<h2 id=\"再次创建vue项目\"><a href=\"#再次创建vue项目\" class=\"headerlink\" title=\"再次创建vue项目\"></a>再次创建vue项目</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue create rrr2</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/vuecreate2.png\" alt=\"vuecreate2\"><br><img src=\"/images/vuecreate3.png\" alt=\"vuecreate3\"></p>\n<p>项目成功创建！！！</p>\n"},{"title":"小白学前端之TypeScript使用Vuex 4.0","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-07-29T08:45:15.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 简介\n\n官方介绍：Vuex 是一个专为 Vue.js 应用程序开发的**状态管理模式**。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n简单来说，Vuex 就像是前端的数据库或缓存，不管什么页面，只要 Vuex 里面有的数据，都可以去拿。\n\nVuex 分为 5 个部分：\n\n- State：是数据源，存放数据\n- Getters：可以取得 State 的数据，然后自定义组装返回新的数据\n- Mutations：可以改变 State 的数据，建议方法执行是同步的\n- Actions：可以异步执行 Mutations 里的方法\n- Modules：每个 Module 都有各自的 State、Getters、Mutations、Actions\n\n这 5 个部分相辅相成。\n\n## TypeScript 使用\n\n在 vue 项目根目录执行命令来进行 vuex 模块的安装\n\n```shell\nnpm install vuex@next --save\n```\n\n安装好后我们新建文件 `/src/store/store.ts` ,然后在里面定义 `InjectionKey` 和 `Store`\n\n```typescript\nimport { InjectionKey } from 'vue'\nimport { createStore, useStore as baseUseStore, Store } from 'vuex'\n\n// 定义 State 数据类型的接口\ninterface IState{\n}\n\n// 类型传递\nexport const key: InjectionKey<Store<IState>> = Symbol()\n\nexport const store = createStore<IState> ({ \n})\n\n// 用于组合式API setup() 里，省的每次都传入 key \nexport function useStore() {\n    return baseUseStore(key)\n}\n```\n\n然后在 `main.ts` 文件里使用上面定义的 vuex\n\n```typescript\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport { store,key } from './store/store'\n\ncreateApp(App)\n.use(store,key)\n.mount('#app')\n```\n\n## State\n\nState 是存储数据源的地方，所以我们可以在这里存储我们的数据，比如我这边定义一个 `name` 字段，需要在接口 `IState` 添加定义数据类型\n\n```typescript\ninterface IState{\n    name: string\n}\n```\n\n然后在 `createStore` 里添加数据\n\n```typescript\nexport const store = createStore<IState> ({ \n    state:{\n        name: 'ooooooh灰灰'\n    }\n})\n```\n\n数据我们已经定义好了，接下来就是要在页面访问这个数据了，下面提供了两种方式来访问 vuex 里的数据\n\n### 组合式 API 访问\n\n在组合式 API 中，我们可以直接导入刚才在 `/src/store/store.ts`  里定义的 `useStore()` 方法来访问 vuex 里的数据\n\n```typescript\nimport { defineComponent } from 'vue';\nimport { useStore } from './store/store'\n\nexport default defineComponent({\n\n  setup(){\n    let store = useStore()\n    // 访问 state 里的 name 数据\n    console.log(store.state.name)\n  }\n});\n```\n\n运行代码的话就会在控制台打印 **ooooooh灰灰**\n\n### ...toRefs() 访问所有字段\n\n如果要在页面访问的话，可以利用 `...toRefs()` 来直接展开 store.state 里的**所有字段**，然后在页面直接访问 vuex 的 state 里的字段\n\n```vue\n// App.vue\n<template>\n  <div>\n    {{ name }}\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent, toRefs} from 'vue';\n  import { useStore } from './store/store'\n\n  export default defineComponent({\n    \n    setup(){\n      let store = useStore()\n    \n      return {\n        // 展开 state 所有的字段\n        ...toRefs(store.state)\n      }\n    }\n  });\n</script>\n\n<style>\n\n</style>\n\n```\n\n### reactive 聚合单个字段\n\n如果你想**单个数据导入**的话，可以直接和页面数据一起放在 `reactive`\n\n```typescript\nimport { defineComponent, reactive, toRefs} from 'vue';\n  import { useStore } from './store/store'\n\n  export default defineComponent({\n    \n    setup(){\n      let store = useStore()\n    \t// 把 vuex 的 state 的数据放进 reactive 里\n      let params = reactive({\n        name: store.state.name\n      })\n      return {\n        ...toRefs(params),\n      }\n    }\n  });\n```\n\n### computed 访问单个字段\n\n也可以使用 `computed` 模块来访问数据，要先导入 vue 里的 `computed`\n\n```vue\n// App.vue\n<template>\n  <div>\n    {{ name }}\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent, computed} from 'vue';\n  import { useStore } from './store/store'\n\n  export default defineComponent({\n    \n    setup(){\n      let store = useStore()\n      \n      return {\n        name: computed(()=>store.state.name)\n      }\n    }\n  });\n</script>\n\n<style>\n\n</style>\n\n```\n\n## Getters\n\ngetters 里的方法在 `vuex/types/index.d.ts` 中是这样定义的\n\n```typescript\nexport type Getter<S, R> = (state: S, getters: any, rootState: R, rootGetters: any) => any;\n```\n\n**他有 4 个参数，分别是 state、getters、rootState、rootGetters**\n\n其中，**state** 可以取得同级中 state 里的数据，**getters** 可以取得同级中 getters 其他的方法返回的数据\n\n而 **rootState** 和 **rootGetters** 是在当当前 **Getters** 处于 **module** 中时，可以取得根部的 state 和 gatters 里的数据\n\n比如我们可以将 state 里的变量封装成一句话然后返回：\n\n```typescript\nexport const store = createStore<IState> ({ \n    state:{\n        name: 'ooooooh灰灰',\n    },\n    getters:{\n        newName(state):string{\n          \t// 通过 state 访问 name 字段\n            return '大家好！我是：'+state.name\n        }\n    }\n})\n```\n\n当我们要访问其他 getter 时，我们可以这样：\n\n```typescript\nexport const store = createStore<IState> ({ \n    state:{\n        name: 'ooooooh灰灰',\n        age: 20\n    },\n    getters:{\n        hello(state,getters):string{\n          \t// 通过 getters 访问其他 getter\n            return '大家好！我是：'+state.name+','+getters.ageInfo\n        },\n        ageInfo(state):string{\n            return '年龄：'+state.age\n        }\n    }\n})\n```\n\n### 组合式 API 访问\n\n我们可以在组合式 API 里像访问 state 的里数据一样访问 gatters 里的方法：\n\n```typescript\nimport { defineComponent } from 'vue';\nimport { useStore } from './store/store'\n\nexport default defineComponent({\n\n  setup(){\n    let store = useStore()\n    // 访问 getters 里的 hello 方法\n    console.log(store.getters.hello)\n  }\n});\n```\n\n此外，getters 也可以使用 `...toRefs()`、`computed` 这些方法来访问：\n\n```vue\n<template>\n  <div>\n    {{ hello }}\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent, computed, toRefs } from 'vue';\n  import { useStore } from './store/store'\n\n  export default defineComponent({\n    setup(){\n      let store = useStore()\n      return {\n        // 通过 computed 访问 getters 里的 hello \n        hello: computed(()=>store.getters.hello),\n        \n        // 通过 ...toRefs() 访问\n        // ...toRefs(store.getters),\n      }\n    }\n  });\n</script>\n\n<style>\n\n</style>\n\n```\n\n## Mutations\n\n如果你要改变 state 里的数据时，就要用到 Mutations 了，它可以提供改变 state 里数据的方法，它在 `vuex/types/index.d.ts` 中是这样定义的：\n\n```typescript\nexport type Mutation<S> = (state: S, payload?: any) => any;\n```\n\n其中 state 可以拿到 state 里的数据，payload 是自定义传入的参数，后面有个问号，代表这是可选项\n\n所以当我们要改变 state 的字段的值时，我们可以在 store.ts 中这样写代码 ：\n\n```typescript\nexport const store = createStore<IState> ({ \n    state:{\n        name: 'ooooooh灰灰',\n    },\n    mutations:{\n        changeName(state){\n            // 改变 state 中 name 的值\n            state.name = 'greycode'\n        }\n    }\n})\n```\n\n如果要自定义传入参数的话，就可以这样写：\n\n```typescript\nexport const store = createStore<IState> ({ \n    state:{\n        name: 'ooooooh灰灰',\n    },\n    mutations:{\n        changeName(state,newName:string){\n            // 传入自定义字段并设置\n            state.name = newName\n        }\n    }\n})\n```\n\n### 组合式 API 访问\n\n在组合式 API 中，我们可以用 `commit` 来提交执行这个方法：\n\n```typescript\nimport { defineComponent } from 'vue';\nimport { useStore } from './store/store'\n\nexport default defineComponent({\n\n  setup(){\n    let store = useStore()\n    let change = () => {\n      // 提交执行 mutations 中 changeName 方法\n      // store.commit('changeName')\n      \n      // 提交执行 mutations 中 changeName 方法,并传入自定义参数\n      store.commit('changeName','自定义的')\n    }\n    return {\n      change\n    }\n  }\n});\n```\n\n### ...mapMutations\n\n我们可以直接在组合式 API 中使用 `...mapMutations` 来获得 mutations 中的方法，然后直接在页面中调用这个方法\n\n```typescript\n  import { defineComponent } from 'vue';\n  import { mapMutations } from 'vuex';\n  import { useStore } from './store/store'\n\n  export default defineComponent({\n    \n    setup(){\n      let store = useStore()\n      return {\n        // 使用 ...mapMutations 来获得 mutations 中的方法\n        ...mapMutations(['changeName'])\n      }\n    }\n  });\n```\n\n然后直接在页面中使用：\n\n```vue\n<template>\n  <div>\n    <button type=\"button\" @click=\"changeName\">按钮</button>\n    \n    <!-- 也可以传入函数自定义参数 -->\n    <button type=\"button\" @click=\"changeName(’自定义名字‘)\">按钮</button>\n  </div>\n</template>\n```\n\n## Action\n\n当要异步改变 state 中的数据时，就要用到 Action 了，但是它不是直接改变 state 中的数据，而是通过异步执行 mutations 中的方法来间接改变 state 中的数据的 \n\n它在 `vuex/types/index.d.ts` 中是这样定义的：\n\n```typescript\nexport type Action<S, R> = ActionHandler<S, R> | ActionObject<S, R>;\n```\n\n它支持两种类型的数据，一个是 ActionHandler<S, R> ，另一个是 ActionObject<S, R>。其中 ActionObject 一般用于 Module 中的命名空间，它们的定义如下：\n\n```typescript\nexport type ActionHandler<S, R> = (this: Store<R>, injectee: ActionContext<S, R>, payload?: any) => any;\n\nexport interface ActionObject<S, R> {\n  root?: boolean;\n  handler: ActionHandler<S, R>;\n}\n```\n\n这里只讲下 ActionHandler ，另外一个等到 Module 模块中再讲。\n\n在 ActionHandler  中，它有 3 个参数，分别是 this、injectee、payload，其中 this 代表的是整个 Store 对象，injectee 是当前 Action 所在的上下文，payload 是可以自定义的传入参数\n\n所以我们可以这样使用它：\n\n```typescript\nexport const store = createStore<IState> ({ \n    state:{\n        name: 'ooooooh灰灰'\n    },\n\n    mutations:{\n        changeName(state){\n            state.name = '异步改名'\n        }\n    },\n    actions:{\n        asyncChange(ctx){\n          // 两秒后更改名字\n          setTimeout(() =>{\n            ctx.commit('changeName')\n          },2000)\n        }\n    }\n})\n```\n\n### 组合式 API 访问\n\n定义好 actions 后，我们可以在组合式 API 中用 `dispatch` 来分发 action：\n\n```typescript\nimport { defineComponent } from 'vue';\nimport { useStore } from './store/store'\n\nexport default defineComponent({\n\n  setup(){\n    let store = useStore()\n    let syncChange = () => {\n      // 执行 actions 中的 asyncChange 方法\n      store.dispatch('asyncChange')\n    }\n    return {\n      syncChange\n    }\n  }\n});\n```\n\n### ...mapActions\n\n也可以用 `...mapActions` 来直接获得 actions 中的方法：\n\n```typescript\nimport { defineComponent } from 'vue';\nimport { mapActions } from 'vuex';\nimport { useStore } from './store/store'\n\nexport default defineComponent({\n\n  setup(){\n    let store = useStore()\n    return {\n      ...mapActions(['asyncChange'])\n    }\n  }\n});\n```\n\n页面使用的话和 mutation 差不多，直接访问 actions 中的方法名就可以了：\n\n```vue\n<template>\n  <div>\n    <button type=\"button\" @click=\"asyncChange\">按钮</button>\n  </div>\n</template>\n```\n\n## 最后\n\n除此之外还有一个 Module 模块，不过一般小项目用不到而且内容也比较多，下次再学吧。\n","source":"_posts/vue/2CA7C67D02E74713A030F09651A5F164.md","raw":"---\ntitle: 小白学前端之TypeScript使用Vuex 4.0\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-07-29 16:45:15\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Vuex\n- Vue\n- TypeScript\ncategories:\n- Vue\n---\n\n## 简介\n\n官方介绍：Vuex 是一个专为 Vue.js 应用程序开发的**状态管理模式**。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。\n\n简单来说，Vuex 就像是前端的数据库或缓存，不管什么页面，只要 Vuex 里面有的数据，都可以去拿。\n\nVuex 分为 5 个部分：\n\n- State：是数据源，存放数据\n- Getters：可以取得 State 的数据，然后自定义组装返回新的数据\n- Mutations：可以改变 State 的数据，建议方法执行是同步的\n- Actions：可以异步执行 Mutations 里的方法\n- Modules：每个 Module 都有各自的 State、Getters、Mutations、Actions\n\n这 5 个部分相辅相成。\n\n## TypeScript 使用\n\n在 vue 项目根目录执行命令来进行 vuex 模块的安装\n\n```shell\nnpm install vuex@next --save\n```\n\n安装好后我们新建文件 `/src/store/store.ts` ,然后在里面定义 `InjectionKey` 和 `Store`\n\n```typescript\nimport { InjectionKey } from 'vue'\nimport { createStore, useStore as baseUseStore, Store } from 'vuex'\n\n// 定义 State 数据类型的接口\ninterface IState{\n}\n\n// 类型传递\nexport const key: InjectionKey<Store<IState>> = Symbol()\n\nexport const store = createStore<IState> ({ \n})\n\n// 用于组合式API setup() 里，省的每次都传入 key \nexport function useStore() {\n    return baseUseStore(key)\n}\n```\n\n然后在 `main.ts` 文件里使用上面定义的 vuex\n\n```typescript\nimport { createApp } from 'vue'\nimport App from './App.vue'\nimport { store,key } from './store/store'\n\ncreateApp(App)\n.use(store,key)\n.mount('#app')\n```\n\n## State\n\nState 是存储数据源的地方，所以我们可以在这里存储我们的数据，比如我这边定义一个 `name` 字段，需要在接口 `IState` 添加定义数据类型\n\n```typescript\ninterface IState{\n    name: string\n}\n```\n\n然后在 `createStore` 里添加数据\n\n```typescript\nexport const store = createStore<IState> ({ \n    state:{\n        name: 'ooooooh灰灰'\n    }\n})\n```\n\n数据我们已经定义好了，接下来就是要在页面访问这个数据了，下面提供了两种方式来访问 vuex 里的数据\n\n### 组合式 API 访问\n\n在组合式 API 中，我们可以直接导入刚才在 `/src/store/store.ts`  里定义的 `useStore()` 方法来访问 vuex 里的数据\n\n```typescript\nimport { defineComponent } from 'vue';\nimport { useStore } from './store/store'\n\nexport default defineComponent({\n\n  setup(){\n    let store = useStore()\n    // 访问 state 里的 name 数据\n    console.log(store.state.name)\n  }\n});\n```\n\n运行代码的话就会在控制台打印 **ooooooh灰灰**\n\n### ...toRefs() 访问所有字段\n\n如果要在页面访问的话，可以利用 `...toRefs()` 来直接展开 store.state 里的**所有字段**，然后在页面直接访问 vuex 的 state 里的字段\n\n```vue\n// App.vue\n<template>\n  <div>\n    {{ name }}\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent, toRefs} from 'vue';\n  import { useStore } from './store/store'\n\n  export default defineComponent({\n    \n    setup(){\n      let store = useStore()\n    \n      return {\n        // 展开 state 所有的字段\n        ...toRefs(store.state)\n      }\n    }\n  });\n</script>\n\n<style>\n\n</style>\n\n```\n\n### reactive 聚合单个字段\n\n如果你想**单个数据导入**的话，可以直接和页面数据一起放在 `reactive`\n\n```typescript\nimport { defineComponent, reactive, toRefs} from 'vue';\n  import { useStore } from './store/store'\n\n  export default defineComponent({\n    \n    setup(){\n      let store = useStore()\n    \t// 把 vuex 的 state 的数据放进 reactive 里\n      let params = reactive({\n        name: store.state.name\n      })\n      return {\n        ...toRefs(params),\n      }\n    }\n  });\n```\n\n### computed 访问单个字段\n\n也可以使用 `computed` 模块来访问数据，要先导入 vue 里的 `computed`\n\n```vue\n// App.vue\n<template>\n  <div>\n    {{ name }}\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent, computed} from 'vue';\n  import { useStore } from './store/store'\n\n  export default defineComponent({\n    \n    setup(){\n      let store = useStore()\n      \n      return {\n        name: computed(()=>store.state.name)\n      }\n    }\n  });\n</script>\n\n<style>\n\n</style>\n\n```\n\n## Getters\n\ngetters 里的方法在 `vuex/types/index.d.ts` 中是这样定义的\n\n```typescript\nexport type Getter<S, R> = (state: S, getters: any, rootState: R, rootGetters: any) => any;\n```\n\n**他有 4 个参数，分别是 state、getters、rootState、rootGetters**\n\n其中，**state** 可以取得同级中 state 里的数据，**getters** 可以取得同级中 getters 其他的方法返回的数据\n\n而 **rootState** 和 **rootGetters** 是在当当前 **Getters** 处于 **module** 中时，可以取得根部的 state 和 gatters 里的数据\n\n比如我们可以将 state 里的变量封装成一句话然后返回：\n\n```typescript\nexport const store = createStore<IState> ({ \n    state:{\n        name: 'ooooooh灰灰',\n    },\n    getters:{\n        newName(state):string{\n          \t// 通过 state 访问 name 字段\n            return '大家好！我是：'+state.name\n        }\n    }\n})\n```\n\n当我们要访问其他 getter 时，我们可以这样：\n\n```typescript\nexport const store = createStore<IState> ({ \n    state:{\n        name: 'ooooooh灰灰',\n        age: 20\n    },\n    getters:{\n        hello(state,getters):string{\n          \t// 通过 getters 访问其他 getter\n            return '大家好！我是：'+state.name+','+getters.ageInfo\n        },\n        ageInfo(state):string{\n            return '年龄：'+state.age\n        }\n    }\n})\n```\n\n### 组合式 API 访问\n\n我们可以在组合式 API 里像访问 state 的里数据一样访问 gatters 里的方法：\n\n```typescript\nimport { defineComponent } from 'vue';\nimport { useStore } from './store/store'\n\nexport default defineComponent({\n\n  setup(){\n    let store = useStore()\n    // 访问 getters 里的 hello 方法\n    console.log(store.getters.hello)\n  }\n});\n```\n\n此外，getters 也可以使用 `...toRefs()`、`computed` 这些方法来访问：\n\n```vue\n<template>\n  <div>\n    {{ hello }}\n  </div>\n</template>\n\n<script lang=\"ts\">\n  import { defineComponent, computed, toRefs } from 'vue';\n  import { useStore } from './store/store'\n\n  export default defineComponent({\n    setup(){\n      let store = useStore()\n      return {\n        // 通过 computed 访问 getters 里的 hello \n        hello: computed(()=>store.getters.hello),\n        \n        // 通过 ...toRefs() 访问\n        // ...toRefs(store.getters),\n      }\n    }\n  });\n</script>\n\n<style>\n\n</style>\n\n```\n\n## Mutations\n\n如果你要改变 state 里的数据时，就要用到 Mutations 了，它可以提供改变 state 里数据的方法，它在 `vuex/types/index.d.ts` 中是这样定义的：\n\n```typescript\nexport type Mutation<S> = (state: S, payload?: any) => any;\n```\n\n其中 state 可以拿到 state 里的数据，payload 是自定义传入的参数，后面有个问号，代表这是可选项\n\n所以当我们要改变 state 的字段的值时，我们可以在 store.ts 中这样写代码 ：\n\n```typescript\nexport const store = createStore<IState> ({ \n    state:{\n        name: 'ooooooh灰灰',\n    },\n    mutations:{\n        changeName(state){\n            // 改变 state 中 name 的值\n            state.name = 'greycode'\n        }\n    }\n})\n```\n\n如果要自定义传入参数的话，就可以这样写：\n\n```typescript\nexport const store = createStore<IState> ({ \n    state:{\n        name: 'ooooooh灰灰',\n    },\n    mutations:{\n        changeName(state,newName:string){\n            // 传入自定义字段并设置\n            state.name = newName\n        }\n    }\n})\n```\n\n### 组合式 API 访问\n\n在组合式 API 中，我们可以用 `commit` 来提交执行这个方法：\n\n```typescript\nimport { defineComponent } from 'vue';\nimport { useStore } from './store/store'\n\nexport default defineComponent({\n\n  setup(){\n    let store = useStore()\n    let change = () => {\n      // 提交执行 mutations 中 changeName 方法\n      // store.commit('changeName')\n      \n      // 提交执行 mutations 中 changeName 方法,并传入自定义参数\n      store.commit('changeName','自定义的')\n    }\n    return {\n      change\n    }\n  }\n});\n```\n\n### ...mapMutations\n\n我们可以直接在组合式 API 中使用 `...mapMutations` 来获得 mutations 中的方法，然后直接在页面中调用这个方法\n\n```typescript\n  import { defineComponent } from 'vue';\n  import { mapMutations } from 'vuex';\n  import { useStore } from './store/store'\n\n  export default defineComponent({\n    \n    setup(){\n      let store = useStore()\n      return {\n        // 使用 ...mapMutations 来获得 mutations 中的方法\n        ...mapMutations(['changeName'])\n      }\n    }\n  });\n```\n\n然后直接在页面中使用：\n\n```vue\n<template>\n  <div>\n    <button type=\"button\" @click=\"changeName\">按钮</button>\n    \n    <!-- 也可以传入函数自定义参数 -->\n    <button type=\"button\" @click=\"changeName(’自定义名字‘)\">按钮</button>\n  </div>\n</template>\n```\n\n## Action\n\n当要异步改变 state 中的数据时，就要用到 Action 了，但是它不是直接改变 state 中的数据，而是通过异步执行 mutations 中的方法来间接改变 state 中的数据的 \n\n它在 `vuex/types/index.d.ts` 中是这样定义的：\n\n```typescript\nexport type Action<S, R> = ActionHandler<S, R> | ActionObject<S, R>;\n```\n\n它支持两种类型的数据，一个是 ActionHandler<S, R> ，另一个是 ActionObject<S, R>。其中 ActionObject 一般用于 Module 中的命名空间，它们的定义如下：\n\n```typescript\nexport type ActionHandler<S, R> = (this: Store<R>, injectee: ActionContext<S, R>, payload?: any) => any;\n\nexport interface ActionObject<S, R> {\n  root?: boolean;\n  handler: ActionHandler<S, R>;\n}\n```\n\n这里只讲下 ActionHandler ，另外一个等到 Module 模块中再讲。\n\n在 ActionHandler  中，它有 3 个参数，分别是 this、injectee、payload，其中 this 代表的是整个 Store 对象，injectee 是当前 Action 所在的上下文，payload 是可以自定义的传入参数\n\n所以我们可以这样使用它：\n\n```typescript\nexport const store = createStore<IState> ({ \n    state:{\n        name: 'ooooooh灰灰'\n    },\n\n    mutations:{\n        changeName(state){\n            state.name = '异步改名'\n        }\n    },\n    actions:{\n        asyncChange(ctx){\n          // 两秒后更改名字\n          setTimeout(() =>{\n            ctx.commit('changeName')\n          },2000)\n        }\n    }\n})\n```\n\n### 组合式 API 访问\n\n定义好 actions 后，我们可以在组合式 API 中用 `dispatch` 来分发 action：\n\n```typescript\nimport { defineComponent } from 'vue';\nimport { useStore } from './store/store'\n\nexport default defineComponent({\n\n  setup(){\n    let store = useStore()\n    let syncChange = () => {\n      // 执行 actions 中的 asyncChange 方法\n      store.dispatch('asyncChange')\n    }\n    return {\n      syncChange\n    }\n  }\n});\n```\n\n### ...mapActions\n\n也可以用 `...mapActions` 来直接获得 actions 中的方法：\n\n```typescript\nimport { defineComponent } from 'vue';\nimport { mapActions } from 'vuex';\nimport { useStore } from './store/store'\n\nexport default defineComponent({\n\n  setup(){\n    let store = useStore()\n    return {\n      ...mapActions(['asyncChange'])\n    }\n  }\n});\n```\n\n页面使用的话和 mutation 差不多，直接访问 actions 中的方法名就可以了：\n\n```vue\n<template>\n  <div>\n    <button type=\"button\" @click=\"asyncChange\">按钮</button>\n  </div>\n</template>\n```\n\n## 最后\n\n除此之外还有一个 Module 模块，不过一般小项目用不到而且内容也比较多，下次再学吧。\n","slug":"vue/2CA7C67D02E74713A030F09651A5F164","published":1,"updated":"2021-10-08T07:57:24.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehe004vvpucaj2w1xow","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>官方介绍：Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<p>简单来说，Vuex 就像是前端的数据库或缓存，不管什么页面，只要 Vuex 里面有的数据，都可以去拿。</p>\n<p>Vuex 分为 5 个部分：</p>\n<ul>\n<li>State：是数据源，存放数据</li>\n<li>Getters：可以取得 State 的数据，然后自定义组装返回新的数据</li>\n<li>Mutations：可以改变 State 的数据，建议方法执行是同步的</li>\n<li>Actions：可以异步执行 Mutations 里的方法</li>\n<li>Modules：每个 Module 都有各自的 State、Getters、Mutations、Actions</li>\n</ul>\n<p>这 5 个部分相辅相成。</p>\n<h2 id=\"TypeScript-使用\"><a href=\"#TypeScript-使用\" class=\"headerlink\" title=\"TypeScript 使用\"></a>TypeScript 使用</h2><p>在 vue 项目根目录执行命令来进行 vuex 模块的安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install vuex@next --save</span><br></pre></td></tr></table></figure>\n\n<p>安装好后我们新建文件 <code>/src/store/store.ts</code> ,然后在里面定义 <code>InjectionKey</code> 和 <code>Store</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">InjectionKey</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, useStore <span class=\"keyword\">as</span> baseUseStore, <span class=\"title class_\">Store</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义 State 数据类型的接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IState</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类型传递</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">key</span>: <span class=\"title class_\">InjectionKey</span>&lt;<span class=\"title class_\">Store</span>&lt;<span class=\"title class_\">IState</span>&gt;&gt; = <span class=\"title class_\">Symbol</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = createStore&lt;<span class=\"title class_\">IState</span>&gt; (&#123; </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用于组合式API setup() 里，省的每次都传入 key </span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">useStore</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">baseUseStore</span>(key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在 <code>main.ts</code> 文件里使用上面定义的 vuex</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; store,key &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>)</span><br><span class=\"line\">.<span class=\"title function_\">use</span>(store,key)</span><br><span class=\"line\">.<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><p>State 是存储数据源的地方，所以我们可以在这里存储我们的数据，比如我这边定义一个 <code>name</code> 字段，需要在接口 <code>IState</code> 添加定义数据类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IState</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在 <code>createStore</code> 里添加数据</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = createStore&lt;<span class=\"title class_\">IState</span>&gt; (&#123; </span><br><span class=\"line\">    <span class=\"attr\">state</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ooooooh灰灰&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>数据我们已经定义好了，接下来就是要在页面访问这个数据了，下面提供了两种方式来访问 vuex 里的数据</p>\n<h3 id=\"组合式-API-访问\"><a href=\"#组合式-API-访问\" class=\"headerlink\" title=\"组合式 API 访问\"></a>组合式 API 访问</h3><p>在组合式 API 中，我们可以直接导入刚才在 <code>/src/store/store.ts</code>  里定义的 <code>useStore()</code> 方法来访问 vuex 里的数据</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> store = <span class=\"title function_\">useStore</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 访问 state 里的 name 数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"property\">state</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>运行代码的话就会在控制台打印 <strong>ooooooh灰灰</strong></p>\n<h3 id=\"…toRefs-访问所有字段\"><a href=\"#…toRefs-访问所有字段\" class=\"headerlink\" title=\"…toRefs() 访问所有字段\"></a>…toRefs() 访问所有字段</h3><p>如果要在页面访问的话，可以利用 <code>...toRefs()</code> 来直接展开 store.state 里的<strong>所有字段</strong>，然后在页面直接访问 vuex 的 state 里的字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// App.vue</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &#123;&#123; name &#125;&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">  import &#123; defineComponent, toRefs&#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">  import &#123; useStore &#125; from &#x27;./store/store&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default defineComponent(&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    setup()&#123;</span><br><span class=\"line\">      let store = useStore()</span><br><span class=\"line\">    </span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        // 展开 state 所有的字段</span><br><span class=\"line\">        ...toRefs(store.state)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reactive-聚合单个字段\"><a href=\"#reactive-聚合单个字段\" class=\"headerlink\" title=\"reactive 聚合单个字段\"></a>reactive 聚合单个字段</h3><p>如果你想<strong>单个数据导入</strong>的话，可以直接和页面数据一起放在 <code>reactive</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent, reactive, toRefs&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> store = <span class=\"title function_\">useStore</span>()</span><br><span class=\"line\">    \t<span class=\"comment\">// 把 vuex 的 state 的数据放进 reactive 里</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> params = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: store.<span class=\"property\">state</span>.<span class=\"property\">name</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...<span class=\"title function_\">toRefs</span>(params),</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"computed-访问单个字段\"><a href=\"#computed-访问单个字段\" class=\"headerlink\" title=\"computed 访问单个字段\"></a>computed 访问单个字段</h3><p>也可以使用 <code>computed</code> 模块来访问数据，要先导入 vue 里的 <code>computed</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// App.vue</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &#123;&#123; name &#125;&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">  import &#123; defineComponent, computed&#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">  import &#123; useStore &#125; from &#x27;./store/store&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default defineComponent(&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    setup()&#123;</span><br><span class=\"line\">      let store = useStore()</span><br><span class=\"line\">      </span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        name: computed(()=&gt;store.state.name)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Getters\"><a href=\"#Getters\" class=\"headerlink\" title=\"Getters\"></a>Getters</h2><p>getters 里的方法在 <code>vuex/types/index.d.ts</code> 中是这样定义的</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">Getter</span>&lt;S, R&gt; = <span class=\"function\">(<span class=\"params\">state: S, getters: <span class=\"built_in\">any</span>, rootState: R, rootGetters: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">any</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>他有 4 个参数，分别是 state、getters、rootState、rootGetters</strong></p>\n<p>其中，<strong>state</strong> 可以取得同级中 state 里的数据，<strong>getters</strong> 可以取得同级中 getters 其他的方法返回的数据</p>\n<p>而 <strong>rootState</strong> 和 <strong>rootGetters</strong> 是在当当前 <strong>Getters</strong> 处于 <strong>module</strong> 中时，可以取得根部的 state 和 gatters 里的数据</p>\n<p>比如我们可以将 state 里的变量封装成一句话然后返回：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = createStore&lt;<span class=\"title class_\">IState</span>&gt; (&#123; </span><br><span class=\"line\">    <span class=\"attr\">state</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ooooooh灰灰&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">getters</span>:&#123;</span><br><span class=\"line\">        <span class=\"title function_\">newName</span>(state):<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">          \t<span class=\"comment\">// 通过 state 访问 name 字段</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;大家好！我是：&#x27;</span>+state.<span class=\"property\">name</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>当我们要访问其他 getter 时，我们可以这样：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = createStore&lt;<span class=\"title class_\">IState</span>&gt; (&#123; </span><br><span class=\"line\">    <span class=\"attr\">state</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ooooooh灰灰&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">getters</span>:&#123;</span><br><span class=\"line\">        <span class=\"title function_\">hello</span>(state,getters):<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">          \t<span class=\"comment\">// 通过 getters 访问其他 getter</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;大家好！我是：&#x27;</span>+state.<span class=\"property\">name</span>+<span class=\"string\">&#x27;,&#x27;</span>+getters.<span class=\"property\">ageInfo</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">ageInfo</span>(state):<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;年龄：&#x27;</span>+state.<span class=\"property\">age</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组合式-API-访问-1\"><a href=\"#组合式-API-访问-1\" class=\"headerlink\" title=\"组合式 API 访问\"></a>组合式 API 访问</h3><p>我们可以在组合式 API 里像访问 state 的里数据一样访问 gatters 里的方法：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> store = <span class=\"title function_\">useStore</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 访问 getters 里的 hello 方法</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"property\">getters</span>.<span class=\"property\">hello</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>此外，getters 也可以使用 <code>...toRefs()</code>、<code>computed</code> 这些方法来访问：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &#123;&#123; hello &#125;&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">  import &#123; defineComponent, computed, toRefs &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">  import &#123; useStore &#125; from &#x27;./store/store&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default defineComponent(&#123;</span><br><span class=\"line\">    setup()&#123;</span><br><span class=\"line\">      let store = useStore()</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        // 通过 computed 访问 getters 里的 hello </span><br><span class=\"line\">        hello: computed(()=&gt;store.getters.hello),</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 通过 ...toRefs() 访问</span><br><span class=\"line\">        // ...toRefs(store.getters),</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mutations\"><a href=\"#Mutations\" class=\"headerlink\" title=\"Mutations\"></a>Mutations</h2><p>如果你要改变 state 里的数据时，就要用到 Mutations 了，它可以提供改变 state 里数据的方法，它在 <code>vuex/types/index.d.ts</code> 中是这样定义的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">Mutation</span>&lt;S&gt; = <span class=\"function\">(<span class=\"params\">state: S, payload?: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">any</span>;</span><br></pre></td></tr></table></figure>\n\n<p>其中 state 可以拿到 state 里的数据，payload 是自定义传入的参数，后面有个问号，代表这是可选项</p>\n<p>所以当我们要改变 state 的字段的值时，我们可以在 store.ts 中这样写代码 ：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = createStore&lt;<span class=\"title class_\">IState</span>&gt; (&#123; </span><br><span class=\"line\">    <span class=\"attr\">state</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ooooooh灰灰&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mutations</span>:&#123;</span><br><span class=\"line\">        <span class=\"title function_\">changeName</span>(<span class=\"params\">state</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 改变 state 中 name 的值</span></span><br><span class=\"line\">            state.<span class=\"property\">name</span> = <span class=\"string\">&#x27;greycode&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>如果要自定义传入参数的话，就可以这样写：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = createStore&lt;<span class=\"title class_\">IState</span>&gt; (&#123; </span><br><span class=\"line\">    <span class=\"attr\">state</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ooooooh灰灰&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mutations</span>:&#123;</span><br><span class=\"line\">        <span class=\"title function_\">changeName</span>(<span class=\"params\">state,newName:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 传入自定义字段并设置</span></span><br><span class=\"line\">            state.<span class=\"property\">name</span> = newName</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组合式-API-访问-2\"><a href=\"#组合式-API-访问-2\" class=\"headerlink\" title=\"组合式 API 访问\"></a>组合式 API 访问</h3><p>在组合式 API 中，我们可以用 <code>commit</code> 来提交执行这个方法：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> store = <span class=\"title function_\">useStore</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">change</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 提交执行 mutations 中 changeName 方法</span></span><br><span class=\"line\">      <span class=\"comment\">// store.commit(&#x27;changeName&#x27;)</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 提交执行 mutations 中 changeName 方法,并传入自定义参数</span></span><br><span class=\"line\">      store.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;changeName&#x27;</span>,<span class=\"string\">&#x27;自定义的&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      change</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"…mapMutations\"><a href=\"#…mapMutations\" class=\"headerlink\" title=\"…mapMutations\"></a>…mapMutations</h3><p>我们可以直接在组合式 API 中使用 <code>...mapMutations</code> 来获得 mutations 中的方法，然后直接在页面中调用这个方法</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> store = <span class=\"title function_\">useStore</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 使用 ...mapMutations 来获得 mutations 中的方法</span></span><br><span class=\"line\">      ...<span class=\"title function_\">mapMutations</span>([<span class=\"string\">&#x27;changeName&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后直接在页面中使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;button type=&quot;button&quot; @click=&quot;changeName&quot;&gt;按钮&lt;/button&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;!-- 也可以传入函数自定义参数 --&gt;</span><br><span class=\"line\">    &lt;button type=&quot;button&quot; @click=&quot;changeName(’自定义名字‘)&quot;&gt;按钮&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><p>当要异步改变 state 中的数据时，就要用到 Action 了，但是它不是直接改变 state 中的数据，而是通过异步执行 mutations 中的方法来间接改变 state 中的数据的 </p>\n<p>它在 <code>vuex/types/index.d.ts</code> 中是这样定义的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">Action</span>&lt;S, R&gt; = <span class=\"title class_\">ActionHandler</span>&lt;S, R&gt; | <span class=\"title class_\">ActionObject</span>&lt;S, R&gt;;</span><br></pre></td></tr></table></figure>\n\n<p>它支持两种类型的数据，一个是 ActionHandler&lt;S, R&gt; ，另一个是 ActionObject&lt;S, R&gt;。其中 ActionObject 一般用于 Module 中的命名空间，它们的定义如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">ActionHandler</span>&lt;S, R&gt; = <span class=\"function\">(<span class=\"params\"><span class=\"variable language_\">this</span>: Store&lt;R&gt;, injectee: ActionContext&lt;S, R&gt;, payload?: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">any</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ActionObject</span>&lt;S, R&gt; &#123;</span><br><span class=\"line\">  root?: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"attr\">handler</span>: <span class=\"title class_\">ActionHandler</span>&lt;S, R&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里只讲下 ActionHandler ，另外一个等到 Module 模块中再讲。</p>\n<p>在 ActionHandler  中，它有 3 个参数，分别是 this、injectee、payload，其中 this 代表的是整个 Store 对象，injectee 是当前 Action 所在的上下文，payload 是可以自定义的传入参数</p>\n<p>所以我们可以这样使用它：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = createStore&lt;<span class=\"title class_\">IState</span>&gt; (&#123; </span><br><span class=\"line\">    <span class=\"attr\">state</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ooooooh灰灰&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">mutations</span>:&#123;</span><br><span class=\"line\">        <span class=\"title function_\">changeName</span>(<span class=\"params\">state</span>)&#123;</span><br><span class=\"line\">            state.<span class=\"property\">name</span> = <span class=\"string\">&#x27;异步改名&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">actions</span>:&#123;</span><br><span class=\"line\">        <span class=\"title function_\">asyncChange</span>(<span class=\"params\">ctx</span>)&#123;</span><br><span class=\"line\">          <span class=\"comment\">// 两秒后更改名字</span></span><br><span class=\"line\">          <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span>&#123;</span><br><span class=\"line\">            ctx.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;changeName&#x27;</span>)</span><br><span class=\"line\">          &#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组合式-API-访问-3\"><a href=\"#组合式-API-访问-3\" class=\"headerlink\" title=\"组合式 API 访问\"></a>组合式 API 访问</h3><p>定义好 actions 后，我们可以在组合式 API 中用 <code>dispatch</code> 来分发 action：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> store = <span class=\"title function_\">useStore</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">syncChange</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 执行 actions 中的 asyncChange 方法</span></span><br><span class=\"line\">      store.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;asyncChange&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      syncChange</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"…mapActions\"><a href=\"#…mapActions\" class=\"headerlink\" title=\"…mapActions\"></a>…mapActions</h3><p>也可以用 <code>...mapActions</code> 来直接获得 actions 中的方法：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> store = <span class=\"title function_\">useStore</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...<span class=\"title function_\">mapActions</span>([<span class=\"string\">&#x27;asyncChange&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>页面使用的话和 mutation 差不多，直接访问 actions 中的方法名就可以了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;button type=&quot;button&quot; @click=&quot;asyncChange&quot;&gt;按钮&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>除此之外还有一个 Module 模块，不过一般小项目用不到而且内容也比较多，下次再学吧。</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>官方介绍：Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p>\n<p>简单来说，Vuex 就像是前端的数据库或缓存，不管什么页面，只要 Vuex 里面有的数据，都可以去拿。</p>\n<p>Vuex 分为 5 个部分：</p>\n<ul>\n<li>State：是数据源，存放数据</li>\n<li>Getters：可以取得 State 的数据，然后自定义组装返回新的数据</li>\n<li>Mutations：可以改变 State 的数据，建议方法执行是同步的</li>\n<li>Actions：可以异步执行 Mutations 里的方法</li>\n<li>Modules：每个 Module 都有各自的 State、Getters、Mutations、Actions</li>\n</ul>\n<p>这 5 个部分相辅相成。</p>\n<h2 id=\"TypeScript-使用\"><a href=\"#TypeScript-使用\" class=\"headerlink\" title=\"TypeScript 使用\"></a>TypeScript 使用</h2><p>在 vue 项目根目录执行命令来进行 vuex 模块的安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install vuex@next --save</span><br></pre></td></tr></table></figure>\n\n<p>安装好后我们新建文件 <code>/src/store/store.ts</code> ,然后在里面定义 <code>InjectionKey</code> 和 <code>Store</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"title class_\">InjectionKey</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; createStore, useStore <span class=\"keyword\">as</span> baseUseStore, <span class=\"title class_\">Store</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义 State 数据类型的接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IState</span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类型传递</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"attr\">key</span>: <span class=\"title class_\">InjectionKey</span>&lt;<span class=\"title class_\">Store</span>&lt;<span class=\"title class_\">IState</span>&gt;&gt; = <span class=\"title class_\">Symbol</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = createStore&lt;<span class=\"title class_\">IState</span>&gt; (&#123; </span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用于组合式API setup() 里，省的每次都传入 key </span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">function</span> <span class=\"title function_\">useStore</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title function_\">baseUseStore</span>(key)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在 <code>main.ts</code> 文件里使用上面定义的 vuex</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createApp &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">App</span> <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./App.vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; store,key &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(<span class=\"title class_\">App</span>)</span><br><span class=\"line\">.<span class=\"title function_\">use</span>(store,key)</span><br><span class=\"line\">.<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h2><p>State 是存储数据源的地方，所以我们可以在这里存储我们的数据，比如我这边定义一个 <code>name</code> 字段，需要在接口 <code>IState</code> 添加定义数据类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">IState</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"built_in\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后在 <code>createStore</code> 里添加数据</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = createStore&lt;<span class=\"title class_\">IState</span>&gt; (&#123; </span><br><span class=\"line\">    <span class=\"attr\">state</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ooooooh灰灰&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>数据我们已经定义好了，接下来就是要在页面访问这个数据了，下面提供了两种方式来访问 vuex 里的数据</p>\n<h3 id=\"组合式-API-访问\"><a href=\"#组合式-API-访问\" class=\"headerlink\" title=\"组合式 API 访问\"></a>组合式 API 访问</h3><p>在组合式 API 中，我们可以直接导入刚才在 <code>/src/store/store.ts</code>  里定义的 <code>useStore()</code> 方法来访问 vuex 里的数据</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> store = <span class=\"title function_\">useStore</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 访问 state 里的 name 数据</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"property\">state</span>.<span class=\"property\">name</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>运行代码的话就会在控制台打印 <strong>ooooooh灰灰</strong></p>\n<h3 id=\"…toRefs-访问所有字段\"><a href=\"#…toRefs-访问所有字段\" class=\"headerlink\" title=\"…toRefs() 访问所有字段\"></a>…toRefs() 访问所有字段</h3><p>如果要在页面访问的话，可以利用 <code>...toRefs()</code> 来直接展开 store.state 里的<strong>所有字段</strong>，然后在页面直接访问 vuex 的 state 里的字段</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// App.vue</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &#123;&#123; name &#125;&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">  import &#123; defineComponent, toRefs&#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">  import &#123; useStore &#125; from &#x27;./store/store&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default defineComponent(&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    setup()&#123;</span><br><span class=\"line\">      let store = useStore()</span><br><span class=\"line\">    </span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        // 展开 state 所有的字段</span><br><span class=\"line\">        ...toRefs(store.state)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reactive-聚合单个字段\"><a href=\"#reactive-聚合单个字段\" class=\"headerlink\" title=\"reactive 聚合单个字段\"></a>reactive 聚合单个字段</h3><p>如果你想<strong>单个数据导入</strong>的话，可以直接和页面数据一起放在 <code>reactive</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent, reactive, toRefs&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> store = <span class=\"title function_\">useStore</span>()</span><br><span class=\"line\">    \t<span class=\"comment\">// 把 vuex 的 state 的数据放进 reactive 里</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> params = <span class=\"title function_\">reactive</span>(&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: store.<span class=\"property\">state</span>.<span class=\"property\">name</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        ...<span class=\"title function_\">toRefs</span>(params),</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"computed-访问单个字段\"><a href=\"#computed-访问单个字段\" class=\"headerlink\" title=\"computed 访问单个字段\"></a>computed 访问单个字段</h3><p>也可以使用 <code>computed</code> 模块来访问数据，要先导入 vue 里的 <code>computed</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">// App.vue</span><br><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &#123;&#123; name &#125;&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">  import &#123; defineComponent, computed&#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">  import &#123; useStore &#125; from &#x27;./store/store&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default defineComponent(&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    setup()&#123;</span><br><span class=\"line\">      let store = useStore()</span><br><span class=\"line\">      </span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        name: computed(()=&gt;store.state.name)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Getters\"><a href=\"#Getters\" class=\"headerlink\" title=\"Getters\"></a>Getters</h2><p>getters 里的方法在 <code>vuex/types/index.d.ts</code> 中是这样定义的</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">Getter</span>&lt;S, R&gt; = <span class=\"function\">(<span class=\"params\">state: S, getters: <span class=\"built_in\">any</span>, rootState: R, rootGetters: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">any</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>他有 4 个参数，分别是 state、getters、rootState、rootGetters</strong></p>\n<p>其中，<strong>state</strong> 可以取得同级中 state 里的数据，<strong>getters</strong> 可以取得同级中 getters 其他的方法返回的数据</p>\n<p>而 <strong>rootState</strong> 和 <strong>rootGetters</strong> 是在当当前 <strong>Getters</strong> 处于 <strong>module</strong> 中时，可以取得根部的 state 和 gatters 里的数据</p>\n<p>比如我们可以将 state 里的变量封装成一句话然后返回：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = createStore&lt;<span class=\"title class_\">IState</span>&gt; (&#123; </span><br><span class=\"line\">    <span class=\"attr\">state</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ooooooh灰灰&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">getters</span>:&#123;</span><br><span class=\"line\">        <span class=\"title function_\">newName</span>(state):<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">          \t<span class=\"comment\">// 通过 state 访问 name 字段</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;大家好！我是：&#x27;</span>+state.<span class=\"property\">name</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>当我们要访问其他 getter 时，我们可以这样：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = createStore&lt;<span class=\"title class_\">IState</span>&gt; (&#123; </span><br><span class=\"line\">    <span class=\"attr\">state</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ooooooh灰灰&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">age</span>: <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">getters</span>:&#123;</span><br><span class=\"line\">        <span class=\"title function_\">hello</span>(state,getters):<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">          \t<span class=\"comment\">// 通过 getters 访问其他 getter</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;大家好！我是：&#x27;</span>+state.<span class=\"property\">name</span>+<span class=\"string\">&#x27;,&#x27;</span>+getters.<span class=\"property\">ageInfo</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"title function_\">ageInfo</span>(state):<span class=\"built_in\">string</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;年龄：&#x27;</span>+state.<span class=\"property\">age</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组合式-API-访问-1\"><a href=\"#组合式-API-访问-1\" class=\"headerlink\" title=\"组合式 API 访问\"></a>组合式 API 访问</h3><p>我们可以在组合式 API 里像访问 state 的里数据一样访问 gatters 里的方法：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> store = <span class=\"title function_\">useStore</span>()</span><br><span class=\"line\">    <span class=\"comment\">// 访问 getters 里的 hello 方法</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(store.<span class=\"property\">getters</span>.<span class=\"property\">hello</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>此外，getters 也可以使用 <code>...toRefs()</code>、<code>computed</code> 这些方法来访问：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &#123;&#123; hello &#125;&#125;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class=\"line\">  import &#123; defineComponent, computed, toRefs &#125; from &#x27;vue&#x27;;</span><br><span class=\"line\">  import &#123; useStore &#125; from &#x27;./store/store&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">  export default defineComponent(&#123;</span><br><span class=\"line\">    setup()&#123;</span><br><span class=\"line\">      let store = useStore()</span><br><span class=\"line\">      return &#123;</span><br><span class=\"line\">        // 通过 computed 访问 getters 里的 hello </span><br><span class=\"line\">        hello: computed(()=&gt;store.getters.hello),</span><br><span class=\"line\">        </span><br><span class=\"line\">        // 通过 ...toRefs() 访问</span><br><span class=\"line\">        // ...toRefs(store.getters),</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mutations\"><a href=\"#Mutations\" class=\"headerlink\" title=\"Mutations\"></a>Mutations</h2><p>如果你要改变 state 里的数据时，就要用到 Mutations 了，它可以提供改变 state 里数据的方法，它在 <code>vuex/types/index.d.ts</code> 中是这样定义的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">Mutation</span>&lt;S&gt; = <span class=\"function\">(<span class=\"params\">state: S, payload?: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">any</span>;</span><br></pre></td></tr></table></figure>\n\n<p>其中 state 可以拿到 state 里的数据，payload 是自定义传入的参数，后面有个问号，代表这是可选项</p>\n<p>所以当我们要改变 state 的字段的值时，我们可以在 store.ts 中这样写代码 ：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = createStore&lt;<span class=\"title class_\">IState</span>&gt; (&#123; </span><br><span class=\"line\">    <span class=\"attr\">state</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ooooooh灰灰&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mutations</span>:&#123;</span><br><span class=\"line\">        <span class=\"title function_\">changeName</span>(<span class=\"params\">state</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 改变 state 中 name 的值</span></span><br><span class=\"line\">            state.<span class=\"property\">name</span> = <span class=\"string\">&#x27;greycode&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>如果要自定义传入参数的话，就可以这样写：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = createStore&lt;<span class=\"title class_\">IState</span>&gt; (&#123; </span><br><span class=\"line\">    <span class=\"attr\">state</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ooooooh灰灰&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mutations</span>:&#123;</span><br><span class=\"line\">        <span class=\"title function_\">changeName</span>(<span class=\"params\">state,newName:<span class=\"built_in\">string</span></span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 传入自定义字段并设置</span></span><br><span class=\"line\">            state.<span class=\"property\">name</span> = newName</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组合式-API-访问-2\"><a href=\"#组合式-API-访问-2\" class=\"headerlink\" title=\"组合式 API 访问\"></a>组合式 API 访问</h3><p>在组合式 API 中，我们可以用 <code>commit</code> 来提交执行这个方法：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> store = <span class=\"title function_\">useStore</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">change</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 提交执行 mutations 中 changeName 方法</span></span><br><span class=\"line\">      <span class=\"comment\">// store.commit(&#x27;changeName&#x27;)</span></span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 提交执行 mutations 中 changeName 方法,并传入自定义参数</span></span><br><span class=\"line\">      store.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;changeName&#x27;</span>,<span class=\"string\">&#x27;自定义的&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      change</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"…mapMutations\"><a href=\"#…mapMutations\" class=\"headerlink\" title=\"…mapMutations\"></a>…mapMutations</h3><p>我们可以直接在组合式 API 中使用 <code>...mapMutations</code> 来获得 mutations 中的方法，然后直接在页面中调用这个方法</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapMutations &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> store = <span class=\"title function_\">useStore</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 使用 ...mapMutations 来获得 mutations 中的方法</span></span><br><span class=\"line\">      ...<span class=\"title function_\">mapMutations</span>([<span class=\"string\">&#x27;changeName&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>然后直接在页面中使用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;button type=&quot;button&quot; @click=&quot;changeName&quot;&gt;按钮&lt;/button&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;!-- 也可以传入函数自定义参数 --&gt;</span><br><span class=\"line\">    &lt;button type=&quot;button&quot; @click=&quot;changeName(’自定义名字‘)&quot;&gt;按钮&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h2><p>当要异步改变 state 中的数据时，就要用到 Action 了，但是它不是直接改变 state 中的数据，而是通过异步执行 mutations 中的方法来间接改变 state 中的数据的 </p>\n<p>它在 <code>vuex/types/index.d.ts</code> 中是这样定义的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">Action</span>&lt;S, R&gt; = <span class=\"title class_\">ActionHandler</span>&lt;S, R&gt; | <span class=\"title class_\">ActionObject</span>&lt;S, R&gt;;</span><br></pre></td></tr></table></figure>\n\n<p>它支持两种类型的数据，一个是 ActionHandler&lt;S, R&gt; ，另一个是 ActionObject&lt;S, R&gt;。其中 ActionObject 一般用于 Module 中的命名空间，它们的定义如下：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">ActionHandler</span>&lt;S, R&gt; = <span class=\"function\">(<span class=\"params\"><span class=\"variable language_\">this</span>: Store&lt;R&gt;, injectee: ActionContext&lt;S, R&gt;, payload?: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">any</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ActionObject</span>&lt;S, R&gt; &#123;</span><br><span class=\"line\">  root?: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">  <span class=\"attr\">handler</span>: <span class=\"title class_\">ActionHandler</span>&lt;S, R&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里只讲下 ActionHandler ，另外一个等到 Module 模块中再讲。</p>\n<p>在 ActionHandler  中，它有 3 个参数，分别是 this、injectee、payload，其中 this 代表的是整个 Store 对象，injectee 是当前 Action 所在的上下文，payload 是可以自定义的传入参数</p>\n<p>所以我们可以这样使用它：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = createStore&lt;<span class=\"title class_\">IState</span>&gt; (&#123; </span><br><span class=\"line\">    <span class=\"attr\">state</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;ooooooh灰灰&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"attr\">mutations</span>:&#123;</span><br><span class=\"line\">        <span class=\"title function_\">changeName</span>(<span class=\"params\">state</span>)&#123;</span><br><span class=\"line\">            state.<span class=\"property\">name</span> = <span class=\"string\">&#x27;异步改名&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">actions</span>:&#123;</span><br><span class=\"line\">        <span class=\"title function_\">asyncChange</span>(<span class=\"params\">ctx</span>)&#123;</span><br><span class=\"line\">          <span class=\"comment\">// 两秒后更改名字</span></span><br><span class=\"line\">          <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span>&#123;</span><br><span class=\"line\">            ctx.<span class=\"title function_\">commit</span>(<span class=\"string\">&#x27;changeName&#x27;</span>)</span><br><span class=\"line\">          &#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"组合式-API-访问-3\"><a href=\"#组合式-API-访问-3\" class=\"headerlink\" title=\"组合式 API 访问\"></a>组合式 API 访问</h3><p>定义好 actions 后，我们可以在组合式 API 中用 <code>dispatch</code> 来分发 action：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> store = <span class=\"title function_\">useStore</span>()</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"title function_\">syncChange</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 执行 actions 中的 asyncChange 方法</span></span><br><span class=\"line\">      store.<span class=\"title function_\">dispatch</span>(<span class=\"string\">&#x27;asyncChange&#x27;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      syncChange</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"…mapActions\"><a href=\"#…mapActions\" class=\"headerlink\" title=\"…mapActions\"></a>…mapActions</h3><p>也可以用 <code>...mapActions</code> 来直接获得 actions 中的方法：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; defineComponent &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapActions &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; useStore &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./store/store&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title function_\">defineComponent</span>(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">setup</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> store = <span class=\"title function_\">useStore</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      ...<span class=\"title function_\">mapActions</span>([<span class=\"string\">&#x27;asyncChange&#x27;</span>])</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>页面使用的话和 mutation 差不多，直接访问 actions 中的方法名就可以了：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    &lt;button type=&quot;button&quot; @click=&quot;asyncChange&quot;&gt;按钮&lt;/button&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>除此之外还有一个 Module 模块，不过一般小项目用不到而且内容也比较多，下次再学吧。</p>\n"},{"title":"vertx的web开发学习笔记","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-07-05T07:31:02.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 创建一个 Http 服务\n\n```java\n// 创建路由\nRouter router = Router.router(vertx);\n// 创建 Http 服务\nvertx.createHttpServer()\n  // 绑定路由\n  .requestHandler(router)\n  // 监听端口\n  .listen(8888)\n  // Http 服务启动成功后调用\n  .onSuccess(server ->\n   \t\tSystem.out.println(\"HTTP server started on port \" + server.actualPort())\n   );\n```\n\n## Router 使用\n\n> 直接使用上面的路由实例\n\n### 创建请求路由\n\n- 创建 Get 请求路由\n\n  ```java\n  router\n    .get(\"/test\")\n    .respond(\n      // 响应逻辑\n    )\n    \n  // 或者\n  router\n    .route(HttpMethod.GET, \"/test\")\n    .respond(\n      // 响应逻辑\n    )\n  ```\n\n- 创建 Post 请求路由\n\n  ```java\n  router\n    .post(\"/test\")\n    .respond(\n  \t\t// 响应逻辑\n  \t)\n  \n  // 或者\n  router\n    .post(HttpMethod.POST, \"/test\")\n    .respond(\n  \t\t// 响应逻辑\n  \t)\n  ```\n\n### 获取参数\n\n- 获取 URL 参数\n\n  > 请求地址示例：http://localhost:8080/get?param=greycode\n\n  ```java\n  router.get(\"/get\").handler(context-> \n  \t\t{\n  \t\t\t\tString param = context.request().getParam(\"param\");\n  \t\t\t\tSystem.out.println(param);\n  \t\t}\n  );\n  \n  // 控制台打印\n  greycode\n  ```\n\n- 获取 REST 风格的地址参数\n\n  > 请求地址示例：http://localhost:8080/get/greycode\n\n  ```java\n  router.get(\"/get/:param\").handler(context-> \n  \t\t{\n  \t\t\t\tString param = context.pathParam(\"param\");\n  \t\t\t\tSystem.out.println(param);\n  \t\t}\n  );\n  \n  // 控制台打印\n  greycode\n  ```\n\n- 获取  Body 数据\n\n  > 请求地址示例：http://localhost:8080/post\t\n  >\n  > 请求数据：\n  >\n  > ```json\n  > {\n  >  \"name\":\"greycode\"\n  > }\n  > ```\n\n  ```java\n  // 在获取数据前，一定要执行这行代码\n  // 否则就会报：警告: BodyHandler in not enabled on this route: RoutingContext.getBodyAsJson() in always be NULL‘\n  router.route().handler(BodyHandler.create());\n  \n  router.post(\"/post\").handler(context->{\n    \tJsonObject body = context.getBodyAsJson();\n    \tSystem.out.println(body.toString());\n  \t}\n  );\n  \n  // 控制台打印\n  {\"name\":\"greycode\"}\n  ```\n\n### 异常处理\n\n```java\nrouter.get(\"/get\").handler(context->\n  {\n      throw new RuntimeException(\"模拟错误\");\n  }\n)\n.failureHandler(context-> {\n    // 发生异常时执行的代码\n  }\n);\n```\n","source":"_posts/vertx/10EF2E95447C468CB55BD7BD0675C090.md","raw":"---\ntitle: vertx的web开发学习笔记\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-07-05 15:31:02\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Vert.x\ncategories:\n- Vert.x\n---\n\n## 创建一个 Http 服务\n\n```java\n// 创建路由\nRouter router = Router.router(vertx);\n// 创建 Http 服务\nvertx.createHttpServer()\n  // 绑定路由\n  .requestHandler(router)\n  // 监听端口\n  .listen(8888)\n  // Http 服务启动成功后调用\n  .onSuccess(server ->\n   \t\tSystem.out.println(\"HTTP server started on port \" + server.actualPort())\n   );\n```\n\n## Router 使用\n\n> 直接使用上面的路由实例\n\n### 创建请求路由\n\n- 创建 Get 请求路由\n\n  ```java\n  router\n    .get(\"/test\")\n    .respond(\n      // 响应逻辑\n    )\n    \n  // 或者\n  router\n    .route(HttpMethod.GET, \"/test\")\n    .respond(\n      // 响应逻辑\n    )\n  ```\n\n- 创建 Post 请求路由\n\n  ```java\n  router\n    .post(\"/test\")\n    .respond(\n  \t\t// 响应逻辑\n  \t)\n  \n  // 或者\n  router\n    .post(HttpMethod.POST, \"/test\")\n    .respond(\n  \t\t// 响应逻辑\n  \t)\n  ```\n\n### 获取参数\n\n- 获取 URL 参数\n\n  > 请求地址示例：http://localhost:8080/get?param=greycode\n\n  ```java\n  router.get(\"/get\").handler(context-> \n  \t\t{\n  \t\t\t\tString param = context.request().getParam(\"param\");\n  \t\t\t\tSystem.out.println(param);\n  \t\t}\n  );\n  \n  // 控制台打印\n  greycode\n  ```\n\n- 获取 REST 风格的地址参数\n\n  > 请求地址示例：http://localhost:8080/get/greycode\n\n  ```java\n  router.get(\"/get/:param\").handler(context-> \n  \t\t{\n  \t\t\t\tString param = context.pathParam(\"param\");\n  \t\t\t\tSystem.out.println(param);\n  \t\t}\n  );\n  \n  // 控制台打印\n  greycode\n  ```\n\n- 获取  Body 数据\n\n  > 请求地址示例：http://localhost:8080/post\t\n  >\n  > 请求数据：\n  >\n  > ```json\n  > {\n  >  \"name\":\"greycode\"\n  > }\n  > ```\n\n  ```java\n  // 在获取数据前，一定要执行这行代码\n  // 否则就会报：警告: BodyHandler in not enabled on this route: RoutingContext.getBodyAsJson() in always be NULL‘\n  router.route().handler(BodyHandler.create());\n  \n  router.post(\"/post\").handler(context->{\n    \tJsonObject body = context.getBodyAsJson();\n    \tSystem.out.println(body.toString());\n  \t}\n  );\n  \n  // 控制台打印\n  {\"name\":\"greycode\"}\n  ```\n\n### 异常处理\n\n```java\nrouter.get(\"/get\").handler(context->\n  {\n      throw new RuntimeException(\"模拟错误\");\n  }\n)\n.failureHandler(context-> {\n    // 发生异常时执行的代码\n  }\n);\n```\n","slug":"vertx/10EF2E95447C468CB55BD7BD0675C090","published":1,"updated":"2021-10-08T07:57:24.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehf004xvpuc4p3dgxa2","content":"<h2 id=\"创建一个-Http-服务\"><a href=\"#创建一个-Http-服务\" class=\"headerlink\" title=\"创建一个 Http 服务\"></a>创建一个 Http 服务</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建路由</span></span><br><span class=\"line\"><span class=\"type\">Router</span> <span class=\"variable\">router</span> <span class=\"operator\">=</span> Router.router(vertx);</span><br><span class=\"line\"><span class=\"comment\">// 创建 Http 服务</span></span><br><span class=\"line\">vertx.createHttpServer()</span><br><span class=\"line\">  <span class=\"comment\">// 绑定路由</span></span><br><span class=\"line\">  .requestHandler(router)</span><br><span class=\"line\">  <span class=\"comment\">// 监听端口</span></span><br><span class=\"line\">  .listen(<span class=\"number\">8888</span>)</span><br><span class=\"line\">  <span class=\"comment\">// Http 服务启动成功后调用</span></span><br><span class=\"line\">  .onSuccess(server -&gt;</span><br><span class=\"line\">   \t\tSystem.out.println(<span class=\"string\">&quot;HTTP server started on port &quot;</span> + server.actualPort())</span><br><span class=\"line\">   );</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Router-使用\"><a href=\"#Router-使用\" class=\"headerlink\" title=\"Router 使用\"></a>Router 使用</h2><blockquote>\n<p>直接使用上面的路由实例</p>\n</blockquote>\n<h3 id=\"创建请求路由\"><a href=\"#创建请求路由\" class=\"headerlink\" title=\"创建请求路由\"></a>创建请求路由</h3><ul>\n<li><p>创建 Get 请求路由</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">router</span><br><span class=\"line\">  .get(<span class=\"string\">&quot;/test&quot;</span>)</span><br><span class=\"line\">  .respond(</span><br><span class=\"line\">    <span class=\"comment\">// 响应逻辑</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\">router</span><br><span class=\"line\">  .route(HttpMethod.GET, <span class=\"string\">&quot;/test&quot;</span>)</span><br><span class=\"line\">  .respond(</span><br><span class=\"line\">    <span class=\"comment\">// 响应逻辑</span></span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建 Post 请求路由</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">router</span><br><span class=\"line\">  .post(<span class=\"string\">&quot;/test&quot;</span>)</span><br><span class=\"line\">  .respond(</span><br><span class=\"line\">\t\t<span class=\"comment\">// 响应逻辑</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\">router</span><br><span class=\"line\">  .post(HttpMethod.POST, <span class=\"string\">&quot;/test&quot;</span>)</span><br><span class=\"line\">  .respond(</span><br><span class=\"line\">\t\t<span class=\"comment\">// 响应逻辑</span></span><br><span class=\"line\">\t)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"获取参数\"><a href=\"#获取参数\" class=\"headerlink\" title=\"获取参数\"></a>获取参数</h3><ul>\n<li><p>获取 URL 参数</p>\n<blockquote>\n<p>请求地址示例：<a href=\"http://localhost:8080/get?param=greycode\">http://localhost:8080/get?param=greycode</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">&quot;/get&quot;</span>).handler(context-&gt; </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">param</span> <span class=\"operator\">=</span> context.request().getParam(<span class=\"string\">&quot;param&quot;</span>);</span><br><span class=\"line\">\t\t\t\tSystem.out.println(param);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制台打印</span></span><br><span class=\"line\">greycode</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取 REST 风格的地址参数</p>\n<blockquote>\n<p>请求地址示例：<a href=\"http://localhost:8080/get/greycode\">http://localhost:8080/get/greycode</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">&quot;/get/:param&quot;</span>).handler(context-&gt; </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">param</span> <span class=\"operator\">=</span> context.pathParam(<span class=\"string\">&quot;param&quot;</span>);</span><br><span class=\"line\">\t\t\t\tSystem.out.println(param);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制台打印</span></span><br><span class=\"line\">greycode</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取  Body 数据</p>\n<blockquote>\n<p>请求地址示例：<a href=\"http://localhost:8080/post\">http://localhost:8080/post</a>    </p>\n<p>请求数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;greycode&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在获取数据前，一定要执行这行代码</span></span><br><span class=\"line\"><span class=\"comment\">// 否则就会报：警告: BodyHandler in not enabled on this route: RoutingContext.getBodyAsJson() in always be NULL‘</span></span><br><span class=\"line\">router.route().handler(BodyHandler.create());</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">&quot;/post&quot;</span>).handler(context-&gt;&#123;</span><br><span class=\"line\">  \t<span class=\"type\">JsonObject</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> context.getBodyAsJson();</span><br><span class=\"line\">  \tSystem.out.println(body.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制台打印</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;greycode&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">&quot;/get&quot;</span>).handler(context-&gt;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;模拟错误&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">.failureHandler(context-&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 发生异常时执行的代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"创建一个-Http-服务\"><a href=\"#创建一个-Http-服务\" class=\"headerlink\" title=\"创建一个 Http 服务\"></a>创建一个 Http 服务</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建路由</span></span><br><span class=\"line\"><span class=\"type\">Router</span> <span class=\"variable\">router</span> <span class=\"operator\">=</span> Router.router(vertx);</span><br><span class=\"line\"><span class=\"comment\">// 创建 Http 服务</span></span><br><span class=\"line\">vertx.createHttpServer()</span><br><span class=\"line\">  <span class=\"comment\">// 绑定路由</span></span><br><span class=\"line\">  .requestHandler(router)</span><br><span class=\"line\">  <span class=\"comment\">// 监听端口</span></span><br><span class=\"line\">  .listen(<span class=\"number\">8888</span>)</span><br><span class=\"line\">  <span class=\"comment\">// Http 服务启动成功后调用</span></span><br><span class=\"line\">  .onSuccess(server -&gt;</span><br><span class=\"line\">   \t\tSystem.out.println(<span class=\"string\">&quot;HTTP server started on port &quot;</span> + server.actualPort())</span><br><span class=\"line\">   );</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Router-使用\"><a href=\"#Router-使用\" class=\"headerlink\" title=\"Router 使用\"></a>Router 使用</h2><blockquote>\n<p>直接使用上面的路由实例</p>\n</blockquote>\n<h3 id=\"创建请求路由\"><a href=\"#创建请求路由\" class=\"headerlink\" title=\"创建请求路由\"></a>创建请求路由</h3><ul>\n<li><p>创建 Get 请求路由</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">router</span><br><span class=\"line\">  .get(<span class=\"string\">&quot;/test&quot;</span>)</span><br><span class=\"line\">  .respond(</span><br><span class=\"line\">    <span class=\"comment\">// 响应逻辑</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\">router</span><br><span class=\"line\">  .route(HttpMethod.GET, <span class=\"string\">&quot;/test&quot;</span>)</span><br><span class=\"line\">  .respond(</span><br><span class=\"line\">    <span class=\"comment\">// 响应逻辑</span></span><br><span class=\"line\">  )</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建 Post 请求路由</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">router</span><br><span class=\"line\">  .post(<span class=\"string\">&quot;/test&quot;</span>)</span><br><span class=\"line\">  .respond(</span><br><span class=\"line\">\t\t<span class=\"comment\">// 响应逻辑</span></span><br><span class=\"line\">\t)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\">router</span><br><span class=\"line\">  .post(HttpMethod.POST, <span class=\"string\">&quot;/test&quot;</span>)</span><br><span class=\"line\">  .respond(</span><br><span class=\"line\">\t\t<span class=\"comment\">// 响应逻辑</span></span><br><span class=\"line\">\t)</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"获取参数\"><a href=\"#获取参数\" class=\"headerlink\" title=\"获取参数\"></a>获取参数</h3><ul>\n<li><p>获取 URL 参数</p>\n<blockquote>\n<p>请求地址示例：<a href=\"http://localhost:8080/get?param=greycode\">http://localhost:8080/get?param=greycode</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">&quot;/get&quot;</span>).handler(context-&gt; </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">param</span> <span class=\"operator\">=</span> context.request().getParam(<span class=\"string\">&quot;param&quot;</span>);</span><br><span class=\"line\">\t\t\t\tSystem.out.println(param);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制台打印</span></span><br><span class=\"line\">greycode</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取 REST 风格的地址参数</p>\n<blockquote>\n<p>请求地址示例：<a href=\"http://localhost:8080/get/greycode\">http://localhost:8080/get/greycode</a></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">&quot;/get/:param&quot;</span>).handler(context-&gt; </span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"type\">String</span> <span class=\"variable\">param</span> <span class=\"operator\">=</span> context.pathParam(<span class=\"string\">&quot;param&quot;</span>);</span><br><span class=\"line\">\t\t\t\tSystem.out.println(param);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制台打印</span></span><br><span class=\"line\">greycode</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>获取  Body 数据</p>\n<blockquote>\n<p>请求地址示例：<a href=\"http://localhost:8080/post\">http://localhost:8080/post</a>    </p>\n<p>请求数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\"> <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;greycode&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在获取数据前，一定要执行这行代码</span></span><br><span class=\"line\"><span class=\"comment\">// 否则就会报：警告: BodyHandler in not enabled on this route: RoutingContext.getBodyAsJson() in always be NULL‘</span></span><br><span class=\"line\">router.route().handler(BodyHandler.create());</span><br><span class=\"line\"></span><br><span class=\"line\">router.post(<span class=\"string\">&quot;/post&quot;</span>).handler(context-&gt;&#123;</span><br><span class=\"line\">  \t<span class=\"type\">JsonObject</span> <span class=\"variable\">body</span> <span class=\"operator\">=</span> context.getBodyAsJson();</span><br><span class=\"line\">  \tSystem.out.println(body.toString());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制台打印</span></span><br><span class=\"line\">&#123;<span class=\"string\">&quot;name&quot;</span>:<span class=\"string\">&quot;greycode&quot;</span>&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">router.get(<span class=\"string\">&quot;/get&quot;</span>).handler(context-&gt;</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;模拟错误&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">)</span><br><span class=\"line\">.failureHandler(context-&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 发生异常时执行的代码</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n"},{"title":"Jenkins教程-Docker+GitLab持续部署持续集成","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-12T09:27:02.000Z","password":null,"summary":null,"_content":"\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n\n\n## 环境\n\n|        | 地址       | 系统     | 安装的软件                   |\n| ------ | ---------- | -------- | ---------------------------- |\n| 主机１ | 10.25.0.72 | Centos 7 | Docker　,　Jenkins(Docker版) |\n| 主机２ | 10.25.0.50 | Cnetos 7 | Docker                       |\n\n\n\n## Jenkins所需添加插件\n\n- [Git Parameter](https://plugins.jenkins.io/git-parameter)\n- [GitLab](https://plugins.jenkins.io/gitlab-plugin)\n\n- [SSH](https://plugins.jenkins.io/ssh)\n\n## 创建ssh登录凭据\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111043.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111058.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111115.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111130.png)\n\n> 这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入10.25.0.50服务器的账号和密码。点击OK保存；\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111529.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111806.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112160316.png)\n\n## 添加SSH配置\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112160521.png)\n> 找到SSH remote hosts \n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112160541.png)\n> 设置你远程机器的ip和端口，然后选择刚配置好的凭证，点击save保存\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112160920.png)\n\n## 配置Job\n\n> 进入上篇文章创建好的Job,在此基础上进行改造\n\n\n\n### 配置Git Parameter,来获取gitlab的Tag数据\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112161424.png)\n\n### 配置触发器\n\n> 点击最下面的Generate,生成秘钥。然后记下URL:http://172.16.54.131:8080/project/JenkinsTest 和生成的秘钥：60327d68d10f1f7621696edd42719d1c\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112161808.png)\n\n### 添加构建完成后的动作\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112161842.png)\n\n### 添加Execute shell 和Execute shell script on remote host using ssh\n\n- Execute shell ： 执行Jenkins所在服务器的脚本\n- Execute shell script on remote host using ssh：登录远程服务器执行脚本\n\n\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112161940.png)\n\n\n\n### 编写你要执行的脚本\n\n> 由于是自定义的，内容我就不粘贴出来了.编写好后点击保存\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112164613.png)\n\n## 开始构建\n\n### 手动构建\n\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112164653.png)\n\n\n\n#### 选择你要构建的tag标签，点击Build开始构建并自动部署\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112164746.png)\n\n### 自动构建\n\n> 自动构建是当你push或打tag上传代码的时候，Jenkins就会自动构建部署\n\n\n\n#### 自动构建流程\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/201911121717.png)\n\n\n####　配置GitLab代码仓库\n> 点击你你项目右边Settings的Integrations,然后在URL和Secret Tonken中填写刚保存的URL和秘钥，选择Tag push events,然后点击保存\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112165036.png)\n\n　\n\n\n\n#### Git打Tag标签\n\n```shell\ngit tag -a 1.0 -m '1.0'  \t\t//打一个1.0的tag\ngit push origin 1.0 \t\t\t//上传1.0标签到远程仓库\n```\n\n上传完tag后此时Jenkins已经开始自动构建并部署项目了；\n\n\n\n## 注意\n\n弄自动部署时，Jenkins和GitLab要都能互相访问的到，不然就会出错；","source":"_posts/jenkins/build-jenkins-ci-cd.md","raw":"---\ntitle: Jenkins教程-Docker+GitLab持续部署持续集成\ntop: true\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Jenkins\ncategories:\n  - Jenkins\ndate: 2019-11-12 17:27:02\npassword:\nsummary:\n---\n\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n\n\n## 环境\n\n|        | 地址       | 系统     | 安装的软件                   |\n| ------ | ---------- | -------- | ---------------------------- |\n| 主机１ | 10.25.0.72 | Centos 7 | Docker　,　Jenkins(Docker版) |\n| 主机２ | 10.25.0.50 | Cnetos 7 | Docker                       |\n\n\n\n## Jenkins所需添加插件\n\n- [Git Parameter](https://plugins.jenkins.io/git-parameter)\n- [GitLab](https://plugins.jenkins.io/gitlab-plugin)\n\n- [SSH](https://plugins.jenkins.io/ssh)\n\n## 创建ssh登录凭据\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111043.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111058.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111115.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111130.png)\n\n> 这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入10.25.0.50服务器的账号和密码。点击OK保存；\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111529.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111806.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112160316.png)\n\n## 添加SSH配置\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112160521.png)\n> 找到SSH remote hosts \n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112160541.png)\n> 设置你远程机器的ip和端口，然后选择刚配置好的凭证，点击save保存\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112160920.png)\n\n## 配置Job\n\n> 进入上篇文章创建好的Job,在此基础上进行改造\n\n\n\n### 配置Git Parameter,来获取gitlab的Tag数据\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112161424.png)\n\n### 配置触发器\n\n> 点击最下面的Generate,生成秘钥。然后记下URL:http://172.16.54.131:8080/project/JenkinsTest 和生成的秘钥：60327d68d10f1f7621696edd42719d1c\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112161808.png)\n\n### 添加构建完成后的动作\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112161842.png)\n\n### 添加Execute shell 和Execute shell script on remote host using ssh\n\n- Execute shell ： 执行Jenkins所在服务器的脚本\n- Execute shell script on remote host using ssh：登录远程服务器执行脚本\n\n\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112161940.png)\n\n\n\n### 编写你要执行的脚本\n\n> 由于是自定义的，内容我就不粘贴出来了.编写好后点击保存\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112164613.png)\n\n## 开始构建\n\n### 手动构建\n\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112164653.png)\n\n\n\n#### 选择你要构建的tag标签，点击Build开始构建并自动部署\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112164746.png)\n\n### 自动构建\n\n> 自动构建是当你push或打tag上传代码的时候，Jenkins就会自动构建部署\n\n\n\n#### 自动构建流程\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/201911121717.png)\n\n\n####　配置GitLab代码仓库\n> 点击你你项目右边Settings的Integrations,然后在URL和Secret Tonken中填写刚保存的URL和秘钥，选择Tag push events,然后点击保存\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112165036.png)\n\n　\n\n\n\n#### Git打Tag标签\n\n```shell\ngit tag -a 1.0 -m '1.0'  \t\t//打一个1.0的tag\ngit push origin 1.0 \t\t\t//上传1.0标签到远程仓库\n```\n\n上传完tag后此时Jenkins已经开始自动构建并部署项目了；\n\n\n\n## 注意\n\n弄自动部署时，Jenkins和GitLab要都能互相访问的到，不然就会出错；","slug":"jenkins/build-jenkins-ci-cd","published":1,"updated":"2021-10-08T08:37:16.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehg0052vpuc8udje5ep","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-docker/\">Jenkins教程-搭建(Docker版)</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-mavne/\">Jenkins教程-创建Maven项目</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-ci-cd/\">Jenkins教程-Docker+GitLab持续部署持续集成</a></p>\n</li>\n</ul>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>地址</th>\n<th>系统</th>\n<th>安装的软件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主机１</td>\n<td>10.25.0.72</td>\n<td>Centos 7</td>\n<td>Docker　,　Jenkins(Docker版)</td>\n</tr>\n<tr>\n<td>主机２</td>\n<td>10.25.0.50</td>\n<td>Cnetos 7</td>\n<td>Docker</td>\n</tr>\n</tbody></table>\n<h2 id=\"Jenkins所需添加插件\"><a href=\"#Jenkins所需添加插件\" class=\"headerlink\" title=\"Jenkins所需添加插件\"></a>Jenkins所需添加插件</h2><ul>\n<li><p><a href=\"https://plugins.jenkins.io/git-parameter\">Git Parameter</a></p>\n</li>\n<li><p><a href=\"https://plugins.jenkins.io/gitlab-plugin\">GitLab</a></p>\n</li>\n<li><p><a href=\"https://plugins.jenkins.io/ssh\">SSH</a></p>\n</li>\n</ul>\n<h2 id=\"创建ssh登录凭据\"><a href=\"#创建ssh登录凭据\" class=\"headerlink\" title=\"创建ssh登录凭据\"></a>创建ssh登录凭据</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111043.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111058.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111115.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111130.png\" alt=\"Jenkins界面\"></p>\n<blockquote>\n<p>这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入10.25.0.50服务器的账号和密码。点击OK保存；</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111529.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111806.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112160316.png\" alt=\"Jenkins界面\"></p>\n<h2 id=\"添加SSH配置\"><a href=\"#添加SSH配置\" class=\"headerlink\" title=\"添加SSH配置\"></a>添加SSH配置</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112160521.png\" alt=\"Jenkins界面\"></p>\n<blockquote>\n<p>找到SSH remote hosts </p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112160541.png\" alt=\"Jenkins界面\"></p>\n<blockquote>\n<p>设置你远程机器的ip和端口，然后选择刚配置好的凭证，点击save保存</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112160920.png\" alt=\"Jenkins界面\"></p>\n<h2 id=\"配置Job\"><a href=\"#配置Job\" class=\"headerlink\" title=\"配置Job\"></a>配置Job</h2><blockquote>\n<p>进入上篇文章创建好的Job,在此基础上进行改造</p>\n</blockquote>\n<h3 id=\"配置Git-Parameter-来获取gitlab的Tag数据\"><a href=\"#配置Git-Parameter-来获取gitlab的Tag数据\" class=\"headerlink\" title=\"配置Git Parameter,来获取gitlab的Tag数据\"></a>配置Git Parameter,来获取gitlab的Tag数据</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112161424.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"配置触发器\"><a href=\"#配置触发器\" class=\"headerlink\" title=\"配置触发器\"></a>配置触发器</h3><blockquote>\n<p>点击最下面的Generate,生成秘钥。然后记下URL:<a href=\"http://172.16.54.131:8080/project/JenkinsTest\">http://172.16.54.131:8080/project/JenkinsTest</a> 和生成的秘钥：60327d68d10f1f7621696edd42719d1c</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112161808.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"添加构建完成后的动作\"><a href=\"#添加构建完成后的动作\" class=\"headerlink\" title=\"添加构建完成后的动作\"></a>添加构建完成后的动作</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112161842.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"添加Execute-shell-和Execute-shell-script-on-remote-host-using-ssh\"><a href=\"#添加Execute-shell-和Execute-shell-script-on-remote-host-using-ssh\" class=\"headerlink\" title=\"添加Execute shell 和Execute shell script on remote host using ssh\"></a>添加Execute shell 和Execute shell script on remote host using ssh</h3><ul>\n<li>Execute shell ： 执行Jenkins所在服务器的脚本</li>\n<li>Execute shell script on remote host using ssh：登录远程服务器执行脚本</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112161940.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"编写你要执行的脚本\"><a href=\"#编写你要执行的脚本\" class=\"headerlink\" title=\"编写你要执行的脚本\"></a>编写你要执行的脚本</h3><blockquote>\n<p>由于是自定义的，内容我就不粘贴出来了.编写好后点击保存</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112164613.png\" alt=\"Jenkins界面\"></p>\n<h2 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h2><h3 id=\"手动构建\"><a href=\"#手动构建\" class=\"headerlink\" title=\"手动构建\"></a>手动构建</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112164653.png\" alt=\"Jenkins界面\"></p>\n<h4 id=\"选择你要构建的tag标签，点击Build开始构建并自动部署\"><a href=\"#选择你要构建的tag标签，点击Build开始构建并自动部署\" class=\"headerlink\" title=\"选择你要构建的tag标签，点击Build开始构建并自动部署\"></a>选择你要构建的tag标签，点击Build开始构建并自动部署</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112164746.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"自动构建\"><a href=\"#自动构建\" class=\"headerlink\" title=\"自动构建\"></a>自动构建</h3><blockquote>\n<p>自动构建是当你push或打tag上传代码的时候，Jenkins就会自动构建部署</p>\n</blockquote>\n<h4 id=\"自动构建流程\"><a href=\"#自动构建流程\" class=\"headerlink\" title=\"自动构建流程\"></a>自动构建流程</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/201911121717.png\" alt=\"Jenkins界面\"></p>\n<h4 id=\"配置GitLab代码仓库\"><a href=\"#配置GitLab代码仓库\" class=\"headerlink\" title=\"配置GitLab代码仓库\"></a>配置GitLab代码仓库</h4><blockquote>\n<p>点击你你项目右边Settings的Integrations,然后在URL和Secret Tonken中填写刚保存的URL和秘钥，选择Tag push events,然后点击保存</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112165036.png\" alt=\"Jenkins界面\"></p>\n<p>　</p>\n<h4 id=\"Git打Tag标签\"><a href=\"#Git打Tag标签\" class=\"headerlink\" title=\"Git打Tag标签\"></a>Git打Tag标签</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git tag -a 1.0 -m &#x27;1.0&#x27;  \t\t//打一个1.0的tag</span><br><span class=\"line\">git push origin 1.0 \t\t\t//上传1.0标签到远程仓库</span><br></pre></td></tr></table></figure>\n\n<p>上传完tag后此时Jenkins已经开始自动构建并部署项目了；</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>弄自动部署时，Jenkins和GitLab要都能互相访问的到，不然就会出错；</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-docker/\">Jenkins教程-搭建(Docker版)</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-mavne/\">Jenkins教程-创建Maven项目</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-ci-cd/\">Jenkins教程-Docker+GitLab持续部署持续集成</a></p>\n</li>\n</ul>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>地址</th>\n<th>系统</th>\n<th>安装的软件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主机１</td>\n<td>10.25.0.72</td>\n<td>Centos 7</td>\n<td>Docker　,　Jenkins(Docker版)</td>\n</tr>\n<tr>\n<td>主机２</td>\n<td>10.25.0.50</td>\n<td>Cnetos 7</td>\n<td>Docker</td>\n</tr>\n</tbody></table>\n<h2 id=\"Jenkins所需添加插件\"><a href=\"#Jenkins所需添加插件\" class=\"headerlink\" title=\"Jenkins所需添加插件\"></a>Jenkins所需添加插件</h2><ul>\n<li><p><a href=\"https://plugins.jenkins.io/git-parameter\">Git Parameter</a></p>\n</li>\n<li><p><a href=\"https://plugins.jenkins.io/gitlab-plugin\">GitLab</a></p>\n</li>\n<li><p><a href=\"https://plugins.jenkins.io/ssh\">SSH</a></p>\n</li>\n</ul>\n<h2 id=\"创建ssh登录凭据\"><a href=\"#创建ssh登录凭据\" class=\"headerlink\" title=\"创建ssh登录凭据\"></a>创建ssh登录凭据</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111043.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111058.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111115.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111130.png\" alt=\"Jenkins界面\"></p>\n<blockquote>\n<p>这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入10.25.0.50服务器的账号和密码。点击OK保存；</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111529.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112111806.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112160316.png\" alt=\"Jenkins界面\"></p>\n<h2 id=\"添加SSH配置\"><a href=\"#添加SSH配置\" class=\"headerlink\" title=\"添加SSH配置\"></a>添加SSH配置</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112160521.png\" alt=\"Jenkins界面\"></p>\n<blockquote>\n<p>找到SSH remote hosts </p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112160541.png\" alt=\"Jenkins界面\"></p>\n<blockquote>\n<p>设置你远程机器的ip和端口，然后选择刚配置好的凭证，点击save保存</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112160920.png\" alt=\"Jenkins界面\"></p>\n<h2 id=\"配置Job\"><a href=\"#配置Job\" class=\"headerlink\" title=\"配置Job\"></a>配置Job</h2><blockquote>\n<p>进入上篇文章创建好的Job,在此基础上进行改造</p>\n</blockquote>\n<h3 id=\"配置Git-Parameter-来获取gitlab的Tag数据\"><a href=\"#配置Git-Parameter-来获取gitlab的Tag数据\" class=\"headerlink\" title=\"配置Git Parameter,来获取gitlab的Tag数据\"></a>配置Git Parameter,来获取gitlab的Tag数据</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112161424.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"配置触发器\"><a href=\"#配置触发器\" class=\"headerlink\" title=\"配置触发器\"></a>配置触发器</h3><blockquote>\n<p>点击最下面的Generate,生成秘钥。然后记下URL:<a href=\"http://172.16.54.131:8080/project/JenkinsTest\">http://172.16.54.131:8080/project/JenkinsTest</a> 和生成的秘钥：60327d68d10f1f7621696edd42719d1c</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112161808.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"添加构建完成后的动作\"><a href=\"#添加构建完成后的动作\" class=\"headerlink\" title=\"添加构建完成后的动作\"></a>添加构建完成后的动作</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112161842.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"添加Execute-shell-和Execute-shell-script-on-remote-host-using-ssh\"><a href=\"#添加Execute-shell-和Execute-shell-script-on-remote-host-using-ssh\" class=\"headerlink\" title=\"添加Execute shell 和Execute shell script on remote host using ssh\"></a>添加Execute shell 和Execute shell script on remote host using ssh</h3><ul>\n<li>Execute shell ： 执行Jenkins所在服务器的脚本</li>\n<li>Execute shell script on remote host using ssh：登录远程服务器执行脚本</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112161940.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"编写你要执行的脚本\"><a href=\"#编写你要执行的脚本\" class=\"headerlink\" title=\"编写你要执行的脚本\"></a>编写你要执行的脚本</h3><blockquote>\n<p>由于是自定义的，内容我就不粘贴出来了.编写好后点击保存</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112164613.png\" alt=\"Jenkins界面\"></p>\n<h2 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h2><h3 id=\"手动构建\"><a href=\"#手动构建\" class=\"headerlink\" title=\"手动构建\"></a>手动构建</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112164653.png\" alt=\"Jenkins界面\"></p>\n<h4 id=\"选择你要构建的tag标签，点击Build开始构建并自动部署\"><a href=\"#选择你要构建的tag标签，点击Build开始构建并自动部署\" class=\"headerlink\" title=\"选择你要构建的tag标签，点击Build开始构建并自动部署\"></a>选择你要构建的tag标签，点击Build开始构建并自动部署</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112164746.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"自动构建\"><a href=\"#自动构建\" class=\"headerlink\" title=\"自动构建\"></a>自动构建</h3><blockquote>\n<p>自动构建是当你push或打tag上传代码的时候，Jenkins就会自动构建部署</p>\n</blockquote>\n<h4 id=\"自动构建流程\"><a href=\"#自动构建流程\" class=\"headerlink\" title=\"自动构建流程\"></a>自动构建流程</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/201911121717.png\" alt=\"Jenkins界面\"></p>\n<h4 id=\"配置GitLab代码仓库\"><a href=\"#配置GitLab代码仓库\" class=\"headerlink\" title=\"配置GitLab代码仓库\"></a>配置GitLab代码仓库</h4><blockquote>\n<p>点击你你项目右边Settings的Integrations,然后在URL和Secret Tonken中填写刚保存的URL和秘钥，选择Tag push events,然后点击保存</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20191112165036.png\" alt=\"Jenkins界面\"></p>\n<p>　</p>\n<h4 id=\"Git打Tag标签\"><a href=\"#Git打Tag标签\" class=\"headerlink\" title=\"Git打Tag标签\"></a>Git打Tag标签</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git tag -a 1.0 -m &#x27;1.0&#x27;  \t\t//打一个1.0的tag</span><br><span class=\"line\">git push origin 1.0 \t\t\t//上传1.0标签到远程仓库</span><br></pre></td></tr></table></figure>\n\n<p>上传完tag后此时Jenkins已经开始自动构建并部署项目了；</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>弄自动部署时，Jenkins和GitLab要都能互相访问的到，不然就会出错；</p>\n"},{"title":"Jenkins教程-搭建(Docker版)","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-07T09:19:34.000Z","password":null,"summary":null,"_content":"\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n  \n\n## 环境\n\n- 主机：172.16.54.131\n\n- 系统：Cnetos 7\n\n## 安装Docker-CE\n\n### 检查Docker\n\n首先检查本机是否安装Docker，如果安装了直接跳过安装Docker步骤\n\n```shell\ndocker -v\n```\n\n> 如果出现Docker version 19.03.4, build 9013bf583a类似的信息，则说明已安装Docker\n\n### 安装\n\n- 本教程以centos7安装方式说明，其他系统安装方式会有不同\n\n执行以下命令，安装Docker\n\n```shell\nyum install -y yum-utils device-mapper-persistent-data lvm2\n\nyum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n    \nyum install docker-ce\n\nservice docker start\n\nsystemctl enable docker\n```\n\n- 第一条命令：为添加源做准备 使其支持存储\n- 第二条命令：添加docker-ce软件源\n- 第三条命令：安装docker-ce\n- 第四条命令：启动docker服务\n- 第五条命令：设置开启自启\n\n## 安装Jenkins的Docker容器\n\n### 创建文件夹\n\n在创建容器前先在宿主机创建一个Jenkins的工作文件夹，用于持久化\n\n```shell\nmkdir /opt/jenkins     \t\t\t//创建文件夹\nchmod 7777 /opt/jenkins\t\t\t//授予权限\n```\n\n> 该文件夹一定要给权限，不然docker容器访问不了，容器会创建失败。\n\n### 拉取官方镜像\n\n```shell\ndocker pull jenkins/jenkins:lts\n```\n\n### 启动容器\n\n```shell\ndocker run -d -p 8080:8080 -p 50000:50000 -u root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /opt/jenkins:/var/jenkins_home -v /etc/localtime:/etc/localtime -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai --restart=always --name jenkins jenkins/jenkins:lts\n```\n\n> 启动容器一定要用root用户进入docker容器，不然访问不了宿主机的docker服务。还有要挂载/var/run/docker.sock和$(which docker)这两个文件夹到容器，这样docker版的jenkins才可以用使用docker相关服务。 \n\n### 查看容器日志\n\n```shell\ndocker logs jenkins \n```\n\n![log界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_docker_logs_4345.png)\n> 记下43455b344f904cf69a4af9e231f7d48d这个密码，等下要用到\n\n## 初始化Jenkins\n\n### 解锁\n\n在浏览器访问172.16.54.131:8080这个地址，进入Jenkins的web界面。（如果访问不了，请开启防火墙的8080端口）\n\n![jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_web_sign_in_201911071359.png)\n\n在输入框中填入刚才保存的密码\n\n### 自定义\n\n推荐直接选 安装推荐的插件\n\n![Jenkins自定义界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_setupwizard_1911071408.png)\n\n### 安装插件\n\n到这个界面等他安装完成，时间会长一点\n\n![Jenkins安装插件](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_191107141216.png)\n\n> 如这个界面插件下载失败，直接点继续，进行下一步，具体解决办法可以看这个篇文章\n>\n> [Jenkins初始化界面插件安装失败解决方法](https://mjava.top/2019/11/07/technology/learningExperience/Linux/Jenkins/Jenkins%E5%88%9D%E5%A7%8B%E5%8C%96%E7%95%8C%E9%9D%A2%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/)\n\n\n\n### 创建用户\n\n设置你的登录账号和密码，然后点保存完成\n![Jenkins创建用户](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_20191107160016.png)\n\n### 实例配置\n默认直接点保存完成\n![Jenkins实例配置](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_20191107160056.png)\n\n### 开始使用\n点击开始使用Jenkins\n![Jenkins开始使用](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_20191107160129.png)\n\n### Jenkins主界面\n进入Jenkins主界面，到此教程结束\n![Jenkins主界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_20191107160204.png)\n\n","source":"_posts/jenkins/build-jenkins-docker.md","raw":"---\ntitle: Jenkins教程-搭建(Docker版)\ntop: true\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Jenkins\n  - Docker\n  - Linux\ncategories:\n  - Jenkins\ndate: 2019-11-07 17:19:34\npassword:\nsummary:\n---\n\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n  \n\n## 环境\n\n- 主机：172.16.54.131\n\n- 系统：Cnetos 7\n\n## 安装Docker-CE\n\n### 检查Docker\n\n首先检查本机是否安装Docker，如果安装了直接跳过安装Docker步骤\n\n```shell\ndocker -v\n```\n\n> 如果出现Docker version 19.03.4, build 9013bf583a类似的信息，则说明已安装Docker\n\n### 安装\n\n- 本教程以centos7安装方式说明，其他系统安装方式会有不同\n\n执行以下命令，安装Docker\n\n```shell\nyum install -y yum-utils device-mapper-persistent-data lvm2\n\nyum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n    \nyum install docker-ce\n\nservice docker start\n\nsystemctl enable docker\n```\n\n- 第一条命令：为添加源做准备 使其支持存储\n- 第二条命令：添加docker-ce软件源\n- 第三条命令：安装docker-ce\n- 第四条命令：启动docker服务\n- 第五条命令：设置开启自启\n\n## 安装Jenkins的Docker容器\n\n### 创建文件夹\n\n在创建容器前先在宿主机创建一个Jenkins的工作文件夹，用于持久化\n\n```shell\nmkdir /opt/jenkins     \t\t\t//创建文件夹\nchmod 7777 /opt/jenkins\t\t\t//授予权限\n```\n\n> 该文件夹一定要给权限，不然docker容器访问不了，容器会创建失败。\n\n### 拉取官方镜像\n\n```shell\ndocker pull jenkins/jenkins:lts\n```\n\n### 启动容器\n\n```shell\ndocker run -d -p 8080:8080 -p 50000:50000 -u root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /opt/jenkins:/var/jenkins_home -v /etc/localtime:/etc/localtime -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai --restart=always --name jenkins jenkins/jenkins:lts\n```\n\n> 启动容器一定要用root用户进入docker容器，不然访问不了宿主机的docker服务。还有要挂载/var/run/docker.sock和$(which docker)这两个文件夹到容器，这样docker版的jenkins才可以用使用docker相关服务。 \n\n### 查看容器日志\n\n```shell\ndocker logs jenkins \n```\n\n![log界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_docker_logs_4345.png)\n> 记下43455b344f904cf69a4af9e231f7d48d这个密码，等下要用到\n\n## 初始化Jenkins\n\n### 解锁\n\n在浏览器访问172.16.54.131:8080这个地址，进入Jenkins的web界面。（如果访问不了，请开启防火墙的8080端口）\n\n![jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_web_sign_in_201911071359.png)\n\n在输入框中填入刚才保存的密码\n\n### 自定义\n\n推荐直接选 安装推荐的插件\n\n![Jenkins自定义界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_setupwizard_1911071408.png)\n\n### 安装插件\n\n到这个界面等他安装完成，时间会长一点\n\n![Jenkins安装插件](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_191107141216.png)\n\n> 如这个界面插件下载失败，直接点继续，进行下一步，具体解决办法可以看这个篇文章\n>\n> [Jenkins初始化界面插件安装失败解决方法](https://mjava.top/2019/11/07/technology/learningExperience/Linux/Jenkins/Jenkins%E5%88%9D%E5%A7%8B%E5%8C%96%E7%95%8C%E9%9D%A2%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/)\n\n\n\n### 创建用户\n\n设置你的登录账号和密码，然后点保存完成\n![Jenkins创建用户](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_20191107160016.png)\n\n### 实例配置\n默认直接点保存完成\n![Jenkins实例配置](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_20191107160056.png)\n\n### 开始使用\n点击开始使用Jenkins\n![Jenkins开始使用](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_20191107160129.png)\n\n### Jenkins主界面\n进入Jenkins主界面，到此教程结束\n![Jenkins主界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_20191107160204.png)\n\n","slug":"jenkins/build-jenkins-docker","published":1,"updated":"2021-10-09T03:06:44.156Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehg0053vpuc5bc4akak","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-docker/\">Jenkins教程-搭建(Docker版)</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-mavne/\">Jenkins教程-创建Maven项目</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-ci-cd/\">Jenkins教程-Docker+GitLab持续部署持续集成</a></p>\n</li>\n</ul>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p>主机：172.16.54.131</p>\n</li>\n<li><p>系统：Cnetos 7</p>\n</li>\n</ul>\n<h2 id=\"安装Docker-CE\"><a href=\"#安装Docker-CE\" class=\"headerlink\" title=\"安装Docker-CE\"></a>安装Docker-CE</h2><h3 id=\"检查Docker\"><a href=\"#检查Docker\" class=\"headerlink\" title=\"检查Docker\"></a>检查Docker</h3><p>首先检查本机是否安装Docker，如果安装了直接跳过安装Docker步骤</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker -v</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果出现Docker version 19.03.4, build 9013bf583a类似的信息，则说明已安装Docker</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li>本教程以centos7安装方式说明，其他系统安装方式会有不同</li>\n</ul>\n<p>执行以下命令，安装Docker</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\">    </span><br><span class=\"line\">yum install docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\">service docker start</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一条命令：为添加源做准备 使其支持存储</li>\n<li>第二条命令：添加docker-ce软件源</li>\n<li>第三条命令：安装docker-ce</li>\n<li>第四条命令：启动docker服务</li>\n<li>第五条命令：设置开启自启</li>\n</ul>\n<h2 id=\"安装Jenkins的Docker容器\"><a href=\"#安装Jenkins的Docker容器\" class=\"headerlink\" title=\"安装Jenkins的Docker容器\"></a>安装Jenkins的Docker容器</h2><h3 id=\"创建文件夹\"><a href=\"#创建文件夹\" class=\"headerlink\" title=\"创建文件夹\"></a>创建文件夹</h3><p>在创建容器前先在宿主机创建一个Jenkins的工作文件夹，用于持久化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir /opt/jenkins     \t\t\t//创建文件夹</span><br><span class=\"line\">chmod 7777 /opt/jenkins\t\t\t//授予权限</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该文件夹一定要给权限，不然docker容器访问不了，容器会创建失败。</p>\n</blockquote>\n<h3 id=\"拉取官方镜像\"><a href=\"#拉取官方镜像\" class=\"headerlink\" title=\"拉取官方镜像\"></a>拉取官方镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8080:8080 -p 50000:50000 -u root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /opt/jenkins:/var/jenkins_home -v /etc/localtime:/etc/localtime -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai --restart=always --name jenkins jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>启动容器一定要用root用户进入docker容器，不然访问不了宿主机的docker服务。还有要挂载&#x2F;var&#x2F;run&#x2F;docker.sock和$(which docker)这两个文件夹到容器，这样docker版的jenkins才可以用使用docker相关服务。 </p>\n</blockquote>\n<h3 id=\"查看容器日志\"><a href=\"#查看容器日志\" class=\"headerlink\" title=\"查看容器日志\"></a>查看容器日志</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker logs jenkins </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_docker_logs_4345.png\" alt=\"log界面\"></p>\n<blockquote>\n<p>记下43455b344f904cf69a4af9e231f7d48d这个密码，等下要用到</p>\n</blockquote>\n<h2 id=\"初始化Jenkins\"><a href=\"#初始化Jenkins\" class=\"headerlink\" title=\"初始化Jenkins\"></a>初始化Jenkins</h2><h3 id=\"解锁\"><a href=\"#解锁\" class=\"headerlink\" title=\"解锁\"></a>解锁</h3><p>在浏览器访问172.16.54.131:8080这个地址，进入Jenkins的web界面。（如果访问不了，请开启防火墙的8080端口）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_web_sign_in_201911071359.png\" alt=\"jenkins界面\"></p>\n<p>在输入框中填入刚才保存的密码</p>\n<h3 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h3><p>推荐直接选 安装推荐的插件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_setupwizard_1911071408.png\" alt=\"Jenkins自定义界面\"></p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>到这个界面等他安装完成，时间会长一点</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_191107141216.png\" alt=\"Jenkins安装插件\"></p>\n<blockquote>\n<p>如这个界面插件下载失败，直接点继续，进行下一步，具体解决办法可以看这个篇文章</p>\n<p><a href=\"https://mjava.top/2019/11/07/technology/learningExperience/Linux/Jenkins/Jenkins%E5%88%9D%E5%A7%8B%E5%8C%96%E7%95%8C%E9%9D%A2%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/\">Jenkins初始化界面插件安装失败解决方法</a></p>\n</blockquote>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>设置你的登录账号和密码，然后点保存完成<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_20191107160016.png\" alt=\"Jenkins创建用户\"></p>\n<h3 id=\"实例配置\"><a href=\"#实例配置\" class=\"headerlink\" title=\"实例配置\"></a>实例配置</h3><p>默认直接点保存完成<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_20191107160056.png\" alt=\"Jenkins实例配置\"></p>\n<h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><p>点击开始使用Jenkins<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_20191107160129.png\" alt=\"Jenkins开始使用\"></p>\n<h3 id=\"Jenkins主界面\"><a href=\"#Jenkins主界面\" class=\"headerlink\" title=\"Jenkins主界面\"></a>Jenkins主界面</h3><p>进入Jenkins主界面，到此教程结束<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_20191107160204.png\" alt=\"Jenkins主界面\"></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-docker/\">Jenkins教程-搭建(Docker版)</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-mavne/\">Jenkins教程-创建Maven项目</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-ci-cd/\">Jenkins教程-Docker+GitLab持续部署持续集成</a></p>\n</li>\n</ul>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p>主机：172.16.54.131</p>\n</li>\n<li><p>系统：Cnetos 7</p>\n</li>\n</ul>\n<h2 id=\"安装Docker-CE\"><a href=\"#安装Docker-CE\" class=\"headerlink\" title=\"安装Docker-CE\"></a>安装Docker-CE</h2><h3 id=\"检查Docker\"><a href=\"#检查Docker\" class=\"headerlink\" title=\"检查Docker\"></a>检查Docker</h3><p>首先检查本机是否安装Docker，如果安装了直接跳过安装Docker步骤</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker -v</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果出现Docker version 19.03.4, build 9013bf583a类似的信息，则说明已安装Docker</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li>本教程以centos7安装方式说明，其他系统安装方式会有不同</li>\n</ul>\n<p>执行以下命令，安装Docker</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\">    </span><br><span class=\"line\">yum install docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\">service docker start</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一条命令：为添加源做准备 使其支持存储</li>\n<li>第二条命令：添加docker-ce软件源</li>\n<li>第三条命令：安装docker-ce</li>\n<li>第四条命令：启动docker服务</li>\n<li>第五条命令：设置开启自启</li>\n</ul>\n<h2 id=\"安装Jenkins的Docker容器\"><a href=\"#安装Jenkins的Docker容器\" class=\"headerlink\" title=\"安装Jenkins的Docker容器\"></a>安装Jenkins的Docker容器</h2><h3 id=\"创建文件夹\"><a href=\"#创建文件夹\" class=\"headerlink\" title=\"创建文件夹\"></a>创建文件夹</h3><p>在创建容器前先在宿主机创建一个Jenkins的工作文件夹，用于持久化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir /opt/jenkins     \t\t\t//创建文件夹</span><br><span class=\"line\">chmod 7777 /opt/jenkins\t\t\t//授予权限</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该文件夹一定要给权限，不然docker容器访问不了，容器会创建失败。</p>\n</blockquote>\n<h3 id=\"拉取官方镜像\"><a href=\"#拉取官方镜像\" class=\"headerlink\" title=\"拉取官方镜像\"></a>拉取官方镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8080:8080 -p 50000:50000 -u root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /opt/jenkins:/var/jenkins_home -v /etc/localtime:/etc/localtime -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai --restart=always --name jenkins jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>启动容器一定要用root用户进入docker容器，不然访问不了宿主机的docker服务。还有要挂载&#x2F;var&#x2F;run&#x2F;docker.sock和$(which docker)这两个文件夹到容器，这样docker版的jenkins才可以用使用docker相关服务。 </p>\n</blockquote>\n<h3 id=\"查看容器日志\"><a href=\"#查看容器日志\" class=\"headerlink\" title=\"查看容器日志\"></a>查看容器日志</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker logs jenkins </span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_docker_logs_4345.png\" alt=\"log界面\"></p>\n<blockquote>\n<p>记下43455b344f904cf69a4af9e231f7d48d这个密码，等下要用到</p>\n</blockquote>\n<h2 id=\"初始化Jenkins\"><a href=\"#初始化Jenkins\" class=\"headerlink\" title=\"初始化Jenkins\"></a>初始化Jenkins</h2><h3 id=\"解锁\"><a href=\"#解锁\" class=\"headerlink\" title=\"解锁\"></a>解锁</h3><p>在浏览器访问172.16.54.131:8080这个地址，进入Jenkins的web界面。（如果访问不了，请开启防火墙的8080端口）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_web_sign_in_201911071359.png\" alt=\"jenkins界面\"></p>\n<p>在输入框中填入刚才保存的密码</p>\n<h3 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h3><p>推荐直接选 安装推荐的插件</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_setupwizard_1911071408.png\" alt=\"Jenkins自定义界面\"></p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>到这个界面等他安装完成，时间会长一点</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_191107141216.png\" alt=\"Jenkins安装插件\"></p>\n<blockquote>\n<p>如这个界面插件下载失败，直接点继续，进行下一步，具体解决办法可以看这个篇文章</p>\n<p><a href=\"https://mjava.top/2019/11/07/technology/learningExperience/Linux/Jenkins/Jenkins%E5%88%9D%E5%A7%8B%E5%8C%96%E7%95%8C%E9%9D%A2%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/\">Jenkins初始化界面插件安装失败解决方法</a></p>\n</blockquote>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>设置你的登录账号和密码，然后点保存完成<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_20191107160016.png\" alt=\"Jenkins创建用户\"></p>\n<h3 id=\"实例配置\"><a href=\"#实例配置\" class=\"headerlink\" title=\"实例配置\"></a>实例配置</h3><p>默认直接点保存完成<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_20191107160056.png\" alt=\"Jenkins实例配置\"></p>\n<h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><p>点击开始使用Jenkins<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_20191107160129.png\" alt=\"Jenkins开始使用\"></p>\n<h3 id=\"Jenkins主界面\"><a href=\"#Jenkins主界面\" class=\"headerlink\" title=\"Jenkins主界面\"></a>Jenkins主界面</h3><p>进入Jenkins主界面，到此教程结束<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_20191107160204.png\" alt=\"Jenkins主界面\"></p>\n"},{"title":"Jenkins教程-创建Maven项目","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-12T09:26:19.000Z","password":null,"summary":null,"_content":"\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n\n\n## 前期准备\n\n本教程是和gitlab集成,所以要有gitlab仓库。注意：如果后期要弄自动部署的话,你Jenkins的地址gitlab必须能访问到。不然gitlab监听到事件就通知不了Jenkins了；\n\n### 环境\n\n- Centos 7\n- Jenkins(Docker版)\n\n### 所需插件\n\n> 除了搭建Jenkins时安装的插件,还需安装的插件\n\n- [Maven Integration](https://plugins.jenkins.io/maven-plugin)\n\n### 安装Maven\n\n点击侧边栏的Manage Jenkins,然后点击Global Tool Configuration,进入全局工具设置\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112105932.png)\n\n\n然后找到Maven,点击Add Maven,可以选择你要的Maven版本，然后设置一个名字。点击保存\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112110029.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112110130.png)\n\n\n\n### 创建Git登录凭证\n点击侧边栏的凭证，然后按图点击\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111043-20211009110702592.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111058-20211009110708086.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111115-20211009110713642.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111130-20211009110721384.png)\n\n这边Kind有很多选项，这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入gitlab的账号和密码。点击OK保存；\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111529-20211009110727391.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111806-20211009110733127.png)\n\n\n\n保存后就会出现你保存好的凭证；\n\n\n\n## 创建JOB\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111950.png)\n\n### 创建Maven项目\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112035.png)\n\n### 输入你的gitlab项目地址，然后选择刚才配置的凭证\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112620.png)\n\n### 输入Maven打包命令，然后点击保存\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112719.png)\n\n### 开始构建\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112747.png)\n\n### 查看构建项目日志\n> 第一次构建会比慢，因为他要下载maven相关构建的包\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112803.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112841.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112854.png)\n\n### 查看构建好的jar包\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112122030.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112122112.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112122135.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112122200.png)\n\n> 到此，构建maven项目已结束，可以下载这个jar包进行部署。后面会有自动构建部署的教程","source":"_posts/jenkins/build-jenkins-mavne.md","raw":"---\ntitle: Jenkins教程-创建Maven项目\ntop: true\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Jenkins\ncategories:\n  - Jenkins\ndate: 2019-11-12 17:26:19\npassword:\nsummary:\n---\n\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n\n\n## 前期准备\n\n本教程是和gitlab集成,所以要有gitlab仓库。注意：如果后期要弄自动部署的话,你Jenkins的地址gitlab必须能访问到。不然gitlab监听到事件就通知不了Jenkins了；\n\n### 环境\n\n- Centos 7\n- Jenkins(Docker版)\n\n### 所需插件\n\n> 除了搭建Jenkins时安装的插件,还需安装的插件\n\n- [Maven Integration](https://plugins.jenkins.io/maven-plugin)\n\n### 安装Maven\n\n点击侧边栏的Manage Jenkins,然后点击Global Tool Configuration,进入全局工具设置\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112105932.png)\n\n\n然后找到Maven,点击Add Maven,可以选择你要的Maven版本，然后设置一个名字。点击保存\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112110029.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112110130.png)\n\n\n\n### 创建Git登录凭证\n点击侧边栏的凭证，然后按图点击\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111043-20211009110702592.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111058-20211009110708086.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111115-20211009110713642.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111130-20211009110721384.png)\n\n这边Kind有很多选项，这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入gitlab的账号和密码。点击OK保存；\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111529-20211009110727391.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111806-20211009110733127.png)\n\n\n\n保存后就会出现你保存好的凭证；\n\n\n\n## 创建JOB\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111950.png)\n\n### 创建Maven项目\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112035.png)\n\n### 输入你的gitlab项目地址，然后选择刚才配置的凭证\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112620.png)\n\n### 输入Maven打包命令，然后点击保存\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112719.png)\n\n### 开始构建\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112747.png)\n\n### 查看构建项目日志\n> 第一次构建会比慢，因为他要下载maven相关构建的包\n\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112803.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112841.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112854.png)\n\n### 查看构建好的jar包\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112122030.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112122112.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112122135.png)\n![Jenkins界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112122200.png)\n\n> 到此，构建maven项目已结束，可以下载这个jar包进行部署。后面会有自动构建部署的教程","slug":"jenkins/build-jenkins-mavne","published":1,"updated":"2021-10-09T03:15:13.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehh0057vpuc2a1r9664","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-docker/\">Jenkins教程-搭建(Docker版)</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-mavne/\">Jenkins教程-创建Maven项目</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-ci-cd/\">Jenkins教程-Docker+GitLab持续部署持续集成</a></p>\n</li>\n</ul>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>本教程是和gitlab集成,所以要有gitlab仓库。注意：如果后期要弄自动部署的话,你Jenkins的地址gitlab必须能访问到。不然gitlab监听到事件就通知不了Jenkins了；</p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>Centos 7</li>\n<li>Jenkins(Docker版)</li>\n</ul>\n<h3 id=\"所需插件\"><a href=\"#所需插件\" class=\"headerlink\" title=\"所需插件\"></a>所需插件</h3><blockquote>\n<p>除了搭建Jenkins时安装的插件,还需安装的插件</p>\n</blockquote>\n<ul>\n<li><a href=\"https://plugins.jenkins.io/maven-plugin\">Maven Integration</a></li>\n</ul>\n<h3 id=\"安装Maven\"><a href=\"#安装Maven\" class=\"headerlink\" title=\"安装Maven\"></a>安装Maven</h3><p>点击侧边栏的Manage Jenkins,然后点击Global Tool Configuration,进入全局工具设置<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112105932.png\" alt=\"Jenkins界面\"></p>\n<p>然后找到Maven,点击Add Maven,可以选择你要的Maven版本，然后设置一个名字。点击保存</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112110029.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112110130.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"创建Git登录凭证\"><a href=\"#创建Git登录凭证\" class=\"headerlink\" title=\"创建Git登录凭证\"></a>创建Git登录凭证</h3><p>点击侧边栏的凭证，然后按图点击<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111043-20211009110702592.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111058-20211009110708086.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111115-20211009110713642.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111130-20211009110721384.png\" alt=\"Jenkins界面\"></p>\n<p>这边Kind有很多选项，这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入gitlab的账号和密码。点击OK保存；</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111529-20211009110727391.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111806-20211009110733127.png\" alt=\"Jenkins界面\"></p>\n<p>保存后就会出现你保存好的凭证；</p>\n<h2 id=\"创建JOB\"><a href=\"#创建JOB\" class=\"headerlink\" title=\"创建JOB\"></a>创建JOB</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111950.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"创建Maven项目\"><a href=\"#创建Maven项目\" class=\"headerlink\" title=\"创建Maven项目\"></a>创建Maven项目</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112035.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"输入你的gitlab项目地址，然后选择刚才配置的凭证\"><a href=\"#输入你的gitlab项目地址，然后选择刚才配置的凭证\" class=\"headerlink\" title=\"输入你的gitlab项目地址，然后选择刚才配置的凭证\"></a>输入你的gitlab项目地址，然后选择刚才配置的凭证</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112620.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"输入Maven打包命令，然后点击保存\"><a href=\"#输入Maven打包命令，然后点击保存\" class=\"headerlink\" title=\"输入Maven打包命令，然后点击保存\"></a>输入Maven打包命令，然后点击保存</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112719.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112747.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"查看构建项目日志\"><a href=\"#查看构建项目日志\" class=\"headerlink\" title=\"查看构建项目日志\"></a>查看构建项目日志</h3><blockquote>\n<p>第一次构建会比慢，因为他要下载maven相关构建的包</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112803.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112841.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112854.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"查看构建好的jar包\"><a href=\"#查看构建好的jar包\" class=\"headerlink\" title=\"查看构建好的jar包\"></a>查看构建好的jar包</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112122030.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112122112.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112122135.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112122200.png\" alt=\"Jenkins界面\"></p>\n<blockquote>\n<p>到此，构建maven项目已结束，可以下载这个jar包进行部署。后面会有自动构建部署的教程</p>\n</blockquote>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-docker/\">Jenkins教程-搭建(Docker版)</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-mavne/\">Jenkins教程-创建Maven项目</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-ci-cd/\">Jenkins教程-Docker+GitLab持续部署持续集成</a></p>\n</li>\n</ul>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>本教程是和gitlab集成,所以要有gitlab仓库。注意：如果后期要弄自动部署的话,你Jenkins的地址gitlab必须能访问到。不然gitlab监听到事件就通知不了Jenkins了；</p>\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>Centos 7</li>\n<li>Jenkins(Docker版)</li>\n</ul>\n<h3 id=\"所需插件\"><a href=\"#所需插件\" class=\"headerlink\" title=\"所需插件\"></a>所需插件</h3><blockquote>\n<p>除了搭建Jenkins时安装的插件,还需安装的插件</p>\n</blockquote>\n<ul>\n<li><a href=\"https://plugins.jenkins.io/maven-plugin\">Maven Integration</a></li>\n</ul>\n<h3 id=\"安装Maven\"><a href=\"#安装Maven\" class=\"headerlink\" title=\"安装Maven\"></a>安装Maven</h3><p>点击侧边栏的Manage Jenkins,然后点击Global Tool Configuration,进入全局工具设置<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112105932.png\" alt=\"Jenkins界面\"></p>\n<p>然后找到Maven,点击Add Maven,可以选择你要的Maven版本，然后设置一个名字。点击保存</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112110029.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112110130.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"创建Git登录凭证\"><a href=\"#创建Git登录凭证\" class=\"headerlink\" title=\"创建Git登录凭证\"></a>创建Git登录凭证</h3><p>点击侧边栏的凭证，然后按图点击<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111043-20211009110702592.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111058-20211009110708086.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111115-20211009110713642.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111130-20211009110721384.png\" alt=\"Jenkins界面\"></p>\n<p>这边Kind有很多选项，这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入gitlab的账号和密码。点击OK保存；</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111529-20211009110727391.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111806-20211009110733127.png\" alt=\"Jenkins界面\"></p>\n<p>保存后就会出现你保存好的凭证；</p>\n<h2 id=\"创建JOB\"><a href=\"#创建JOB\" class=\"headerlink\" title=\"创建JOB\"></a>创建JOB</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112111950.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"创建Maven项目\"><a href=\"#创建Maven项目\" class=\"headerlink\" title=\"创建Maven项目\"></a>创建Maven项目</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112035.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"输入你的gitlab项目地址，然后选择刚才配置的凭证\"><a href=\"#输入你的gitlab项目地址，然后选择刚才配置的凭证\" class=\"headerlink\" title=\"输入你的gitlab项目地址，然后选择刚才配置的凭证\"></a>输入你的gitlab项目地址，然后选择刚才配置的凭证</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112620.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"输入Maven打包命令，然后点击保存\"><a href=\"#输入Maven打包命令，然后点击保存\" class=\"headerlink\" title=\"输入Maven打包命令，然后点击保存\"></a>输入Maven打包命令，然后点击保存</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112719.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112747.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"查看构建项目日志\"><a href=\"#查看构建项目日志\" class=\"headerlink\" title=\"查看构建项目日志\"></a>查看构建项目日志</h3><blockquote>\n<p>第一次构建会比慢，因为他要下载maven相关构建的包</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112803.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112841.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112112854.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"查看构建好的jar包\"><a href=\"#查看构建好的jar包\" class=\"headerlink\" title=\"查看构建好的jar包\"></a>查看构建好的jar包</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112122030.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112122112.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112122135.png\" alt=\"Jenkins界面\"><br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191112122200.png\" alt=\"Jenkins界面\"></p>\n<blockquote>\n<p>到此，构建maven项目已结束，可以下载这个jar包进行部署。后面会有自动构建部署的教程</p>\n</blockquote>\n"},{"title":"Jenkins教程-集成SonarQube","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-13T07:38:02.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## 什么是SonarQube?\n\n看看维基百科的说明：\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/Fi9bL7TAwFmCYPt3Cz_d0TIwm9rQ.png)\n\n### SonarQube与CI/CD架构图\n![SonarQube与CI/CD架构图](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FpResgoc3tny2jvGqaqudPwCwstj.png)\n\n## Docker运行SonarQube\n\n简单了解之后，开始安装SonarQube.这里用Docker安装\n\n> 注：这里用mysql来存储SonarQube的数据，SonarQube7.9起已经不在支持mysql了，可以安装官方推荐的PostgreSQL\n\n- SonarQube 6.7.7\n- Docker-CE 19.03.1\n- Mysql 5.7\n\n### 安装\n\n直接运行这个docker命令来安装，网上其他的教程有什么挂载文件什么的，我试了都会安装失败，原因还是因为权限原因，因为SonarQube不是以root用户运行的，导致没权限读写挂载出来的文件夹．\n\n> 注意：创建容器前一定要先保证你连的容器有对应的数据库\n\n```shell\ndocker run -d --name sonarqube -p 9099:9000 -p 9092:9092 --link=dev_mysql:mysql -e SONARQUBE_JDBC_USERNAME=app -e SONARQUBE_JDBC_PASSWORD=app -e SONARQUBE_JDBC_URL=\"jdbc:mysql://mysql:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance&useSSL=false\" --restart=always sonarqube:6.7.7-community\n```\n\n- --link=dev_mysql:mysql     这个命令我链接到了我的mysql容器，dev_mysql是容器的名字，mysql是在SonarQube容器里的别名，所以链接数据库时直接用mysql这个别名就可了．\n\n- SONARQUBE_JDBC_USERNAME ：数据库的账户\n\n- SONARQUBE_JDBC_PASSWORD ：数据库密码\n\n\n\n### 访问\n\n安装好后直接访问<font color=orange>9099</font>端口，登录的账户和密码默认都是<font color=orange>admin</font>．首页就是这个样子的．\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/Fs08WpcVDcL3n32MxoCNPDMtu1r5.png)\n\n\n## Jenkins集成SonarQube\n\nJenkins和SonarQube都是运行在Docker容器里的\n\n### 下载和安装插件\n\n直接下载最新版的，然后导入，导入的方法可以看[插件导入方法](https://mjava.top/jenkins/problem-jenkins-01/)\n\n- 插件下载地址：https://updates.jenkins.io/download/plugins/sonar/\n\n\n\n### SonarQube生成Token\n\n进入SonarQube管理界面\n\nAdministration->Security->Users\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FpFSYEgJfsJIwgNMA6tHHZtdAtpV.png)\n\n\n\n然后随便输入一个名字，点击生成，记下Token\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FhTOSglZYOrP5poo_mmR3SGoobsD.png)\n\n\n\n### 添加全局凭证\n\n类型选Secret text,然后Secret和ID输入框都填入刚才生成的Token\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FrKo5EjJ9-78uYbDjBpiuVkeu-_5.png)\n\n### 设置SonarQube servers\n\n进入　系统管理->系统设置->SonarQube servers　　　　<font color=orange>设置好后点保存</font>\n\n> 因为我SonarQube和Jenkins安装在同一台机器不同的Docker容器里的,所以这里URL直接填SonarQube的Docker容器的IP和端口\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FpevTpJePMDg9-HSoQoSOCNORHL8.png)\n\n\n\n### 安装SonarQube Scanner\n\n#### 下载压缩包\n\n- 下载SonarQube Scanner压缩包：[SonarQube Scanner](https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip)\n\n#### 解压到Jenkins挂载出来的目录里\n\n只有解压到挂载出来的Jenkins的目录里，Docker容器安装的Jenkins才能读取到,<font color=orange>**我这里是宿主机的/opt/jenkins挂载到了Jenkins容器里的/var/jenkins_home目录上，所以我只要解压到宿主机的/opt/jenkins目录中就可以了**</font>\n\n#### Jenkins配置全局工具\n\n进入　系统管理->全局工具配置->SonarQube Scanner     找到模块后点击<font color=orange>新增SonarQube Scanner</font>\n\n<font color=orange>SONAR_RUNNER_HOME填你Jenkins这个Docker容器里的路径</font>\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/Fpgv2yqskGjp37mfoxHC6MGtIAPt.png)\n\n\n\n## 构建一个Maven项目\n\n网上很多教程说要勾上这个选项：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FsSrQCDF5O9x4sufLZkFRz40toHI.png)\n其实这个是可选的，下面有一句话：<font color=orange>These variables are useful when configuring a SonarQube analysis using standard build steps such as Maven, Gradle, Ant, and command line scripts.This feature is not needed if you're using \"SonarQube Scanner\" or \"SonarScanner for MSBuild\" build steps.</font>\n\n翻译过来就是：![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FrM7HmTx_APStJMI0OHlMQO6WL3W.png)\n因为我们这里用的就是<font color=orange>SonarQube Scanner</font>,所以这个我们是可以不用勾上的，但是勾上也没影响；\n\n\n\n\n\n### 开始构建\n- 具体怎么构建项目可以看：[Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/),这里就不多介绍了\n\n#### 添加Execute SonarQube Scanner\n\n在原来构建的基础上加上<font color=orange>Execute SonarQube Scanner</font>，就可以了\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FgZ021lPaTWzgOPsG7veK1cn7lIB.png)\n\n在<font color=orange>Analysis properties</font>里填上构建的参数\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FiFA65-xUZCh62Y5HfIgxQzvMx7D.png)\n\n>唯一的项目标识符（必填）\n>sonar.projectKey =tiny-config1\n>\n>项目元数据（以前是必需的，自SonarQube 6.1起是可选的）\n>sonar.projectName =tiny-config1\n>sonar.projectVersion = 1.0\n>\n>源目录的路径（必需）\n>sonar.sources = srcDir1，srcDir2\n>\n>测试源目录的路径（可选）\n>sonar.tests = testDir1，testDir2\n>\n>Java项目编译类的路径（可选）\n>sonar.java.binaries = bin\n>\n>逗号分隔的库路径列表（可选）\n>sonar.java.libraries = path / to / library.jar，path / to / classes / dir\n>\n>附加参数\n>sonar.my.property =value\n\n保存后就可以正常构建了．\n\n#### 错误解决（没有错误可跳过这段）\n如果在构建项目的时候,Jenkins控制台如果报一下错误，这是因为SonarQube的Java版本太低造成的\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FnTRL4pSwrKk5Xwbzobo89VKHf5m.png)\n\n##### 升级SonarQube的Java版本\n\n进入SonarQube的管理台： Administration->Marketplace->SonarJava\n\n> 如果你版本没升级，右边会有个update按钮，点击就可以升级了，升级完后重启SonarQube;这边因为我已经升级过了，所以没有这个按钮\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FgbCXvUiteJ9iGCCYC6qbInX0VSX.png)\n\n\n\n### 构建完成后\n\nJenkins控制台显示SUCCESS就表示构建成功了\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FoijfnBHiJAZ7lA7YqmdQb-bEqUF.png)\n\n这时候就可以点击构建项目的SonarQube直接跳转到SonarQube控制台了\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FhXgRD7rBp5RBc2D6uBmH5mIBNKJ.png)\n\n\n这里就可以看到结果了\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FkPydWtLuuliKAq1hc8Ex45nnTlu.png)\n\n\n## 总结\n\n到这里就可以根据SonarQube的提示区改BUG了．这BUG有点多＝＿＝！.\n\n在搭建过程中，最主要的就是那个SonarQube Scanner这个的安装了，因为Jenkins都是Docker化的，所以他可以选择自动安装，但是我这边选择自动安装却没用，所以就自己下载了SonarQube Scnner的包挂载到Jenkins容器里区，然后直接指定SonarQube Scnner的目录就可以了；","source":"_posts/jenkins/build-jenkins-sonarqube.md","raw":"---\ntitle: Jenkins教程-集成SonarQube\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-13 15:38:02\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Jenkins\n- SonarQube\n- Docker\ncategories:\n- Jenkins\n---\n\n\n\n## 什么是SonarQube?\n\n看看维基百科的说明：\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/Fi9bL7TAwFmCYPt3Cz_d0TIwm9rQ.png)\n\n### SonarQube与CI/CD架构图\n![SonarQube与CI/CD架构图](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FpResgoc3tny2jvGqaqudPwCwstj.png)\n\n## Docker运行SonarQube\n\n简单了解之后，开始安装SonarQube.这里用Docker安装\n\n> 注：这里用mysql来存储SonarQube的数据，SonarQube7.9起已经不在支持mysql了，可以安装官方推荐的PostgreSQL\n\n- SonarQube 6.7.7\n- Docker-CE 19.03.1\n- Mysql 5.7\n\n### 安装\n\n直接运行这个docker命令来安装，网上其他的教程有什么挂载文件什么的，我试了都会安装失败，原因还是因为权限原因，因为SonarQube不是以root用户运行的，导致没权限读写挂载出来的文件夹．\n\n> 注意：创建容器前一定要先保证你连的容器有对应的数据库\n\n```shell\ndocker run -d --name sonarqube -p 9099:9000 -p 9092:9092 --link=dev_mysql:mysql -e SONARQUBE_JDBC_USERNAME=app -e SONARQUBE_JDBC_PASSWORD=app -e SONARQUBE_JDBC_URL=\"jdbc:mysql://mysql:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance&useSSL=false\" --restart=always sonarqube:6.7.7-community\n```\n\n- --link=dev_mysql:mysql     这个命令我链接到了我的mysql容器，dev_mysql是容器的名字，mysql是在SonarQube容器里的别名，所以链接数据库时直接用mysql这个别名就可了．\n\n- SONARQUBE_JDBC_USERNAME ：数据库的账户\n\n- SONARQUBE_JDBC_PASSWORD ：数据库密码\n\n\n\n### 访问\n\n安装好后直接访问<font color=orange>9099</font>端口，登录的账户和密码默认都是<font color=orange>admin</font>．首页就是这个样子的．\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/Fs08WpcVDcL3n32MxoCNPDMtu1r5.png)\n\n\n## Jenkins集成SonarQube\n\nJenkins和SonarQube都是运行在Docker容器里的\n\n### 下载和安装插件\n\n直接下载最新版的，然后导入，导入的方法可以看[插件导入方法](https://mjava.top/jenkins/problem-jenkins-01/)\n\n- 插件下载地址：https://updates.jenkins.io/download/plugins/sonar/\n\n\n\n### SonarQube生成Token\n\n进入SonarQube管理界面\n\nAdministration->Security->Users\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FpFSYEgJfsJIwgNMA6tHHZtdAtpV.png)\n\n\n\n然后随便输入一个名字，点击生成，记下Token\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FhTOSglZYOrP5poo_mmR3SGoobsD.png)\n\n\n\n### 添加全局凭证\n\n类型选Secret text,然后Secret和ID输入框都填入刚才生成的Token\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FrKo5EjJ9-78uYbDjBpiuVkeu-_5.png)\n\n### 设置SonarQube servers\n\n进入　系统管理->系统设置->SonarQube servers　　　　<font color=orange>设置好后点保存</font>\n\n> 因为我SonarQube和Jenkins安装在同一台机器不同的Docker容器里的,所以这里URL直接填SonarQube的Docker容器的IP和端口\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FpevTpJePMDg9-HSoQoSOCNORHL8.png)\n\n\n\n### 安装SonarQube Scanner\n\n#### 下载压缩包\n\n- 下载SonarQube Scanner压缩包：[SonarQube Scanner](https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip)\n\n#### 解压到Jenkins挂载出来的目录里\n\n只有解压到挂载出来的Jenkins的目录里，Docker容器安装的Jenkins才能读取到,<font color=orange>**我这里是宿主机的/opt/jenkins挂载到了Jenkins容器里的/var/jenkins_home目录上，所以我只要解压到宿主机的/opt/jenkins目录中就可以了**</font>\n\n#### Jenkins配置全局工具\n\n进入　系统管理->全局工具配置->SonarQube Scanner     找到模块后点击<font color=orange>新增SonarQube Scanner</font>\n\n<font color=orange>SONAR_RUNNER_HOME填你Jenkins这个Docker容器里的路径</font>\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/Fpgv2yqskGjp37mfoxHC6MGtIAPt.png)\n\n\n\n## 构建一个Maven项目\n\n网上很多教程说要勾上这个选项：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FsSrQCDF5O9x4sufLZkFRz40toHI.png)\n其实这个是可选的，下面有一句话：<font color=orange>These variables are useful when configuring a SonarQube analysis using standard build steps such as Maven, Gradle, Ant, and command line scripts.This feature is not needed if you're using \"SonarQube Scanner\" or \"SonarScanner for MSBuild\" build steps.</font>\n\n翻译过来就是：![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FrM7HmTx_APStJMI0OHlMQO6WL3W.png)\n因为我们这里用的就是<font color=orange>SonarQube Scanner</font>,所以这个我们是可以不用勾上的，但是勾上也没影响；\n\n\n\n\n\n### 开始构建\n- 具体怎么构建项目可以看：[Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/),这里就不多介绍了\n\n#### 添加Execute SonarQube Scanner\n\n在原来构建的基础上加上<font color=orange>Execute SonarQube Scanner</font>，就可以了\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FgZ021lPaTWzgOPsG7veK1cn7lIB.png)\n\n在<font color=orange>Analysis properties</font>里填上构建的参数\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FiFA65-xUZCh62Y5HfIgxQzvMx7D.png)\n\n>唯一的项目标识符（必填）\n>sonar.projectKey =tiny-config1\n>\n>项目元数据（以前是必需的，自SonarQube 6.1起是可选的）\n>sonar.projectName =tiny-config1\n>sonar.projectVersion = 1.0\n>\n>源目录的路径（必需）\n>sonar.sources = srcDir1，srcDir2\n>\n>测试源目录的路径（可选）\n>sonar.tests = testDir1，testDir2\n>\n>Java项目编译类的路径（可选）\n>sonar.java.binaries = bin\n>\n>逗号分隔的库路径列表（可选）\n>sonar.java.libraries = path / to / library.jar，path / to / classes / dir\n>\n>附加参数\n>sonar.my.property =value\n\n保存后就可以正常构建了．\n\n#### 错误解决（没有错误可跳过这段）\n如果在构建项目的时候,Jenkins控制台如果报一下错误，这是因为SonarQube的Java版本太低造成的\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FnTRL4pSwrKk5Xwbzobo89VKHf5m.png)\n\n##### 升级SonarQube的Java版本\n\n进入SonarQube的管理台： Administration->Marketplace->SonarJava\n\n> 如果你版本没升级，右边会有个update按钮，点击就可以升级了，升级完后重启SonarQube;这边因为我已经升级过了，所以没有这个按钮\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FgbCXvUiteJ9iGCCYC6qbInX0VSX.png)\n\n\n\n### 构建完成后\n\nJenkins控制台显示SUCCESS就表示构建成功了\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FoijfnBHiJAZ7lA7YqmdQb-bEqUF.png)\n\n这时候就可以点击构建项目的SonarQube直接跳转到SonarQube控制台了\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FhXgRD7rBp5RBc2D6uBmH5mIBNKJ.png)\n\n\n这里就可以看到结果了\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FkPydWtLuuliKAq1hc8Ex45nnTlu.png)\n\n\n## 总结\n\n到这里就可以根据SonarQube的提示区改BUG了．这BUG有点多＝＿＝！.\n\n在搭建过程中，最主要的就是那个SonarQube Scanner这个的安装了，因为Jenkins都是Docker化的，所以他可以选择自动安装，但是我这边选择自动安装却没用，所以就自己下载了SonarQube Scnner的包挂载到Jenkins容器里区，然后直接指定SonarQube Scnner的目录就可以了；","slug":"jenkins/build-jenkins-sonarqube","published":1,"updated":"2021-10-09T03:14:19.099Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehi0059vpuc43b0566a","content":"<h2 id=\"什么是SonarQube\"><a href=\"#什么是SonarQube\" class=\"headerlink\" title=\"什么是SonarQube?\"></a>什么是SonarQube?</h2><p>看看维基百科的说明：<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/Fi9bL7TAwFmCYPt3Cz_d0TIwm9rQ.png\" alt=\"图片\"></p>\n<h3 id=\"SonarQube与CI-x2F-CD架构图\"><a href=\"#SonarQube与CI-x2F-CD架构图\" class=\"headerlink\" title=\"SonarQube与CI&#x2F;CD架构图\"></a>SonarQube与CI&#x2F;CD架构图</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FpResgoc3tny2jvGqaqudPwCwstj.png\" alt=\"SonarQube与CI/CD架构图\"></p>\n<h2 id=\"Docker运行SonarQube\"><a href=\"#Docker运行SonarQube\" class=\"headerlink\" title=\"Docker运行SonarQube\"></a>Docker运行SonarQube</h2><p>简单了解之后，开始安装SonarQube.这里用Docker安装</p>\n<blockquote>\n<p>注：这里用mysql来存储SonarQube的数据，SonarQube7.9起已经不在支持mysql了，可以安装官方推荐的PostgreSQL</p>\n</blockquote>\n<ul>\n<li>SonarQube 6.7.7</li>\n<li>Docker-CE 19.03.1</li>\n<li>Mysql 5.7</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接运行这个docker命令来安装，网上其他的教程有什么挂载文件什么的，我试了都会安装失败，原因还是因为权限原因，因为SonarQube不是以root用户运行的，导致没权限读写挂载出来的文件夹．</p>\n<blockquote>\n<p>注意：创建容器前一定要先保证你连的容器有对应的数据库</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name sonarqube -p 9099:9000 -p 9092:9092 --link=dev_mysql:mysql -e SONARQUBE_JDBC_USERNAME=app -e SONARQUBE_JDBC_PASSWORD=app -e SONARQUBE_JDBC_URL=&quot;jdbc:mysql://mysql:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false&quot; --restart=always sonarqube:6.7.7-community</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>–link&#x3D;dev_mysql:mysql     这个命令我链接到了我的mysql容器，dev_mysql是容器的名字，mysql是在SonarQube容器里的别名，所以链接数据库时直接用mysql这个别名就可了．</p>\n</li>\n<li><p>SONARQUBE_JDBC_USERNAME ：数据库的账户</p>\n</li>\n<li><p>SONARQUBE_JDBC_PASSWORD ：数据库密码</p>\n</li>\n</ul>\n<h3 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h3><p>安装好后直接访问<font color=orange>9099</font>端口，登录的账户和密码默认都是<font color=orange>admin</font>．首页就是这个样子的．</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/Fs08WpcVDcL3n32MxoCNPDMtu1r5.png\" alt=\"图片\"></p>\n<h2 id=\"Jenkins集成SonarQube\"><a href=\"#Jenkins集成SonarQube\" class=\"headerlink\" title=\"Jenkins集成SonarQube\"></a>Jenkins集成SonarQube</h2><p>Jenkins和SonarQube都是运行在Docker容器里的</p>\n<h3 id=\"下载和安装插件\"><a href=\"#下载和安装插件\" class=\"headerlink\" title=\"下载和安装插件\"></a>下载和安装插件</h3><p>直接下载最新版的，然后导入，导入的方法可以看<a href=\"https://mjava.top/jenkins/problem-jenkins-01/\">插件导入方法</a></p>\n<ul>\n<li>插件下载地址：<a href=\"https://updates.jenkins.io/download/plugins/sonar/\">https://updates.jenkins.io/download/plugins/sonar/</a></li>\n</ul>\n<h3 id=\"SonarQube生成Token\"><a href=\"#SonarQube生成Token\" class=\"headerlink\" title=\"SonarQube生成Token\"></a>SonarQube生成Token</h3><p>进入SonarQube管理界面</p>\n<p>Administration-&gt;Security-&gt;Users</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FpFSYEgJfsJIwgNMA6tHHZtdAtpV.png\" alt=\"图片\"></p>\n<p>然后随便输入一个名字，点击生成，记下Token</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FhTOSglZYOrP5poo_mmR3SGoobsD.png\" alt=\"图片\"></p>\n<h3 id=\"添加全局凭证\"><a href=\"#添加全局凭证\" class=\"headerlink\" title=\"添加全局凭证\"></a>添加全局凭证</h3><p>类型选Secret text,然后Secret和ID输入框都填入刚才生成的Token</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FrKo5EjJ9-78uYbDjBpiuVkeu-_5.png\" alt=\"图片\"></p>\n<h3 id=\"设置SonarQube-servers\"><a href=\"#设置SonarQube-servers\" class=\"headerlink\" title=\"设置SonarQube servers\"></a>设置SonarQube servers</h3><p>进入　系统管理-&gt;系统设置-&gt;SonarQube servers　　　　<font color=orange>设置好后点保存</font></p>\n<blockquote>\n<p>因为我SonarQube和Jenkins安装在同一台机器不同的Docker容器里的,所以这里URL直接填SonarQube的Docker容器的IP和端口</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FpevTpJePMDg9-HSoQoSOCNORHL8.png\" alt=\"图片\"></p>\n<h3 id=\"安装SonarQube-Scanner\"><a href=\"#安装SonarQube-Scanner\" class=\"headerlink\" title=\"安装SonarQube Scanner\"></a>安装SonarQube Scanner</h3><h4 id=\"下载压缩包\"><a href=\"#下载压缩包\" class=\"headerlink\" title=\"下载压缩包\"></a>下载压缩包</h4><ul>\n<li>下载SonarQube Scanner压缩包：<a href=\"https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip\">SonarQube Scanner</a></li>\n</ul>\n<h4 id=\"解压到Jenkins挂载出来的目录里\"><a href=\"#解压到Jenkins挂载出来的目录里\" class=\"headerlink\" title=\"解压到Jenkins挂载出来的目录里\"></a>解压到Jenkins挂载出来的目录里</h4><p>只有解压到挂载出来的Jenkins的目录里，Docker容器安装的Jenkins才能读取到,<font color=orange><strong>我这里是宿主机的&#x2F;opt&#x2F;jenkins挂载到了Jenkins容器里的&#x2F;var&#x2F;jenkins_home目录上，所以我只要解压到宿主机的&#x2F;opt&#x2F;jenkins目录中就可以了</strong></font></p>\n<h4 id=\"Jenkins配置全局工具\"><a href=\"#Jenkins配置全局工具\" class=\"headerlink\" title=\"Jenkins配置全局工具\"></a>Jenkins配置全局工具</h4><p>进入　系统管理-&gt;全局工具配置-&gt;SonarQube Scanner     找到模块后点击<font color=orange>新增SonarQube Scanner</font></p>\n<p><font color=orange>SONAR_RUNNER_HOME填你Jenkins这个Docker容器里的路径</font></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/Fpgv2yqskGjp37mfoxHC6MGtIAPt.png\" alt=\"图片\"></p>\n<h2 id=\"构建一个Maven项目\"><a href=\"#构建一个Maven项目\" class=\"headerlink\" title=\"构建一个Maven项目\"></a>构建一个Maven项目</h2><p>网上很多教程说要勾上这个选项：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FsSrQCDF5O9x4sufLZkFRz40toHI.png\" alt=\"图片\"><br>其实这个是可选的，下面有一句话：<font color=orange>These variables are useful when configuring a SonarQube analysis using standard build steps such as Maven, Gradle, Ant, and command line scripts.This feature is not needed if you’re using “SonarQube Scanner” or “SonarScanner for MSBuild” build steps.</font></p>\n<p>翻译过来就是：<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FrM7HmTx_APStJMI0OHlMQO6WL3W.png\" alt=\"图片\"><br>因为我们这里用的就是<font color=orange>SonarQube Scanner</font>,所以这个我们是可以不用勾上的，但是勾上也没影响；</p>\n<h3 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h3><ul>\n<li>具体怎么构建项目可以看：<a href=\"https://mjava.top/jenkins/build-jenkins-mavne/\">Jenkins教程-创建Maven项目</a>,这里就不多介绍了</li>\n</ul>\n<h4 id=\"添加Execute-SonarQube-Scanner\"><a href=\"#添加Execute-SonarQube-Scanner\" class=\"headerlink\" title=\"添加Execute SonarQube Scanner\"></a>添加Execute SonarQube Scanner</h4><p>在原来构建的基础上加上<font color=orange>Execute SonarQube Scanner</font>，就可以了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FgZ021lPaTWzgOPsG7veK1cn7lIB.png\" alt=\"图片\"></p>\n<p>在<font color=orange>Analysis properties</font>里填上构建的参数</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FiFA65-xUZCh62Y5HfIgxQzvMx7D.png\" alt=\"图片\"></p>\n<blockquote>\n<p>唯一的项目标识符（必填）<br>sonar.projectKey &#x3D;tiny-config1</p>\n<p>项目元数据（以前是必需的，自SonarQube 6.1起是可选的）<br>sonar.projectName &#x3D;tiny-config1<br>sonar.projectVersion &#x3D; 1.0</p>\n<p>源目录的路径（必需）<br>sonar.sources &#x3D; srcDir1，srcDir2</p>\n<p>测试源目录的路径（可选）<br>sonar.tests &#x3D; testDir1，testDir2</p>\n<p>Java项目编译类的路径（可选）<br>sonar.java.binaries &#x3D; bin</p>\n<p>逗号分隔的库路径列表（可选）<br>sonar.java.libraries &#x3D; path &#x2F; to &#x2F; library.jar，path &#x2F; to &#x2F; classes &#x2F; dir</p>\n<p>附加参数<br>sonar.my.property &#x3D;value</p>\n</blockquote>\n<p>保存后就可以正常构建了．</p>\n<h4 id=\"错误解决（没有错误可跳过这段）\"><a href=\"#错误解决（没有错误可跳过这段）\" class=\"headerlink\" title=\"错误解决（没有错误可跳过这段）\"></a>错误解决（没有错误可跳过这段）</h4><p>如果在构建项目的时候,Jenkins控制台如果报一下错误，这是因为SonarQube的Java版本太低造成的<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FnTRL4pSwrKk5Xwbzobo89VKHf5m.png\" alt=\"图片\"></p>\n<h5 id=\"升级SonarQube的Java版本\"><a href=\"#升级SonarQube的Java版本\" class=\"headerlink\" title=\"升级SonarQube的Java版本\"></a>升级SonarQube的Java版本</h5><p>进入SonarQube的管理台： Administration-&gt;Marketplace-&gt;SonarJava</p>\n<blockquote>\n<p>如果你版本没升级，右边会有个update按钮，点击就可以升级了，升级完后重启SonarQube;这边因为我已经升级过了，所以没有这个按钮</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FgbCXvUiteJ9iGCCYC6qbInX0VSX.png\" alt=\"图片\"></p>\n<h3 id=\"构建完成后\"><a href=\"#构建完成后\" class=\"headerlink\" title=\"构建完成后\"></a>构建完成后</h3><p>Jenkins控制台显示SUCCESS就表示构建成功了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FoijfnBHiJAZ7lA7YqmdQb-bEqUF.png\" alt=\"图片\"></p>\n<p>这时候就可以点击构建项目的SonarQube直接跳转到SonarQube控制台了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FhXgRD7rBp5RBc2D6uBmH5mIBNKJ.png\" alt=\"图片\"></p>\n<p>这里就可以看到结果了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FkPydWtLuuliKAq1hc8Ex45nnTlu.png\" alt=\"图片\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到这里就可以根据SonarQube的提示区改BUG了．这BUG有点多＝＿＝！.</p>\n<p>在搭建过程中，最主要的就是那个SonarQube Scanner这个的安装了，因为Jenkins都是Docker化的，所以他可以选择自动安装，但是我这边选择自动安装却没用，所以就自己下载了SonarQube Scnner的包挂载到Jenkins容器里区，然后直接指定SonarQube Scnner的目录就可以了；</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"什么是SonarQube\"><a href=\"#什么是SonarQube\" class=\"headerlink\" title=\"什么是SonarQube?\"></a>什么是SonarQube?</h2><p>看看维基百科的说明：<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/Fi9bL7TAwFmCYPt3Cz_d0TIwm9rQ.png\" alt=\"图片\"></p>\n<h3 id=\"SonarQube与CI-x2F-CD架构图\"><a href=\"#SonarQube与CI-x2F-CD架构图\" class=\"headerlink\" title=\"SonarQube与CI&#x2F;CD架构图\"></a>SonarQube与CI&#x2F;CD架构图</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FpResgoc3tny2jvGqaqudPwCwstj.png\" alt=\"SonarQube与CI/CD架构图\"></p>\n<h2 id=\"Docker运行SonarQube\"><a href=\"#Docker运行SonarQube\" class=\"headerlink\" title=\"Docker运行SonarQube\"></a>Docker运行SonarQube</h2><p>简单了解之后，开始安装SonarQube.这里用Docker安装</p>\n<blockquote>\n<p>注：这里用mysql来存储SonarQube的数据，SonarQube7.9起已经不在支持mysql了，可以安装官方推荐的PostgreSQL</p>\n</blockquote>\n<ul>\n<li>SonarQube 6.7.7</li>\n<li>Docker-CE 19.03.1</li>\n<li>Mysql 5.7</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接运行这个docker命令来安装，网上其他的教程有什么挂载文件什么的，我试了都会安装失败，原因还是因为权限原因，因为SonarQube不是以root用户运行的，导致没权限读写挂载出来的文件夹．</p>\n<blockquote>\n<p>注意：创建容器前一定要先保证你连的容器有对应的数据库</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name sonarqube -p 9099:9000 -p 9092:9092 --link=dev_mysql:mysql -e SONARQUBE_JDBC_USERNAME=app -e SONARQUBE_JDBC_PASSWORD=app -e SONARQUBE_JDBC_URL=&quot;jdbc:mysql://mysql:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false&quot; --restart=always sonarqube:6.7.7-community</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>–link&#x3D;dev_mysql:mysql     这个命令我链接到了我的mysql容器，dev_mysql是容器的名字，mysql是在SonarQube容器里的别名，所以链接数据库时直接用mysql这个别名就可了．</p>\n</li>\n<li><p>SONARQUBE_JDBC_USERNAME ：数据库的账户</p>\n</li>\n<li><p>SONARQUBE_JDBC_PASSWORD ：数据库密码</p>\n</li>\n</ul>\n<h3 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h3><p>安装好后直接访问<font color=orange>9099</font>端口，登录的账户和密码默认都是<font color=orange>admin</font>．首页就是这个样子的．</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/Fs08WpcVDcL3n32MxoCNPDMtu1r5.png\" alt=\"图片\"></p>\n<h2 id=\"Jenkins集成SonarQube\"><a href=\"#Jenkins集成SonarQube\" class=\"headerlink\" title=\"Jenkins集成SonarQube\"></a>Jenkins集成SonarQube</h2><p>Jenkins和SonarQube都是运行在Docker容器里的</p>\n<h3 id=\"下载和安装插件\"><a href=\"#下载和安装插件\" class=\"headerlink\" title=\"下载和安装插件\"></a>下载和安装插件</h3><p>直接下载最新版的，然后导入，导入的方法可以看<a href=\"https://mjava.top/jenkins/problem-jenkins-01/\">插件导入方法</a></p>\n<ul>\n<li>插件下载地址：<a href=\"https://updates.jenkins.io/download/plugins/sonar/\">https://updates.jenkins.io/download/plugins/sonar/</a></li>\n</ul>\n<h3 id=\"SonarQube生成Token\"><a href=\"#SonarQube生成Token\" class=\"headerlink\" title=\"SonarQube生成Token\"></a>SonarQube生成Token</h3><p>进入SonarQube管理界面</p>\n<p>Administration-&gt;Security-&gt;Users</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FpFSYEgJfsJIwgNMA6tHHZtdAtpV.png\" alt=\"图片\"></p>\n<p>然后随便输入一个名字，点击生成，记下Token</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FhTOSglZYOrP5poo_mmR3SGoobsD.png\" alt=\"图片\"></p>\n<h3 id=\"添加全局凭证\"><a href=\"#添加全局凭证\" class=\"headerlink\" title=\"添加全局凭证\"></a>添加全局凭证</h3><p>类型选Secret text,然后Secret和ID输入框都填入刚才生成的Token</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FrKo5EjJ9-78uYbDjBpiuVkeu-_5.png\" alt=\"图片\"></p>\n<h3 id=\"设置SonarQube-servers\"><a href=\"#设置SonarQube-servers\" class=\"headerlink\" title=\"设置SonarQube servers\"></a>设置SonarQube servers</h3><p>进入　系统管理-&gt;系统设置-&gt;SonarQube servers　　　　<font color=orange>设置好后点保存</font></p>\n<blockquote>\n<p>因为我SonarQube和Jenkins安装在同一台机器不同的Docker容器里的,所以这里URL直接填SonarQube的Docker容器的IP和端口</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FpevTpJePMDg9-HSoQoSOCNORHL8.png\" alt=\"图片\"></p>\n<h3 id=\"安装SonarQube-Scanner\"><a href=\"#安装SonarQube-Scanner\" class=\"headerlink\" title=\"安装SonarQube Scanner\"></a>安装SonarQube Scanner</h3><h4 id=\"下载压缩包\"><a href=\"#下载压缩包\" class=\"headerlink\" title=\"下载压缩包\"></a>下载压缩包</h4><ul>\n<li>下载SonarQube Scanner压缩包：<a href=\"https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip\">SonarQube Scanner</a></li>\n</ul>\n<h4 id=\"解压到Jenkins挂载出来的目录里\"><a href=\"#解压到Jenkins挂载出来的目录里\" class=\"headerlink\" title=\"解压到Jenkins挂载出来的目录里\"></a>解压到Jenkins挂载出来的目录里</h4><p>只有解压到挂载出来的Jenkins的目录里，Docker容器安装的Jenkins才能读取到,<font color=orange><strong>我这里是宿主机的&#x2F;opt&#x2F;jenkins挂载到了Jenkins容器里的&#x2F;var&#x2F;jenkins_home目录上，所以我只要解压到宿主机的&#x2F;opt&#x2F;jenkins目录中就可以了</strong></font></p>\n<h4 id=\"Jenkins配置全局工具\"><a href=\"#Jenkins配置全局工具\" class=\"headerlink\" title=\"Jenkins配置全局工具\"></a>Jenkins配置全局工具</h4><p>进入　系统管理-&gt;全局工具配置-&gt;SonarQube Scanner     找到模块后点击<font color=orange>新增SonarQube Scanner</font></p>\n<p><font color=orange>SONAR_RUNNER_HOME填你Jenkins这个Docker容器里的路径</font></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/Fpgv2yqskGjp37mfoxHC6MGtIAPt.png\" alt=\"图片\"></p>\n<h2 id=\"构建一个Maven项目\"><a href=\"#构建一个Maven项目\" class=\"headerlink\" title=\"构建一个Maven项目\"></a>构建一个Maven项目</h2><p>网上很多教程说要勾上这个选项：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FsSrQCDF5O9x4sufLZkFRz40toHI.png\" alt=\"图片\"><br>其实这个是可选的，下面有一句话：<font color=orange>These variables are useful when configuring a SonarQube analysis using standard build steps such as Maven, Gradle, Ant, and command line scripts.This feature is not needed if you’re using “SonarQube Scanner” or “SonarScanner for MSBuild” build steps.</font></p>\n<p>翻译过来就是：<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FrM7HmTx_APStJMI0OHlMQO6WL3W.png\" alt=\"图片\"><br>因为我们这里用的就是<font color=orange>SonarQube Scanner</font>,所以这个我们是可以不用勾上的，但是勾上也没影响；</p>\n<h3 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h3><ul>\n<li>具体怎么构建项目可以看：<a href=\"https://mjava.top/jenkins/build-jenkins-mavne/\">Jenkins教程-创建Maven项目</a>,这里就不多介绍了</li>\n</ul>\n<h4 id=\"添加Execute-SonarQube-Scanner\"><a href=\"#添加Execute-SonarQube-Scanner\" class=\"headerlink\" title=\"添加Execute SonarQube Scanner\"></a>添加Execute SonarQube Scanner</h4><p>在原来构建的基础上加上<font color=orange>Execute SonarQube Scanner</font>，就可以了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FgZ021lPaTWzgOPsG7veK1cn7lIB.png\" alt=\"图片\"></p>\n<p>在<font color=orange>Analysis properties</font>里填上构建的参数</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FiFA65-xUZCh62Y5HfIgxQzvMx7D.png\" alt=\"图片\"></p>\n<blockquote>\n<p>唯一的项目标识符（必填）<br>sonar.projectKey &#x3D;tiny-config1</p>\n<p>项目元数据（以前是必需的，自SonarQube 6.1起是可选的）<br>sonar.projectName &#x3D;tiny-config1<br>sonar.projectVersion &#x3D; 1.0</p>\n<p>源目录的路径（必需）<br>sonar.sources &#x3D; srcDir1，srcDir2</p>\n<p>测试源目录的路径（可选）<br>sonar.tests &#x3D; testDir1，testDir2</p>\n<p>Java项目编译类的路径（可选）<br>sonar.java.binaries &#x3D; bin</p>\n<p>逗号分隔的库路径列表（可选）<br>sonar.java.libraries &#x3D; path &#x2F; to &#x2F; library.jar，path &#x2F; to &#x2F; classes &#x2F; dir</p>\n<p>附加参数<br>sonar.my.property &#x3D;value</p>\n</blockquote>\n<p>保存后就可以正常构建了．</p>\n<h4 id=\"错误解决（没有错误可跳过这段）\"><a href=\"#错误解决（没有错误可跳过这段）\" class=\"headerlink\" title=\"错误解决（没有错误可跳过这段）\"></a>错误解决（没有错误可跳过这段）</h4><p>如果在构建项目的时候,Jenkins控制台如果报一下错误，这是因为SonarQube的Java版本太低造成的<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FnTRL4pSwrKk5Xwbzobo89VKHf5m.png\" alt=\"图片\"></p>\n<h5 id=\"升级SonarQube的Java版本\"><a href=\"#升级SonarQube的Java版本\" class=\"headerlink\" title=\"升级SonarQube的Java版本\"></a>升级SonarQube的Java版本</h5><p>进入SonarQube的管理台： Administration-&gt;Marketplace-&gt;SonarJava</p>\n<blockquote>\n<p>如果你版本没升级，右边会有个update按钮，点击就可以升级了，升级完后重启SonarQube;这边因为我已经升级过了，所以没有这个按钮</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FgbCXvUiteJ9iGCCYC6qbInX0VSX.png\" alt=\"图片\"></p>\n<h3 id=\"构建完成后\"><a href=\"#构建完成后\" class=\"headerlink\" title=\"构建完成后\"></a>构建完成后</h3><p>Jenkins控制台显示SUCCESS就表示构建成功了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FoijfnBHiJAZ7lA7YqmdQb-bEqUF.png\" alt=\"图片\"></p>\n<p>这时候就可以点击构建项目的SonarQube直接跳转到SonarQube控制台了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FhXgRD7rBp5RBc2D6uBmH5mIBNKJ.png\" alt=\"图片\"></p>\n<p>这里就可以看到结果了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/FkPydWtLuuliKAq1hc8Ex45nnTlu.png\" alt=\"图片\"></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到这里就可以根据SonarQube的提示区改BUG了．这BUG有点多＝＿＝！.</p>\n<p>在搭建过程中，最主要的就是那个SonarQube Scanner这个的安装了，因为Jenkins都是Docker化的，所以他可以选择自动安装，但是我这边选择自动安装却没用，所以就自己下载了SonarQube Scnner的包挂载到Jenkins容器里区，然后直接指定SonarQube Scnner的目录就可以了；</p>\n"},{"title":"Jenkins插件版本太旧的更新方法","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-12T09:27:27.000Z","password":null,"summary":null,"_content":"\n## 前言\n\n\tJenkins的插件好多都是互相依赖的，如果有的插件版本太低，而另一个插件就会导致用不了，就会出现下面的情况：\n![jenkins插件管理界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102617.png)\n\nDurable Task Plugin version 1.29 is older than required. To fix, install version 1.33 or later.\n\n\n\n## 查看本地已安装版本\n\n可以看到，本地安装的版本和刚才提示的一样，是1.29版本的，刚才提示说太旧了，要更新到1.33版本。\n\n![jenkins插件管理界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108100855.png)\n\n\n\n## 搜索插件\n\n当你理所应当的去这个界面准备搜索这个插件并更新时。。。。你傻了，，怎么搜不到？？？WTF\n\n![jenkins插件管理界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102907.png)\n\n\n\n不要慌，天无绝人之路，这里找不到，可以去另外的地方找。浏览器打开这个网站\n\n[Jenkins插件下载](https://plugins.jenkins.io/)\n\n- 进入后在输入框里输入你刚才要下载的插件:\n\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108101610.png)\n\n\n- 选择对应的插件\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108101748.png)\n\n\n- 然后点击右上角\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108101807.png)\n\n\n- 下载刚才提示的1.33版本\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108101832.png)\n\n\n- 下载完成后是一个hpi文件\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102109.png)\n\n\n## 导入插件\n- 到插件管理界面，找到Upload Plugin\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102152.png)\n\n- 然后选择刚才下载的插件，点击导入\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102223.png)\n\n- 可以看到插件正在导入\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102240.png)\n\n- 导入完成后，重启Jenkins就OK了\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102254.png)","source":"_posts/jenkins/problem-jenkins-01.md","raw":"---\ntitle: Jenkins插件版本太旧的更新方法\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Jenkins\ncategories:\n  - Jenkins\ndate: 2019-11-12 17:27:27\npassword:\nsummary:\n---\n\n## 前言\n\n\tJenkins的插件好多都是互相依赖的，如果有的插件版本太低，而另一个插件就会导致用不了，就会出现下面的情况：\n![jenkins插件管理界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102617.png)\n\nDurable Task Plugin version 1.29 is older than required. To fix, install version 1.33 or later.\n\n\n\n## 查看本地已安装版本\n\n可以看到，本地安装的版本和刚才提示的一样，是1.29版本的，刚才提示说太旧了，要更新到1.33版本。\n\n![jenkins插件管理界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108100855.png)\n\n\n\n## 搜索插件\n\n当你理所应当的去这个界面准备搜索这个插件并更新时。。。。你傻了，，怎么搜不到？？？WTF\n\n![jenkins插件管理界面](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102907.png)\n\n\n\n不要慌，天无绝人之路，这里找不到，可以去另外的地方找。浏览器打开这个网站\n\n[Jenkins插件下载](https://plugins.jenkins.io/)\n\n- 进入后在输入框里输入你刚才要下载的插件:\n\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108101610.png)\n\n\n- 选择对应的插件\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108101748.png)\n\n\n- 然后点击右上角\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108101807.png)\n\n\n- 下载刚才提示的1.33版本\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108101832.png)\n\n\n- 下载完成后是一个hpi文件\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102109.png)\n\n\n## 导入插件\n- 到插件管理界面，找到Upload Plugin\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102152.png)\n\n- 然后选择刚才下载的插件，点击导入\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102223.png)\n\n- 可以看到插件正在导入\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102240.png)\n\n- 导入完成后，重启Jenkins就OK了\n![jenkins插件下载](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102254.png)","slug":"jenkins/problem-jenkins-01","published":1,"updated":"2021-10-09T03:12:16.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehj005dvpuch4s248nx","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><pre><code>Jenkins的插件好多都是互相依赖的，如果有的插件版本太低，而另一个插件就会导致用不了，就会出现下面的情况：\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102617.png\" alt=\"jenkins插件管理界面\"></p>\n<p>Durable Task Plugin version 1.29 is older than required. To fix, install version 1.33 or later.</p>\n<h2 id=\"查看本地已安装版本\"><a href=\"#查看本地已安装版本\" class=\"headerlink\" title=\"查看本地已安装版本\"></a>查看本地已安装版本</h2><p>可以看到，本地安装的版本和刚才提示的一样，是1.29版本的，刚才提示说太旧了，要更新到1.33版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108100855.png\" alt=\"jenkins插件管理界面\"></p>\n<h2 id=\"搜索插件\"><a href=\"#搜索插件\" class=\"headerlink\" title=\"搜索插件\"></a>搜索插件</h2><p>当你理所应当的去这个界面准备搜索这个插件并更新时。。。。你傻了，，怎么搜不到？？？WTF</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102907.png\" alt=\"jenkins插件管理界面\"></p>\n<p>不要慌，天无绝人之路，这里找不到，可以去另外的地方找。浏览器打开这个网站</p>\n<p><a href=\"https://plugins.jenkins.io/\">Jenkins插件下载</a></p>\n<ul>\n<li>进入后在输入框里输入你刚才要下载的插件:</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108101610.png\" alt=\"jenkins插件下载\"></p>\n<ul>\n<li><p>选择对应的插件<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108101748.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>然后点击右上角<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108101807.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>下载刚才提示的1.33版本<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108101832.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>下载完成后是一个hpi文件<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102109.png\" alt=\"jenkins插件下载\"></p>\n</li>\n</ul>\n<h2 id=\"导入插件\"><a href=\"#导入插件\" class=\"headerlink\" title=\"导入插件\"></a>导入插件</h2><ul>\n<li><p>到插件管理界面，找到Upload Plugin<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102152.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>然后选择刚才下载的插件，点击导入<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102223.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>可以看到插件正在导入<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102240.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>导入完成后，重启Jenkins就OK了<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102254.png\" alt=\"jenkins插件下载\"></p>\n</li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><pre><code>Jenkins的插件好多都是互相依赖的，如果有的插件版本太低，而另一个插件就会导致用不了，就会出现下面的情况：\n</code></pre>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102617.png\" alt=\"jenkins插件管理界面\"></p>\n<p>Durable Task Plugin version 1.29 is older than required. To fix, install version 1.33 or later.</p>\n<h2 id=\"查看本地已安装版本\"><a href=\"#查看本地已安装版本\" class=\"headerlink\" title=\"查看本地已安装版本\"></a>查看本地已安装版本</h2><p>可以看到，本地安装的版本和刚才提示的一样，是1.29版本的，刚才提示说太旧了，要更新到1.33版本。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108100855.png\" alt=\"jenkins插件管理界面\"></p>\n<h2 id=\"搜索插件\"><a href=\"#搜索插件\" class=\"headerlink\" title=\"搜索插件\"></a>搜索插件</h2><p>当你理所应当的去这个界面准备搜索这个插件并更新时。。。。你傻了，，怎么搜不到？？？WTF</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102907.png\" alt=\"jenkins插件管理界面\"></p>\n<p>不要慌，天无绝人之路，这里找不到，可以去另外的地方找。浏览器打开这个网站</p>\n<p><a href=\"https://plugins.jenkins.io/\">Jenkins插件下载</a></p>\n<ul>\n<li>进入后在输入框里输入你刚才要下载的插件:</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108101610.png\" alt=\"jenkins插件下载\"></p>\n<ul>\n<li><p>选择对应的插件<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108101748.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>然后点击右上角<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108101807.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>下载刚才提示的1.33版本<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108101832.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>下载完成后是一个hpi文件<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102109.png\" alt=\"jenkins插件下载\"></p>\n</li>\n</ul>\n<h2 id=\"导入插件\"><a href=\"#导入插件\" class=\"headerlink\" title=\"导入插件\"></a>导入插件</h2><ul>\n<li><p>到插件管理界面，找到Upload Plugin<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102152.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>然后选择刚才下载的插件，点击导入<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102223.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>可以看到插件正在导入<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102240.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>导入完成后，重启Jenkins就OK了<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191108102254.png\" alt=\"jenkins插件下载\"></p>\n</li>\n</ul>\n"},{"title":"Jenkins初始化界面插件安装失败解决方法","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-07T09:19:52.000Z","password":null,"summary":null,"_content":"\n## 前言\n\n在初始化安装界面可能由于网络问题会出现插件下载失败，就像下面这个界面\n\n![Jenkins插件安装失败](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_error_2_20191107155729.png)\n\n别着急，直接点击继续，先完成初始化步骤。\n\n\n\n## 设置源\n\n- 插件下载失败，一般都是网络的原因，只要更换到国内的软件源就可以了，点击Manage Jenkins\n![Jenkins](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107162947.png)\n\n\n- 点击Correct\n![Jenkins](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107163016.png)\n\n\n- 点击Advanced\n![Jenkins](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107163040.png)\n\n\n- 下拉找到Update Site\n![Jenkins](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107163100.png)\n\n\n- 然后把输入框的内容换成\n\n```shell\nhttps://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json\n```\n\n![Jenkins](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107165325.png)\n\n## 重新下载插件\n\n- 然后重新下载刚才那些下载失败的插件,这里随机选一个\n![Jenkins](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107165630.png)\n\n\n- 在刚才设置源的那个界面点击 Available，搜索插件，选择，点击install\n![Jenkins](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107165916.png)\n\n\n- 插件正在安装\n![Jenkins](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107165947.png)\n\n\n> 安装完全部插件后然后重启Jenkins，插件界面的报错信息才会消失;如果遇到插件下载不下来或搜不到，可以看这篇文章：[Jenkins插件版本太旧的更新方法](https://mjava.top/jenkins/problem-jenkins-01/)\n\n","source":"_posts/jenkins/problem-jenkins-02.md","raw":"---\ntitle: Jenkins初始化界面插件安装失败解决方法\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Jenkins\ncategories:\n  - Jenkins\ndate: 2019-11-07 17:19:52\npassword:\nsummary:\n---\n\n## 前言\n\n在初始化安装界面可能由于网络问题会出现插件下载失败，就像下面这个界面\n\n![Jenkins插件安装失败](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_error_2_20191107155729.png)\n\n别着急，直接点击继续，先完成初始化步骤。\n\n\n\n## 设置源\n\n- 插件下载失败，一般都是网络的原因，只要更换到国内的软件源就可以了，点击Manage Jenkins\n![Jenkins](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107162947.png)\n\n\n- 点击Correct\n![Jenkins](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107163016.png)\n\n\n- 点击Advanced\n![Jenkins](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107163040.png)\n\n\n- 下拉找到Update Site\n![Jenkins](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107163100.png)\n\n\n- 然后把输入框的内容换成\n\n```shell\nhttps://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json\n```\n\n![Jenkins](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107165325.png)\n\n## 重新下载插件\n\n- 然后重新下载刚才那些下载失败的插件,这里随机选一个\n![Jenkins](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107165630.png)\n\n\n- 在刚才设置源的那个界面点击 Available，搜索插件，选择，点击install\n![Jenkins](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107165916.png)\n\n\n- 插件正在安装\n![Jenkins](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107165947.png)\n\n\n> 安装完全部插件后然后重启Jenkins，插件界面的报错信息才会消失;如果遇到插件下载不下来或搜不到，可以看这篇文章：[Jenkins插件版本太旧的更新方法](https://mjava.top/jenkins/problem-jenkins-01/)\n\n","slug":"jenkins/problem-jenkins-02","published":1,"updated":"2021-10-09T03:13:12.872Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehk005gvpucddzeez5b","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在初始化安装界面可能由于网络问题会出现插件下载失败，就像下面这个界面</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_error_2_20191107155729.png\" alt=\"Jenkins插件安装失败\"></p>\n<p>别着急，直接点击继续，先完成初始化步骤。</p>\n<h2 id=\"设置源\"><a href=\"#设置源\" class=\"headerlink\" title=\"设置源\"></a>设置源</h2><ul>\n<li><p>插件下载失败，一般都是网络的原因，只要更换到国内的软件源就可以了，点击Manage Jenkins<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107162947.png\" alt=\"Jenkins\"></p>\n</li>\n<li><p>点击Correct<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107163016.png\" alt=\"Jenkins\"></p>\n</li>\n<li><p>点击Advanced<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107163040.png\" alt=\"Jenkins\"></p>\n</li>\n<li><p>下拉找到Update Site<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107163100.png\" alt=\"Jenkins\"></p>\n</li>\n<li><p>然后把输入框的内容换成</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107165325.png\" alt=\"Jenkins\"></p>\n<h2 id=\"重新下载插件\"><a href=\"#重新下载插件\" class=\"headerlink\" title=\"重新下载插件\"></a>重新下载插件</h2><ul>\n<li><p>然后重新下载刚才那些下载失败的插件,这里随机选一个<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107165630.png\" alt=\"Jenkins\"></p>\n</li>\n<li><p>在刚才设置源的那个界面点击 Available，搜索插件，选择，点击install<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107165916.png\" alt=\"Jenkins\"></p>\n</li>\n<li><p>插件正在安装<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107165947.png\" alt=\"Jenkins\"></p>\n</li>\n</ul>\n<blockquote>\n<p>安装完全部插件后然后重启Jenkins，插件界面的报错信息才会消失;如果遇到插件下载不下来或搜不到，可以看这篇文章：<a href=\"https://mjava.top/jenkins/problem-jenkins-01/\">Jenkins插件版本太旧的更新方法</a></p>\n</blockquote>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在初始化安装界面可能由于网络问题会出现插件下载失败，就像下面这个界面</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/jenkins_error_2_20191107155729.png\" alt=\"Jenkins插件安装失败\"></p>\n<p>别着急，直接点击继续，先完成初始化步骤。</p>\n<h2 id=\"设置源\"><a href=\"#设置源\" class=\"headerlink\" title=\"设置源\"></a>设置源</h2><ul>\n<li><p>插件下载失败，一般都是网络的原因，只要更换到国内的软件源就可以了，点击Manage Jenkins<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107162947.png\" alt=\"Jenkins\"></p>\n</li>\n<li><p>点击Correct<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107163016.png\" alt=\"Jenkins\"></p>\n</li>\n<li><p>点击Advanced<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107163040.png\" alt=\"Jenkins\"></p>\n</li>\n<li><p>下拉找到Update Site<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107163100.png\" alt=\"Jenkins\"></p>\n</li>\n<li><p>然后把输入框的内容换成</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107165325.png\" alt=\"Jenkins\"></p>\n<h2 id=\"重新下载插件\"><a href=\"#重新下载插件\" class=\"headerlink\" title=\"重新下载插件\"></a>重新下载插件</h2><ul>\n<li><p>然后重新下载刚才那些下载失败的插件,这里随机选一个<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107165630.png\" alt=\"Jenkins\"></p>\n</li>\n<li><p>在刚才设置源的那个界面点击 Available，搜索插件，选择，点击install<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107165916.png\" alt=\"Jenkins\"></p>\n</li>\n<li><p>插件正在安装<br><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/09/20191107165947.png\" alt=\"Jenkins\"></p>\n</li>\n</ul>\n<blockquote>\n<p>安装完全部插件后然后重启Jenkins，插件界面的报错信息才会消失;如果遇到插件下载不下来或搜不到，可以看这篇文章：<a href=\"https://mjava.top/jenkins/problem-jenkins-01/\">Jenkins插件版本太旧的更新方法</a></p>\n</blockquote>\n"},{"title":"用Darabonba一键生成7种语言的代码","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-06-05T10:08:19.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/1PH6HFimage-20210605175031562.png)\n\n## 0x1 介绍\n\n最近在看阿里的SDK的时候，突然看到了一个好玩的东西，这玩意叫 Darabonba。是一种 OpenAPI 应用的领域特定语言。可以利用它为任意风格的接口生成多语言的 SDK、代码示例、测试用例、接口编排等。现在阿里云的多语言 SDK 就是用这个生成的。下面是官方的介绍流程图。\n\n![image-20210604161124444](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/kS9v8bimage-20210604161124444-20211008164903058.png)\n\n## 0x2 安装\n\n我们按照官方的步骤来安装它，因为是用 Nodejs 写的，所以可以用 npm 来安装它\n\n```shell\nsudo npm install -g @darabonba/cli\n```\n\n安装完成后可以在终端输入 `dara` ，如果输出版本号就是说明安装成功了\n\n```shell\n➜ dara\n\nThe CLI for Darabonba 1.1.8\n```\n\n## 0x3 使用\n\n安装完成后就可以使用了，首先创建一个文件夹来存放这个项目\n\n```shell\nmkdir demo && cd demo\n```\n\n然后用 `dara` 命令来进行初始化模块，然后依次输入包名等信息。\n\n```shell\n➜ dara init\npackage scope: demo\npackage name: demo\npackage version: 1.0.0\nmain entry: ./demo.dara\n```\n\n初始化完成后，我们就可以在 `demo.dara` 文件里进行 Darabonba DSL 表达式的编写里\n\n比如我们编写一个经典的输出 hello world！\n\n### 编写 Darabonba DSL 表达式\n\n在 `demo.dara` 文件里写入如下代码\n\n```javascript\nimport Console;\n\ninit(){\n}\n\nfunction hello(): void {\n        Console.log(\"hello world!\");\n}\n```\n\n### 安装自定义模块\n\n因为上面我们用到了 `Console` 模块，所以我们在当前文件路径下执行如下命令，进行模块的安装\n\n```shell\ndara install\n\n# 执行后将显示下面这些信息\nfetching from remote repository\n\n1 libraries installed. (0 local, 1 remote)\n```\n\n执行完命令后，当前文件夹下就会出现一个 **libraries** 文件夹\n\n### 配置 Darafile\n\n`Darafile` 是 `Darabonba` 的模块管理文件，类似 `Java` 中的 `pom.xml` 或者 `Node.js` 中的 `package.json`，这里我们要生成 `Go` 和 `Java` 的代码，所以只要做如下配置就可以了。具体的可以查看[官方的详细介绍](https://github.com/aliyun/darabonba/blob/master/doc/darafile.md)。\n\n```json\n{\n  \"scope\": \"demo\",\n  \"name\": \"demo\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./demo.dara\",\n  \"libraries\": {\n      \"Console\": \"darabonba:Console:*\"\n    },\n  \"java\": {\n      \"package\": \"top.mjava.demo\",\n      \"className\":\"TestDemo\"\n    }\n}\n```\n\n在 `libraries` 里配置我们刚才所使用的 `Console` 依赖模块，在 `java` 对象字段里配置了包名和类文件名。\n\n### 生成代码\n\n官方暂时只支持 TypeScript、C#、Java、 Go、PHP、Python3、Python2、CPP 的代码生成，后续的话还会支持 Swift、Dart、Ruby、Lua、Kotlin。\n\n我们这边只生成一下 Java 和 Go 代码，所以执行下面的命令就可以了\n\n```shell\n# 生成 Java 代码\ndara codegen java ./java-demo\n# 生成 Go 代码\ndara codegen go ./go-demo\n```\n\n执行完命令后，当前文件夹就会出现 **java-demo** 和 **go-demo** 两个文件夹了。然后就可以进入文件夹看到相应生成的代码了\n\n**Java**：\n\n```java\n// This file is auto-generated, don't edit it. Thanks.\npackage top.mjava.demo;\n\nimport com.aliyun.tea.*;\nimport com.aliyun.teaconsole.*;\n\npublic class TestDemo {\n\n    public TestDemo() throws Exception {\n    }\n\n\n    public void hello() throws Exception {\n        com.aliyun.teaconsole.Client.log(\"hello world!\");\n    }\n}\n```\n\n**Go**:\n\n```go\n// This file is auto-generated, don't edit it. Thanks.\npackage client\n\nimport (\n  console  \"github.com/alibabacloud-go/tea-console/client\"\n  \"github.com/alibabacloud-go/tea/tea\"\n)\n\ntype Client struct {\n}\n\nfunc NewClient()(*Client, error) {\n  client := new(Client)\n  err := client.Init()\n  return client, err\n}\n\nfunc (client *Client)Init()(_err error) {\n  return nil\n}\n```\n\n## 0x3 自定义模块\n\n上面所用到的 `Console` 就是通过自定义模块打包上传到了 Darabonba 的[模块仓库](https://darabonba.api.aliyun.com/module)，然后我们可以直接通过 `libraries` 来使用它。\n\n所以我们可以自定义自己的模块上传到 Darabonba 模块仓库，接下来我们自定义一个获取 **UUID** 的模块，让它支持 Java 和 Go 语言来生成使用。\n\n![未命名文件](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/drcDzN未命名文件.jpg)\n\n从上面的流程图可以知道，模块是由各个语言自己编写代码，然后通过 Darabonba 聚合后上传到模块仓库，然后使用者从仓库安装模块，并且下载对应语言的依赖包。\n\n我们这边要编写 Java 和 Go 语言获取 UUID 的代码，然后通过 Darabonba 打包上传到模块仓库。\n\n### 配置模版\n\n编写模块我们也是用 Darabonba 先生成各个语言的模版代码，然后再编写相应的具体实现。\n\n初始化\n\n```shell\n➜ dara init\npackage scope: greycode\npackage name: UUID\npackage version: 1.0.0\nmain entry: ./main.dara\n```\n\n\n\n我们先配置好 **Darafile**:\n\n```json\n{\n  \"scope\": \"greycode\",\n  \"name\": \"UUID\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./main.dara\",\n  \"java\": {\n\t\t\"package\": \"top.mjava.uuid\",\n\t\t\"packageInfo\": {\n\t\t\t\"description\": \"UUID generated for Darabonba moudle\",\n\t\t\t\"url\": \"https://github.com/greycodee/tea-uuid\",\n\t\t\t\"developerId\": \"greycode\",\n\t\t\t\"developerName\": \"greycode\",\n\t\t\t\"developerEmail\": \"zhengminghui99@gmail.com\"\n\t\t}\n  }\n}\n```\n\n然后在 **main.dara** 里编写一个静态方法：\n\n```javascript\n/**\n* @return uuid\n*/\nstatic function uuid(): string;\n```\n\n### 编写 Java 模块\n\n按上面的步骤配置好后就可以生成 Java 代码了，在当前目录下执行下面的命令\n\n```shell\ndara codegen java ./java\n```\n\n然后进入 **java 文件夹**，找到 **Client.java**，在 `uuid()` 方法里添加 UUID 生成的代码\n\n```java\n// This file is auto-generated, don't edit it. Thanks.\npackage top.mjava.uuid;\n\nimport com.aliyun.tea.*;\n\npublic class Client {\n\n    public static String uuid() throws Exception {\n      \t// 添加这行代码\n        return UUID.randomUUID().toString();\n    }\n}\n```\n\n**编写好代码后，还需要配置 pom.xml 文件，然后把 Java 代码打包发布到 maven 仓库上。**\n\n配置好 pom.xml 文件到下面这几个配置\n\n```xml\n<groupId>top.mjava</groupId>\n<artifactId>tea-uuid</artifactId>\n<version>1.0</version>\n<packaging>jar</packaging>\n<name>tea-uuid</name>\n```\n\n还有把 pom.xml 里的仓库配置换成我们自己的，我这边也是用阿里云的 maven 参考。你们可以自己去阿里云 maven 注册自己的账号。\n\n```diff\n-  <distributionManagement>\n-    <snapshotRepository>\n-      <id>sonatype-nexus-snapshots</id>\n-      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n-    </snapshotRepository>\n-    <repository>\n-      <id>sonatype-nexus-staging</id>\n-      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n-    </repository>\n-  </distributionManagement>\n\n+ <distributionManagement>\n+    <repository>\n+        <id>rdc-releases_my</id>\n+        <url>https://repo.rdc.aliyun.com/repository/102997-release-dTwmzu/</url>\n+    </repository>\n+    <snapshotRepository>\n+        <id>rdc-snapshots_my</id>\n+        <url>https://repo.rdc.aliyun.com/repository/102997-snapshot-d0gx8B/</url>\n+    </snapshotRepository>\n+ </distributionManagement>\n```\n\n配置好后就可以执行下面的命令将代码打包推送到远程 maven 仓库了\n\n```shell\nmvn clean source:jar javadoc:jar package deploy -Dmaven.test.skip=true -Dgpg.skip\n```\n\n看到下面的信息就说明部署成功了\n\n```shell\n[INFO] 阿里云Maven中央仓库为阿里云云效提供的公共代理仓库，云效也提供了免费、可靠的Maven私有仓库Packages，欢迎您体验使用。https://www.aliyun.com/product/yunxiao/packages?channel=pd_maven_download\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  5.538 s\n[INFO] Finished at: 2021-06-05T16:00:28+08:00\n[INFO] ------------------------------------------------------------------------\n```\n\n#### Maven 命令执行出现问题解决办法\n\n- 如果执行 maven 命令进行部署时，出现下面的错误\n\n  ```shell \n  [ERROR] Failed to execute goal org.apache.maven.plugins:maven-gpg-plugin:1.6:sign (sign-artifacts) on project tea-uuid: Unable to execute gpg command: Error while executing process. Cannot run program \"gpg\": error=2, No such file or directory -> [Help 1]\n\t```\n\n  可以通过添加 `-Dgpg.skip` 解决\n\n  ```shell\n  mvn clean source:jar javadoc:jar package deploy -Dmaven.test.skip=true -Dgpg.skip\n\t```\n\n- 如果出现下面的的错误\n\n  ```shell\n  [ERROR] Failed to execute goal org.sonatype.plugins:nexus-staging-maven-plugin:1.6.3:deploy (injected-nexus-deploy) on project tea-uuid: Execution injected-nexus-deploy of goal org.sonatype.plugins:nexus-staging-maven-plugin:1.6.3:deploy failed: Server credentials with ID \"sonatype-nexus-staging\" not found! -\n  ```\n\n  可以删除 pom.xml 文件里的 `sonatype-nexus-staging` 配置\n  \n  ```diff\n  - <plugin>\n  -   <groupId>org.sonatype.plugins</groupId>\n  -   <artifactId>nexus-staging-maven-plugin</artifactId>\n  -   <version>1.6.3</version>\n  -   <extensions>true</extensions>\n  -   <configuration>\n  -     <serverId>sonatype-nexus-staging</serverId>\n  -     <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n  -     <autoReleaseAfterClose>true</autoReleaseAfterClose>\n  -   </configuration>\n  - </plugin>\n  ```\n\n### 编写 Go 模块\n\n老规矩，首先先生成 Go 的代码\n\n```shell\ndara codegen go ./go\n```\n\n然后编辑 `client.go` 文件，改为如下代码\n\n```go\n// This file is auto-generated, don't edit it. Thanks.\n/**\n* @return uuid\n*/\npackage client\n\nimport (\n  \"github.com/google/uuid\"\n)\n\n\nfunc Uuid () (_result string) {\n  // V4 基于随机数\n  u4 := uuid.New()\n  return u4.String()\n}\n```\n\n然后 `go.mod ` 文件里的 module 改为我们的上传 Go 代码的仓库地址\n\n```go\nmodule github.com/greycodee/tea-uuid-go\n```\n\n然后推送到 GitHub 并打上一个 Tag 作为这个 Go 库的版本号，这边我设置版本号为 `v1.0.0`\n\n```shell\ngit tag v1.0.0\ngit push origin v1.0.0\n```\n\n### 上传 Darabonba 仓库\n\n编写好相应模块的代码并打包上传到对应的原创仓库后，就可以配置 **Darafile** 文件了\n\n在 Darafile 添加 releases 信息\n\n```json\n{\n  \"scope\": \"greycode\",\n  \"name\": \"UUID\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./main.dara\",\n  \"releases\": {\n\t\t\"go\": \"github.com/greycodee/tea-uuid-go/client:v1.0.0\",\n\t\t\"java\": \"top.mjava:tea-uuid:1.0\",\n  },\n  \"java\": {\n\t\t\"package\": \"top.mjava.uuid\",\n\t\t\"packageInfo\": {\n\t\t\t\"description\": \"UUID generated for Darabonba moudle\",\n\t\t\t\"url\": \"https://github.com/greycodee/tea-uuid\",\n\t\t\t\"developerId\": \"greycode\",\n\t\t\t\"developerName\": \"greycode\",\n\t\t\t\"developerEmail\": \"zhengminghui99@gmail.com\"\n\t\t}\n  }\n}\n```\n\n然后去 [Darabonba 模块仓库](https://darabonba.api.aliyun.com/admin/maintainer)里注册一个账号，然后点击`个人中心->Scope->添加scope`，添加一个 scope ，**保持和 Darafile 文件里的 scope 一致。**\n\n注册完成后在项目目录下执行 `dara login` 命令，输入刚才注册的账号密码，进行登陆。\n\n执行 `dara pack` 进行打包\n\n再执行 `dara publish` 进行发布\n\n发布完成后就可在  Darabonba 模块仓库里看到刚才发布的包了\n\n![image-20210605170948596](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Cxudyeimage-20210605170948596-20211008164903196.png)\n\n\n\n> Darabonba UUID 模块代码地址：https://github.com/greycodee/tea-uuid\n>\n> Go 模块代码地址： https://github.com/greycodee/tea-uuid-go\n\n### 使用自定义的模块\n\n上传 Darabonba 模块仓库后，我们就可以向刚开始使用 Console 模块那样来使用 UUID 模块了\n\nDarafile 添加 libraries\n\n```json\n\"libraries\": {\n  \"UUID\": \"greycode:UUID:*\",\n}\n```\n\n在 `dara` 代码里使用：\n\n```js\nimport Console;\nimport UUID;\ninit(){\n}\n\nfunction hello(): void {\n\tConsole.log(UUID.uuid());\n}\n```","source":"_posts/tool/0D992236EC6B4E5EAD15886D992FF84B.md","raw":"---\ntitle: 用Darabonba一键生成7种语言的代码\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-06-05 18:08:19\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Darabonba\ncategories:\n- Tool\n---\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/1PH6HFimage-20210605175031562.png)\n\n## 0x1 介绍\n\n最近在看阿里的SDK的时候，突然看到了一个好玩的东西，这玩意叫 Darabonba。是一种 OpenAPI 应用的领域特定语言。可以利用它为任意风格的接口生成多语言的 SDK、代码示例、测试用例、接口编排等。现在阿里云的多语言 SDK 就是用这个生成的。下面是官方的介绍流程图。\n\n![image-20210604161124444](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/kS9v8bimage-20210604161124444-20211008164903058.png)\n\n## 0x2 安装\n\n我们按照官方的步骤来安装它，因为是用 Nodejs 写的，所以可以用 npm 来安装它\n\n```shell\nsudo npm install -g @darabonba/cli\n```\n\n安装完成后可以在终端输入 `dara` ，如果输出版本号就是说明安装成功了\n\n```shell\n➜ dara\n\nThe CLI for Darabonba 1.1.8\n```\n\n## 0x3 使用\n\n安装完成后就可以使用了，首先创建一个文件夹来存放这个项目\n\n```shell\nmkdir demo && cd demo\n```\n\n然后用 `dara` 命令来进行初始化模块，然后依次输入包名等信息。\n\n```shell\n➜ dara init\npackage scope: demo\npackage name: demo\npackage version: 1.0.0\nmain entry: ./demo.dara\n```\n\n初始化完成后，我们就可以在 `demo.dara` 文件里进行 Darabonba DSL 表达式的编写里\n\n比如我们编写一个经典的输出 hello world！\n\n### 编写 Darabonba DSL 表达式\n\n在 `demo.dara` 文件里写入如下代码\n\n```javascript\nimport Console;\n\ninit(){\n}\n\nfunction hello(): void {\n        Console.log(\"hello world!\");\n}\n```\n\n### 安装自定义模块\n\n因为上面我们用到了 `Console` 模块，所以我们在当前文件路径下执行如下命令，进行模块的安装\n\n```shell\ndara install\n\n# 执行后将显示下面这些信息\nfetching from remote repository\n\n1 libraries installed. (0 local, 1 remote)\n```\n\n执行完命令后，当前文件夹下就会出现一个 **libraries** 文件夹\n\n### 配置 Darafile\n\n`Darafile` 是 `Darabonba` 的模块管理文件，类似 `Java` 中的 `pom.xml` 或者 `Node.js` 中的 `package.json`，这里我们要生成 `Go` 和 `Java` 的代码，所以只要做如下配置就可以了。具体的可以查看[官方的详细介绍](https://github.com/aliyun/darabonba/blob/master/doc/darafile.md)。\n\n```json\n{\n  \"scope\": \"demo\",\n  \"name\": \"demo\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./demo.dara\",\n  \"libraries\": {\n      \"Console\": \"darabonba:Console:*\"\n    },\n  \"java\": {\n      \"package\": \"top.mjava.demo\",\n      \"className\":\"TestDemo\"\n    }\n}\n```\n\n在 `libraries` 里配置我们刚才所使用的 `Console` 依赖模块，在 `java` 对象字段里配置了包名和类文件名。\n\n### 生成代码\n\n官方暂时只支持 TypeScript、C#、Java、 Go、PHP、Python3、Python2、CPP 的代码生成，后续的话还会支持 Swift、Dart、Ruby、Lua、Kotlin。\n\n我们这边只生成一下 Java 和 Go 代码，所以执行下面的命令就可以了\n\n```shell\n# 生成 Java 代码\ndara codegen java ./java-demo\n# 生成 Go 代码\ndara codegen go ./go-demo\n```\n\n执行完命令后，当前文件夹就会出现 **java-demo** 和 **go-demo** 两个文件夹了。然后就可以进入文件夹看到相应生成的代码了\n\n**Java**：\n\n```java\n// This file is auto-generated, don't edit it. Thanks.\npackage top.mjava.demo;\n\nimport com.aliyun.tea.*;\nimport com.aliyun.teaconsole.*;\n\npublic class TestDemo {\n\n    public TestDemo() throws Exception {\n    }\n\n\n    public void hello() throws Exception {\n        com.aliyun.teaconsole.Client.log(\"hello world!\");\n    }\n}\n```\n\n**Go**:\n\n```go\n// This file is auto-generated, don't edit it. Thanks.\npackage client\n\nimport (\n  console  \"github.com/alibabacloud-go/tea-console/client\"\n  \"github.com/alibabacloud-go/tea/tea\"\n)\n\ntype Client struct {\n}\n\nfunc NewClient()(*Client, error) {\n  client := new(Client)\n  err := client.Init()\n  return client, err\n}\n\nfunc (client *Client)Init()(_err error) {\n  return nil\n}\n```\n\n## 0x3 自定义模块\n\n上面所用到的 `Console` 就是通过自定义模块打包上传到了 Darabonba 的[模块仓库](https://darabonba.api.aliyun.com/module)，然后我们可以直接通过 `libraries` 来使用它。\n\n所以我们可以自定义自己的模块上传到 Darabonba 模块仓库，接下来我们自定义一个获取 **UUID** 的模块，让它支持 Java 和 Go 语言来生成使用。\n\n![未命名文件](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/drcDzN未命名文件.jpg)\n\n从上面的流程图可以知道，模块是由各个语言自己编写代码，然后通过 Darabonba 聚合后上传到模块仓库，然后使用者从仓库安装模块，并且下载对应语言的依赖包。\n\n我们这边要编写 Java 和 Go 语言获取 UUID 的代码，然后通过 Darabonba 打包上传到模块仓库。\n\n### 配置模版\n\n编写模块我们也是用 Darabonba 先生成各个语言的模版代码，然后再编写相应的具体实现。\n\n初始化\n\n```shell\n➜ dara init\npackage scope: greycode\npackage name: UUID\npackage version: 1.0.0\nmain entry: ./main.dara\n```\n\n\n\n我们先配置好 **Darafile**:\n\n```json\n{\n  \"scope\": \"greycode\",\n  \"name\": \"UUID\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./main.dara\",\n  \"java\": {\n\t\t\"package\": \"top.mjava.uuid\",\n\t\t\"packageInfo\": {\n\t\t\t\"description\": \"UUID generated for Darabonba moudle\",\n\t\t\t\"url\": \"https://github.com/greycodee/tea-uuid\",\n\t\t\t\"developerId\": \"greycode\",\n\t\t\t\"developerName\": \"greycode\",\n\t\t\t\"developerEmail\": \"zhengminghui99@gmail.com\"\n\t\t}\n  }\n}\n```\n\n然后在 **main.dara** 里编写一个静态方法：\n\n```javascript\n/**\n* @return uuid\n*/\nstatic function uuid(): string;\n```\n\n### 编写 Java 模块\n\n按上面的步骤配置好后就可以生成 Java 代码了，在当前目录下执行下面的命令\n\n```shell\ndara codegen java ./java\n```\n\n然后进入 **java 文件夹**，找到 **Client.java**，在 `uuid()` 方法里添加 UUID 生成的代码\n\n```java\n// This file is auto-generated, don't edit it. Thanks.\npackage top.mjava.uuid;\n\nimport com.aliyun.tea.*;\n\npublic class Client {\n\n    public static String uuid() throws Exception {\n      \t// 添加这行代码\n        return UUID.randomUUID().toString();\n    }\n}\n```\n\n**编写好代码后，还需要配置 pom.xml 文件，然后把 Java 代码打包发布到 maven 仓库上。**\n\n配置好 pom.xml 文件到下面这几个配置\n\n```xml\n<groupId>top.mjava</groupId>\n<artifactId>tea-uuid</artifactId>\n<version>1.0</version>\n<packaging>jar</packaging>\n<name>tea-uuid</name>\n```\n\n还有把 pom.xml 里的仓库配置换成我们自己的，我这边也是用阿里云的 maven 参考。你们可以自己去阿里云 maven 注册自己的账号。\n\n```diff\n-  <distributionManagement>\n-    <snapshotRepository>\n-      <id>sonatype-nexus-snapshots</id>\n-      <url>https://oss.sonatype.org/content/repositories/snapshots</url>\n-    </snapshotRepository>\n-    <repository>\n-      <id>sonatype-nexus-staging</id>\n-      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>\n-    </repository>\n-  </distributionManagement>\n\n+ <distributionManagement>\n+    <repository>\n+        <id>rdc-releases_my</id>\n+        <url>https://repo.rdc.aliyun.com/repository/102997-release-dTwmzu/</url>\n+    </repository>\n+    <snapshotRepository>\n+        <id>rdc-snapshots_my</id>\n+        <url>https://repo.rdc.aliyun.com/repository/102997-snapshot-d0gx8B/</url>\n+    </snapshotRepository>\n+ </distributionManagement>\n```\n\n配置好后就可以执行下面的命令将代码打包推送到远程 maven 仓库了\n\n```shell\nmvn clean source:jar javadoc:jar package deploy -Dmaven.test.skip=true -Dgpg.skip\n```\n\n看到下面的信息就说明部署成功了\n\n```shell\n[INFO] 阿里云Maven中央仓库为阿里云云效提供的公共代理仓库，云效也提供了免费、可靠的Maven私有仓库Packages，欢迎您体验使用。https://www.aliyun.com/product/yunxiao/packages?channel=pd_maven_download\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  5.538 s\n[INFO] Finished at: 2021-06-05T16:00:28+08:00\n[INFO] ------------------------------------------------------------------------\n```\n\n#### Maven 命令执行出现问题解决办法\n\n- 如果执行 maven 命令进行部署时，出现下面的错误\n\n  ```shell \n  [ERROR] Failed to execute goal org.apache.maven.plugins:maven-gpg-plugin:1.6:sign (sign-artifacts) on project tea-uuid: Unable to execute gpg command: Error while executing process. Cannot run program \"gpg\": error=2, No such file or directory -> [Help 1]\n\t```\n\n  可以通过添加 `-Dgpg.skip` 解决\n\n  ```shell\n  mvn clean source:jar javadoc:jar package deploy -Dmaven.test.skip=true -Dgpg.skip\n\t```\n\n- 如果出现下面的的错误\n\n  ```shell\n  [ERROR] Failed to execute goal org.sonatype.plugins:nexus-staging-maven-plugin:1.6.3:deploy (injected-nexus-deploy) on project tea-uuid: Execution injected-nexus-deploy of goal org.sonatype.plugins:nexus-staging-maven-plugin:1.6.3:deploy failed: Server credentials with ID \"sonatype-nexus-staging\" not found! -\n  ```\n\n  可以删除 pom.xml 文件里的 `sonatype-nexus-staging` 配置\n  \n  ```diff\n  - <plugin>\n  -   <groupId>org.sonatype.plugins</groupId>\n  -   <artifactId>nexus-staging-maven-plugin</artifactId>\n  -   <version>1.6.3</version>\n  -   <extensions>true</extensions>\n  -   <configuration>\n  -     <serverId>sonatype-nexus-staging</serverId>\n  -     <nexusUrl>https://oss.sonatype.org/</nexusUrl>\n  -     <autoReleaseAfterClose>true</autoReleaseAfterClose>\n  -   </configuration>\n  - </plugin>\n  ```\n\n### 编写 Go 模块\n\n老规矩，首先先生成 Go 的代码\n\n```shell\ndara codegen go ./go\n```\n\n然后编辑 `client.go` 文件，改为如下代码\n\n```go\n// This file is auto-generated, don't edit it. Thanks.\n/**\n* @return uuid\n*/\npackage client\n\nimport (\n  \"github.com/google/uuid\"\n)\n\n\nfunc Uuid () (_result string) {\n  // V4 基于随机数\n  u4 := uuid.New()\n  return u4.String()\n}\n```\n\n然后 `go.mod ` 文件里的 module 改为我们的上传 Go 代码的仓库地址\n\n```go\nmodule github.com/greycodee/tea-uuid-go\n```\n\n然后推送到 GitHub 并打上一个 Tag 作为这个 Go 库的版本号，这边我设置版本号为 `v1.0.0`\n\n```shell\ngit tag v1.0.0\ngit push origin v1.0.0\n```\n\n### 上传 Darabonba 仓库\n\n编写好相应模块的代码并打包上传到对应的原创仓库后，就可以配置 **Darafile** 文件了\n\n在 Darafile 添加 releases 信息\n\n```json\n{\n  \"scope\": \"greycode\",\n  \"name\": \"UUID\",\n  \"version\": \"1.0.0\",\n  \"main\": \"./main.dara\",\n  \"releases\": {\n\t\t\"go\": \"github.com/greycodee/tea-uuid-go/client:v1.0.0\",\n\t\t\"java\": \"top.mjava:tea-uuid:1.0\",\n  },\n  \"java\": {\n\t\t\"package\": \"top.mjava.uuid\",\n\t\t\"packageInfo\": {\n\t\t\t\"description\": \"UUID generated for Darabonba moudle\",\n\t\t\t\"url\": \"https://github.com/greycodee/tea-uuid\",\n\t\t\t\"developerId\": \"greycode\",\n\t\t\t\"developerName\": \"greycode\",\n\t\t\t\"developerEmail\": \"zhengminghui99@gmail.com\"\n\t\t}\n  }\n}\n```\n\n然后去 [Darabonba 模块仓库](https://darabonba.api.aliyun.com/admin/maintainer)里注册一个账号，然后点击`个人中心->Scope->添加scope`，添加一个 scope ，**保持和 Darafile 文件里的 scope 一致。**\n\n注册完成后在项目目录下执行 `dara login` 命令，输入刚才注册的账号密码，进行登陆。\n\n执行 `dara pack` 进行打包\n\n再执行 `dara publish` 进行发布\n\n发布完成后就可在  Darabonba 模块仓库里看到刚才发布的包了\n\n![image-20210605170948596](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Cxudyeimage-20210605170948596-20211008164903196.png)\n\n\n\n> Darabonba UUID 模块代码地址：https://github.com/greycodee/tea-uuid\n>\n> Go 模块代码地址： https://github.com/greycodee/tea-uuid-go\n\n### 使用自定义的模块\n\n上传 Darabonba 模块仓库后，我们就可以向刚开始使用 Console 模块那样来使用 UUID 模块了\n\nDarafile 添加 libraries\n\n```json\n\"libraries\": {\n  \"UUID\": \"greycode:UUID:*\",\n}\n```\n\n在 `dara` 代码里使用：\n\n```js\nimport Console;\nimport UUID;\ninit(){\n}\n\nfunction hello(): void {\n\tConsole.log(UUID.uuid());\n}\n```","slug":"tool/0D992236EC6B4E5EAD15886D992FF84B","published":1,"updated":"2021-10-08T08:49:07.031Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehm005jvpucdv440lbj","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/1PH6HFimage-20210605175031562.png\" alt=\"图片\"></p>\n<h2 id=\"0x1-介绍\"><a href=\"#0x1-介绍\" class=\"headerlink\" title=\"0x1 介绍\"></a>0x1 介绍</h2><p>最近在看阿里的SDK的时候，突然看到了一个好玩的东西，这玩意叫 Darabonba。是一种 OpenAPI 应用的领域特定语言。可以利用它为任意风格的接口生成多语言的 SDK、代码示例、测试用例、接口编排等。现在阿里云的多语言 SDK 就是用这个生成的。下面是官方的介绍流程图。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/kS9v8bimage-20210604161124444-20211008164903058.png\" alt=\"image-20210604161124444\"></p>\n<h2 id=\"0x2-安装\"><a href=\"#0x2-安装\" class=\"headerlink\" title=\"0x2 安装\"></a>0x2 安装</h2><p>我们按照官方的步骤来安装它，因为是用 Nodejs 写的，所以可以用 npm 来安装它</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install -g @darabonba/cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后可以在终端输入 <code>dara</code> ，如果输出版本号就是说明安装成功了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜ dara</span><br><span class=\"line\"></span><br><span class=\"line\">The CLI for Darabonba 1.1.8</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x3-使用\"><a href=\"#0x3-使用\" class=\"headerlink\" title=\"0x3 使用\"></a>0x3 使用</h2><p>安装完成后就可以使用了，首先创建一个文件夹来存放这个项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir demo &amp;&amp; cd demo</span><br></pre></td></tr></table></figure>\n\n<p>然后用 <code>dara</code> 命令来进行初始化模块，然后依次输入包名等信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜ dara init</span><br><span class=\"line\">package scope: demo</span><br><span class=\"line\">package name: demo</span><br><span class=\"line\">package version: 1.0.0</span><br><span class=\"line\">main entry: ./demo.dara</span><br></pre></td></tr></table></figure>\n\n<p>初始化完成后，我们就可以在 <code>demo.dara</code> 文件里进行 Darabonba DSL 表达式的编写里</p>\n<p>比如我们编写一个经典的输出 hello world！</p>\n<h3 id=\"编写-Darabonba-DSL-表达式\"><a href=\"#编写-Darabonba-DSL-表达式\" class=\"headerlink\" title=\"编写 Darabonba DSL 表达式\"></a>编写 Darabonba DSL 表达式</h3><p>在 <code>demo.dara</code> 文件里写入如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Console</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">init</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hello</span>(<span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装自定义模块\"><a href=\"#安装自定义模块\" class=\"headerlink\" title=\"安装自定义模块\"></a>安装自定义模块</h3><p>因为上面我们用到了 <code>Console</code> 模块，所以我们在当前文件路径下执行如下命令，进行模块的安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">dara install</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行后将显示下面这些信息</span></span><br><span class=\"line\">fetching from remote repository</span><br><span class=\"line\"></span><br><span class=\"line\">1 libraries installed. (0 local, 1 remote)</span><br></pre></td></tr></table></figure>\n\n<p>执行完命令后，当前文件夹下就会出现一个 <strong>libraries</strong> 文件夹</p>\n<h3 id=\"配置-Darafile\"><a href=\"#配置-Darafile\" class=\"headerlink\" title=\"配置 Darafile\"></a>配置 Darafile</h3><p><code>Darafile</code> 是 <code>Darabonba</code> 的模块管理文件，类似 <code>Java</code> 中的 <code>pom.xml</code> 或者 <code>Node.js</code> 中的 <code>package.json</code>，这里我们要生成 <code>Go</code> 和 <code>Java</code> 的代码，所以只要做如下配置就可以了。具体的可以查看<a href=\"https://github.com/aliyun/darabonba/blob/master/doc/darafile.md\">官方的详细介绍</a>。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;demo&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;demo&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./demo.dara&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;libraries&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;Console&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;darabonba:Console:*&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;java&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;package&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;top.mjava.demo&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;className&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;TestDemo&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>libraries</code> 里配置我们刚才所使用的 <code>Console</code> 依赖模块，在 <code>java</code> 对象字段里配置了包名和类文件名。</p>\n<h3 id=\"生成代码\"><a href=\"#生成代码\" class=\"headerlink\" title=\"生成代码\"></a>生成代码</h3><p>官方暂时只支持 TypeScript、C#、Java、 Go、PHP、Python3、Python2、CPP 的代码生成，后续的话还会支持 Swift、Dart、Ruby、Lua、Kotlin。</p>\n<p>我们这边只生成一下 Java 和 Go 代码，所以执行下面的命令就可以了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成 Java 代码</span></span><br><span class=\"line\">dara codegen java ./java-demo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成 Go 代码</span></span><br><span class=\"line\">dara codegen go ./go-demo</span><br></pre></td></tr></table></figure>\n\n<p>执行完命令后，当前文件夹就会出现 <strong>java-demo</strong> 和 <strong>go-demo</strong> 两个文件夹了。然后就可以进入文件夹看到相应生成的代码了</p>\n<p><strong>Java</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This file is auto-generated, don&#x27;t edit it. Thanks.</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> top.mjava.demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.aliyun.tea.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.aliyun.teaconsole.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TestDemo</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        com.aliyun.teaconsole.Client.log(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Go</strong>:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This file is auto-generated, don&#x27;t edit it. Thanks.</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  console  <span class=\"string\">&quot;github.com/alibabacloud-go/tea-console/client&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/alibabacloud-go/tea/tea&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Client <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewClient</span><span class=\"params\">()</span></span>(*Client, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  client := <span class=\"built_in\">new</span>(Client)</span><br><span class=\"line\">  err := client.Init()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> client, err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(client *Client)</span></span>Init()(_err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x3-自定义模块\"><a href=\"#0x3-自定义模块\" class=\"headerlink\" title=\"0x3 自定义模块\"></a>0x3 自定义模块</h2><p>上面所用到的 <code>Console</code> 就是通过自定义模块打包上传到了 Darabonba 的<a href=\"https://darabonba.api.aliyun.com/module\">模块仓库</a>，然后我们可以直接通过 <code>libraries</code> 来使用它。</p>\n<p>所以我们可以自定义自己的模块上传到 Darabonba 模块仓库，接下来我们自定义一个获取 <strong>UUID</strong> 的模块，让它支持 Java 和 Go 语言来生成使用。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/drcDzN%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.jpg\" alt=\"未命名文件\"></p>\n<p>从上面的流程图可以知道，模块是由各个语言自己编写代码，然后通过 Darabonba 聚合后上传到模块仓库，然后使用者从仓库安装模块，并且下载对应语言的依赖包。</p>\n<p>我们这边要编写 Java 和 Go 语言获取 UUID 的代码，然后通过 Darabonba 打包上传到模块仓库。</p>\n<h3 id=\"配置模版\"><a href=\"#配置模版\" class=\"headerlink\" title=\"配置模版\"></a>配置模版</h3><p>编写模块我们也是用 Darabonba 先生成各个语言的模版代码，然后再编写相应的具体实现。</p>\n<p>初始化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜ dara init</span><br><span class=\"line\">package scope: greycode</span><br><span class=\"line\">package name: UUID</span><br><span class=\"line\">package version: 1.0.0</span><br><span class=\"line\">main entry: ./main.dara</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们先配置好 <strong>Darafile</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;greycode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UUID&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./main.dara&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;java&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;package&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;top.mjava.uuid&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;packageInfo&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UUID generated for Darabonba moudle&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://github.com/greycodee/tea-uuid&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;developerId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;greycode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;developerName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;greycode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;developerEmail&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;zhengminghui99@gmail.com&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在 <strong>main.dara</strong> 里编写一个静态方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> <span class=\"variable\">uuid</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">function</span> <span class=\"title function_\">uuid</span>(<span class=\"params\"></span>): string;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编写-Java-模块\"><a href=\"#编写-Java-模块\" class=\"headerlink\" title=\"编写 Java 模块\"></a>编写 Java 模块</h3><p>按上面的步骤配置好后就可以生成 Java 代码了，在当前目录下执行下面的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">dara codegen java ./java</span><br></pre></td></tr></table></figure>\n\n<p>然后进入 <strong>java 文件夹</strong>，找到 <strong>Client.java</strong>，在 <code>uuid()</code> 方法里添加 UUID 生成的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This file is auto-generated, don&#x27;t edit it. Thanks.</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> top.mjava.uuid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.aliyun.tea.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">uuid</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// 添加这行代码</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> UUID.randomUUID().toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>编写好代码后，还需要配置 pom.xml 文件，然后把 Java 代码打包发布到 maven 仓库上。</strong></p>\n<p>配置好 pom.xml 文件到下面这几个配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>top.mjava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tea-uuid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>tea-uuid<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>还有把 pom.xml 里的仓库配置换成我们自己的，我这边也是用阿里云的 maven 参考。你们可以自己去阿里云 maven 注册自己的账号。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">-  &lt;distributionManagement&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-    &lt;snapshotRepository&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-      &lt;id&gt;sonatype-nexus-snapshots&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-      &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-    &lt;/snapshotRepository&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-    &lt;repository&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-      &lt;id&gt;sonatype-nexus-staging&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-      &lt;url&gt;https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-    &lt;/repository&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-  &lt;/distributionManagement&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ &lt;distributionManagement&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+    &lt;repository&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+        &lt;id&gt;rdc-releases_my&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+        &lt;url&gt;https://repo.rdc.aliyun.com/repository/102997-release-dTwmzu/&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+    &lt;/repository&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+    &lt;snapshotRepository&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+        &lt;id&gt;rdc-snapshots_my&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+        &lt;url&gt;https://repo.rdc.aliyun.com/repository/102997-snapshot-d0gx8B/&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+    &lt;/snapshotRepository&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+ &lt;/distributionManagement&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置好后就可以执行下面的命令将代码打包推送到远程 maven 仓库了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean source:jar javadoc:jar package deploy -Dmaven.test.skip=true -Dgpg.skip</span><br></pre></td></tr></table></figure>\n\n<p>看到下面的信息就说明部署成功了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[INFO] 阿里云Maven中央仓库为阿里云云效提供的公共代理仓库，云效也提供了免费、可靠的Maven私有仓库Packages，欢迎您体验使用。https://www.aliyun.com/product/yunxiao/packages?channel=pd_maven_download</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time:  5.538 s</span><br><span class=\"line\">[INFO] Finished at: 2021-06-05T16:00:28+08:00</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Maven-命令执行出现问题解决办法\"><a href=\"#Maven-命令执行出现问题解决办法\" class=\"headerlink\" title=\"Maven 命令执行出现问题解决办法\"></a>Maven 命令执行出现问题解决办法</h4><ul>\n<li><p>如果执行 maven 命令进行部署时，出现下面的错误</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-gpg-plugin:1.6:sign (sign-artifacts) on project tea-uuid: Unable to execute gpg command: Error while executing process. Cannot run program &quot;gpg&quot;: error=2, No such file or directory -&gt; [Help 1]</span><br></pre></td></tr></table></figure>\n\n<p>可以通过添加 <code>-Dgpg.skip</code> 解决</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean source:jar javadoc:jar package deploy -Dmaven.test.skip=true -Dgpg.skip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果出现下面的的错误</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.sonatype.plugins:nexus-staging-maven-plugin:1.6.3:deploy (injected-nexus-deploy) on project tea-uuid: Execution injected-nexus-deploy of goal org.sonatype.plugins:nexus-staging-maven-plugin:1.6.3:deploy failed: Server credentials with ID &quot;sonatype-nexus-staging&quot; not found! -</span><br></pre></td></tr></table></figure>\n\n<p>可以删除 pom.xml 文件里的 <code>sonatype-nexus-staging</code> 配置</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- &lt;plugin&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-   &lt;groupId&gt;org.sonatype.plugins&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-   &lt;artifactId&gt;nexus-staging-maven-plugin&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-   &lt;version&gt;1.6.3&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-   &lt;extensions&gt;true&lt;/extensions&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-   &lt;configuration&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-     &lt;serverId&gt;sonatype-nexus-staging&lt;/serverId&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-     &lt;nexusUrl&gt;https://oss.sonatype.org/&lt;/nexusUrl&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-     &lt;autoReleaseAfterClose&gt;true&lt;/autoReleaseAfterClose&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-   &lt;/configuration&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">- &lt;/plugin&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"编写-Go-模块\"><a href=\"#编写-Go-模块\" class=\"headerlink\" title=\"编写 Go 模块\"></a>编写 Go 模块</h3><p>老规矩，首先先生成 Go 的代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">dara codegen go ./go</span><br></pre></td></tr></table></figure>\n\n<p>然后编辑 <code>client.go</code> 文件，改为如下代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This file is auto-generated, don&#x27;t edit it. Thanks.</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @return uuid</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/google/uuid&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Uuid</span> <span class=\"params\">()</span></span> (_result <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// V4 基于随机数</span></span><br><span class=\"line\">  u4 := uuid.New()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> u4.String()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后 <code>go.mod </code> 文件里的 module 改为我们的上传 Go 代码的仓库地址</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">module github.com/greycodee/tea-uuid-<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n\n<p>然后推送到 GitHub 并打上一个 Tag 作为这个 Go 库的版本号，这边我设置版本号为 <code>v1.0.0</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git tag v1.0.0</span><br><span class=\"line\">git push origin v1.0.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上传-Darabonba-仓库\"><a href=\"#上传-Darabonba-仓库\" class=\"headerlink\" title=\"上传 Darabonba 仓库\"></a>上传 Darabonba 仓库</h3><p>编写好相应模块的代码并打包上传到对应的原创仓库后，就可以配置 <strong>Darafile</strong> 文件了</p>\n<p>在 Darafile 添加 releases 信息</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;greycode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UUID&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./main.dara&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;releases&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;go&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;github.com/greycodee/tea-uuid-go/client:v1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;java&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;top.mjava:tea-uuid:1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;java&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;package&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;top.mjava.uuid&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;packageInfo&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UUID generated for Darabonba moudle&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://github.com/greycodee/tea-uuid&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;developerId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;greycode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;developerName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;greycode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;developerEmail&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;zhengminghui99@gmail.com&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后去 <a href=\"https://darabonba.api.aliyun.com/admin/maintainer\">Darabonba 模块仓库</a>里注册一个账号，然后点击<code>个人中心-&gt;Scope-&gt;添加scope</code>，添加一个 scope ，<strong>保持和 Darafile 文件里的 scope 一致。</strong></p>\n<p>注册完成后在项目目录下执行 <code>dara login</code> 命令，输入刚才注册的账号密码，进行登陆。</p>\n<p>执行 <code>dara pack</code> 进行打包</p>\n<p>再执行 <code>dara publish</code> 进行发布</p>\n<p>发布完成后就可在  Darabonba 模块仓库里看到刚才发布的包了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Cxudyeimage-20210605170948596-20211008164903196.png\" alt=\"image-20210605170948596\"></p>\n<blockquote>\n<p>Darabonba UUID 模块代码地址：<a href=\"https://github.com/greycodee/tea-uuid\">https://github.com/greycodee/tea-uuid</a></p>\n<p>Go 模块代码地址： <a href=\"https://github.com/greycodee/tea-uuid-go\">https://github.com/greycodee/tea-uuid-go</a></p>\n</blockquote>\n<h3 id=\"使用自定义的模块\"><a href=\"#使用自定义的模块\" class=\"headerlink\" title=\"使用自定义的模块\"></a>使用自定义的模块</h3><p>上传 Darabonba 模块仓库后，我们就可以向刚开始使用 Console 模块那样来使用 UUID 模块了</p>\n<p>Darafile 添加 libraries</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;libraries&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;UUID&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;greycode:UUID:*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>dara</code> 代码里使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Console</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"variable constant_\">UUID</span>;</span><br><span class=\"line\"><span class=\"title function_\">init</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hello</span>(<span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">Console</span>.<span class=\"title function_\">log</span>(<span class=\"variable constant_\">UUID</span>.<span class=\"title function_\">uuid</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/1PH6HFimage-20210605175031562.png\" alt=\"图片\"></p>\n<h2 id=\"0x1-介绍\"><a href=\"#0x1-介绍\" class=\"headerlink\" title=\"0x1 介绍\"></a>0x1 介绍</h2><p>最近在看阿里的SDK的时候，突然看到了一个好玩的东西，这玩意叫 Darabonba。是一种 OpenAPI 应用的领域特定语言。可以利用它为任意风格的接口生成多语言的 SDK、代码示例、测试用例、接口编排等。现在阿里云的多语言 SDK 就是用这个生成的。下面是官方的介绍流程图。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/kS9v8bimage-20210604161124444-20211008164903058.png\" alt=\"image-20210604161124444\"></p>\n<h2 id=\"0x2-安装\"><a href=\"#0x2-安装\" class=\"headerlink\" title=\"0x2 安装\"></a>0x2 安装</h2><p>我们按照官方的步骤来安装它，因为是用 Nodejs 写的，所以可以用 npm 来安装它</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install -g @darabonba/cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后可以在终端输入 <code>dara</code> ，如果输出版本号就是说明安装成功了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜ dara</span><br><span class=\"line\"></span><br><span class=\"line\">The CLI for Darabonba 1.1.8</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x3-使用\"><a href=\"#0x3-使用\" class=\"headerlink\" title=\"0x3 使用\"></a>0x3 使用</h2><p>安装完成后就可以使用了，首先创建一个文件夹来存放这个项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir demo &amp;&amp; cd demo</span><br></pre></td></tr></table></figure>\n\n<p>然后用 <code>dara</code> 命令来进行初始化模块，然后依次输入包名等信息。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜ dara init</span><br><span class=\"line\">package scope: demo</span><br><span class=\"line\">package name: demo</span><br><span class=\"line\">package version: 1.0.0</span><br><span class=\"line\">main entry: ./demo.dara</span><br></pre></td></tr></table></figure>\n\n<p>初始化完成后，我们就可以在 <code>demo.dara</code> 文件里进行 Darabonba DSL 表达式的编写里</p>\n<p>比如我们编写一个经典的输出 hello world！</p>\n<h3 id=\"编写-Darabonba-DSL-表达式\"><a href=\"#编写-Darabonba-DSL-表达式\" class=\"headerlink\" title=\"编写 Darabonba DSL 表达式\"></a>编写 Darabonba DSL 表达式</h3><p>在 <code>demo.dara</code> 文件里写入如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Console</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">init</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hello</span>(<span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">        <span class=\"title class_\">Console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装自定义模块\"><a href=\"#安装自定义模块\" class=\"headerlink\" title=\"安装自定义模块\"></a>安装自定义模块</h3><p>因为上面我们用到了 <code>Console</code> 模块，所以我们在当前文件路径下执行如下命令，进行模块的安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">dara install</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">执行后将显示下面这些信息</span></span><br><span class=\"line\">fetching from remote repository</span><br><span class=\"line\"></span><br><span class=\"line\">1 libraries installed. (0 local, 1 remote)</span><br></pre></td></tr></table></figure>\n\n<p>执行完命令后，当前文件夹下就会出现一个 <strong>libraries</strong> 文件夹</p>\n<h3 id=\"配置-Darafile\"><a href=\"#配置-Darafile\" class=\"headerlink\" title=\"配置 Darafile\"></a>配置 Darafile</h3><p><code>Darafile</code> 是 <code>Darabonba</code> 的模块管理文件，类似 <code>Java</code> 中的 <code>pom.xml</code> 或者 <code>Node.js</code> 中的 <code>package.json</code>，这里我们要生成 <code>Go</code> 和 <code>Java</code> 的代码，所以只要做如下配置就可以了。具体的可以查看<a href=\"https://github.com/aliyun/darabonba/blob/master/doc/darafile.md\">官方的详细介绍</a>。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;demo&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;demo&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./demo.dara&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;libraries&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;Console&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;darabonba:Console:*&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;java&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;package&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;top.mjava.demo&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;className&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;TestDemo&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>libraries</code> 里配置我们刚才所使用的 <code>Console</code> 依赖模块，在 <code>java</code> 对象字段里配置了包名和类文件名。</p>\n<h3 id=\"生成代码\"><a href=\"#生成代码\" class=\"headerlink\" title=\"生成代码\"></a>生成代码</h3><p>官方暂时只支持 TypeScript、C#、Java、 Go、PHP、Python3、Python2、CPP 的代码生成，后续的话还会支持 Swift、Dart、Ruby、Lua、Kotlin。</p>\n<p>我们这边只生成一下 Java 和 Go 代码，所以执行下面的命令就可以了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成 Java 代码</span></span><br><span class=\"line\">dara codegen java ./java-demo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">生成 Go 代码</span></span><br><span class=\"line\">dara codegen go ./go-demo</span><br></pre></td></tr></table></figure>\n\n<p>执行完命令后，当前文件夹就会出现 <strong>java-demo</strong> 和 <strong>go-demo</strong> 两个文件夹了。然后就可以进入文件夹看到相应生成的代码了</p>\n<p><strong>Java</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This file is auto-generated, don&#x27;t edit it. Thanks.</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> top.mjava.demo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.aliyun.tea.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.aliyun.teaconsole.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestDemo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TestDemo</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        com.aliyun.teaconsole.Client.log(<span class=\"string\">&quot;hello world!&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Go</strong>:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This file is auto-generated, don&#x27;t edit it. Thanks.</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  console  <span class=\"string\">&quot;github.com/alibabacloud-go/tea-console/client&quot;</span></span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/alibabacloud-go/tea/tea&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Client <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewClient</span><span class=\"params\">()</span></span>(*Client, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  client := <span class=\"built_in\">new</span>(Client)</span><br><span class=\"line\">  err := client.Init()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> client, err</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(client *Client)</span></span>Init()(_err <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"0x3-自定义模块\"><a href=\"#0x3-自定义模块\" class=\"headerlink\" title=\"0x3 自定义模块\"></a>0x3 自定义模块</h2><p>上面所用到的 <code>Console</code> 就是通过自定义模块打包上传到了 Darabonba 的<a href=\"https://darabonba.api.aliyun.com/module\">模块仓库</a>，然后我们可以直接通过 <code>libraries</code> 来使用它。</p>\n<p>所以我们可以自定义自己的模块上传到 Darabonba 模块仓库，接下来我们自定义一个获取 <strong>UUID</strong> 的模块，让它支持 Java 和 Go 语言来生成使用。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/drcDzN%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.jpg\" alt=\"未命名文件\"></p>\n<p>从上面的流程图可以知道，模块是由各个语言自己编写代码，然后通过 Darabonba 聚合后上传到模块仓库，然后使用者从仓库安装模块，并且下载对应语言的依赖包。</p>\n<p>我们这边要编写 Java 和 Go 语言获取 UUID 的代码，然后通过 Darabonba 打包上传到模块仓库。</p>\n<h3 id=\"配置模版\"><a href=\"#配置模版\" class=\"headerlink\" title=\"配置模版\"></a>配置模版</h3><p>编写模块我们也是用 Darabonba 先生成各个语言的模版代码，然后再编写相应的具体实现。</p>\n<p>初始化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜ dara init</span><br><span class=\"line\">package scope: greycode</span><br><span class=\"line\">package name: UUID</span><br><span class=\"line\">package version: 1.0.0</span><br><span class=\"line\">main entry: ./main.dara</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们先配置好 <strong>Darafile</strong>:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;greycode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UUID&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./main.dara&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;java&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;package&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;top.mjava.uuid&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;packageInfo&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UUID generated for Darabonba moudle&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://github.com/greycodee/tea-uuid&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;developerId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;greycode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;developerName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;greycode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;developerEmail&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;zhengminghui99@gmail.com&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在 <strong>main.dara</strong> 里编写一个静态方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* <span class=\"doctag\">@return</span> <span class=\"variable\">uuid</span></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">function</span> <span class=\"title function_\">uuid</span>(<span class=\"params\"></span>): string;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编写-Java-模块\"><a href=\"#编写-Java-模块\" class=\"headerlink\" title=\"编写 Java 模块\"></a>编写 Java 模块</h3><p>按上面的步骤配置好后就可以生成 Java 代码了，在当前目录下执行下面的命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">dara codegen java ./java</span><br></pre></td></tr></table></figure>\n\n<p>然后进入 <strong>java 文件夹</strong>，找到 <strong>Client.java</strong>，在 <code>uuid()</code> 方法里添加 UUID 生成的代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This file is auto-generated, don&#x27;t edit it. Thanks.</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> top.mjava.uuid;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.aliyun.tea.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">uuid</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// 添加这行代码</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> UUID.randomUUID().toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>编写好代码后，还需要配置 pom.xml 文件，然后把 Java 代码打包发布到 maven 仓库上。</strong></p>\n<p>配置好 pom.xml 文件到下面这几个配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>top.mjava<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>tea-uuid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">packaging</span>&gt;</span>jar<span class=\"tag\">&lt;/<span class=\"name\">packaging</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>tea-uuid<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>还有把 pom.xml 里的仓库配置换成我们自己的，我这边也是用阿里云的 maven 参考。你们可以自己去阿里云 maven 注册自己的账号。</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">-  &lt;distributionManagement&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-    &lt;snapshotRepository&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-      &lt;id&gt;sonatype-nexus-snapshots&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-      &lt;url&gt;https://oss.sonatype.org/content/repositories/snapshots&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-    &lt;/snapshotRepository&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-    &lt;repository&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-      &lt;id&gt;sonatype-nexus-staging&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-      &lt;url&gt;https://oss.sonatype.org/service/local/staging/deploy/maven2/&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-    &lt;/repository&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-  &lt;/distributionManagement&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"addition\">+ &lt;distributionManagement&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+    &lt;repository&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+        &lt;id&gt;rdc-releases_my&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+        &lt;url&gt;https://repo.rdc.aliyun.com/repository/102997-release-dTwmzu/&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+    &lt;/repository&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+    &lt;snapshotRepository&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+        &lt;id&gt;rdc-snapshots_my&lt;/id&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+        &lt;url&gt;https://repo.rdc.aliyun.com/repository/102997-snapshot-d0gx8B/&lt;/url&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+    &lt;/snapshotRepository&gt;</span></span><br><span class=\"line\"><span class=\"addition\">+ &lt;/distributionManagement&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>配置好后就可以执行下面的命令将代码打包推送到远程 maven 仓库了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean source:jar javadoc:jar package deploy -Dmaven.test.skip=true -Dgpg.skip</span><br></pre></td></tr></table></figure>\n\n<p>看到下面的信息就说明部署成功了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[INFO] 阿里云Maven中央仓库为阿里云云效提供的公共代理仓库，云效也提供了免费、可靠的Maven私有仓库Packages，欢迎您体验使用。https://www.aliyun.com/product/yunxiao/packages?channel=pd_maven_download</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time:  5.538 s</span><br><span class=\"line\">[INFO] Finished at: 2021-06-05T16:00:28+08:00</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Maven-命令执行出现问题解决办法\"><a href=\"#Maven-命令执行出现问题解决办法\" class=\"headerlink\" title=\"Maven 命令执行出现问题解决办法\"></a>Maven 命令执行出现问题解决办法</h4><ul>\n<li><p>如果执行 maven 命令进行部署时，出现下面的错误</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.apache.maven.plugins:maven-gpg-plugin:1.6:sign (sign-artifacts) on project tea-uuid: Unable to execute gpg command: Error while executing process. Cannot run program &quot;gpg&quot;: error=2, No such file or directory -&gt; [Help 1]</span><br></pre></td></tr></table></figure>\n\n<p>可以通过添加 <code>-Dgpg.skip</code> 解决</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean source:jar javadoc:jar package deploy -Dmaven.test.skip=true -Dgpg.skip</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果出现下面的的错误</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal org.sonatype.plugins:nexus-staging-maven-plugin:1.6.3:deploy (injected-nexus-deploy) on project tea-uuid: Execution injected-nexus-deploy of goal org.sonatype.plugins:nexus-staging-maven-plugin:1.6.3:deploy failed: Server credentials with ID &quot;sonatype-nexus-staging&quot; not found! -</span><br></pre></td></tr></table></figure>\n\n<p>可以删除 pom.xml 文件里的 <code>sonatype-nexus-staging</code> 配置</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- &lt;plugin&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-   &lt;groupId&gt;org.sonatype.plugins&lt;/groupId&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-   &lt;artifactId&gt;nexus-staging-maven-plugin&lt;/artifactId&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-   &lt;version&gt;1.6.3&lt;/version&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-   &lt;extensions&gt;true&lt;/extensions&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-   &lt;configuration&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-     &lt;serverId&gt;sonatype-nexus-staging&lt;/serverId&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-     &lt;nexusUrl&gt;https://oss.sonatype.org/&lt;/nexusUrl&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-     &lt;autoReleaseAfterClose&gt;true&lt;/autoReleaseAfterClose&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">-   &lt;/configuration&gt;</span></span><br><span class=\"line\"><span class=\"deletion\">- &lt;/plugin&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"编写-Go-模块\"><a href=\"#编写-Go-模块\" class=\"headerlink\" title=\"编写 Go 模块\"></a>编写 Go 模块</h3><p>老规矩，首先先生成 Go 的代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">dara codegen go ./go</span><br></pre></td></tr></table></figure>\n\n<p>然后编辑 <code>client.go</code> 文件，改为如下代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This file is auto-generated, don&#x27;t edit it. Thanks.</span></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* @return uuid</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">&quot;github.com/google/uuid&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Uuid</span> <span class=\"params\">()</span></span> (_result <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// V4 基于随机数</span></span><br><span class=\"line\">  u4 := uuid.New()</span><br><span class=\"line\">  <span class=\"keyword\">return</span> u4.String()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后 <code>go.mod </code> 文件里的 module 改为我们的上传 Go 代码的仓库地址</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">module github.com/greycodee/tea-uuid-<span class=\"keyword\">go</span></span><br></pre></td></tr></table></figure>\n\n<p>然后推送到 GitHub 并打上一个 Tag 作为这个 Go 库的版本号，这边我设置版本号为 <code>v1.0.0</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git tag v1.0.0</span><br><span class=\"line\">git push origin v1.0.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上传-Darabonba-仓库\"><a href=\"#上传-Darabonba-仓库\" class=\"headerlink\" title=\"上传 Darabonba 仓库\"></a>上传 Darabonba 仓库</h3><p>编写好相应模块的代码并打包上传到对应的原创仓库后，就可以配置 <strong>Darafile</strong> 文件了</p>\n<p>在 Darafile 添加 releases 信息</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;greycode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UUID&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;version&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;main&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;./main.dara&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;releases&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;go&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;github.com/greycodee/tea-uuid-go/client:v1.0.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;java&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;top.mjava:tea-uuid:1.0&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;java&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;package&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;top.mjava.uuid&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t<span class=\"attr\">&quot;packageInfo&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;UUID generated for Darabonba moudle&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;url&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;https://github.com/greycodee/tea-uuid&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;developerId&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;greycode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;developerName&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;greycode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">&quot;developerEmail&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;zhengminghui99@gmail.com&quot;</span></span><br><span class=\"line\">\t\t<span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后去 <a href=\"https://darabonba.api.aliyun.com/admin/maintainer\">Darabonba 模块仓库</a>里注册一个账号，然后点击<code>个人中心-&gt;Scope-&gt;添加scope</code>，添加一个 scope ，<strong>保持和 Darafile 文件里的 scope 一致。</strong></p>\n<p>注册完成后在项目目录下执行 <code>dara login</code> 命令，输入刚才注册的账号密码，进行登陆。</p>\n<p>执行 <code>dara pack</code> 进行打包</p>\n<p>再执行 <code>dara publish</code> 进行发布</p>\n<p>发布完成后就可在  Darabonba 模块仓库里看到刚才发布的包了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Cxudyeimage-20210605170948596-20211008164903196.png\" alt=\"image-20210605170948596\"></p>\n<blockquote>\n<p>Darabonba UUID 模块代码地址：<a href=\"https://github.com/greycodee/tea-uuid\">https://github.com/greycodee/tea-uuid</a></p>\n<p>Go 模块代码地址： <a href=\"https://github.com/greycodee/tea-uuid-go\">https://github.com/greycodee/tea-uuid-go</a></p>\n</blockquote>\n<h3 id=\"使用自定义的模块\"><a href=\"#使用自定义的模块\" class=\"headerlink\" title=\"使用自定义的模块\"></a>使用自定义的模块</h3><p>上传 Darabonba 模块仓库后，我们就可以向刚开始使用 Console 模块那样来使用 UUID 模块了</p>\n<p>Darafile 添加 libraries</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;libraries&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;UUID&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;greycode:UUID:*&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>dara</code> 代码里使用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Console</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"variable constant_\">UUID</span>;</span><br><span class=\"line\"><span class=\"title function_\">init</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">hello</span>(<span class=\"params\"></span>): <span class=\"keyword\">void</span> &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">Console</span>.<span class=\"title function_\">log</span>(<span class=\"variable constant_\">UUID</span>.<span class=\"title function_\">uuid</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"免费全自动SEO优化","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-06-20T14:27:32.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 0x1 简介\n\n怎么让各大站长快速收录你自己网站的链接？那就是主动的推送你自己网站的 URL 到各大站长上去。前几天我写了一个一键提交的工具，可以一键提交你的链接到各大站长上去。你也可以单独使用工具来推送你的 URL、批量 URL 文件、SiteMap 站点地图。工具的github地址是：https://github.com/greycodee/seo-tools\n\n![image-20210620211932651](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Nee81Aimage-20210620211932651.png) \n\n今天我再教大家如何让网站自动提交最新的 URL 到各大站长上去，让各大站长第一时间收录你的链接。\n\n## 0x2 准备\n\n在开始前，你需要准备如下东西：\n\n- [IFTTT](https://ifttt.com/home) 账号\n\n- [Github](https://github.com/) 账号\n- 你个人网站开通 RSS 订阅\n\n具体原理就是通过 IFTTT 订阅你网站的 RSS，然后当有新的网址发布后，IFTTT 会触发事件回调 Github，Github 收到回调后 Github Action 会进行运转，然后在里面使用工具进行推送。\n\n![seo自动提交](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/1h6Cpuseo%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4.png)","source":"_posts/tool/21324399FBDC41CBA815D2069BB62168.md","raw":"---\ntitle: 免费全自动SEO优化\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-06-20 22:27:32\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\ncategories:\n---\n\n## 0x1 简介\n\n怎么让各大站长快速收录你自己网站的链接？那就是主动的推送你自己网站的 URL 到各大站长上去。前几天我写了一个一键提交的工具，可以一键提交你的链接到各大站长上去。你也可以单独使用工具来推送你的 URL、批量 URL 文件、SiteMap 站点地图。工具的github地址是：https://github.com/greycodee/seo-tools\n\n![image-20210620211932651](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Nee81Aimage-20210620211932651.png) \n\n今天我再教大家如何让网站自动提交最新的 URL 到各大站长上去，让各大站长第一时间收录你的链接。\n\n## 0x2 准备\n\n在开始前，你需要准备如下东西：\n\n- [IFTTT](https://ifttt.com/home) 账号\n\n- [Github](https://github.com/) 账号\n- 你个人网站开通 RSS 订阅\n\n具体原理就是通过 IFTTT 订阅你网站的 RSS，然后当有新的网址发布后，IFTTT 会触发事件回调 Github，Github 收到回调后 Github Action 会进行运转，然后在里面使用工具进行推送。\n\n![seo自动提交](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/1h6Cpuseo%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4.png)","slug":"tool/21324399FBDC41CBA815D2069BB62168","published":1,"updated":"2021-10-08T08:48:21.062Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehn005lvpuc8s973wsa","content":"<h2 id=\"0x1-简介\"><a href=\"#0x1-简介\" class=\"headerlink\" title=\"0x1 简介\"></a>0x1 简介</h2><p>怎么让各大站长快速收录你自己网站的链接？那就是主动的推送你自己网站的 URL 到各大站长上去。前几天我写了一个一键提交的工具，可以一键提交你的链接到各大站长上去。你也可以单独使用工具来推送你的 URL、批量 URL 文件、SiteMap 站点地图。工具的github地址是：<a href=\"https://github.com/greycodee/seo-tools\">https://github.com/greycodee/seo-tools</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Nee81Aimage-20210620211932651.png\" alt=\"image-20210620211932651\"> </p>\n<p>今天我再教大家如何让网站自动提交最新的 URL 到各大站长上去，让各大站长第一时间收录你的链接。</p>\n<h2 id=\"0x2-准备\"><a href=\"#0x2-准备\" class=\"headerlink\" title=\"0x2 准备\"></a>0x2 准备</h2><p>在开始前，你需要准备如下东西：</p>\n<ul>\n<li><p><a href=\"https://ifttt.com/home\">IFTTT</a> 账号</p>\n</li>\n<li><p><a href=\"https://github.com/\">Github</a> 账号</p>\n</li>\n<li><p>你个人网站开通 RSS 订阅</p>\n</li>\n</ul>\n<p>具体原理就是通过 IFTTT 订阅你网站的 RSS，然后当有新的网址发布后，IFTTT 会触发事件回调 Github，Github 收到回调后 Github Action 会进行运转，然后在里面使用工具进行推送。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/1h6Cpuseo%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4.png\" alt=\"seo自动提交\"></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"0x1-简介\"><a href=\"#0x1-简介\" class=\"headerlink\" title=\"0x1 简介\"></a>0x1 简介</h2><p>怎么让各大站长快速收录你自己网站的链接？那就是主动的推送你自己网站的 URL 到各大站长上去。前几天我写了一个一键提交的工具，可以一键提交你的链接到各大站长上去。你也可以单独使用工具来推送你的 URL、批量 URL 文件、SiteMap 站点地图。工具的github地址是：<a href=\"https://github.com/greycodee/seo-tools\">https://github.com/greycodee/seo-tools</a></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/Nee81Aimage-20210620211932651.png\" alt=\"image-20210620211932651\"> </p>\n<p>今天我再教大家如何让网站自动提交最新的 URL 到各大站长上去，让各大站长第一时间收录你的链接。</p>\n<h2 id=\"0x2-准备\"><a href=\"#0x2-准备\" class=\"headerlink\" title=\"0x2 准备\"></a>0x2 准备</h2><p>在开始前，你需要准备如下东西：</p>\n<ul>\n<li><p><a href=\"https://ifttt.com/home\">IFTTT</a> 账号</p>\n</li>\n<li><p><a href=\"https://github.com/\">Github</a> 账号</p>\n</li>\n<li><p>你个人网站开通 RSS 订阅</p>\n</li>\n</ul>\n<p>具体原理就是通过 IFTTT 订阅你网站的 RSS，然后当有新的网址发布后，IFTTT 会触发事件回调 Github，Github 收到回调后 Github Action 会进行运转，然后在里面使用工具进行推送。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/1h6Cpuseo%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4.png\" alt=\"seo自动提交\"></p>\n"},{"title":"用 Json-Schema 来验证你的请求参数","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-08-19T08:40:05.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 简介\n\nJson-Schema 是一个用来验证、描述 Json 数据的一个标准，它可以用来验证你的请求数据是否和你定义的 Schema 是否一致。比如下面的 Json 数据中：\n\n```json\n{\n  \"name\":\"greycode\",\n  \"desc\":\"coder\"\n}\n```\n\n如果不预先告诉你字段的含义，你知道 `name` 是什么意思吗？它到底是指人名还是一个物品的名字还是其他？`desc` 又是什么意思呢？\n\n这时候，就可以用 Json-Schema 来描述它了\n\n```json\n{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"http://example.com/example.json\",\n    \"type\": \"object\",\n    \"title\": \"这是一个Json数据\",\n    \"description\": \"描述个人信息的数据\",\n    \"required\": [\n        \"name\",\n        \"desc\"\n    ],\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"description\": \"人的姓名\",\n        },\n        \"desc\": {\n            \"type\": \"string\",\n            \"description\": \"个人简介\",\n        }\n    }\n}\n```\n\n上面我们用 Json-Schema 来描述了刚开始的 Json 数据，这样就可以清楚的知道 name 是人的姓名，desc 是个人简介，在也不用自己去猜了。\n\n## Json Schema 字段说明\n\n在上面的 Json-Schema 数据中，每个字段都有其的含义\n\n- `$schema` ：主要用于版本控制\n- `$id` ：定义字段在 schema 中的地址\n- `title` 和 `description` ：用于描述和说明 Schema 的作用\n- `type` ：定义字段的数据类型\n- `required` ：Json 数据中包含的字段\n- ......\n\n由于 Json-Schema 有许多草案，每个草案的字段都有一点区别，具体可以看一下的草案资料：\n\n1. [草案 2019-09 迁移 草案 2020-12](https://json-schema.org/draft/2020-12/release-notes.html)\n2. [草案-07 迁移 草案 2019-09](https://json-schema.org/draft/2019-09/release-notes.html)\n3. [草案-06 迁移 草案-07](https://json-schema.org/draft-07/json-schema-release-notes.html)\n4. [草案-04 迁移 草案-06 文档说明](https://json-schema.org/draft-06/json-schema-release-notes.html)\n5. [所有草案版本文档](https://json-schema.org/specification-links.html)\n\n## 使用 Json-Schema 验证 Json 数据\n\n![image-20210820162428822](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/hlpzY6image-20210820162428822.png)\n\nJson-Schema 支持多种语言的验证器，一般都是第三方实现的，这里我们使用 Java 验证器来验证一个 Json 数据，Java 验证器这里选用了 [everit-org/json-schema](https://github.com/everit-org/json-schema) 验证器来使用，不过它最高支持到**草案7**，像最新的**草案2020-12**它是不支持的。\n\n### Java 验证 Json 数据\n\n**导入依赖：**\n\n```xml\n<dependency>\n    <groupId>com.github.everit-org.json-schema</groupId>\n    <artifactId>org.everit.json.schema</artifactId>\n    <version>1.13.0</version>\n</dependency>\n...\n<repositories>\n    <repository>\n        <id>jitpack.io</id>\n        <url>https://jitpack.io</url>\n    </repository>\n</repositories>\n```\n\n导入所需依赖，由于这个包没有上传到中央仓库，所以要设置仓库地址\n\n**代码实现：**\n\n导入依赖后就可以用代码来实现一个使用 Json-Schema 验证 Json 数据的功能了\n\n```java\ntry {\n  String jsonSchema = \"{\\n\" +\n    \"    \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema\\\",\\n\" +\n    \"    \\\"$id\\\": \\\"http://example.com/example.json\\\",\\n\" +\n    \"    \\\"type\\\": \\\"object\\\",\\n\" +\n    \"    \\\"title\\\": \\\"这是一个Json数据\\\",\\n\" +\n    \"    \\\"description\\\": \\\"描述个人信息的数据\\\",\\n\" +\n    \"    \\\"required\\\": [\\n\" +\n    \"        \\\"name\\\",\\n\" +\n    \"        \\\"desc\\\"\\n\" +\n    \"    ],\\n\" +\n    \"    \\\"properties\\\": {\\n\" +\n    \"        \\\"name\\\": {\\n\" +\n    \"            \\\"type\\\": \\\"string\\\",\\n\" +\n    \"            \\\"description\\\": \\\"人的姓名\\\",\\n\" +\n    \"        },\\n\" +\n    \"        \\\"desc\\\": {\\n\" +\n    \"            \\\"type\\\": \\\"string\\\",\\n\" +\n    \"            \\\"description\\\": \\\"个人简介\\\",\\n\" +\n    \"        }\\n\" +\n    \"    }\\n\" +\n    \"}\";\n  JSONObject jsonObject = new JSONObject(new JSONTokener(jsonSchema));\n  Schema schema = SchemaLoader.load(jsonObject);\n  schema.validate(new JSONObject(\"{\\n\" +\n                                 \"  \\\"name\\\":\\\"greycode\\\",\\n\" +\n                                 \"  \\\"desc\\\":\\\"coder\\\"\\n\" +\n                                 \"}\"));\n}catch (Exception e){\n  System.out.println(\"验证异常：\"+e.getMessage());\n}\n```\n\n这里用了上面的 Json 数据和 Json-Schema，当验证通过时，不会有任何输出，同时也没有任何异常。\n\n当我们把 `desc` 的数据改为如下数据时：\n\n```json\n{\n  \"name\":\"greycode\",\n  \"desc\":1\n}\n```\n\n此时由于 `desc` 的数据类型变为了数字类型，所以我们就可以捕获到异常并输出：`验证异常：#/desc: expected type: String, found: Integer`\n\n## 资料\n\n- 所有的第三方 Json-Schema 验证器：https://json-schema.org/implementations.html#validators\n- Jaon-Schema 生成器：https://json-schema.org/implementations.html#schema-generators\n- 通过 Json-Schema 生成代码、数据等：https://json-schema.org/implementations.html#generators-from-schemas\n- 在线 Json 转换 Json-Schema ：https://www.jsonschema.net/home\n- https://json-schema.org/","source":"_posts/tool/775FF9A0CE4940EBBB45FED3FAD7AB5B.md","raw":"---\ntitle: 用 Json-Schema 来验证你的请求参数\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-08-19 16:40:05\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Json-Schema\n- 参数验证\n- Java\ncategories:\n- Tool\n---\n\n## 简介\n\nJson-Schema 是一个用来验证、描述 Json 数据的一个标准，它可以用来验证你的请求数据是否和你定义的 Schema 是否一致。比如下面的 Json 数据中：\n\n```json\n{\n  \"name\":\"greycode\",\n  \"desc\":\"coder\"\n}\n```\n\n如果不预先告诉你字段的含义，你知道 `name` 是什么意思吗？它到底是指人名还是一个物品的名字还是其他？`desc` 又是什么意思呢？\n\n这时候，就可以用 Json-Schema 来描述它了\n\n```json\n{\n    \"$schema\": \"http://json-schema.org/draft-07/schema\",\n    \"$id\": \"http://example.com/example.json\",\n    \"type\": \"object\",\n    \"title\": \"这是一个Json数据\",\n    \"description\": \"描述个人信息的数据\",\n    \"required\": [\n        \"name\",\n        \"desc\"\n    ],\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\",\n            \"description\": \"人的姓名\",\n        },\n        \"desc\": {\n            \"type\": \"string\",\n            \"description\": \"个人简介\",\n        }\n    }\n}\n```\n\n上面我们用 Json-Schema 来描述了刚开始的 Json 数据，这样就可以清楚的知道 name 是人的姓名，desc 是个人简介，在也不用自己去猜了。\n\n## Json Schema 字段说明\n\n在上面的 Json-Schema 数据中，每个字段都有其的含义\n\n- `$schema` ：主要用于版本控制\n- `$id` ：定义字段在 schema 中的地址\n- `title` 和 `description` ：用于描述和说明 Schema 的作用\n- `type` ：定义字段的数据类型\n- `required` ：Json 数据中包含的字段\n- ......\n\n由于 Json-Schema 有许多草案，每个草案的字段都有一点区别，具体可以看一下的草案资料：\n\n1. [草案 2019-09 迁移 草案 2020-12](https://json-schema.org/draft/2020-12/release-notes.html)\n2. [草案-07 迁移 草案 2019-09](https://json-schema.org/draft/2019-09/release-notes.html)\n3. [草案-06 迁移 草案-07](https://json-schema.org/draft-07/json-schema-release-notes.html)\n4. [草案-04 迁移 草案-06 文档说明](https://json-schema.org/draft-06/json-schema-release-notes.html)\n5. [所有草案版本文档](https://json-schema.org/specification-links.html)\n\n## 使用 Json-Schema 验证 Json 数据\n\n![image-20210820162428822](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/hlpzY6image-20210820162428822.png)\n\nJson-Schema 支持多种语言的验证器，一般都是第三方实现的，这里我们使用 Java 验证器来验证一个 Json 数据，Java 验证器这里选用了 [everit-org/json-schema](https://github.com/everit-org/json-schema) 验证器来使用，不过它最高支持到**草案7**，像最新的**草案2020-12**它是不支持的。\n\n### Java 验证 Json 数据\n\n**导入依赖：**\n\n```xml\n<dependency>\n    <groupId>com.github.everit-org.json-schema</groupId>\n    <artifactId>org.everit.json.schema</artifactId>\n    <version>1.13.0</version>\n</dependency>\n...\n<repositories>\n    <repository>\n        <id>jitpack.io</id>\n        <url>https://jitpack.io</url>\n    </repository>\n</repositories>\n```\n\n导入所需依赖，由于这个包没有上传到中央仓库，所以要设置仓库地址\n\n**代码实现：**\n\n导入依赖后就可以用代码来实现一个使用 Json-Schema 验证 Json 数据的功能了\n\n```java\ntry {\n  String jsonSchema = \"{\\n\" +\n    \"    \\\"$schema\\\": \\\"http://json-schema.org/draft-07/schema\\\",\\n\" +\n    \"    \\\"$id\\\": \\\"http://example.com/example.json\\\",\\n\" +\n    \"    \\\"type\\\": \\\"object\\\",\\n\" +\n    \"    \\\"title\\\": \\\"这是一个Json数据\\\",\\n\" +\n    \"    \\\"description\\\": \\\"描述个人信息的数据\\\",\\n\" +\n    \"    \\\"required\\\": [\\n\" +\n    \"        \\\"name\\\",\\n\" +\n    \"        \\\"desc\\\"\\n\" +\n    \"    ],\\n\" +\n    \"    \\\"properties\\\": {\\n\" +\n    \"        \\\"name\\\": {\\n\" +\n    \"            \\\"type\\\": \\\"string\\\",\\n\" +\n    \"            \\\"description\\\": \\\"人的姓名\\\",\\n\" +\n    \"        },\\n\" +\n    \"        \\\"desc\\\": {\\n\" +\n    \"            \\\"type\\\": \\\"string\\\",\\n\" +\n    \"            \\\"description\\\": \\\"个人简介\\\",\\n\" +\n    \"        }\\n\" +\n    \"    }\\n\" +\n    \"}\";\n  JSONObject jsonObject = new JSONObject(new JSONTokener(jsonSchema));\n  Schema schema = SchemaLoader.load(jsonObject);\n  schema.validate(new JSONObject(\"{\\n\" +\n                                 \"  \\\"name\\\":\\\"greycode\\\",\\n\" +\n                                 \"  \\\"desc\\\":\\\"coder\\\"\\n\" +\n                                 \"}\"));\n}catch (Exception e){\n  System.out.println(\"验证异常：\"+e.getMessage());\n}\n```\n\n这里用了上面的 Json 数据和 Json-Schema，当验证通过时，不会有任何输出，同时也没有任何异常。\n\n当我们把 `desc` 的数据改为如下数据时：\n\n```json\n{\n  \"name\":\"greycode\",\n  \"desc\":1\n}\n```\n\n此时由于 `desc` 的数据类型变为了数字类型，所以我们就可以捕获到异常并输出：`验证异常：#/desc: expected type: String, found: Integer`\n\n## 资料\n\n- 所有的第三方 Json-Schema 验证器：https://json-schema.org/implementations.html#validators\n- Jaon-Schema 生成器：https://json-schema.org/implementations.html#schema-generators\n- 通过 Json-Schema 生成代码、数据等：https://json-schema.org/implementations.html#generators-from-schemas\n- 在线 Json 转换 Json-Schema ：https://www.jsonschema.net/home\n- https://json-schema.org/","slug":"tool/775FF9A0CE4940EBBB45FED3FAD7AB5B","published":1,"updated":"2021-10-08T08:48:37.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eho005ovpuc8hp915yh","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Json-Schema 是一个用来验证、描述 Json 数据的一个标准，它可以用来验证你的请求数据是否和你定义的 Schema 是否一致。比如下面的 Json 数据中：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;greycode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;desc&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;coder&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不预先告诉你字段的含义，你知道 <code>name</code> 是什么意思吗？它到底是指人名还是一个物品的名字还是其他？<code>desc</code> 又是什么意思呢？</p>\n<p>这时候，就可以用 Json-Schema 来描述它了</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;$schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://json-schema.org/draft-07/schema&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;$id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://example.com/example.json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;这是一个Json数据&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;描述个人信息的数据&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;required&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;desc&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;人的姓名&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;desc&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;个人简介&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面我们用 Json-Schema 来描述了刚开始的 Json 数据，这样就可以清楚的知道 name 是人的姓名，desc 是个人简介，在也不用自己去猜了。</p>\n<h2 id=\"Json-Schema-字段说明\"><a href=\"#Json-Schema-字段说明\" class=\"headerlink\" title=\"Json Schema 字段说明\"></a>Json Schema 字段说明</h2><p>在上面的 Json-Schema 数据中，每个字段都有其的含义</p>\n<ul>\n<li><code>$schema</code> ：主要用于版本控制</li>\n<li><code>$id</code> ：定义字段在 schema 中的地址</li>\n<li><code>title</code> 和 <code>description</code> ：用于描述和说明 Schema 的作用</li>\n<li><code>type</code> ：定义字段的数据类型</li>\n<li><code>required</code> ：Json 数据中包含的字段</li>\n<li>……</li>\n</ul>\n<p>由于 Json-Schema 有许多草案，每个草案的字段都有一点区别，具体可以看一下的草案资料：</p>\n<ol>\n<li><a href=\"https://json-schema.org/draft/2020-12/release-notes.html\">草案 2019-09 迁移 草案 2020-12</a></li>\n<li><a href=\"https://json-schema.org/draft/2019-09/release-notes.html\">草案-07 迁移 草案 2019-09</a></li>\n<li><a href=\"https://json-schema.org/draft-07/json-schema-release-notes.html\">草案-06 迁移 草案-07</a></li>\n<li><a href=\"https://json-schema.org/draft-06/json-schema-release-notes.html\">草案-04 迁移 草案-06 文档说明</a></li>\n<li><a href=\"https://json-schema.org/specification-links.html\">所有草案版本文档</a></li>\n</ol>\n<h2 id=\"使用-Json-Schema-验证-Json-数据\"><a href=\"#使用-Json-Schema-验证-Json-数据\" class=\"headerlink\" title=\"使用 Json-Schema 验证 Json 数据\"></a>使用 Json-Schema 验证 Json 数据</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/hlpzY6image-20210820162428822.png\" alt=\"image-20210820162428822\"></p>\n<p>Json-Schema 支持多种语言的验证器，一般都是第三方实现的，这里我们使用 Java 验证器来验证一个 Json 数据，Java 验证器这里选用了 <a href=\"https://github.com/everit-org/json-schema\">everit-org&#x2F;json-schema</a> 验证器来使用，不过它最高支持到<strong>草案7</strong>，像最新的<strong>草案2020-12</strong>它是不支持的。</p>\n<h3 id=\"Java-验证-Json-数据\"><a href=\"#Java-验证-Json-数据\" class=\"headerlink\" title=\"Java 验证 Json 数据\"></a>Java 验证 Json 数据</h3><p><strong>导入依赖：</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.everit-org.json-schema<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>org.everit.json.schema<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.13.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jitpack.io<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://jitpack.io<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>导入所需依赖，由于这个包没有上传到中央仓库，所以要设置仓库地址</p>\n<p><strong>代码实现：</strong></p>\n<p>导入依赖后就可以用代码来实现一个使用 Json-Schema 验证 Json 数据的功能了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">jsonSchema</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    \\&quot;$schema\\&quot;: \\&quot;http://json-schema.org/draft-07/schema\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    \\&quot;$id\\&quot;: \\&quot;http://example.com/example.json\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    \\&quot;type\\&quot;: \\&quot;object\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    \\&quot;title\\&quot;: \\&quot;这是一个Json数据\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    \\&quot;description\\&quot;: \\&quot;描述个人信息的数据\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    \\&quot;required\\&quot;: [\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;        \\&quot;name\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;        \\&quot;desc\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    ],\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    \\&quot;properties\\&quot;: &#123;\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;        \\&quot;name\\&quot;: &#123;\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;            \\&quot;type\\&quot;: \\&quot;string\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;            \\&quot;description\\&quot;: \\&quot;人的姓名\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;        &#125;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;        \\&quot;desc\\&quot;: &#123;\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;            \\&quot;type\\&quot;: \\&quot;string\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;            \\&quot;description\\&quot;: \\&quot;个人简介\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;        &#125;\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    &#125;\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">  <span class=\"type\">JSONObject</span> <span class=\"variable\">jsonObject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">JSONTokener</span>(jsonSchema));</span><br><span class=\"line\">  <span class=\"type\">Schema</span> <span class=\"variable\">schema</span> <span class=\"operator\">=</span> SchemaLoader.load(jsonObject);</span><br><span class=\"line\">  schema.validate(<span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>(<span class=\"string\">&quot;&#123;\\n&quot;</span> +</span><br><span class=\"line\">                                 <span class=\"string\">&quot;  \\&quot;name\\&quot;:\\&quot;greycode\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">                                 <span class=\"string\">&quot;  \\&quot;desc\\&quot;:\\&quot;coder\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">                                 <span class=\"string\">&quot;&#125;&quot;</span>));</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;验证异常：&quot;</span>+e.getMessage());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里用了上面的 Json 数据和 Json-Schema，当验证通过时，不会有任何输出，同时也没有任何异常。</p>\n<p>当我们把 <code>desc</code> 的数据改为如下数据时：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;greycode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;desc&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>此时由于 <code>desc</code> 的数据类型变为了数字类型，所以我们就可以捕获到异常并输出：<code>验证异常：#/desc: expected type: String, found: Integer</code></p>\n<h2 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h2><ul>\n<li>所有的第三方 Json-Schema 验证器：<a href=\"https://json-schema.org/implementations.html#validators\">https://json-schema.org/implementations.html#validators</a></li>\n<li>Jaon-Schema 生成器：<a href=\"https://json-schema.org/implementations.html#schema-generators\">https://json-schema.org/implementations.html#schema-generators</a></li>\n<li>通过 Json-Schema 生成代码、数据等：<a href=\"https://json-schema.org/implementations.html#generators-from-schemas\">https://json-schema.org/implementations.html#generators-from-schemas</a></li>\n<li>在线 Json 转换 Json-Schema ：<a href=\"https://www.jsonschema.net/home\">https://www.jsonschema.net/home</a></li>\n<li><a href=\"https://json-schema.org/\">https://json-schema.org/</a></li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Json-Schema 是一个用来验证、描述 Json 数据的一个标准，它可以用来验证你的请求数据是否和你定义的 Schema 是否一致。比如下面的 Json 数据中：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;greycode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;desc&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;coder&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>如果不预先告诉你字段的含义，你知道 <code>name</code> 是什么意思吗？它到底是指人名还是一个物品的名字还是其他？<code>desc</code> 又是什么意思呢？</p>\n<p>这时候，就可以用 Json-Schema 来描述它了</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;$schema&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://json-schema.org/draft-07/schema&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;$id&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;http://example.com/example.json&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;object&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;title&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;这是一个Json数据&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;描述个人信息的数据&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;required&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;name&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"string\">&quot;desc&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;properties&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;人的姓名&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;desc&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;string&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">            <span class=\"attr\">&quot;description&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;个人简介&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>上面我们用 Json-Schema 来描述了刚开始的 Json 数据，这样就可以清楚的知道 name 是人的姓名，desc 是个人简介，在也不用自己去猜了。</p>\n<h2 id=\"Json-Schema-字段说明\"><a href=\"#Json-Schema-字段说明\" class=\"headerlink\" title=\"Json Schema 字段说明\"></a>Json Schema 字段说明</h2><p>在上面的 Json-Schema 数据中，每个字段都有其的含义</p>\n<ul>\n<li><code>$schema</code> ：主要用于版本控制</li>\n<li><code>$id</code> ：定义字段在 schema 中的地址</li>\n<li><code>title</code> 和 <code>description</code> ：用于描述和说明 Schema 的作用</li>\n<li><code>type</code> ：定义字段的数据类型</li>\n<li><code>required</code> ：Json 数据中包含的字段</li>\n<li>……</li>\n</ul>\n<p>由于 Json-Schema 有许多草案，每个草案的字段都有一点区别，具体可以看一下的草案资料：</p>\n<ol>\n<li><a href=\"https://json-schema.org/draft/2020-12/release-notes.html\">草案 2019-09 迁移 草案 2020-12</a></li>\n<li><a href=\"https://json-schema.org/draft/2019-09/release-notes.html\">草案-07 迁移 草案 2019-09</a></li>\n<li><a href=\"https://json-schema.org/draft-07/json-schema-release-notes.html\">草案-06 迁移 草案-07</a></li>\n<li><a href=\"https://json-schema.org/draft-06/json-schema-release-notes.html\">草案-04 迁移 草案-06 文档说明</a></li>\n<li><a href=\"https://json-schema.org/specification-links.html\">所有草案版本文档</a></li>\n</ol>\n<h2 id=\"使用-Json-Schema-验证-Json-数据\"><a href=\"#使用-Json-Schema-验证-Json-数据\" class=\"headerlink\" title=\"使用 Json-Schema 验证 Json 数据\"></a>使用 Json-Schema 验证 Json 数据</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/hlpzY6image-20210820162428822.png\" alt=\"image-20210820162428822\"></p>\n<p>Json-Schema 支持多种语言的验证器，一般都是第三方实现的，这里我们使用 Java 验证器来验证一个 Json 数据，Java 验证器这里选用了 <a href=\"https://github.com/everit-org/json-schema\">everit-org&#x2F;json-schema</a> 验证器来使用，不过它最高支持到<strong>草案7</strong>，像最新的<strong>草案2020-12</strong>它是不支持的。</p>\n<h3 id=\"Java-验证-Json-数据\"><a href=\"#Java-验证-Json-数据\" class=\"headerlink\" title=\"Java 验证 Json 数据\"></a>Java 验证 Json 数据</h3><p><strong>导入依赖：</strong></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.everit-org.json-schema<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>org.everit.json.schema<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.13.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">repositories</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jitpack.io<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>https://jitpack.io<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">repository</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>导入所需依赖，由于这个包没有上传到中央仓库，所以要设置仓库地址</p>\n<p><strong>代码实现：</strong></p>\n<p>导入依赖后就可以用代码来实现一个使用 Json-Schema 验证 Json 数据的功能了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">String</span> <span class=\"variable\">jsonSchema</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&#123;\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    \\&quot;$schema\\&quot;: \\&quot;http://json-schema.org/draft-07/schema\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    \\&quot;$id\\&quot;: \\&quot;http://example.com/example.json\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    \\&quot;type\\&quot;: \\&quot;object\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    \\&quot;title\\&quot;: \\&quot;这是一个Json数据\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    \\&quot;description\\&quot;: \\&quot;描述个人信息的数据\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    \\&quot;required\\&quot;: [\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;        \\&quot;name\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;        \\&quot;desc\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    ],\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    \\&quot;properties\\&quot;: &#123;\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;        \\&quot;name\\&quot;: &#123;\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;            \\&quot;type\\&quot;: \\&quot;string\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;            \\&quot;description\\&quot;: \\&quot;人的姓名\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;        &#125;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;        \\&quot;desc\\&quot;: &#123;\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;            \\&quot;type\\&quot;: \\&quot;string\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;            \\&quot;description\\&quot;: \\&quot;个人简介\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;        &#125;\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;    &#125;\\n&quot;</span> +</span><br><span class=\"line\">    <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\">  <span class=\"type\">JSONObject</span> <span class=\"variable\">jsonObject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">JSONTokener</span>(jsonSchema));</span><br><span class=\"line\">  <span class=\"type\">Schema</span> <span class=\"variable\">schema</span> <span class=\"operator\">=</span> SchemaLoader.load(jsonObject);</span><br><span class=\"line\">  schema.validate(<span class=\"keyword\">new</span> <span class=\"title class_\">JSONObject</span>(<span class=\"string\">&quot;&#123;\\n&quot;</span> +</span><br><span class=\"line\">                                 <span class=\"string\">&quot;  \\&quot;name\\&quot;:\\&quot;greycode\\&quot;,\\n&quot;</span> +</span><br><span class=\"line\">                                 <span class=\"string\">&quot;  \\&quot;desc\\&quot;:\\&quot;coder\\&quot;\\n&quot;</span> +</span><br><span class=\"line\">                                 <span class=\"string\">&quot;&#125;&quot;</span>));</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">  System.out.println(<span class=\"string\">&quot;验证异常：&quot;</span>+e.getMessage());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里用了上面的 Json 数据和 Json-Schema，当验证通过时，不会有任何输出，同时也没有任何异常。</p>\n<p>当我们把 <code>desc</code> 的数据改为如下数据时：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;greycode&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;desc&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>此时由于 <code>desc</code> 的数据类型变为了数字类型，所以我们就可以捕获到异常并输出：<code>验证异常：#/desc: expected type: String, found: Integer</code></p>\n<h2 id=\"资料\"><a href=\"#资料\" class=\"headerlink\" title=\"资料\"></a>资料</h2><ul>\n<li>所有的第三方 Json-Schema 验证器：<a href=\"https://json-schema.org/implementations.html#validators\">https://json-schema.org/implementations.html#validators</a></li>\n<li>Jaon-Schema 生成器：<a href=\"https://json-schema.org/implementations.html#schema-generators\">https://json-schema.org/implementations.html#schema-generators</a></li>\n<li>通过 Json-Schema 生成代码、数据等：<a href=\"https://json-schema.org/implementations.html#generators-from-schemas\">https://json-schema.org/implementations.html#generators-from-schemas</a></li>\n<li>在线 Json 转换 Json-Schema ：<a href=\"https://www.jsonschema.net/home\">https://www.jsonschema.net/home</a></li>\n<li><a href=\"https://json-schema.org/\">https://json-schema.org/</a></li>\n</ul>\n"},{"title":"利用腾讯位置API进行的阿里云DDNS工具","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-07-26T08:08:12.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 介绍\n\n[![aliyun-ddns](https://github-readme-stats.vercel.app/api/pin/?username=greycodee&repo=aliyun-ddns)](https://github.com/greycodee/aliyun-ddns)\n\n本应用是基于阿里云SDK进行开发的，可以动态更新阿里云域名的DNS解析，运行环境是 `Python 3`\n\n利用[腾讯位置](https://lbs.qq.com)提供的 API 进行公网 IP 的获取，可以查看[如何获取腾讯位置的 API 密钥](doc/tencent_lbs.md)\n\n由于腾讯位置的 API 免费配额为每日 10000 次，请合理使用\n\n## 快速开始\n程序从环境变量中获取配置，运行前**先设置环境变量**\n\n| 环境变量              | 说明                               |\n| --------------------- | ---------------------------------- |\n| ALI_ACCESS_KEY_ID     | 阿里云 ACCESS_KEY_ID（必填）       |\n| ALI_ACCESS_KEY_SECRET | 阿里云 ACCESS_KEY_SECRET（必填）   |\n| ALI_REGION_ID         | 阿里云区域 ID（默认：cn-hangzhou） |\n| DNS_TYPE              | 解析类型（默认：A）                |\n| DNS_DOMAIN            | 域名（必填）                       |\n| DNS_SUB_DOMAIN        | 二级域名（默认：@）                |\n| TENCENT_LBS_KEY       | 腾讯位置应用 KEY                   |\n| TENCENT_LBS_SK        | 腾讯位置应用签名加密 SK            |\n\n### 环境字段说明\n\n**DNS_TYPE** 支持的解析类型：\n> 点击查看[官方详细说明](https://help.aliyun.com/document_detail/29805.html?spm=a2c4g.11186623.2.8.4d3316267Ov7hF)\n- A：将域名指向一个IPV4地址\n- CNAME：将域名指向另外一个域名\n- AAAA：将域名指向一个IPV6地址\n\n**DNS_SUB_DOMAIN** 域名前缀，常见用法有：\n\n- www：解析后的域名为www.aliyun.com。\n\n- @：直接解析主域名 aliyun.com。\n\n- *：泛解析，匹配其他所有域名 *.aliyun.com。\n\n- mail：将域名解析为mail.aliyun.com，通常用于解析邮箱服务器。\n\n- 二级域名：如：abc.aliyun.com，填写abc。\n\n- 手机网站：如：m.aliyun.com，填写m。\n\n- 显性URL：不支持泛解析（泛解析：将所有子域名解析到同一地址）\n\n### 运行\n当设置好环境变量后，使用以下命令安装依赖\n```shell\npip install -r requeirments.txt\n```\n安装依赖后，直接运行 `main.py`\n```shell\npython main.py\n```\n\n## 以 Docker 运行\n如果你本地没有 python 环境，可以直接使用 docker 来运行本程序\n\n先拉取镜像：\n```shell\ndocker pull greycodee/aliyun-ddns\n```\n\n然后运行：\n```shell\ndocker run -d -e ALI_ACCESS_KEY_ID=\"阿里云AK\" \\\n              -e ALI_ACCESS_KEY_SECRET=\"阿里云AKS\" \\\n              -e DNS_DOMAIN=\"你的域名\" \\\n              -e DNS_SUB_DOMAIN=\"二级域名名称\" \\\n              -e TENCENT_LBS_KEY=\"腾讯位置应用KEY\" \\\n              -e TENCENT_LBS_SK=\"腾讯位置应用签名SK\" \\\n              greycodee/aliyun-ddns\n```\n\n如果你想看日志的话，可以使用 `-v` 命令把 docker 容器里的 `/root/logs` 日志目录挂载出来，这里面存放着程序的运行日志\n\n## Dockerfile\n在本目录中的 **Dockerfile** 文件中，更改文件里的环境变量参数为你的数据，具体参数字段含义见上文介绍。\n更改完参数后，可以在**当前目录**使用 `docker build` 构建命令来构建你自己来镜像\n```shell\ndocker build -t 设置镜像标签  .\n```\n构建完成后就可以使用命令来运行你刚才构建的镜像了\n```shell\ndocker run -d 设置的镜像标签\n```\n","source":"_posts/tool/9ACF61395A77470CA029D24AEC2CA42F.md","raw":"---\ntitle: 利用腾讯位置API进行的阿里云DDNS工具\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-07-26 16:08:12\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- DDNS\ncategories:\n- Tool\n---\n\n## 介绍\n\n[![aliyun-ddns](https://github-readme-stats.vercel.app/api/pin/?username=greycodee&repo=aliyun-ddns)](https://github.com/greycodee/aliyun-ddns)\n\n本应用是基于阿里云SDK进行开发的，可以动态更新阿里云域名的DNS解析，运行环境是 `Python 3`\n\n利用[腾讯位置](https://lbs.qq.com)提供的 API 进行公网 IP 的获取，可以查看[如何获取腾讯位置的 API 密钥](doc/tencent_lbs.md)\n\n由于腾讯位置的 API 免费配额为每日 10000 次，请合理使用\n\n## 快速开始\n程序从环境变量中获取配置，运行前**先设置环境变量**\n\n| 环境变量              | 说明                               |\n| --------------------- | ---------------------------------- |\n| ALI_ACCESS_KEY_ID     | 阿里云 ACCESS_KEY_ID（必填）       |\n| ALI_ACCESS_KEY_SECRET | 阿里云 ACCESS_KEY_SECRET（必填）   |\n| ALI_REGION_ID         | 阿里云区域 ID（默认：cn-hangzhou） |\n| DNS_TYPE              | 解析类型（默认：A）                |\n| DNS_DOMAIN            | 域名（必填）                       |\n| DNS_SUB_DOMAIN        | 二级域名（默认：@）                |\n| TENCENT_LBS_KEY       | 腾讯位置应用 KEY                   |\n| TENCENT_LBS_SK        | 腾讯位置应用签名加密 SK            |\n\n### 环境字段说明\n\n**DNS_TYPE** 支持的解析类型：\n> 点击查看[官方详细说明](https://help.aliyun.com/document_detail/29805.html?spm=a2c4g.11186623.2.8.4d3316267Ov7hF)\n- A：将域名指向一个IPV4地址\n- CNAME：将域名指向另外一个域名\n- AAAA：将域名指向一个IPV6地址\n\n**DNS_SUB_DOMAIN** 域名前缀，常见用法有：\n\n- www：解析后的域名为www.aliyun.com。\n\n- @：直接解析主域名 aliyun.com。\n\n- *：泛解析，匹配其他所有域名 *.aliyun.com。\n\n- mail：将域名解析为mail.aliyun.com，通常用于解析邮箱服务器。\n\n- 二级域名：如：abc.aliyun.com，填写abc。\n\n- 手机网站：如：m.aliyun.com，填写m。\n\n- 显性URL：不支持泛解析（泛解析：将所有子域名解析到同一地址）\n\n### 运行\n当设置好环境变量后，使用以下命令安装依赖\n```shell\npip install -r requeirments.txt\n```\n安装依赖后，直接运行 `main.py`\n```shell\npython main.py\n```\n\n## 以 Docker 运行\n如果你本地没有 python 环境，可以直接使用 docker 来运行本程序\n\n先拉取镜像：\n```shell\ndocker pull greycodee/aliyun-ddns\n```\n\n然后运行：\n```shell\ndocker run -d -e ALI_ACCESS_KEY_ID=\"阿里云AK\" \\\n              -e ALI_ACCESS_KEY_SECRET=\"阿里云AKS\" \\\n              -e DNS_DOMAIN=\"你的域名\" \\\n              -e DNS_SUB_DOMAIN=\"二级域名名称\" \\\n              -e TENCENT_LBS_KEY=\"腾讯位置应用KEY\" \\\n              -e TENCENT_LBS_SK=\"腾讯位置应用签名SK\" \\\n              greycodee/aliyun-ddns\n```\n\n如果你想看日志的话，可以使用 `-v` 命令把 docker 容器里的 `/root/logs` 日志目录挂载出来，这里面存放着程序的运行日志\n\n## Dockerfile\n在本目录中的 **Dockerfile** 文件中，更改文件里的环境变量参数为你的数据，具体参数字段含义见上文介绍。\n更改完参数后，可以在**当前目录**使用 `docker build` 构建命令来构建你自己来镜像\n```shell\ndocker build -t 设置镜像标签  .\n```\n构建完成后就可以使用命令来运行你刚才构建的镜像了\n```shell\ndocker run -d 设置的镜像标签\n```\n","slug":"tool/9ACF61395A77470CA029D24AEC2CA42F","published":1,"updated":"2021-10-08T07:57:24.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehp005qvpuc5fpf3hxs","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><a href=\"https://github.com/greycodee/aliyun-ddns\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=greycodee&repo=aliyun-ddns\" alt=\"aliyun-ddns\"></a></p>\n<p>本应用是基于阿里云SDK进行开发的，可以动态更新阿里云域名的DNS解析，运行环境是 <code>Python 3</code></p>\n<p>利用<a href=\"https://lbs.qq.com/\">腾讯位置</a>提供的 API 进行公网 IP 的获取，可以查看<a href=\"doc/tencent_lbs.md\">如何获取腾讯位置的 API 密钥</a></p>\n<p>由于腾讯位置的 API 免费配额为每日 10000 次，请合理使用</p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><p>程序从环境变量中获取配置，运行前<strong>先设置环境变量</strong></p>\n<table>\n<thead>\n<tr>\n<th>环境变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ALI_ACCESS_KEY_ID</td>\n<td>阿里云 ACCESS_KEY_ID（必填）</td>\n</tr>\n<tr>\n<td>ALI_ACCESS_KEY_SECRET</td>\n<td>阿里云 ACCESS_KEY_SECRET（必填）</td>\n</tr>\n<tr>\n<td>ALI_REGION_ID</td>\n<td>阿里云区域 ID（默认：cn-hangzhou）</td>\n</tr>\n<tr>\n<td>DNS_TYPE</td>\n<td>解析类型（默认：A）</td>\n</tr>\n<tr>\n<td>DNS_DOMAIN</td>\n<td>域名（必填）</td>\n</tr>\n<tr>\n<td>DNS_SUB_DOMAIN</td>\n<td>二级域名（默认：@）</td>\n</tr>\n<tr>\n<td>TENCENT_LBS_KEY</td>\n<td>腾讯位置应用 KEY</td>\n</tr>\n<tr>\n<td>TENCENT_LBS_SK</td>\n<td>腾讯位置应用签名加密 SK</td>\n</tr>\n</tbody></table>\n<h3 id=\"环境字段说明\"><a href=\"#环境字段说明\" class=\"headerlink\" title=\"环境字段说明\"></a>环境字段说明</h3><p><strong>DNS_TYPE</strong> 支持的解析类型：</p>\n<blockquote>\n<p>点击查看<a href=\"https://help.aliyun.com/document_detail/29805.html?spm=a2c4g.11186623.2.8.4d3316267Ov7hF\">官方详细说明</a></p>\n</blockquote>\n<ul>\n<li>A：将域名指向一个IPV4地址</li>\n<li>CNAME：将域名指向另外一个域名</li>\n<li>AAAA：将域名指向一个IPV6地址</li>\n</ul>\n<p><strong>DNS_SUB_DOMAIN</strong> 域名前缀，常见用法有：</p>\n<ul>\n<li><p>www：解析后的域名为<a href=\"http://www.aliyun.com./\">www.aliyun.com。</a></p>\n</li>\n<li><p>@：直接解析主域名 aliyun.com。</p>\n</li>\n<li><p>*：泛解析，匹配其他所有域名 *.aliyun.com。</p>\n</li>\n<li><p>mail：将域名解析为mail.aliyun.com，通常用于解析邮箱服务器。</p>\n</li>\n<li><p>二级域名：如：abc.aliyun.com，填写abc。</p>\n</li>\n<li><p>手机网站：如：m.aliyun.com，填写m。</p>\n</li>\n<li><p>显性URL：不支持泛解析（泛解析：将所有子域名解析到同一地址）</p>\n</li>\n</ul>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>当设置好环境变量后，使用以下命令安装依赖</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install -r requeirments.txt</span><br></pre></td></tr></table></figure>\n<p>安装依赖后，直接运行 <code>main.py</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">python main.py</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"以-Docker-运行\"><a href=\"#以-Docker-运行\" class=\"headerlink\" title=\"以 Docker 运行\"></a>以 Docker 运行</h2><p>如果你本地没有 python 环境，可以直接使用 docker 来运行本程序</p>\n<p>先拉取镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull greycodee/aliyun-ddns</span><br></pre></td></tr></table></figure>\n\n<p>然后运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -e ALI_ACCESS_KEY_ID=&quot;阿里云AK&quot; \\</span><br><span class=\"line\">              -e ALI_ACCESS_KEY_SECRET=&quot;阿里云AKS&quot; \\</span><br><span class=\"line\">              -e DNS_DOMAIN=&quot;你的域名&quot; \\</span><br><span class=\"line\">              -e DNS_SUB_DOMAIN=&quot;二级域名名称&quot; \\</span><br><span class=\"line\">              -e TENCENT_LBS_KEY=&quot;腾讯位置应用KEY&quot; \\</span><br><span class=\"line\">              -e TENCENT_LBS_SK=&quot;腾讯位置应用签名SK&quot; \\</span><br><span class=\"line\">              greycodee/aliyun-ddns</span><br></pre></td></tr></table></figure>\n\n<p>如果你想看日志的话，可以使用 <code>-v</code> 命令把 docker 容器里的 <code>/root/logs</code> 日志目录挂载出来，这里面存放着程序的运行日志</p>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p>在本目录中的 <strong>Dockerfile</strong> 文件中，更改文件里的环境变量参数为你的数据，具体参数字段含义见上文介绍。<br>更改完参数后，可以在<strong>当前目录</strong>使用 <code>docker build</code> 构建命令来构建你自己来镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t 设置镜像标签  .</span><br></pre></td></tr></table></figure>\n<p>构建完成后就可以使用命令来运行你刚才构建的镜像了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d 设置的镜像标签</span><br></pre></td></tr></table></figure>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><a href=\"https://github.com/greycodee/aliyun-ddns\"><img src=\"https://github-readme-stats.vercel.app/api/pin/?username=greycodee&repo=aliyun-ddns\" alt=\"aliyun-ddns\"></a></p>\n<p>本应用是基于阿里云SDK进行开发的，可以动态更新阿里云域名的DNS解析，运行环境是 <code>Python 3</code></p>\n<p>利用<a href=\"https://lbs.qq.com/\">腾讯位置</a>提供的 API 进行公网 IP 的获取，可以查看<a href=\"doc/tencent_lbs.md\">如何获取腾讯位置的 API 密钥</a></p>\n<p>由于腾讯位置的 API 免费配额为每日 10000 次，请合理使用</p>\n<h2 id=\"快速开始\"><a href=\"#快速开始\" class=\"headerlink\" title=\"快速开始\"></a>快速开始</h2><p>程序从环境变量中获取配置，运行前<strong>先设置环境变量</strong></p>\n<table>\n<thead>\n<tr>\n<th>环境变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ALI_ACCESS_KEY_ID</td>\n<td>阿里云 ACCESS_KEY_ID（必填）</td>\n</tr>\n<tr>\n<td>ALI_ACCESS_KEY_SECRET</td>\n<td>阿里云 ACCESS_KEY_SECRET（必填）</td>\n</tr>\n<tr>\n<td>ALI_REGION_ID</td>\n<td>阿里云区域 ID（默认：cn-hangzhou）</td>\n</tr>\n<tr>\n<td>DNS_TYPE</td>\n<td>解析类型（默认：A）</td>\n</tr>\n<tr>\n<td>DNS_DOMAIN</td>\n<td>域名（必填）</td>\n</tr>\n<tr>\n<td>DNS_SUB_DOMAIN</td>\n<td>二级域名（默认：@）</td>\n</tr>\n<tr>\n<td>TENCENT_LBS_KEY</td>\n<td>腾讯位置应用 KEY</td>\n</tr>\n<tr>\n<td>TENCENT_LBS_SK</td>\n<td>腾讯位置应用签名加密 SK</td>\n</tr>\n</tbody></table>\n<h3 id=\"环境字段说明\"><a href=\"#环境字段说明\" class=\"headerlink\" title=\"环境字段说明\"></a>环境字段说明</h3><p><strong>DNS_TYPE</strong> 支持的解析类型：</p>\n<blockquote>\n<p>点击查看<a href=\"https://help.aliyun.com/document_detail/29805.html?spm=a2c4g.11186623.2.8.4d3316267Ov7hF\">官方详细说明</a></p>\n</blockquote>\n<ul>\n<li>A：将域名指向一个IPV4地址</li>\n<li>CNAME：将域名指向另外一个域名</li>\n<li>AAAA：将域名指向一个IPV6地址</li>\n</ul>\n<p><strong>DNS_SUB_DOMAIN</strong> 域名前缀，常见用法有：</p>\n<ul>\n<li><p>www：解析后的域名为<a href=\"http://www.aliyun.com./\">www.aliyun.com。</a></p>\n</li>\n<li><p>@：直接解析主域名 aliyun.com。</p>\n</li>\n<li><p>*：泛解析，匹配其他所有域名 *.aliyun.com。</p>\n</li>\n<li><p>mail：将域名解析为mail.aliyun.com，通常用于解析邮箱服务器。</p>\n</li>\n<li><p>二级域名：如：abc.aliyun.com，填写abc。</p>\n</li>\n<li><p>手机网站：如：m.aliyun.com，填写m。</p>\n</li>\n<li><p>显性URL：不支持泛解析（泛解析：将所有子域名解析到同一地址）</p>\n</li>\n</ul>\n<h3 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h3><p>当设置好环境变量后，使用以下命令安装依赖</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">pip install -r requeirments.txt</span><br></pre></td></tr></table></figure>\n<p>安装依赖后，直接运行 <code>main.py</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">python main.py</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"以-Docker-运行\"><a href=\"#以-Docker-运行\" class=\"headerlink\" title=\"以 Docker 运行\"></a>以 Docker 运行</h2><p>如果你本地没有 python 环境，可以直接使用 docker 来运行本程序</p>\n<p>先拉取镜像：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull greycodee/aliyun-ddns</span><br></pre></td></tr></table></figure>\n\n<p>然后运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -e ALI_ACCESS_KEY_ID=&quot;阿里云AK&quot; \\</span><br><span class=\"line\">              -e ALI_ACCESS_KEY_SECRET=&quot;阿里云AKS&quot; \\</span><br><span class=\"line\">              -e DNS_DOMAIN=&quot;你的域名&quot; \\</span><br><span class=\"line\">              -e DNS_SUB_DOMAIN=&quot;二级域名名称&quot; \\</span><br><span class=\"line\">              -e TENCENT_LBS_KEY=&quot;腾讯位置应用KEY&quot; \\</span><br><span class=\"line\">              -e TENCENT_LBS_SK=&quot;腾讯位置应用签名SK&quot; \\</span><br><span class=\"line\">              greycodee/aliyun-ddns</span><br></pre></td></tr></table></figure>\n\n<p>如果你想看日志的话，可以使用 <code>-v</code> 命令把 docker 容器里的 <code>/root/logs</code> 日志目录挂载出来，这里面存放着程序的运行日志</p>\n<h2 id=\"Dockerfile\"><a href=\"#Dockerfile\" class=\"headerlink\" title=\"Dockerfile\"></a>Dockerfile</h2><p>在本目录中的 <strong>Dockerfile</strong> 文件中，更改文件里的环境变量参数为你的数据，具体参数字段含义见上文介绍。<br>更改完参数后，可以在<strong>当前目录</strong>使用 <code>docker build</code> 构建命令来构建你自己来镜像</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker build -t 设置镜像标签  .</span><br></pre></td></tr></table></figure>\n<p>构建完成后就可以使用命令来运行你刚才构建的镜像了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d 设置的镜像标签</span><br></pre></td></tr></table></figure>\n"},{"title":"吐血整理Git常用命令","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-06-22T08:27:25.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## Git常用命令\n\n## Git简介\n\nGit 是用于 Linux[内核](https://baike.baidu.com/item/内核)开发的[版本控制](https://baike.baidu.com/item/版本控制)工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使[源代码](https://baike.baidu.com/item/源代码)的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。\n\ngit对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死\n\n\n\n## git结构\n\n> 网上有 我就不画了\n\n![git结构图](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200605001853.png)\n\n\n\n- workspace    相当于就是我们的本地电脑上的文件\n\n- Index    缓存区\n- Repository    本地仓库\n- Remote    远程仓库(github/gitlab/gitee)\n\n\n\n## git命令\n\ngit官方提供的命令多达几百个,可是我们日常却用不到这么多\n\n所以我就整理了一下日常使用的命令\n\n现在关注微信公招:`灰色Code`\n\n回复关键字:`git`\n\n就可以获取思维导图高清图片及导图源地址\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200605002904.jpg)","source":"_posts/tool/git-tool-command.md","raw":"---\ntitle: 吐血整理Git常用命令\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-06-22 16:27:25\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Git\ncategories:\n- Tool\n---\n\n## Git常用命令\n\n## Git简介\n\nGit 是用于 Linux[内核](https://baike.baidu.com/item/内核)开发的[版本控制](https://baike.baidu.com/item/版本控制)工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使[源代码](https://baike.baidu.com/item/源代码)的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。\n\ngit对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死\n\n\n\n## git结构\n\n> 网上有 我就不画了\n\n![git结构图](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200605001853.png)\n\n\n\n- workspace    相当于就是我们的本地电脑上的文件\n\n- Index    缓存区\n- Repository    本地仓库\n- Remote    远程仓库(github/gitlab/gitee)\n\n\n\n## git命令\n\ngit官方提供的命令多达几百个,可是我们日常却用不到这么多\n\n所以我就整理了一下日常使用的命令\n\n现在关注微信公招:`灰色Code`\n\n回复关键字:`git`\n\n就可以获取思维导图高清图片及导图源地址\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200605002904.jpg)","slug":"tool/git-tool-command","published":1,"updated":"2021-10-08T08:46:54.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehq005uvpuc6l2wgg9t","content":"<h2 id=\"Git常用命令\"><a href=\"#Git常用命令\" class=\"headerlink\" title=\"Git常用命令\"></a>Git常用命令</h2><h2 id=\"Git简介\"><a href=\"#Git简介\" class=\"headerlink\" title=\"Git简介\"></a>Git简介</h2><p>Git 是用于 Linux<a href=\"https://baike.baidu.com/item/%E5%86%85%E6%A0%B8\">内核</a>开发的<a href=\"https://baike.baidu.com/item/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\">版本控制</a>工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使<a href=\"https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81\">源代码</a>的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。</p>\n<p>git对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死</p>\n<h2 id=\"git结构\"><a href=\"#git结构\" class=\"headerlink\" title=\"git结构\"></a>git结构</h2><blockquote>\n<p>网上有 我就不画了</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200605001853.png\" alt=\"git结构图\"></p>\n<ul>\n<li><p>workspace    相当于就是我们的本地电脑上的文件</p>\n</li>\n<li><p>Index    缓存区</p>\n</li>\n<li><p>Repository    本地仓库</p>\n</li>\n<li><p>Remote    远程仓库(github&#x2F;gitlab&#x2F;gitee)</p>\n</li>\n</ul>\n<h2 id=\"git命令\"><a href=\"#git命令\" class=\"headerlink\" title=\"git命令\"></a>git命令</h2><p>git官方提供的命令多达几百个,可是我们日常却用不到这么多</p>\n<p>所以我就整理了一下日常使用的命令</p>\n<p>现在关注微信公招:<code>灰色Code</code></p>\n<p>回复关键字:<code>git</code></p>\n<p>就可以获取思维导图高清图片及导图源地址</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200605002904.jpg\" alt=\"图片\"></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"Git常用命令\"><a href=\"#Git常用命令\" class=\"headerlink\" title=\"Git常用命令\"></a>Git常用命令</h2><h2 id=\"Git简介\"><a href=\"#Git简介\" class=\"headerlink\" title=\"Git简介\"></a>Git简介</h2><p>Git 是用于 Linux<a href=\"https://baike.baidu.com/item/%E5%86%85%E6%A0%B8\">内核</a>开发的<a href=\"https://baike.baidu.com/item/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6\">版本控制</a>工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使<a href=\"https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81\">源代码</a>的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。</p>\n<p>git对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死</p>\n<h2 id=\"git结构\"><a href=\"#git结构\" class=\"headerlink\" title=\"git结构\"></a>git结构</h2><blockquote>\n<p>网上有 我就不画了</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200605001853.png\" alt=\"git结构图\"></p>\n<ul>\n<li><p>workspace    相当于就是我们的本地电脑上的文件</p>\n</li>\n<li><p>Index    缓存区</p>\n</li>\n<li><p>Repository    本地仓库</p>\n</li>\n<li><p>Remote    远程仓库(github&#x2F;gitlab&#x2F;gitee)</p>\n</li>\n</ul>\n<h2 id=\"git命令\"><a href=\"#git命令\" class=\"headerlink\" title=\"git命令\"></a>git命令</h2><p>git官方提供的命令多达几百个,可是我们日常却用不到这么多</p>\n<p>所以我就整理了一下日常使用的命令</p>\n<p>现在关注微信公招:<code>灰色Code</code></p>\n<p>回复关键字:<code>git</code></p>\n<p>就可以获取思维导图高清图片及导图源地址</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200605002904.jpg\" alt=\"图片\"></p>\n"},{"title":"百度、谷歌、必应三大站长API密钥申请流程","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-06-17T13:40:11.000Z","password":null,"summary":null,"keywords":null,"description":"百度、谷歌、必应三大站长API密钥申请流程","_content":"\n## Google 索引 API 开通步骤\n\n1. 点击此[链接](https://console.cloud.google.com/flows/enableapi?apiid=indexing.googleapis.com&;credential=client_key&hl=zh-cn)，然后选择**创建项目**，点击继续。然后再点击**转到“凭据”页面**\n\n   ![创建项目](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/pFDIcIimage-20210616142818704.png)![image-20210616142925750](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/KzovQSimage-20210616142925750.png)\n\n2. 到凭据页面先点击左侧的**凭据**选项，然后再点击**管理服务账号**\n\n   ![image-20210616143342042](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/F35uRNimage-20210616143342042.png)\n\n3. 然后再点击**创建服务账号**\n\n   ![image-20210616143528560](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/goyecpimage-20210616143528560.png)\n\n4. 然后再填写相关信息，最后点击**完成**（第三步可不填）\n\n![image-20210616143701698](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/EeJqnvimage-20210616143701698.png)![image-20210616143725389](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/mMp3OVimage-20210616143725389.png)\n\n5. 点击图中的电子邮件，然后开始创建密钥，选择**JSON格式**，此时就会下载密钥文件到你电脑了\n\n   ![image-20210616144108365](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/ASMAbdimage-20210616144108365.png)![image-20210616144343157](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/l3t61kimage-20210616144343157.png)![image-20210616144253763](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/eK1hMRimage-20210616144253763.png)\n\n6. 打开[ Google Search Console](https://search.google.com/search-console)，依次点击`设置->用户和权限->拥有者账户右边三个点->管理资源所有者->添加所有者->填入上面密钥中的client_email 的值`\n\n7. 现在可以用[作为服务帐号进行身份验证](https://cloud.google.com/docs/authentication/production?hl=zh-cn)的步骤来使用密钥了\n\n## Bing 索引 API 开通步骤\n\n1. 点击[导航栏](https://www.bing.com/webmasters)的齿轮图标\n\n   ![image-20210616144928483](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/r3Mn1yimage-20210616144928483.png)\n\n2. 点击 **API 访问**，然后点击 **API 密钥**，就可以得到 API 密钥了\n\n   ![image-20210616145133559](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/uiRKLqimage-20210616145133559.png)![image-20210616145042851](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/vl2lysimage-20210616145042851.png)![image-20210616145241124](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/WnalIwimage-20210616145241124.png)\n\n3. 然后就可以按照[必应文档](https://www.bing.com/webmasters/url-submission-api#APIs)来进行API的调用了\n\n## Baidu 索引 API 开通步骤\n\n百度就比较简单粗暴了，直接点击[这个链接](https://ziyuan.baidu.com/linksubmit/index)就可以直接得到 **Token** 了，这个页面下也有对应的 API 调用方法示例，这边就不再重复叙述了\n\n![image-20210616145825782](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/9qq6TWimage-20210616145825782.png)\n","source":"_posts/tool/C334612CBDCE41E79F7EA6A2F3F4C10C.md","raw":"---\ntitle: 百度、谷歌、必应三大站长API密钥申请流程\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-06-17 21:40:11\npassword:\nsummary:\nkeywords:\ndescription: 百度、谷歌、必应三大站长API密钥申请流程\ntags:\n- SEO\ncategories:\n- Tool\n---\n\n## Google 索引 API 开通步骤\n\n1. 点击此[链接](https://console.cloud.google.com/flows/enableapi?apiid=indexing.googleapis.com&;credential=client_key&hl=zh-cn)，然后选择**创建项目**，点击继续。然后再点击**转到“凭据”页面**\n\n   ![创建项目](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/pFDIcIimage-20210616142818704.png)![image-20210616142925750](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/KzovQSimage-20210616142925750.png)\n\n2. 到凭据页面先点击左侧的**凭据**选项，然后再点击**管理服务账号**\n\n   ![image-20210616143342042](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/F35uRNimage-20210616143342042.png)\n\n3. 然后再点击**创建服务账号**\n\n   ![image-20210616143528560](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/goyecpimage-20210616143528560.png)\n\n4. 然后再填写相关信息，最后点击**完成**（第三步可不填）\n\n![image-20210616143701698](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/EeJqnvimage-20210616143701698.png)![image-20210616143725389](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/mMp3OVimage-20210616143725389.png)\n\n5. 点击图中的电子邮件，然后开始创建密钥，选择**JSON格式**，此时就会下载密钥文件到你电脑了\n\n   ![image-20210616144108365](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/ASMAbdimage-20210616144108365.png)![image-20210616144343157](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/l3t61kimage-20210616144343157.png)![image-20210616144253763](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/eK1hMRimage-20210616144253763.png)\n\n6. 打开[ Google Search Console](https://search.google.com/search-console)，依次点击`设置->用户和权限->拥有者账户右边三个点->管理资源所有者->添加所有者->填入上面密钥中的client_email 的值`\n\n7. 现在可以用[作为服务帐号进行身份验证](https://cloud.google.com/docs/authentication/production?hl=zh-cn)的步骤来使用密钥了\n\n## Bing 索引 API 开通步骤\n\n1. 点击[导航栏](https://www.bing.com/webmasters)的齿轮图标\n\n   ![image-20210616144928483](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/r3Mn1yimage-20210616144928483.png)\n\n2. 点击 **API 访问**，然后点击 **API 密钥**，就可以得到 API 密钥了\n\n   ![image-20210616145133559](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/uiRKLqimage-20210616145133559.png)![image-20210616145042851](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/vl2lysimage-20210616145042851.png)![image-20210616145241124](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/WnalIwimage-20210616145241124.png)\n\n3. 然后就可以按照[必应文档](https://www.bing.com/webmasters/url-submission-api#APIs)来进行API的调用了\n\n## Baidu 索引 API 开通步骤\n\n百度就比较简单粗暴了，直接点击[这个链接](https://ziyuan.baidu.com/linksubmit/index)就可以直接得到 **Token** 了，这个页面下也有对应的 API 调用方法示例，这边就不再重复叙述了\n\n![image-20210616145825782](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/9qq6TWimage-20210616145825782.png)\n","slug":"tool/C334612CBDCE41E79F7EA6A2F3F4C10C","published":1,"updated":"2021-10-08T08:48:01.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehr005xvpuc5fy8ht2n","content":"<h2 id=\"Google-索引-API-开通步骤\"><a href=\"#Google-索引-API-开通步骤\" class=\"headerlink\" title=\"Google 索引 API 开通步骤\"></a>Google 索引 API 开通步骤</h2><ol>\n<li><p>点击此<a href=\"https://console.cloud.google.com/flows/enableapi?apiid=indexing.googleapis.com&;credential=client_key&hl=zh-cn\">链接</a>，然后选择<strong>创建项目</strong>，点击继续。然后再点击<strong>转到“凭据”页面</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/pFDIcIimage-20210616142818704.png\" alt=\"创建项目\"><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/KzovQSimage-20210616142925750.png\" alt=\"image-20210616142925750\"></p>\n</li>\n<li><p>到凭据页面先点击左侧的<strong>凭据</strong>选项，然后再点击<strong>管理服务账号</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/F35uRNimage-20210616143342042.png\" alt=\"image-20210616143342042\"></p>\n</li>\n<li><p>然后再点击<strong>创建服务账号</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/goyecpimage-20210616143528560.png\" alt=\"image-20210616143528560\"></p>\n</li>\n<li><p>然后再填写相关信息，最后点击<strong>完成</strong>（第三步可不填）</p>\n</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/EeJqnvimage-20210616143701698.png\" alt=\"image-20210616143701698\"><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/mMp3OVimage-20210616143725389.png\" alt=\"image-20210616143725389\"></p>\n<ol start=\"5\">\n<li><p>点击图中的电子邮件，然后开始创建密钥，选择<strong>JSON格式</strong>，此时就会下载密钥文件到你电脑了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/ASMAbdimage-20210616144108365.png\" alt=\"image-20210616144108365\"><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/l3t61kimage-20210616144343157.png\" alt=\"image-20210616144343157\"><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/eK1hMRimage-20210616144253763.png\" alt=\"image-20210616144253763\"></p>\n</li>\n<li><p>打开<a href=\"https://search.google.com/search-console\"> Google Search Console</a>，依次点击<code>设置-&gt;用户和权限-&gt;拥有者账户右边三个点-&gt;管理资源所有者-&gt;添加所有者-&gt;填入上面密钥中的client_email 的值</code></p>\n</li>\n<li><p>现在可以用<a href=\"https://cloud.google.com/docs/authentication/production?hl=zh-cn\">作为服务帐号进行身份验证</a>的步骤来使用密钥了</p>\n</li>\n</ol>\n<h2 id=\"Bing-索引-API-开通步骤\"><a href=\"#Bing-索引-API-开通步骤\" class=\"headerlink\" title=\"Bing 索引 API 开通步骤\"></a>Bing 索引 API 开通步骤</h2><ol>\n<li><p>点击<a href=\"https://www.bing.com/webmasters\">导航栏</a>的齿轮图标</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/r3Mn1yimage-20210616144928483.png\" alt=\"image-20210616144928483\"></p>\n</li>\n<li><p>点击 <strong>API 访问</strong>，然后点击 <strong>API 密钥</strong>，就可以得到 API 密钥了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/uiRKLqimage-20210616145133559.png\" alt=\"image-20210616145133559\"><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/vl2lysimage-20210616145042851.png\" alt=\"image-20210616145042851\"><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/WnalIwimage-20210616145241124.png\" alt=\"image-20210616145241124\"></p>\n</li>\n<li><p>然后就可以按照<a href=\"https://www.bing.com/webmasters/url-submission-api#APIs\">必应文档</a>来进行API的调用了</p>\n</li>\n</ol>\n<h2 id=\"Baidu-索引-API-开通步骤\"><a href=\"#Baidu-索引-API-开通步骤\" class=\"headerlink\" title=\"Baidu 索引 API 开通步骤\"></a>Baidu 索引 API 开通步骤</h2><p>百度就比较简单粗暴了，直接点击<a href=\"https://ziyuan.baidu.com/linksubmit/index\">这个链接</a>就可以直接得到 <strong>Token</strong> 了，这个页面下也有对应的 API 调用方法示例，这边就不再重复叙述了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/9qq6TWimage-20210616145825782.png\" alt=\"image-20210616145825782\"></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"Google-索引-API-开通步骤\"><a href=\"#Google-索引-API-开通步骤\" class=\"headerlink\" title=\"Google 索引 API 开通步骤\"></a>Google 索引 API 开通步骤</h2><ol>\n<li><p>点击此<a href=\"https://console.cloud.google.com/flows/enableapi?apiid=indexing.googleapis.com&;credential=client_key&hl=zh-cn\">链接</a>，然后选择<strong>创建项目</strong>，点击继续。然后再点击<strong>转到“凭据”页面</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/pFDIcIimage-20210616142818704.png\" alt=\"创建项目\"><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/KzovQSimage-20210616142925750.png\" alt=\"image-20210616142925750\"></p>\n</li>\n<li><p>到凭据页面先点击左侧的<strong>凭据</strong>选项，然后再点击<strong>管理服务账号</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/F35uRNimage-20210616143342042.png\" alt=\"image-20210616143342042\"></p>\n</li>\n<li><p>然后再点击<strong>创建服务账号</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/goyecpimage-20210616143528560.png\" alt=\"image-20210616143528560\"></p>\n</li>\n<li><p>然后再填写相关信息，最后点击<strong>完成</strong>（第三步可不填）</p>\n</li>\n</ol>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/EeJqnvimage-20210616143701698.png\" alt=\"image-20210616143701698\"><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/mMp3OVimage-20210616143725389.png\" alt=\"image-20210616143725389\"></p>\n<ol start=\"5\">\n<li><p>点击图中的电子邮件，然后开始创建密钥，选择<strong>JSON格式</strong>，此时就会下载密钥文件到你电脑了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/ASMAbdimage-20210616144108365.png\" alt=\"image-20210616144108365\"><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/l3t61kimage-20210616144343157.png\" alt=\"image-20210616144343157\"><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/eK1hMRimage-20210616144253763.png\" alt=\"image-20210616144253763\"></p>\n</li>\n<li><p>打开<a href=\"https://search.google.com/search-console\"> Google Search Console</a>，依次点击<code>设置-&gt;用户和权限-&gt;拥有者账户右边三个点-&gt;管理资源所有者-&gt;添加所有者-&gt;填入上面密钥中的client_email 的值</code></p>\n</li>\n<li><p>现在可以用<a href=\"https://cloud.google.com/docs/authentication/production?hl=zh-cn\">作为服务帐号进行身份验证</a>的步骤来使用密钥了</p>\n</li>\n</ol>\n<h2 id=\"Bing-索引-API-开通步骤\"><a href=\"#Bing-索引-API-开通步骤\" class=\"headerlink\" title=\"Bing 索引 API 开通步骤\"></a>Bing 索引 API 开通步骤</h2><ol>\n<li><p>点击<a href=\"https://www.bing.com/webmasters\">导航栏</a>的齿轮图标</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/r3Mn1yimage-20210616144928483.png\" alt=\"image-20210616144928483\"></p>\n</li>\n<li><p>点击 <strong>API 访问</strong>，然后点击 <strong>API 密钥</strong>，就可以得到 API 密钥了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/uiRKLqimage-20210616145133559.png\" alt=\"image-20210616145133559\"><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/vl2lysimage-20210616145042851.png\" alt=\"image-20210616145042851\"><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/WnalIwimage-20210616145241124.png\" alt=\"image-20210616145241124\"></p>\n</li>\n<li><p>然后就可以按照<a href=\"https://www.bing.com/webmasters/url-submission-api#APIs\">必应文档</a>来进行API的调用了</p>\n</li>\n</ol>\n<h2 id=\"Baidu-索引-API-开通步骤\"><a href=\"#Baidu-索引-API-开通步骤\" class=\"headerlink\" title=\"Baidu 索引 API 开通步骤\"></a>Baidu 索引 API 开通步骤</h2><p>百度就比较简单粗暴了，直接点击<a href=\"https://ziyuan.baidu.com/linksubmit/index\">这个链接</a>就可以直接得到 <strong>Token</strong> 了，这个页面下也有对应的 API 调用方法示例，这边就不再重复叙述了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/9qq6TWimage-20210616145825782.png\" alt=\"image-20210616145825782\"></p>\n"},{"title":"记一次很久以前做的梦【加密】","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-07-15T00:14:37.000Z","password":null,"summary":null,"keywords":null,"description":"本文采用AES-ECB模式 填充Pkcs7 加密，密文编码为base64。","_content":"\n## 时间：2019-12-19 07:23\n\nRGwc3OqLQr/FK7bX9qFgbl1FD1WZLruNkeFBP4vHyDejXpJhzV309eABiP0e+YiX5wKAD0GaALo74u1B39tyIUFaMrQAVV5M60sGphzkL2hf0ad5/0JAqGXgDy01ustT/w+bAGA8As3jc+3CexZ8CfqJsrOp7vt0aE8zzqKV0IbSL3b5u4wpBfp4Rb7+4b7lES9sbZmD37mXP5bJ0X94Z6W38oSSUj6aiLpDI9kllGxSWavZK+hQk1eWuAThn833cjXVtaxq7Mruglvc+eo4ok2Fm56uCdnq2RiUi5nu9e0bkGXyv8ELwr3RcVjMQdHQB8CK/OFuNXltCRWNKlH6G2fyrPO+D+Sg6zbolkLHl326Ja3co0fDuLm6MxbLLwubwjfci0/ZXjGOCKodAfvEtrDmkd0l2HYaOTbH6nOu+3GwXr+3QwdoxhFrVPjpkvjWcs4VNieiqiynXeNBflPR66ZrscQtZRVX77DUXT3jZdQ5rV7a6ZyWDr9ZgET86YQlGFxcW62wsBnMBt9STCFCUhbhYdccrBOAMJuZXfccIDuBgqelngufQRinLHRJiv0ihN2QhNuJFKkkTxSgswrMjLWhMGgKs8fbfnK82myiWIgqRnF6geCydTX8UAS3dTR1f0XJKEJuUNzc87uzszP+EZIcZ+JnCLjLNnJXJG9XVlLKElLmiwXNi4zDnP6NHGa7ikvac7mHR2SsWGL3/v4pZtSNiwoZW3pPaK6Id+eg+srKoB7GTQNKZIsDuJh8cMziJF7cr1KvH7LZRMpB4MpeyvLmgz8oo3soLiGFVhl5wMrcqbc8H4qtnC4mI9iT5Z1lPBtq13+bYyplOY+G0soMOvbtkei7nWxIz3fh17gqMZvlTikEGcMNHGTs+wwgtsbreqR54iWEVuOxfYD+eYArFujw+iJRCsUCYWepGeVGNpZwlsuKQ+EH0sIJ1c4srVN73BYyE9nHw34W9CHY1MkOhUmXflbaBxz7E+AWfiUiZEWpWwvXOfTtWRuJV0htuCPmA63XgHn6JAHadlf5OY4l1BNewOWXVDPYEChsONoPSmTFxjq/Qop83AqoOtxoaPqfWLXM+s8AqMjfWDQkzDMuxUnMO9fxiEze7J+qMZw7y2W+37NgPQHZBcG3Q8Vd/ArxjfMQaZO11cYsW+RQkhuXj6lvsbs31+j/Od4mA0XPpJ2rKIVC/ueVAP8BuTBAzMN8ndDHXkKctT17eCUXz7w+t9n4h4MZxQQPegz9d3ULLabcdCJ167fpJ+8/iXQhcJXihJeNXefkPcVrkxF+Tfj/r73rSbTgtK+LseIedY1u17/8itWpPlPqlVDC6dzSECBofynwSHADsXl+CBFpkstT3JPiSRTnVmWcta4H9kHthp4yG8Hqc2O6fJnodDIjwa6uzS0N8o95wHz79dDtDHKSpGsjtjotT54qCeI9z3T9FMSwKrN2AJn/1fQdRA56QjnGFLeE8EkYY5Ix6tsk9XFcqAeLC1UbWIoaEqUdILSo9e/TAUizEf+01YBHrsec+o2lEGl8QjthfxhlEFDNgTD0Lt4Cb2ytqpMJZXxFrqqUYOOc2+Lq0/xJPHCKHYf8vLZEfx7LzcLbwLk+BVnxm6JqQVXXWMM2BblrFCX2CAIuhd8m0lztKUrK5OVG0TyEeLrOpB6/YfXm6MPIOttooJFzCBZAKpWt70Xwwfwxrr7r0qMZziWv8oTiFG4lSvGE0VvCwN9hZoLvFh6bMFpnz/bv0L8HMSxBmOyanQm01HhX6KXcyNSbW9Ep2Qxkw+eC034r+HQzV2t+qFkbpNFMb0DatDetvdBZyvlTvlPNcxJCcxEqe/gxb9DRzKNPyy8eM/P4Wem+NW7GFZTfXZQ6uj712J/vQddDF9ukf/jXJkEShhLTs9+JFhR9zjnOljLfNhmB8UzIUBno1d+qqzlC+ZiHzkaRbMnATdOYqW0dBIf5f5wIq31M4GC5mkQzxBVQ8Zqxxu5LCLGRrm+2dro8O27/B5D74h0s/rUmbj8Qxxf32rNjj0+TAZIIFh/3pQjdbwNiABQZUpLBtYWSiZSZ5ivKAgzK6H1uVAlrillqMWJDjLsU6yO1sGb6lMBgKiIuGD2MWHj6moa+JUygW+gWo9m7XVe0q6y6CveMERblK4nXsgurUqH4j91uqyu6c0kccGY8Oei6opdzG49/53IJg8YQo6TnK+plLdg1ezfanf20QwHBV1IHNYFWiTUHVO88EJuvLSAPgDdiVCOzO0KjXxjqOiq7lDw+OFbYaYyUoE1nwywhgE1TbBJdR54em/CC4lY+14GNDTTAaN9ATWLCSPJWQnsDR799HCBZcGumWHB303Zcti4/hKKmUW1JH59XxL4dtLup7fER05tm7vtVJ5ZCd0r1+R7QOzPIszOqZ+B2OifcYLVAelM7OGtIZbOmIWQbU11K45P16Y6GVZicmSTPSKXrvAB6nhOD0/we/UbqpU6iNu5ZRTgcZcxyrgU2TzWaKgfcX5ynMjk0TAqvYKYHAXMhMIUE6tEMMithQ1WkasGcv0+r6Hu8jPrc9/Gvlf4u+4fl9knAf7JCgONAi4ds/p6rwGAGtZbvzcAvxF7p04RcX0MY6A53z0tsFIcE46Uu/KuxhWVyufVwlrHfIek6k8hHTspNH8bztwUJLU6gBRP9SpRrZrZIhDPII19VXNFVWdujdwcu7dcNuuoXPofulrbbHSyYaSaxK/RdHh7yjViodnoUp3WaTNDZtzRlICXyZm73kD7qqHyR6nyqnVFG43Zd+Xcic2HJzEhSMYG6Ddlyc6AzYSCJeoDCY9M6dpPFKplBpQRL8g4LjOLHwd7BMlXqqcvjAmJpfHSlByX5KEml7a3V4jVKoIhoq1B5EvoNELDwUah8nnJjh8CKJevnuNx2NRUr/QNzIfHTRGKCYHua70wUQX7m+lcNMc/EG3TLqr+qyXMFjXihPxRLL+Uc9LBDbCIMh1Zpirr/0+6U4twTr/ipWU5SmOxf0O+OFl2NjOH7u8MwkXT1yWTS09Nfu3tLHFA0EmqJxgceNea8uegh+KFo4Fnf4oTd1wwg6c3cE8RX7okJ5ZDMzWCifUEwzdturrhnaarzbZT/aCIAn4Epu4/G0wgJSZL5oos889CaEJcmGkkJ6XSTd87ArxLOu143GSoSxVj6dlMGYLfcnJIjX3NJ0kHJdSROY9f6Kd0Moh/3fupqbLxtyP9bKQKPtpfw4pT2/Kd2nmPeBhxMIqIap4b3zKL5PzBF/t6faSIMANeUoU9+oD1LU5FVfkoz5Icd7aW73SNLnwFxvXXUkuR/Dkcry3vJVOeKuxV6m6L6qqplQtCiyYzTc01Zllr4e34dYU0/QOfId3TI4Ork17iAHGGu+JY8Kud55p2Ph3NZN9nLryFzyjAsgaRY5YJnrJ0/vs+0yS3wLYvXWIy1rhJHytZRS7AzR+TjX+GRAFAajy5zkouA7owJbn1L8UFvzlbDTLFHzhxVMI+DsTddmNqU70wOP2Goh8c3HnOLf77Sn6l6qS+eL18+ZcTm8RhXN8+tT2/id+GLg60kgFIQggJVgQV8qKOqfSnyE4v1szSmSnGxrlZHNSzBg18XppzmNxAbNHjPiauLVGw/qPWvm4ZGvtYv23rLsA0cdLnjnmnlCg/oh/8juTf3GsX5VVS7sGIFZCJh/RRzLmwvXq2LZgBhhdD607xq7AFhuazYpVXcP6axrAWl3ikqYYGzAtesSzc/yK9hhhvPcO+UhhkfWrlLdubzSBP60ycIhCSMG+OhG2U5XZLaSpMZghnpf8tu2uFiH6xkiFHAunxseHecrBstXQZ4jzVL3aFv3TpyQG19dgKIlukZDpSFuLZLFW/fe5So5mNfp/zgezEXaZz/TIkD/HMpm18nov2oPuIOi2HFNwSZoExvORHzRCXcfci8/+m8VH9aF31EwiapPfFmjBWTAtcUI6s+T5Xf55d245Mi0XYQtWkqxLhIXfN0uyJBekVBNCKS7A2J0qjR5weYpAz/mnLX7xVfIGBanizxcag1GsOS70iPp4WuVTMrwVH9RvsCP+3n3wrMFkfrtQnjMx+GWJx3v3vl4fk1o5istwlrT3R3Z630OIgn6Wsdz43OWI4MIp8sJuKqQYntU7XkmSwxerSSOOr64+u9H3WKyUxzgQ8bEqH+i8xjRajjlrYQ8iZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvP0OhWvdMO2k9oBXJJ5MV/g=","source":"_posts/archive/essay/8B40046C17644103BD2A256EB938884C.md","raw":"---\ntitle: 记一次很久以前做的梦【加密】\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-07-15 08:14:37\npassword:\nsummary:\nkeywords:\ndescription: 本文采用AES-ECB模式 填充Pkcs7 加密，密文编码为base64。\ntags:\n- 抒发情感\ncategories:\n- Essay\n---\n\n## 时间：2019-12-19 07:23\n\nRGwc3OqLQr/FK7bX9qFgbl1FD1WZLruNkeFBP4vHyDejXpJhzV309eABiP0e+YiX5wKAD0GaALo74u1B39tyIUFaMrQAVV5M60sGphzkL2hf0ad5/0JAqGXgDy01ustT/w+bAGA8As3jc+3CexZ8CfqJsrOp7vt0aE8zzqKV0IbSL3b5u4wpBfp4Rb7+4b7lES9sbZmD37mXP5bJ0X94Z6W38oSSUj6aiLpDI9kllGxSWavZK+hQk1eWuAThn833cjXVtaxq7Mruglvc+eo4ok2Fm56uCdnq2RiUi5nu9e0bkGXyv8ELwr3RcVjMQdHQB8CK/OFuNXltCRWNKlH6G2fyrPO+D+Sg6zbolkLHl326Ja3co0fDuLm6MxbLLwubwjfci0/ZXjGOCKodAfvEtrDmkd0l2HYaOTbH6nOu+3GwXr+3QwdoxhFrVPjpkvjWcs4VNieiqiynXeNBflPR66ZrscQtZRVX77DUXT3jZdQ5rV7a6ZyWDr9ZgET86YQlGFxcW62wsBnMBt9STCFCUhbhYdccrBOAMJuZXfccIDuBgqelngufQRinLHRJiv0ihN2QhNuJFKkkTxSgswrMjLWhMGgKs8fbfnK82myiWIgqRnF6geCydTX8UAS3dTR1f0XJKEJuUNzc87uzszP+EZIcZ+JnCLjLNnJXJG9XVlLKElLmiwXNi4zDnP6NHGa7ikvac7mHR2SsWGL3/v4pZtSNiwoZW3pPaK6Id+eg+srKoB7GTQNKZIsDuJh8cMziJF7cr1KvH7LZRMpB4MpeyvLmgz8oo3soLiGFVhl5wMrcqbc8H4qtnC4mI9iT5Z1lPBtq13+bYyplOY+G0soMOvbtkei7nWxIz3fh17gqMZvlTikEGcMNHGTs+wwgtsbreqR54iWEVuOxfYD+eYArFujw+iJRCsUCYWepGeVGNpZwlsuKQ+EH0sIJ1c4srVN73BYyE9nHw34W9CHY1MkOhUmXflbaBxz7E+AWfiUiZEWpWwvXOfTtWRuJV0htuCPmA63XgHn6JAHadlf5OY4l1BNewOWXVDPYEChsONoPSmTFxjq/Qop83AqoOtxoaPqfWLXM+s8AqMjfWDQkzDMuxUnMO9fxiEze7J+qMZw7y2W+37NgPQHZBcG3Q8Vd/ArxjfMQaZO11cYsW+RQkhuXj6lvsbs31+j/Od4mA0XPpJ2rKIVC/ueVAP8BuTBAzMN8ndDHXkKctT17eCUXz7w+t9n4h4MZxQQPegz9d3ULLabcdCJ167fpJ+8/iXQhcJXihJeNXefkPcVrkxF+Tfj/r73rSbTgtK+LseIedY1u17/8itWpPlPqlVDC6dzSECBofynwSHADsXl+CBFpkstT3JPiSRTnVmWcta4H9kHthp4yG8Hqc2O6fJnodDIjwa6uzS0N8o95wHz79dDtDHKSpGsjtjotT54qCeI9z3T9FMSwKrN2AJn/1fQdRA56QjnGFLeE8EkYY5Ix6tsk9XFcqAeLC1UbWIoaEqUdILSo9e/TAUizEf+01YBHrsec+o2lEGl8QjthfxhlEFDNgTD0Lt4Cb2ytqpMJZXxFrqqUYOOc2+Lq0/xJPHCKHYf8vLZEfx7LzcLbwLk+BVnxm6JqQVXXWMM2BblrFCX2CAIuhd8m0lztKUrK5OVG0TyEeLrOpB6/YfXm6MPIOttooJFzCBZAKpWt70Xwwfwxrr7r0qMZziWv8oTiFG4lSvGE0VvCwN9hZoLvFh6bMFpnz/bv0L8HMSxBmOyanQm01HhX6KXcyNSbW9Ep2Qxkw+eC034r+HQzV2t+qFkbpNFMb0DatDetvdBZyvlTvlPNcxJCcxEqe/gxb9DRzKNPyy8eM/P4Wem+NW7GFZTfXZQ6uj712J/vQddDF9ukf/jXJkEShhLTs9+JFhR9zjnOljLfNhmB8UzIUBno1d+qqzlC+ZiHzkaRbMnATdOYqW0dBIf5f5wIq31M4GC5mkQzxBVQ8Zqxxu5LCLGRrm+2dro8O27/B5D74h0s/rUmbj8Qxxf32rNjj0+TAZIIFh/3pQjdbwNiABQZUpLBtYWSiZSZ5ivKAgzK6H1uVAlrillqMWJDjLsU6yO1sGb6lMBgKiIuGD2MWHj6moa+JUygW+gWo9m7XVe0q6y6CveMERblK4nXsgurUqH4j91uqyu6c0kccGY8Oei6opdzG49/53IJg8YQo6TnK+plLdg1ezfanf20QwHBV1IHNYFWiTUHVO88EJuvLSAPgDdiVCOzO0KjXxjqOiq7lDw+OFbYaYyUoE1nwywhgE1TbBJdR54em/CC4lY+14GNDTTAaN9ATWLCSPJWQnsDR799HCBZcGumWHB303Zcti4/hKKmUW1JH59XxL4dtLup7fER05tm7vtVJ5ZCd0r1+R7QOzPIszOqZ+B2OifcYLVAelM7OGtIZbOmIWQbU11K45P16Y6GVZicmSTPSKXrvAB6nhOD0/we/UbqpU6iNu5ZRTgcZcxyrgU2TzWaKgfcX5ynMjk0TAqvYKYHAXMhMIUE6tEMMithQ1WkasGcv0+r6Hu8jPrc9/Gvlf4u+4fl9knAf7JCgONAi4ds/p6rwGAGtZbvzcAvxF7p04RcX0MY6A53z0tsFIcE46Uu/KuxhWVyufVwlrHfIek6k8hHTspNH8bztwUJLU6gBRP9SpRrZrZIhDPII19VXNFVWdujdwcu7dcNuuoXPofulrbbHSyYaSaxK/RdHh7yjViodnoUp3WaTNDZtzRlICXyZm73kD7qqHyR6nyqnVFG43Zd+Xcic2HJzEhSMYG6Ddlyc6AzYSCJeoDCY9M6dpPFKplBpQRL8g4LjOLHwd7BMlXqqcvjAmJpfHSlByX5KEml7a3V4jVKoIhoq1B5EvoNELDwUah8nnJjh8CKJevnuNx2NRUr/QNzIfHTRGKCYHua70wUQX7m+lcNMc/EG3TLqr+qyXMFjXihPxRLL+Uc9LBDbCIMh1Zpirr/0+6U4twTr/ipWU5SmOxf0O+OFl2NjOH7u8MwkXT1yWTS09Nfu3tLHFA0EmqJxgceNea8uegh+KFo4Fnf4oTd1wwg6c3cE8RX7okJ5ZDMzWCifUEwzdturrhnaarzbZT/aCIAn4Epu4/G0wgJSZL5oos889CaEJcmGkkJ6XSTd87ArxLOu143GSoSxVj6dlMGYLfcnJIjX3NJ0kHJdSROY9f6Kd0Moh/3fupqbLxtyP9bKQKPtpfw4pT2/Kd2nmPeBhxMIqIap4b3zKL5PzBF/t6faSIMANeUoU9+oD1LU5FVfkoz5Icd7aW73SNLnwFxvXXUkuR/Dkcry3vJVOeKuxV6m6L6qqplQtCiyYzTc01Zllr4e34dYU0/QOfId3TI4Ork17iAHGGu+JY8Kud55p2Ph3NZN9nLryFzyjAsgaRY5YJnrJ0/vs+0yS3wLYvXWIy1rhJHytZRS7AzR+TjX+GRAFAajy5zkouA7owJbn1L8UFvzlbDTLFHzhxVMI+DsTddmNqU70wOP2Goh8c3HnOLf77Sn6l6qS+eL18+ZcTm8RhXN8+tT2/id+GLg60kgFIQggJVgQV8qKOqfSnyE4v1szSmSnGxrlZHNSzBg18XppzmNxAbNHjPiauLVGw/qPWvm4ZGvtYv23rLsA0cdLnjnmnlCg/oh/8juTf3GsX5VVS7sGIFZCJh/RRzLmwvXq2LZgBhhdD607xq7AFhuazYpVXcP6axrAWl3ikqYYGzAtesSzc/yK9hhhvPcO+UhhkfWrlLdubzSBP60ycIhCSMG+OhG2U5XZLaSpMZghnpf8tu2uFiH6xkiFHAunxseHecrBstXQZ4jzVL3aFv3TpyQG19dgKIlukZDpSFuLZLFW/fe5So5mNfp/zgezEXaZz/TIkD/HMpm18nov2oPuIOi2HFNwSZoExvORHzRCXcfci8/+m8VH9aF31EwiapPfFmjBWTAtcUI6s+T5Xf55d245Mi0XYQtWkqxLhIXfN0uyJBekVBNCKS7A2J0qjR5weYpAz/mnLX7xVfIGBanizxcag1GsOS70iPp4WuVTMrwVH9RvsCP+3n3wrMFkfrtQnjMx+GWJx3v3vl4fk1o5istwlrT3R3Z630OIgn6Wsdz43OWI4MIp8sJuKqQYntU7XkmSwxerSSOOr64+u9H3WKyUxzgQ8bEqH+i8xjRajjlrYQ8iZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM/c5lGWNE+gMg7abztKO9CPnQscEvP0OhWvdMO2k9oBXJJ5MV/g=","slug":"archive/essay/8B40046C17644103BD2A256EB938884C","published":1,"updated":"2021-10-08T07:57:24.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehs0061vpuc1vcd2nkn","content":"<h2 id=\"时间：2019-12-19-07-23\"><a href=\"#时间：2019-12-19-07-23\" class=\"headerlink\" title=\"时间：2019-12-19 07:23\"></a>时间：2019-12-19 07:23</h2><p>RGwc3OqLQr&#x2F;FK7bX9qFgbl1FD1WZLruNkeFBP4vHyDejXpJhzV309eABiP0e+YiX5wKAD0GaALo74u1B39tyIUFaMrQAVV5M60sGphzkL2hf0ad5&#x2F;0JAqGXgDy01ustT&#x2F;w+bAGA8As3jc+3CexZ8CfqJsrOp7vt0aE8zzqKV0IbSL3b5u4wpBfp4Rb7+4b7lES9sbZmD37mXP5bJ0X94Z6W38oSSUj6aiLpDI9kllGxSWavZK+hQk1eWuAThn833cjXVtaxq7Mruglvc+eo4ok2Fm56uCdnq2RiUi5nu9e0bkGXyv8ELwr3RcVjMQdHQB8CK&#x2F;OFuNXltCRWNKlH6G2fyrPO+D+Sg6zbolkLHl326Ja3co0fDuLm6MxbLLwubwjfci0&#x2F;ZXjGOCKodAfvEtrDmkd0l2HYaOTbH6nOu+3GwXr+3QwdoxhFrVPjpkvjWcs4VNieiqiynXeNBflPR66ZrscQtZRVX77DUXT3jZdQ5rV7a6ZyWDr9ZgET86YQlGFxcW62wsBnMBt9STCFCUhbhYdccrBOAMJuZXfccIDuBgqelngufQRinLHRJiv0ihN2QhNuJFKkkTxSgswrMjLWhMGgKs8fbfnK82myiWIgqRnF6geCydTX8UAS3dTR1f0XJKEJuUNzc87uzszP+EZIcZ+JnCLjLNnJXJG9XVlLKElLmiwXNi4zDnP6NHGa7ikvac7mHR2SsWGL3&#x2F;v4pZtSNiwoZW3pPaK6Id+eg+srKoB7GTQNKZIsDuJh8cMziJF7cr1KvH7LZRMpB4MpeyvLmgz8oo3soLiGFVhl5wMrcqbc8H4qtnC4mI9iT5Z1lPBtq13+bYyplOY+G0soMOvbtkei7nWxIz3fh17gqMZvlTikEGcMNHGTs+wwgtsbreqR54iWEVuOxfYD+eYArFujw+iJRCsUCYWepGeVGNpZwlsuKQ+EH0sIJ1c4srVN73BYyE9nHw34W9CHY1MkOhUmXflbaBxz7E+AWfiUiZEWpWwvXOfTtWRuJV0htuCPmA63XgHn6JAHadlf5OY4l1BNewOWXVDPYEChsONoPSmTFxjq&#x2F;Qop83AqoOtxoaPqfWLXM+s8AqMjfWDQkzDMuxUnMO9fxiEze7J+qMZw7y2W+37NgPQHZBcG3Q8Vd&#x2F;ArxjfMQaZO11cYsW+RQkhuXj6lvsbs31+j&#x2F;Od4mA0XPpJ2rKIVC&#x2F;ueVAP8BuTBAzMN8ndDHXkKctT17eCUXz7w+t9n4h4MZxQQPegz9d3ULLabcdCJ167fpJ+8&#x2F;iXQhcJXihJeNXefkPcVrkxF+Tfj&#x2F;r73rSbTgtK+LseIedY1u17&#x2F;8itWpPlPqlVDC6dzSECBofynwSHADsXl+CBFpkstT3JPiSRTnVmWcta4H9kHthp4yG8Hqc2O6fJnodDIjwa6uzS0N8o95wHz79dDtDHKSpGsjtjotT54qCeI9z3T9FMSwKrN2AJn&#x2F;1fQdRA56QjnGFLeE8EkYY5Ix6tsk9XFcqAeLC1UbWIoaEqUdILSo9e&#x2F;TAUizEf+01YBHrsec+o2lEGl8QjthfxhlEFDNgTD0Lt4Cb2ytqpMJZXxFrqqUYOOc2+Lq0&#x2F;xJPHCKHYf8vLZEfx7LzcLbwLk+BVnxm6JqQVXXWMM2BblrFCX2CAIuhd8m0lztKUrK5OVG0TyEeLrOpB6&#x2F;YfXm6MPIOttooJFzCBZAKpWt70Xwwfwxrr7r0qMZziWv8oTiFG4lSvGE0VvCwN9hZoLvFh6bMFpnz&#x2F;bv0L8HMSxBmOyanQm01HhX6KXcyNSbW9Ep2Qxkw+eC034r+HQzV2t+qFkbpNFMb0DatDetvdBZyvlTvlPNcxJCcxEqe&#x2F;gxb9DRzKNPyy8eM&#x2F;P4Wem+NW7GFZTfXZQ6uj712J&#x2F;vQddDF9ukf&#x2F;jXJkEShhLTs9+JFhR9zjnOljLfNhmB8UzIUBno1d+qqzlC+ZiHzkaRbMnATdOYqW0dBIf5f5wIq31M4GC5mkQzxBVQ8Zqxxu5LCLGRrm+2dro8O27&#x2F;B5D74h0s&#x2F;rUmbj8Qxxf32rNjj0+TAZIIFh&#x2F;3pQjdbwNiABQZUpLBtYWSiZSZ5ivKAgzK6H1uVAlrillqMWJDjLsU6yO1sGb6lMBgKiIuGD2MWHj6moa+JUygW+gWo9m7XVe0q6y6CveMERblK4nXsgurUqH4j91uqyu6c0kccGY8Oei6opdzG49&#x2F;53IJg8YQo6TnK+plLdg1ezfanf20QwHBV1IHNYFWiTUHVO88EJuvLSAPgDdiVCOzO0KjXxjqOiq7lDw+OFbYaYyUoE1nwywhgE1TbBJdR54em&#x2F;CC4lY+14GNDTTAaN9ATWLCSPJWQnsDR799HCBZcGumWHB303Zcti4&#x2F;hKKmUW1JH59XxL4dtLup7fER05tm7vtVJ5ZCd0r1+R7QOzPIszOqZ+B2OifcYLVAelM7OGtIZbOmIWQbU11K45P16Y6GVZicmSTPSKXrvAB6nhOD0&#x2F;we&#x2F;UbqpU6iNu5ZRTgcZcxyrgU2TzWaKgfcX5ynMjk0TAqvYKYHAXMhMIUE6tEMMithQ1WkasGcv0+r6Hu8jPrc9&#x2F;Gvlf4u+4fl9knAf7JCgONAi4ds&#x2F;p6rwGAGtZbvzcAvxF7p04RcX0MY6A53z0tsFIcE46Uu&#x2F;KuxhWVyufVwlrHfIek6k8hHTspNH8bztwUJLU6gBRP9SpRrZrZIhDPII19VXNFVWdujdwcu7dcNuuoXPofulrbbHSyYaSaxK&#x2F;RdHh7yjViodnoUp3WaTNDZtzRlICXyZm73kD7qqHyR6nyqnVFG43Zd+Xcic2HJzEhSMYG6Ddlyc6AzYSCJeoDCY9M6dpPFKplBpQRL8g4LjOLHwd7BMlXqqcvjAmJpfHSlByX5KEml7a3V4jVKoIhoq1B5EvoNELDwUah8nnJjh8CKJevnuNx2NRUr&#x2F;QNzIfHTRGKCYHua70wUQX7m+lcNMc&#x2F;EG3TLqr+qyXMFjXihPxRLL+Uc9LBDbCIMh1Zpirr&#x2F;0+6U4twTr&#x2F;ipWU5SmOxf0O+OFl2NjOH7u8MwkXT1yWTS09Nfu3tLHFA0EmqJxgceNea8uegh+KFo4Fnf4oTd1wwg6c3cE8RX7okJ5ZDMzWCifUEwzdturrhnaarzbZT&#x2F;aCIAn4Epu4&#x2F;G0wgJSZL5oos889CaEJcmGkkJ6XSTd87ArxLOu143GSoSxVj6dlMGYLfcnJIjX3NJ0kHJdSROY9f6Kd0Moh&#x2F;3fupqbLxtyP9bKQKPtpfw4pT2&#x2F;Kd2nmPeBhxMIqIap4b3zKL5PzBF&#x2F;t6faSIMANeUoU9+oD1LU5FVfkoz5Icd7aW73SNLnwFxvXXUkuR&#x2F;Dkcry3vJVOeKuxV6m6L6qqplQtCiyYzTc01Zllr4e34dYU0&#x2F;QOfId3TI4Ork17iAHGGu+JY8Kud55p2Ph3NZN9nLryFzyjAsgaRY5YJnrJ0&#x2F;vs+0yS3wLYvXWIy1rhJHytZRS7AzR+TjX+GRAFAajy5zkouA7owJbn1L8UFvzlbDTLFHzhxVMI+DsTddmNqU70wOP2Goh8c3HnOLf77Sn6l6qS+eL18+ZcTm8RhXN8+tT2&#x2F;id+GLg60kgFIQggJVgQV8qKOqfSnyE4v1szSmSnGxrlZHNSzBg18XppzmNxAbNHjPiauLVGw&#x2F;qPWvm4ZGvtYv23rLsA0cdLnjnmnlCg&#x2F;oh&#x2F;8juTf3GsX5VVS7sGIFZCJh&#x2F;RRzLmwvXq2LZgBhhdD607xq7AFhuazYpVXcP6axrAWl3ikqYYGzAtesSzc&#x2F;yK9hhhvPcO+UhhkfWrlLdubzSBP60ycIhCSMG+OhG2U5XZLaSpMZghnpf8tu2uFiH6xkiFHAunxseHecrBstXQZ4jzVL3aFv3TpyQG19dgKIlukZDpSFuLZLFW&#x2F;fe5So5mNfp&#x2F;zgezEXaZz&#x2F;TIkD&#x2F;HMpm18nov2oPuIOi2HFNwSZoExvORHzRCXcfci8&#x2F;+m8VH9aF31EwiapPfFmjBWTAtcUI6s+T5Xf55d245Mi0XYQtWkqxLhIXfN0uyJBekVBNCKS7A2J0qjR5weYpAz&#x2F;mnLX7xVfIGBanizxcag1GsOS70iPp4WuVTMrwVH9RvsCP+3n3wrMFkfrtQnjMx+GWJx3v3vl4fk1o5istwlrT3R3Z630OIgn6Wsdz43OWI4MIp8sJuKqQYntU7XkmSwxerSSOOr64+u9H3WKyUxzgQ8bEqH+i8xjRajjlrYQ8iZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvP0OhWvdMO2k9oBXJJ5MV&#x2F;g&#x3D;</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"时间：2019-12-19-07-23\"><a href=\"#时间：2019-12-19-07-23\" class=\"headerlink\" title=\"时间：2019-12-19 07:23\"></a>时间：2019-12-19 07:23</h2><p>RGwc3OqLQr&#x2F;FK7bX9qFgbl1FD1WZLruNkeFBP4vHyDejXpJhzV309eABiP0e+YiX5wKAD0GaALo74u1B39tyIUFaMrQAVV5M60sGphzkL2hf0ad5&#x2F;0JAqGXgDy01ustT&#x2F;w+bAGA8As3jc+3CexZ8CfqJsrOp7vt0aE8zzqKV0IbSL3b5u4wpBfp4Rb7+4b7lES9sbZmD37mXP5bJ0X94Z6W38oSSUj6aiLpDI9kllGxSWavZK+hQk1eWuAThn833cjXVtaxq7Mruglvc+eo4ok2Fm56uCdnq2RiUi5nu9e0bkGXyv8ELwr3RcVjMQdHQB8CK&#x2F;OFuNXltCRWNKlH6G2fyrPO+D+Sg6zbolkLHl326Ja3co0fDuLm6MxbLLwubwjfci0&#x2F;ZXjGOCKodAfvEtrDmkd0l2HYaOTbH6nOu+3GwXr+3QwdoxhFrVPjpkvjWcs4VNieiqiynXeNBflPR66ZrscQtZRVX77DUXT3jZdQ5rV7a6ZyWDr9ZgET86YQlGFxcW62wsBnMBt9STCFCUhbhYdccrBOAMJuZXfccIDuBgqelngufQRinLHRJiv0ihN2QhNuJFKkkTxSgswrMjLWhMGgKs8fbfnK82myiWIgqRnF6geCydTX8UAS3dTR1f0XJKEJuUNzc87uzszP+EZIcZ+JnCLjLNnJXJG9XVlLKElLmiwXNi4zDnP6NHGa7ikvac7mHR2SsWGL3&#x2F;v4pZtSNiwoZW3pPaK6Id+eg+srKoB7GTQNKZIsDuJh8cMziJF7cr1KvH7LZRMpB4MpeyvLmgz8oo3soLiGFVhl5wMrcqbc8H4qtnC4mI9iT5Z1lPBtq13+bYyplOY+G0soMOvbtkei7nWxIz3fh17gqMZvlTikEGcMNHGTs+wwgtsbreqR54iWEVuOxfYD+eYArFujw+iJRCsUCYWepGeVGNpZwlsuKQ+EH0sIJ1c4srVN73BYyE9nHw34W9CHY1MkOhUmXflbaBxz7E+AWfiUiZEWpWwvXOfTtWRuJV0htuCPmA63XgHn6JAHadlf5OY4l1BNewOWXVDPYEChsONoPSmTFxjq&#x2F;Qop83AqoOtxoaPqfWLXM+s8AqMjfWDQkzDMuxUnMO9fxiEze7J+qMZw7y2W+37NgPQHZBcG3Q8Vd&#x2F;ArxjfMQaZO11cYsW+RQkhuXj6lvsbs31+j&#x2F;Od4mA0XPpJ2rKIVC&#x2F;ueVAP8BuTBAzMN8ndDHXkKctT17eCUXz7w+t9n4h4MZxQQPegz9d3ULLabcdCJ167fpJ+8&#x2F;iXQhcJXihJeNXefkPcVrkxF+Tfj&#x2F;r73rSbTgtK+LseIedY1u17&#x2F;8itWpPlPqlVDC6dzSECBofynwSHADsXl+CBFpkstT3JPiSRTnVmWcta4H9kHthp4yG8Hqc2O6fJnodDIjwa6uzS0N8o95wHz79dDtDHKSpGsjtjotT54qCeI9z3T9FMSwKrN2AJn&#x2F;1fQdRA56QjnGFLeE8EkYY5Ix6tsk9XFcqAeLC1UbWIoaEqUdILSo9e&#x2F;TAUizEf+01YBHrsec+o2lEGl8QjthfxhlEFDNgTD0Lt4Cb2ytqpMJZXxFrqqUYOOc2+Lq0&#x2F;xJPHCKHYf8vLZEfx7LzcLbwLk+BVnxm6JqQVXXWMM2BblrFCX2CAIuhd8m0lztKUrK5OVG0TyEeLrOpB6&#x2F;YfXm6MPIOttooJFzCBZAKpWt70Xwwfwxrr7r0qMZziWv8oTiFG4lSvGE0VvCwN9hZoLvFh6bMFpnz&#x2F;bv0L8HMSxBmOyanQm01HhX6KXcyNSbW9Ep2Qxkw+eC034r+HQzV2t+qFkbpNFMb0DatDetvdBZyvlTvlPNcxJCcxEqe&#x2F;gxb9DRzKNPyy8eM&#x2F;P4Wem+NW7GFZTfXZQ6uj712J&#x2F;vQddDF9ukf&#x2F;jXJkEShhLTs9+JFhR9zjnOljLfNhmB8UzIUBno1d+qqzlC+ZiHzkaRbMnATdOYqW0dBIf5f5wIq31M4GC5mkQzxBVQ8Zqxxu5LCLGRrm+2dro8O27&#x2F;B5D74h0s&#x2F;rUmbj8Qxxf32rNjj0+TAZIIFh&#x2F;3pQjdbwNiABQZUpLBtYWSiZSZ5ivKAgzK6H1uVAlrillqMWJDjLsU6yO1sGb6lMBgKiIuGD2MWHj6moa+JUygW+gWo9m7XVe0q6y6CveMERblK4nXsgurUqH4j91uqyu6c0kccGY8Oei6opdzG49&#x2F;53IJg8YQo6TnK+plLdg1ezfanf20QwHBV1IHNYFWiTUHVO88EJuvLSAPgDdiVCOzO0KjXxjqOiq7lDw+OFbYaYyUoE1nwywhgE1TbBJdR54em&#x2F;CC4lY+14GNDTTAaN9ATWLCSPJWQnsDR799HCBZcGumWHB303Zcti4&#x2F;hKKmUW1JH59XxL4dtLup7fER05tm7vtVJ5ZCd0r1+R7QOzPIszOqZ+B2OifcYLVAelM7OGtIZbOmIWQbU11K45P16Y6GVZicmSTPSKXrvAB6nhOD0&#x2F;we&#x2F;UbqpU6iNu5ZRTgcZcxyrgU2TzWaKgfcX5ynMjk0TAqvYKYHAXMhMIUE6tEMMithQ1WkasGcv0+r6Hu8jPrc9&#x2F;Gvlf4u+4fl9knAf7JCgONAi4ds&#x2F;p6rwGAGtZbvzcAvxF7p04RcX0MY6A53z0tsFIcE46Uu&#x2F;KuxhWVyufVwlrHfIek6k8hHTspNH8bztwUJLU6gBRP9SpRrZrZIhDPII19VXNFVWdujdwcu7dcNuuoXPofulrbbHSyYaSaxK&#x2F;RdHh7yjViodnoUp3WaTNDZtzRlICXyZm73kD7qqHyR6nyqnVFG43Zd+Xcic2HJzEhSMYG6Ddlyc6AzYSCJeoDCY9M6dpPFKplBpQRL8g4LjOLHwd7BMlXqqcvjAmJpfHSlByX5KEml7a3V4jVKoIhoq1B5EvoNELDwUah8nnJjh8CKJevnuNx2NRUr&#x2F;QNzIfHTRGKCYHua70wUQX7m+lcNMc&#x2F;EG3TLqr+qyXMFjXihPxRLL+Uc9LBDbCIMh1Zpirr&#x2F;0+6U4twTr&#x2F;ipWU5SmOxf0O+OFl2NjOH7u8MwkXT1yWTS09Nfu3tLHFA0EmqJxgceNea8uegh+KFo4Fnf4oTd1wwg6c3cE8RX7okJ5ZDMzWCifUEwzdturrhnaarzbZT&#x2F;aCIAn4Epu4&#x2F;G0wgJSZL5oos889CaEJcmGkkJ6XSTd87ArxLOu143GSoSxVj6dlMGYLfcnJIjX3NJ0kHJdSROY9f6Kd0Moh&#x2F;3fupqbLxtyP9bKQKPtpfw4pT2&#x2F;Kd2nmPeBhxMIqIap4b3zKL5PzBF&#x2F;t6faSIMANeUoU9+oD1LU5FVfkoz5Icd7aW73SNLnwFxvXXUkuR&#x2F;Dkcry3vJVOeKuxV6m6L6qqplQtCiyYzTc01Zllr4e34dYU0&#x2F;QOfId3TI4Ork17iAHGGu+JY8Kud55p2Ph3NZN9nLryFzyjAsgaRY5YJnrJ0&#x2F;vs+0yS3wLYvXWIy1rhJHytZRS7AzR+TjX+GRAFAajy5zkouA7owJbn1L8UFvzlbDTLFHzhxVMI+DsTddmNqU70wOP2Goh8c3HnOLf77Sn6l6qS+eL18+ZcTm8RhXN8+tT2&#x2F;id+GLg60kgFIQggJVgQV8qKOqfSnyE4v1szSmSnGxrlZHNSzBg18XppzmNxAbNHjPiauLVGw&#x2F;qPWvm4ZGvtYv23rLsA0cdLnjnmnlCg&#x2F;oh&#x2F;8juTf3GsX5VVS7sGIFZCJh&#x2F;RRzLmwvXq2LZgBhhdD607xq7AFhuazYpVXcP6axrAWl3ikqYYGzAtesSzc&#x2F;yK9hhhvPcO+UhhkfWrlLdubzSBP60ycIhCSMG+OhG2U5XZLaSpMZghnpf8tu2uFiH6xkiFHAunxseHecrBstXQZ4jzVL3aFv3TpyQG19dgKIlukZDpSFuLZLFW&#x2F;fe5So5mNfp&#x2F;zgezEXaZz&#x2F;TIkD&#x2F;HMpm18nov2oPuIOi2HFNwSZoExvORHzRCXcfci8&#x2F;+m8VH9aF31EwiapPfFmjBWTAtcUI6s+T5Xf55d245Mi0XYQtWkqxLhIXfN0uyJBekVBNCKS7A2J0qjR5weYpAz&#x2F;mnLX7xVfIGBanizxcag1GsOS70iPp4WuVTMrwVH9RvsCP+3n3wrMFkfrtQnjMx+GWJx3v3vl4fk1o5istwlrT3R3Z630OIgn6Wsdz43OWI4MIp8sJuKqQYntU7XkmSwxerSSOOr64+u9H3WKyUxzgQ8bEqH+i8xjRajjlrYQ8iZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvCZGr85c2JEE6HB7QcxbA6IpDz0WI7WdA2WBM&#x2F;c5lGWNE+gMg7abztKO9CPnQscEvP0OhWvdMO2k9oBXJJ5MV&#x2F;g&#x3D;</p>\n"},{"title":"程序员的酒后真言","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-06-29T03:24:25.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n> 转至：http://www.ruanyifeng.com/blog/2021/06/drunk-post-of-a-programmer.html\n> \n> 出至：https://old.reddit.com/r/ExperiencedDevs/comments/nmodyl/drunk_post_things_ive_learned_as_a_sr_engineer/\n\n(1) 职业发展的最好方法是换公司。\n\n(2）技术栈不重要。技术领域有大约 10-20 条核心原则，重要的是这些原则，技术栈只是落实它们的方法。你如果不熟悉某个技术栈，不需要过度担心。\n\n(3）工作和人际关系是两回事。有一些公司，我交到了好朋友，但是工作得并不开心；另一些公司，我没有与任何同事建立友谊，但是工作得很开心。\n\n(4）我总是对经理实话实说。怕什么？他开除我？我会在两周内找到一份新工作。\n\n(5）如果一家公司的工程师超过 100 人，它的期权可能在未来十年内变得很有价值。对于工程师人数很少的公司，期权一般都是毫无价值。\n\n(6）好的代码是初级工程师可以理解的代码。伟大的代码可以被第一年的 CS 专业的新生理解。\n\n(7）作为一名工程师，最被低估的技能是记录。说真的，如果有人可以教我怎么写文档，我会付钱，也许是 1000 美元。\n\n(8）网上的口水战，几乎都无关紧要，别去参与。\n\n(9）如果我发现自己是公司里面最厉害的工程师，那就该离开了。\n\n(10）我们应该雇佣更多的实习生，他们很棒。那些精力充沛的小家伙用他们的想法乱搞。如果他们公开质疑或批评某事，那就更好了。我喜欢实习生。\n\n(11）技术栈很重要。如果你使用 Python 或 C++ 语言，就会忍不住想做一些非常不同的事情。因为某些工具确实擅长某些工作。\n\n(12）如果你不确定自己想做什么东西，请使用 Java。这是一种糟糕的编程语言，但几乎无所不能。\n\n(13）对于初学者来说，最赚钱的编程语言是 SQL，干翻所有其他语言。你只了解 SQL 而不会做其他事情，照样赚钱。人力资源专家的年薪？也许5万美元。懂 SQL 的人力资源专家？9万美元。\n\n(14）测试很重要，但 TDD （测试驱动的开发）几乎变成了一个邪教。\n\n(15） 政府单位很轻松，但并不像人们说的那样好。对于职业生涯早期到中期的工程师，12 万美元的年薪 + 各种福利 + 养老金听起来不错，但是你将被禁锢在深奥的专用工具里面，离开政府单位以后，这些知识就没用了。我非常尊重政府工作人员，但说真的，这些地方的工程师，年龄中位数在 50 岁以上是有原因的。\n\n(16）再倒一杯酒。\n\n(17）大多数头衔都无关紧要，随便什么公司都可以有首席工程师。\n\n(18）手腕和背部的健康问题可不是开玩笑的，好的设备值得花钱。\n\n(19）当一个软件工程师，最好的事情是什么？你可以结识很多想法相同的人，大家互相交流，不一定有相同的兴趣，但是对方会用跟你相同的方式思考问题，这很酷。\n\n(20）有些技术太流行，我不得不用它。我心里就会很讨厌这种技术，但会把它推荐给客户，比如我恨 Jenkins，但把它推荐给新客户，我不觉得做错了。\n\n(21）成为一名优秀的工程师意味着了解最佳实践，成为高级工程师意味着知道何时打破最佳实践。\n\n(22）发生事故时，如果周围的人试图将责任归咎于外部错误或底层服务中断，那么是时候离开这家公司，继续前进了。\n\n(23）我遇到的最好的领导，同意我的一部分观点，同时耐心跟我解释，为什么不同意我的另一部分观点。我正在努力成为像他们一样的人。\n\n(24）算法和数据结构确实重要，但不应该无限夸大，尤其是面试的时候。我没见过药剂师面试时，还要测试有机化学的细节。这个行业的面试过程有时候很糟糕。\n\n(25）做自己喜欢的事情并不重要，不要让我做讨厌的事情更重要。\n\n(26）越接近产品，就越接近推动收入增长。无论工作的技术性如何，只要它接近产品，我都感到越有价值。\n\n(27）即使我平时用 Windows 工作，Linux 也很重要。为什么？因为服务器是 Linux 系统，你最终在 Linux 系统上工作。\n\n(28）人死了以后，你想让代码成为你的遗产吗？如果是那样，就花很多时间在代码上面吧，因为那是你的遗产。但是，如果你像我一样，更看重与家人、朋友和生活中其他人相处的时光，而不是写的代码，那就别对它太在意。\n\n(29）我挣的钱还不错，对此心存感激，但还是需要省钱。\n\n(30）糟糕，我没酒了。\n\n(完）","source":"_posts/archive/essay/A98D5EC3509F483E80919CA2E09BDA1B.md","raw":"---\ntitle: 程序员的酒后真言\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-06-29 11:24:25\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 闲谈\ncategories:\n- Essay\n---\n\n> 转至：http://www.ruanyifeng.com/blog/2021/06/drunk-post-of-a-programmer.html\n> \n> 出至：https://old.reddit.com/r/ExperiencedDevs/comments/nmodyl/drunk_post_things_ive_learned_as_a_sr_engineer/\n\n(1) 职业发展的最好方法是换公司。\n\n(2）技术栈不重要。技术领域有大约 10-20 条核心原则，重要的是这些原则，技术栈只是落实它们的方法。你如果不熟悉某个技术栈，不需要过度担心。\n\n(3）工作和人际关系是两回事。有一些公司，我交到了好朋友，但是工作得并不开心；另一些公司，我没有与任何同事建立友谊，但是工作得很开心。\n\n(4）我总是对经理实话实说。怕什么？他开除我？我会在两周内找到一份新工作。\n\n(5）如果一家公司的工程师超过 100 人，它的期权可能在未来十年内变得很有价值。对于工程师人数很少的公司，期权一般都是毫无价值。\n\n(6）好的代码是初级工程师可以理解的代码。伟大的代码可以被第一年的 CS 专业的新生理解。\n\n(7）作为一名工程师，最被低估的技能是记录。说真的，如果有人可以教我怎么写文档，我会付钱，也许是 1000 美元。\n\n(8）网上的口水战，几乎都无关紧要，别去参与。\n\n(9）如果我发现自己是公司里面最厉害的工程师，那就该离开了。\n\n(10）我们应该雇佣更多的实习生，他们很棒。那些精力充沛的小家伙用他们的想法乱搞。如果他们公开质疑或批评某事，那就更好了。我喜欢实习生。\n\n(11）技术栈很重要。如果你使用 Python 或 C++ 语言，就会忍不住想做一些非常不同的事情。因为某些工具确实擅长某些工作。\n\n(12）如果你不确定自己想做什么东西，请使用 Java。这是一种糟糕的编程语言，但几乎无所不能。\n\n(13）对于初学者来说，最赚钱的编程语言是 SQL，干翻所有其他语言。你只了解 SQL 而不会做其他事情，照样赚钱。人力资源专家的年薪？也许5万美元。懂 SQL 的人力资源专家？9万美元。\n\n(14）测试很重要，但 TDD （测试驱动的开发）几乎变成了一个邪教。\n\n(15） 政府单位很轻松，但并不像人们说的那样好。对于职业生涯早期到中期的工程师，12 万美元的年薪 + 各种福利 + 养老金听起来不错，但是你将被禁锢在深奥的专用工具里面，离开政府单位以后，这些知识就没用了。我非常尊重政府工作人员，但说真的，这些地方的工程师，年龄中位数在 50 岁以上是有原因的。\n\n(16）再倒一杯酒。\n\n(17）大多数头衔都无关紧要，随便什么公司都可以有首席工程师。\n\n(18）手腕和背部的健康问题可不是开玩笑的，好的设备值得花钱。\n\n(19）当一个软件工程师，最好的事情是什么？你可以结识很多想法相同的人，大家互相交流，不一定有相同的兴趣，但是对方会用跟你相同的方式思考问题，这很酷。\n\n(20）有些技术太流行，我不得不用它。我心里就会很讨厌这种技术，但会把它推荐给客户，比如我恨 Jenkins，但把它推荐给新客户，我不觉得做错了。\n\n(21）成为一名优秀的工程师意味着了解最佳实践，成为高级工程师意味着知道何时打破最佳实践。\n\n(22）发生事故时，如果周围的人试图将责任归咎于外部错误或底层服务中断，那么是时候离开这家公司，继续前进了。\n\n(23）我遇到的最好的领导，同意我的一部分观点，同时耐心跟我解释，为什么不同意我的另一部分观点。我正在努力成为像他们一样的人。\n\n(24）算法和数据结构确实重要，但不应该无限夸大，尤其是面试的时候。我没见过药剂师面试时，还要测试有机化学的细节。这个行业的面试过程有时候很糟糕。\n\n(25）做自己喜欢的事情并不重要，不要让我做讨厌的事情更重要。\n\n(26）越接近产品，就越接近推动收入增长。无论工作的技术性如何，只要它接近产品，我都感到越有价值。\n\n(27）即使我平时用 Windows 工作，Linux 也很重要。为什么？因为服务器是 Linux 系统，你最终在 Linux 系统上工作。\n\n(28）人死了以后，你想让代码成为你的遗产吗？如果是那样，就花很多时间在代码上面吧，因为那是你的遗产。但是，如果你像我一样，更看重与家人、朋友和生活中其他人相处的时光，而不是写的代码，那就别对它太在意。\n\n(29）我挣的钱还不错，对此心存感激，但还是需要省钱。\n\n(30）糟糕，我没酒了。\n\n(完）","slug":"archive/essay/A98D5EC3509F483E80919CA2E09BDA1B","published":1,"updated":"2021-10-08T07:57:24.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehs0062vpucajar1agf","content":"<blockquote>\n<p>转至：<a href=\"http://www.ruanyifeng.com/blog/2021/06/drunk-post-of-a-programmer.html\">http://www.ruanyifeng.com/blog/2021/06/drunk-post-of-a-programmer.html</a></p>\n<p>出至：<a href=\"https://old.reddit.com/r/ExperiencedDevs/comments/nmodyl/drunk_post_things_ive_learned_as_a_sr_engineer/\">https://old.reddit.com/r/ExperiencedDevs/comments/nmodyl/drunk_post_things_ive_learned_as_a_sr_engineer/</a></p>\n</blockquote>\n<p>(1) 职业发展的最好方法是换公司。</p>\n<p>(2）技术栈不重要。技术领域有大约 10-20 条核心原则，重要的是这些原则，技术栈只是落实它们的方法。你如果不熟悉某个技术栈，不需要过度担心。</p>\n<p>(3）工作和人际关系是两回事。有一些公司，我交到了好朋友，但是工作得并不开心；另一些公司，我没有与任何同事建立友谊，但是工作得很开心。</p>\n<p>(4）我总是对经理实话实说。怕什么？他开除我？我会在两周内找到一份新工作。</p>\n<p>(5）如果一家公司的工程师超过 100 人，它的期权可能在未来十年内变得很有价值。对于工程师人数很少的公司，期权一般都是毫无价值。</p>\n<p>(6）好的代码是初级工程师可以理解的代码。伟大的代码可以被第一年的 CS 专业的新生理解。</p>\n<p>(7）作为一名工程师，最被低估的技能是记录。说真的，如果有人可以教我怎么写文档，我会付钱，也许是 1000 美元。</p>\n<p>(8）网上的口水战，几乎都无关紧要，别去参与。</p>\n<p>(9）如果我发现自己是公司里面最厉害的工程师，那就该离开了。</p>\n<p>(10）我们应该雇佣更多的实习生，他们很棒。那些精力充沛的小家伙用他们的想法乱搞。如果他们公开质疑或批评某事，那就更好了。我喜欢实习生。</p>\n<p>(11）技术栈很重要。如果你使用 Python 或 C++ 语言，就会忍不住想做一些非常不同的事情。因为某些工具确实擅长某些工作。</p>\n<p>(12）如果你不确定自己想做什么东西，请使用 Java。这是一种糟糕的编程语言，但几乎无所不能。</p>\n<p>(13）对于初学者来说，最赚钱的编程语言是 SQL，干翻所有其他语言。你只了解 SQL 而不会做其他事情，照样赚钱。人力资源专家的年薪？也许5万美元。懂 SQL 的人力资源专家？9万美元。</p>\n<p>(14）测试很重要，但 TDD （测试驱动的开发）几乎变成了一个邪教。</p>\n<p>(15） 政府单位很轻松，但并不像人们说的那样好。对于职业生涯早期到中期的工程师，12 万美元的年薪 + 各种福利 + 养老金听起来不错，但是你将被禁锢在深奥的专用工具里面，离开政府单位以后，这些知识就没用了。我非常尊重政府工作人员，但说真的，这些地方的工程师，年龄中位数在 50 岁以上是有原因的。</p>\n<p>(16）再倒一杯酒。</p>\n<p>(17）大多数头衔都无关紧要，随便什么公司都可以有首席工程师。</p>\n<p>(18）手腕和背部的健康问题可不是开玩笑的，好的设备值得花钱。</p>\n<p>(19）当一个软件工程师，最好的事情是什么？你可以结识很多想法相同的人，大家互相交流，不一定有相同的兴趣，但是对方会用跟你相同的方式思考问题，这很酷。</p>\n<p>(20）有些技术太流行，我不得不用它。我心里就会很讨厌这种技术，但会把它推荐给客户，比如我恨 Jenkins，但把它推荐给新客户，我不觉得做错了。</p>\n<p>(21）成为一名优秀的工程师意味着了解最佳实践，成为高级工程师意味着知道何时打破最佳实践。</p>\n<p>(22）发生事故时，如果周围的人试图将责任归咎于外部错误或底层服务中断，那么是时候离开这家公司，继续前进了。</p>\n<p>(23）我遇到的最好的领导，同意我的一部分观点，同时耐心跟我解释，为什么不同意我的另一部分观点。我正在努力成为像他们一样的人。</p>\n<p>(24）算法和数据结构确实重要，但不应该无限夸大，尤其是面试的时候。我没见过药剂师面试时，还要测试有机化学的细节。这个行业的面试过程有时候很糟糕。</p>\n<p>(25）做自己喜欢的事情并不重要，不要让我做讨厌的事情更重要。</p>\n<p>(26）越接近产品，就越接近推动收入增长。无论工作的技术性如何，只要它接近产品，我都感到越有价值。</p>\n<p>(27）即使我平时用 Windows 工作，Linux 也很重要。为什么？因为服务器是 Linux 系统，你最终在 Linux 系统上工作。</p>\n<p>(28）人死了以后，你想让代码成为你的遗产吗？如果是那样，就花很多时间在代码上面吧，因为那是你的遗产。但是，如果你像我一样，更看重与家人、朋友和生活中其他人相处的时光，而不是写的代码，那就别对它太在意。</p>\n<p>(29）我挣的钱还不错，对此心存感激，但还是需要省钱。</p>\n<p>(30）糟糕，我没酒了。</p>\n<p>(完）</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<blockquote>\n<p>转至：<a href=\"http://www.ruanyifeng.com/blog/2021/06/drunk-post-of-a-programmer.html\">http://www.ruanyifeng.com/blog/2021/06/drunk-post-of-a-programmer.html</a></p>\n<p>出至：<a href=\"https://old.reddit.com/r/ExperiencedDevs/comments/nmodyl/drunk_post_things_ive_learned_as_a_sr_engineer/\">https://old.reddit.com/r/ExperiencedDevs/comments/nmodyl/drunk_post_things_ive_learned_as_a_sr_engineer/</a></p>\n</blockquote>\n<p>(1) 职业发展的最好方法是换公司。</p>\n<p>(2）技术栈不重要。技术领域有大约 10-20 条核心原则，重要的是这些原则，技术栈只是落实它们的方法。你如果不熟悉某个技术栈，不需要过度担心。</p>\n<p>(3）工作和人际关系是两回事。有一些公司，我交到了好朋友，但是工作得并不开心；另一些公司，我没有与任何同事建立友谊，但是工作得很开心。</p>\n<p>(4）我总是对经理实话实说。怕什么？他开除我？我会在两周内找到一份新工作。</p>\n<p>(5）如果一家公司的工程师超过 100 人，它的期权可能在未来十年内变得很有价值。对于工程师人数很少的公司，期权一般都是毫无价值。</p>\n<p>(6）好的代码是初级工程师可以理解的代码。伟大的代码可以被第一年的 CS 专业的新生理解。</p>\n<p>(7）作为一名工程师，最被低估的技能是记录。说真的，如果有人可以教我怎么写文档，我会付钱，也许是 1000 美元。</p>\n<p>(8）网上的口水战，几乎都无关紧要，别去参与。</p>\n<p>(9）如果我发现自己是公司里面最厉害的工程师，那就该离开了。</p>\n<p>(10）我们应该雇佣更多的实习生，他们很棒。那些精力充沛的小家伙用他们的想法乱搞。如果他们公开质疑或批评某事，那就更好了。我喜欢实习生。</p>\n<p>(11）技术栈很重要。如果你使用 Python 或 C++ 语言，就会忍不住想做一些非常不同的事情。因为某些工具确实擅长某些工作。</p>\n<p>(12）如果你不确定自己想做什么东西，请使用 Java。这是一种糟糕的编程语言，但几乎无所不能。</p>\n<p>(13）对于初学者来说，最赚钱的编程语言是 SQL，干翻所有其他语言。你只了解 SQL 而不会做其他事情，照样赚钱。人力资源专家的年薪？也许5万美元。懂 SQL 的人力资源专家？9万美元。</p>\n<p>(14）测试很重要，但 TDD （测试驱动的开发）几乎变成了一个邪教。</p>\n<p>(15） 政府单位很轻松，但并不像人们说的那样好。对于职业生涯早期到中期的工程师，12 万美元的年薪 + 各种福利 + 养老金听起来不错，但是你将被禁锢在深奥的专用工具里面，离开政府单位以后，这些知识就没用了。我非常尊重政府工作人员，但说真的，这些地方的工程师，年龄中位数在 50 岁以上是有原因的。</p>\n<p>(16）再倒一杯酒。</p>\n<p>(17）大多数头衔都无关紧要，随便什么公司都可以有首席工程师。</p>\n<p>(18）手腕和背部的健康问题可不是开玩笑的，好的设备值得花钱。</p>\n<p>(19）当一个软件工程师，最好的事情是什么？你可以结识很多想法相同的人，大家互相交流，不一定有相同的兴趣，但是对方会用跟你相同的方式思考问题，这很酷。</p>\n<p>(20）有些技术太流行，我不得不用它。我心里就会很讨厌这种技术，但会把它推荐给客户，比如我恨 Jenkins，但把它推荐给新客户，我不觉得做错了。</p>\n<p>(21）成为一名优秀的工程师意味着了解最佳实践，成为高级工程师意味着知道何时打破最佳实践。</p>\n<p>(22）发生事故时，如果周围的人试图将责任归咎于外部错误或底层服务中断，那么是时候离开这家公司，继续前进了。</p>\n<p>(23）我遇到的最好的领导，同意我的一部分观点，同时耐心跟我解释，为什么不同意我的另一部分观点。我正在努力成为像他们一样的人。</p>\n<p>(24）算法和数据结构确实重要，但不应该无限夸大，尤其是面试的时候。我没见过药剂师面试时，还要测试有机化学的细节。这个行业的面试过程有时候很糟糕。</p>\n<p>(25）做自己喜欢的事情并不重要，不要让我做讨厌的事情更重要。</p>\n<p>(26）越接近产品，就越接近推动收入增长。无论工作的技术性如何，只要它接近产品，我都感到越有价值。</p>\n<p>(27）即使我平时用 Windows 工作，Linux 也很重要。为什么？因为服务器是 Linux 系统，你最终在 Linux 系统上工作。</p>\n<p>(28）人死了以后，你想让代码成为你的遗产吗？如果是那样，就花很多时间在代码上面吧，因为那是你的遗产。但是，如果你像我一样，更看重与家人、朋友和生活中其他人相处的时光，而不是写的代码，那就别对它太在意。</p>\n<p>(29）我挣的钱还不错，对此心存感激，但还是需要省钱。</p>\n<p>(30）糟糕，我没酒了。</p>\n<p>(完）</p>\n"},{"title":"开发SaaS应用的12条准则【转】","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-07-07T09:33:40.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n# 开发SaaS应用的12条准则【转】\n\n> 原文地址：[https://12factor.net/](https://12factor.net/)\n\n## 简介\n\n如今，软件通常会作为一种服务来交付，它们被称为网络应用程序，或软件即服务（SaaS）。12-Factor 为构建如下的 SaaS 应用提供了方法论：\n\n- 使用**标准化**流程自动配置，从而使新的开发者花费最少的学习成本加入这个项目。\n- 和操作系统之间尽可能的**划清界限**，在各个系统中提供**最大的可移植性**。\n- 适合**部署**在现代的**云计算平台**，从而在服务器和系统管理方面节省资源。\n- 将开发环境和生产环境的**差异降至最低**，并使用**持续交付**实施敏捷开发。\n- 可以在工具、架构和开发流程不发生明显变化的前提下实现**扩展**。\n\n这套理论适用于任意语言和后端服务（数据库、消息队列、缓存等）开发的应用程序。\n\n## 背景\n\n本文的贡献者参与过数以百计的应用程序的开发和部署，并通过 [Heroku](http://www.heroku.com/) 平台间接见证了数十万应用程序的开发，运作以及扩展的过程。\n\n本文综合了我们关于 SaaS 应用几乎所有的经验和智慧，是开发此类应用的理想实践标准，并特别关注于应用程序如何保持良性成长，开发者之间如何进行有效的代码协作，以及如何 [避免软件污染](http://blog.heroku.com/archives/2011/6/28/the_new_heroku_4_erosion_resistance_explicit_contracts/) 。\n\n我们的初衷是分享在现代软件开发过程中发现的一些系统性问题，并加深对这些问题的认识。我们提供了讨论这些问题时所需的共享词汇，同时使用相关术语给出一套针对这些问题的广义解决方案。本文格式的灵感来自于 Martin Fowler 的书籍： *[Patterns of Enterprise Application Architecture](http://books.google.com/books/about/Patterns_of_enterprise_application_archi.html?id=FyWZt5DdvFkC)* ， *[Refactoring](http://books.google.com/books/about/Refactoring.html?id=1MsETFPD3I0C)* 。\n\n## 读者应该是哪些人？\n\n任何 SaaS 应用的开发人员。部署和管理此类应用的运维工程师。\n\n---\n\n## I. 基准代码\n\n> 一份基准代码（Codebase），多份部署（deploy）\n\n![https://12factor.net/images/codebase-deploys.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/tvR5L1V.png)\n\n12-Factor应用(译者注：应该是说一个使用本文概念来设计的应用，下同)通常会使用版本控制系统加以管理，如[Git](http://git-scm.com/), [Mercurial](https://www.mercurial-scm.org/), [Subversion](http://subversion.apache.org/)。一份用来跟踪代码所有修订版本的数据库被称作 *代码库*（code repository, code repo, repo）。\n\n在类似 SVN 这样的集中式版本控制系统中，*基准代码* 就是指控制系统中的这一份代码库；而在 Git 那样的分布式版本控制系统中，*基准代码* 则是指最上游的那份代码库。\n\n基准代码和应用之间总是保持一一对应的关系：\n\n- 一旦有多个基准代码，就不能称为一个应用，而是一个分布式系统。分布式系统中的每一个组件都是一个应用，每一个应用可以分别使用 12-Factor 进行开发。\n- 多个应用共享一份基准代码是有悖于 12-Factor 原则的。解决方案是将共享的代码拆分为独立的类库，然后使用 [依赖管理](https://12factor.net/zh_cn/dependencies) 策略去加载它们。\n\n尽管每个应用只对应一份基准代码，但可以同时存在多份部署。每份 *部署* 相当于运行了一个应用的实例。通常会有一个生产环境，一个或多个预发布环境。此外，每个开发人员都会在自己本地环境运行一个应用实例，这些都相当于一份部署。\n\n所有部署的基准代码相同，但每份部署可以使用其不同的版本。比如，开发人员可能有一些提交还没有同步至预发布环境；预发布环境也有一些提交没有同步至生产环境。但它们都共享一份基准代码，我们就认为它们只是相同应用的不同部署而已。\n\n## II. 依赖\n\n> 显式声明依赖关系（ dependency ）\n\n大多数编程语言都会提供一个打包系统，用来为各个类库提供打包服务，就像 Perl 的 [CPAN](http://www.cpan.org/) 或是 Ruby 的 [Rubygems](http://rubygems.org/) 。通过打包系统安装的类库可以是系统级的（称之为 “site packages”），或仅供某个应用程序使用，部署在相应的目录中（称之为 “vendoring” 或 “bunding”）。\n\n**12-Factor规则下的应用程序不会隐式依赖系统级的类库。** 它一定通过 *依赖清单* ，确切地声明所有依赖项。此外，在运行过程中通过 *依赖隔离* 工具来确保程序不会调用系统中存在但清单中未声明的依赖项。这一做法会统一应用到生产和开发环境。\n\n例如， Ruby 的 [Bundler](https://bundler.io/) 使用 `Gemfile` 作为依赖项声明清单，使用 `bundle exec` 来进行依赖隔离。Python 中则可分别使用两种工具 – [Pip](http://www.pip-installer.org/en/latest/) 用作依赖声明， [Virtualenv](http://www.virtualenv.org/en/latest/) 用作依赖隔离。甚至 C 语言也有类似工具， [Autoconf](http://www.gnu.org/s/autoconf/) 用作依赖声明，静态链接库用作依赖隔离。无论用什么工具，依赖声明和依赖隔离必须一起使用，否则无法满足 12-Factor 规范。\n\n显式声明依赖的优点之一是为新进开发者简化了环境配置流程。新进开发者可以检出应用程序的基准代码，安装编程语言环境和它对应的依赖管理工具，只需通过一个 *构建命令* 来安装所有的依赖项，即可开始工作。例如，Ruby/Bundler 下使用 `bundle install`，而 Clojure/[Leiningen](https://github.com/technomancy/leiningen#readme) 则是 `lein deps`。\n\n12-Factor 应用同样不会隐式依赖某些系统工具，如 ImageMagick 或是`curl`。即使这些工具存在于几乎所有系统，但终究无法保证所有未来的系统都能支持应用顺利运行，或是能够和应用兼容。如果应用必须使用到某些系统工具，那么这些工具应该被包含在应用之中。\n\n## III. 配置\n\n> 在环境中存储配置\n\n通常，应用的 *配置* 在不同 [部署](https://12factor.net/zh_cn/codebase) (预发布、生产环境、开发环境等等)间会有很大差异。这其中包括：\n\n- 数据库，Memcached，以及其他 [后端服务](https://12factor.net/zh_cn/backing-services) 的配置\n- 第三方服务的证书，如 Amazon S3、Twitter 等\n- 每份部署特有的配置，如域名等\n\n有些应用在代码中使用常量保存配置，这与 12-Factor 所要求的**代码和配置严格分离**显然大相径庭。配置文件在各部署间存在大幅差异，代码却完全一致。\n\n判断一个应用是否正确地将配置排除在代码之外，一个简单的方法是看该应用的基准代码是否可以立刻开源，而不用担心会暴露任何敏感的信息。\n\n需要指出的是，这里定义的“配置”并**不**包括应用的内部配置，比如 Rails 的 `config/routes.rb`，或是使用 [Spring](http://spring.io/) 时 [代码模块间的依赖注入关系](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html) 。这类配置在不同部署间不存在差异，所以应该写入代码。\n\n另外一个解决方法是使用配置文件，但不把它们纳入版本控制系统，就像 Rails 的 `config/database.yml` 。这相对于在代码中使用常量已经是长足进步，但仍然有缺点：总是会不小心将配置文件签入了代码库；配置文件的可能会分散在不同的目录，并有着不同的格式，这让找出一个地方来统一管理所有配置变的不太现实。更糟的是，这些格式通常是语言或框架特定的。\n\n**12-Factor推荐将应用的配置存储于 *环境变量* 中**（ *env vars*, *env* ）。环境变量可以非常方便地在不同的部署间做修改，却不动一行代码；与配置文件不同，不小心把它们签入代码库的概率微乎其微；与一些传统的解决配置问题的机制（比如 Java 的属性配置文件）相比，环境变量与语言和系统无关。\n\n配置管理的另一个方面是分组。有时应用会将配置按照特定部署进行分组（或叫做“环境”），例如Rails中的 `development`,`test`, 和 `production` 环境。这种方法无法轻易扩展：更多部署意味着更多新的环境，例如 `staging` 或 `qa` 。 随着项目的不断深入，开发人员可能还会添加他们自己的环境，比如 `joes-staging` ，这将导致各种配置组合的激增，从而给管理部署增加了很多不确定因素。\n\n12-Factor 应用中，环境变量的粒度要足够小，且相对独立。它们永远也不会组合成一个所谓的“环境”，而是独立存在于每个部署之中。当应用程序不断扩展，需要更多种类的部署时，这种配置管理方式能够做到平滑过渡。\n\n## IV. 后端服务\n\n> 把后端服务(backing services)当作附加资源\n\n*后端服务*是指程序运行所需要的通过网络调用的各种服务，如数据库（[MySQL](http://dev.mysql.com/)，[CouchDB](http://couchdb.apache.org/)），消息/队列系统（[RabbitMQ](http://www.rabbitmq.com/)，[Beanstalkd](https://beanstalkd.github.io/)），SMTP 邮件发送服务（[Postfix](http://www.postfix.org/)），以及缓存系统（[Memcached](http://memcached.org/)）。\n\n类似数据库的后端服务，通常由部署应用程序的系统管理员一起管理。除了本地服务之外，应用程序有可能使用了第三方发布和管理的服务。示例包括 SMTP（例如 [Postmark](http://postmarkapp.com/)），数据收集服务（例如 [New Relic](http://newrelic.com/) 或 [Loggly](http://www.loggly.com/)），数据存储服务（如 [Amazon S3](http://http//aws.amazon.com/s3/)），以及使用 API 访问的服务（例如 [Twitter](http://dev.twitter.com/), [Google Maps](https://developers.google.com/maps/), [Last.fm](http://www.last.fm/api)）。\n\n**12-Factor 应用不会区别对待本地或第三方服务。** 对应用程序而言，两种都是附加资源，通过一个 url 或是其他存储在 [配置](https://12factor.net/zh_cn/config) 中的服务定位/服务证书来获取数据。12-Factor 应用的任意 [部署](https://12factor.net/zh_cn/codebase) ，都应该可以在不进行任何代码改动的情况下，将本地 MySQL 数据库换成第三方服务（例如 [Amazon RDS](http://aws.amazon.com/rds/)）。类似的，本地 SMTP 服务应该也可以和第三方 SMTP 服务（例如 Postmark ）互换。上述 2 个例子中，仅需修改配置中的资源地址。\n\n每个不同的后端服务是一份 *资源* 。例如，一个 MySQL 数据库是一个资源，两个 MySQL 数据库（用来数据分区）就被当作是 2 个不同的资源。12-Factor 应用将这些数据库都视作 *附加资源* ，这些资源和它们附属的部署保持松耦合。\n\n![https://12factor.net/images/attached-resources.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XzCS6LB-20211008161426619.png)\n\n部署可以按需加载或卸载资源。例如，如果应用的数据库服务由于硬件问题出现异常，管理员可以从最近的备份中恢复一个数据库，卸载当前的数据库，然后加载新的数据库 – 整个过程都不需要修改代码。\n\n## V. 构建，发布，运行\n\n> 严格分离构建和运行\n\n[基准代码](https://12factor.net/zh_cn/codebase) 转化为一份部署(非开发环境)需要以下三个阶段：\n\n- *构建阶段* 是指将代码仓库转化为可执行包的过程。构建时会使用指定版本的代码，获取和打包 [依赖项](https://12factor.net/zh_cn/dependencies)，编译成二进制文件和资源文件。\n- *发布阶段* 会将构建的结果和当前部署所需 [配置](https://12factor.net/zh_cn/config) 相结合，并能够立刻在运行环境中投入使用。\n- *运行阶段* （或者说“运行时”）是指针对选定的发布版本，在执行环境中启动一系列应用程序 [进程](https://12factor.net/zh_cn/processes)。\n\n![https://12factor.net/images/release.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/4fVsaeA.png)\n\n**12-factor 应用严格区分构建，发布，运行这三个步骤。** 举例来说，直接修改处于运行状态的代码是非常不可取的做法，因为这些修改很难再同步回构建步骤。\n\n部署工具通常都提供了发布管理工具，最引人注目的功能是退回至较旧的发布版本。比如， [Capistrano](https://github.com/capistrano/capistrano/wiki) 将所有发布版本都存储在一个叫 `releases` 的子目录中，当前的在线版本只需映射至对应的目录即可。该工具的 `rollback` 命令可以很容易地实现回退版本的功能。\n\n每一个发布版本必须对应一个唯一的发布 ID，例如可以使用发布时的时间戳（`2011-04-06-20:32:17`），亦或是一个增长的数字（`v100`）。发布的版本就像一本只能追加的账本，一旦发布就不可修改，任何的变动都应该产生一个新的发布版本。\n\n新的代码在部署之前，需要开发人员触发构建操作。但是，运行阶段不一定需要人为触发，而是可以自动进行。如服务器重启，或是进程管理器重启了一个崩溃的进程。因此，运行阶段应该保持尽可能少的模块，这样假设半夜发生系统故障而开发人员又捉襟见肘也不会引起太大问题。构建阶段是可以相对复杂一些的，因为错误信息能够立刻展示在开发人员面前，从而得到妥善处理。\n\n## VI. 进程\n\n> 以一个或多个无状态进程运行应用\n\n运行环境中，应用程序通常是以一个和多个 *进程* 运行的。\n\n最简单的场景中，代码是一个独立的脚本，运行环境是开发人员自己的笔记本电脑，进程由一条命令行（例如`python my_script.py`）。另外一个极端情况是，复杂的应用可能会使用很多 [进程类型](https://12factor.net/zh_cn/concurrency) ，也就是零个或多个进程实例。\n\n**12-Factor 应用的进程必须无状态且 [无共享](http://en.wikipedia.org/wiki/Shared_nothing_architecture) 。** 任何需要持久化的数据都要存储在 [后端服务](https://12factor.net/zh_cn/backing-services) 内，比如数据库。\n\n内存区域或磁盘空间可以作为进程在做某种事务型操作时的缓存，例如下载一个很大的文件，对其操作并将结果写入数据库的过程。12-Factor应用根本不用考虑这些缓存的内容是不是可以保留给之后的请求来使用，这是因为应用启动了多种类型的进程，将来的请求多半会由其他进程来服务。即使在只有一个进程的情形下，先前保存的数据（内存或文件系统中）也会因为重启（如代码部署、配置更改、或运行环境将进程调度至另一个物理区域执行）而丢失。\n\n源文件打包工具（[Jammit](http://documentcloud.github.com/jammit/), [django-compressor](http://django-compressor.readthedocs.org/)） 使用文件系统来缓存编译过的源文件。12-Factor 应用更倾向于在 [构建步骤](https://12factor.net/zh_cn/build-release-run) 做此动作——正如 [Rails资源管道](http://guides.rubyonrails.org/asset_pipeline.html) ，而不是在运行阶段。\n\n一些互联网系统依赖于 “[粘性 session](http://en.wikipedia.org/wiki/Load_balancing_%28computing%29#Persistence)”， 这是指将用户 session 中的数据缓存至某进程的内存中，并将同一用户的后续请求路由到同一个进程。粘性 session 是 12-Factor 极力反对的。Session 中的数据应该保存在诸如 [Memcached](http://memcached.org/) 或 [Redis](http://redis.io/) 这样的带有过期时间的缓存中。\n\n## VII. 端口绑定\n\n> 通过端口绑定(Port binding)来提供服务\n\n互联网应用有时会运行于服务器的容器之中。例如 PHP 经常作为 [Apache HTTPD](http://httpd.apache.org/) 的一个模块来运行，正如 Java 运行于 [Tomcat](http://tomcat.apache.org/) 。\n\n**12-Factor 应用完全自我加载** 而不依赖于任何网络服务器就可以创建一个面向网络的服务。互联网应用 **通过端口绑定来提供服务** ，并监听发送至该端口的请求。\n\n本地环境中，开发人员通过类似`http://localhost:5000/`的地址来访问服务。在线上环境中，请求统一发送至公共域名而后路由至绑定了端口的网络进程。\n\n通常的实现思路是，将网络服务器类库通过 [依赖声明](https://12factor.net/zh_cn/dependencies) 载入应用。例如，Python 的 [Tornado](http://www.tornadoweb.org/), Ruby 的[Thin](http://code.macournoyer.com/thin/) , Java 以及其他基于 JVM 语言的 [Jetty](http://www.eclipse.org/jetty/)。完全由 *用户端* ，确切的说应该是应用的代码，发起请求。和运行环境约定好绑定的端口即可处理这些请求。\n\nHTTP 并不是唯一一个可以由端口绑定提供的服务。其实几乎所有服务器软件都可以通过进程绑定端口来等待请求。例如，使用 [XMPP](http://xmpp.org/) 的 [ejabberd](http://www.ejabberd.im/) ， 以及使用 [Redis 协议](http://redis.io/topics/protocol) 的 [Redis](http://redis.io/) 。\n\n还要指出的是，端口绑定这种方式也意味着一个应用可以成为另外一个应用的 [后端服务](https://12factor.net/zh_cn/backing-services) ，调用方将服务方提供的相应 URL 当作资源存入 [配置](https://12factor.net/zh_cn/config) 以备将来调用。\n\n## VIII. 并发\n\n> 通过进程模型进行扩展\n\n任何计算机程序，一旦启动，就会生成一个或多个进程。互联网应用采用多种进程运行方式。例如，PHP 进程作为 Apache 的子进程存在，随请求按需启动。Java 进程则采取了相反的方式，在程序启动之初 JVM 就提供了一个超级进程储备了大量的系统资源(CPU 和内存)，并通过多线程实现内部的并发管理。上述 2 个例子中，进程是开发人员可以操作的最小单位。\n\n![https://12factor.net/images/process-types.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/lGZVkoW.png)\n\n**在 12-factor 应用中，进程是一等公民。**12-Factor 应用的进程主要借鉴于 [unix 守护进程模型](https://adam.herokuapp.com/past/2011/5/9/applying_the_unix_process_model_to_web_apps/) 。开发人员可以运用这个模型去设计应用架构，将不同的工作分配给不同的 *进程类型* 。例如，HTTP 请求可以交给 web 进程来处理，而常驻的后台工作则交由 worker 进程负责。\n\n这并不包括个别较为特殊的进程，例如通过虚拟机的线程处理并发的内部运算，或是使用诸如 [EventMachine](https://github.com/eventmachine/eventmachine), [Twisted](http://twistedmatrix.com/trac/), [Node.js](http://nodejs.org/) 的异步/事件触发模型。但一台独立的虚拟机的扩展有瓶颈（垂直扩展），所以应用程序必须可以在多台物理机器间跨进程工作。\n\n上述进程模型会在系统急需扩展时大放异彩。 [12-Factor 应用的进程所具备的无共享，水平分区的特性](https://12factor.net/zh_cn/processes) 意味着添加并发会变得简单而稳妥。这些进程的类型以及每个类型中进程的数量就被称作 *进程构成* 。\n\n12-Factor 应用的进程 [不需要守护进程](http://dustin.github.com/2010/02/28/running-processes.html) 或是写入 PID 文件。相反的，应该借助操作系统的进程管理器(例如 [systemd](https://www.freedesktop.org/wiki/Software/systemd/) ，分布式的进程管理云平台，或是类似 [Foreman](http://blog.daviddollar.org/2011/05/06/introducing-foreman.html) 的工具)，来管理 [输出流](https://12factor.net/zh_cn/logs) ，响应崩溃的进程，以及处理用户触发的重启和关闭超级进程的请求。\n\n## IX. 易处理\n\n> 快速启动和优雅终止可最大化健壮性\n\n**12-Factor 应用的 [进程](https://12factor.net/zh_cn/processes) 是 *易处理（disposable）*的，意思是说它们可以瞬间开启或停止。** 这有利于快速、弹性的伸缩应用，迅速部署变化的 [代码](https://12factor.net/zh_cn/codebase) 或 [配置](https://12factor.net/zh_cn/config) ，稳健的部署应用。\n\n进程应当追求 **最小启动时间** 。 理想状态下，进程从敲下命令到真正启动并等待请求的时间应该只需很短的时间。更少的启动时间提供了更敏捷的 [发布](https://12factor.net/zh_cn/build-release-run) 以及扩展过程，此外还增加了健壮性，因为进程管理器可以在授权情形下容易的将进程搬到新的物理机器上。\n\n进程 **一旦接收 [终止信号（`SIGTERM`）](http://en.wikipedia.org/wiki/SIGTERM) 就会优雅的终止** 。就网络进程而言，优雅终止是指停止监听服务的端口，即拒绝所有新的请求，并继续执行当前已接收的请求，然后退出。此类型的进程所隐含的要求是HTTP请求大多都很短(不会超过几秒钟)，而在长时间轮询中，客户端在丢失连接后应该马上尝试重连。\n\n对于 worker 进程来说，优雅终止是指将当前任务退回队列。例如，[RabbitMQ](http://www.rabbitmq.com/) 中，worker 可以发送一个`[NACK](http://www.rabbitmq.com/amqp-0-9-1-quickref.html#basic.nack)`信号。 [Beanstalkd](https://beanstalkd.github.io/) 中，任务终止并退回队列会在worker断开时自动触发。有锁机制的系统诸如 [Delayed Job](https://github.com/collectiveidea/delayed_job#readme) 则需要确定释放了系统资源。此类型的进程所隐含的要求是，任务都应该 [可重复执行](http://en.wikipedia.org/wiki/Reentrant_%28subroutine%29) ， 这主要由将结果包装进事务或是使重复操作 [幂等](http://en.wikipedia.org/wiki/Idempotence) 来实现。\n\n进程还应当**在面对突然死亡时保持健壮**，例如底层硬件故障。虽然这种情况比起优雅终止来说少之又少，但终究有可能发生。一种推荐的方式是使用一个健壮的后端队列，例如 [Beanstalkd](https://beanstalkd.github.io/) ，它可以在客户端断开或超时后自动退回任务。无论如何，12-Factor 应用都应该可以设计能够应对意外的、不优雅的终结。[Crash-only design](http://lwn.net/Articles/191059/) 将这种概念转化为 [合乎逻辑的理论](http://couchdb.apache.org/docs/overview.html)。\n\n## X. 开发环境与线上环境等价\n\n> 尽可能的保持开发，预发布，线上环境相同\n\n从以往经验来看，开发环境（即开发人员的本地 [部署](https://12factor.net/zh_cn/codebase)）和线上环境（外部用户访问的真实部署）之间存在着很多差异。这些差异表现在以下三个方面：\n\n- **时间差异：** 开发人员正在编写的代码可能需要几天，几周，甚至几个月才会上线。\n- **人员差异：** 开发人员编写代码，运维人员部署代码。\n- **工具差异：** 开发人员或许使用 Nginx，SQLite，OS X，而线上环境使用 Apache，MySQL 以及 Linux。\n\n**12-Factor 应用想要做到 [持续部署](http://avc.com/2011/02/continuous-deployment/) 就必须缩小本地与线上差异。** 再回头看上面所描述的三个差异:\n\n- 缩小时间差异：开发人员可以几小时，甚至几分钟就部署代码。\n- 缩小人员差异：开发人员不只要编写代码，更应该密切参与部署过程以及代码在线上的表现。\n- 缩小工具差异：尽量保证开发环境以及线上环境的一致性。\n\n将上述总结变为一个表格如下：\n\n|                      | 传统应用 | 12-Factor 应用 |\n| -------------------- | -------- | -------------- |\n| 每次部署间隔         | 数周     | 几小时         |\n| 开发人员 vs 运维人员 | 不同的人 | 相同的人       |\n| 开发环境 vs 线上环境 | 不同     | 尽量接近       |\n\n[后端服务](https://12factor.net/zh_cn/backing-services) 是保持开发与线上等价的重要部分，例如数据库，队列系统，以及缓存。许多语言都提供了简化获取后端服务的类库，例如不同类型服务的 *适配器* 。下列表格提供了一些例子。\n\n| 类型   | 语言          | 类库                 | 适配器                        |\n| ------ | ------------- | -------------------- | ----------------------------- |\n| 数据库 | Ruby/Rails    | ActiveRecord         | MySQL, PostgreSQL, SQLite     |\n| 队列   | Python/Django | Celery               | RabbitMQ, Beanstalkd, Redis   |\n| 缓存   | Ruby/Rails    | ActiveSupport::Cache | Memory, filesystem, Memcached |\n\n开发人员有时会觉得在本地环境中使用轻量的后端服务具有很强的吸引力，而那些更重量级的健壮的后端服务应该使用在生产环境。例如，本地使用 SQLite 线上使用 PostgreSQL；又如本地缓存在进程内存中而线上存入 Memcached。\n\n**12-Factor 应用的开发人员应该反对在不同环境间使用不同的后端服务** ，即使适配器已经可以几乎消除使用上的差异。这是因为，不同的后端服务意味着会突然出现的不兼容，从而导致测试、预发布都正常的代码在线上出现问题。这些错误会给持续部署带来阻力。从应用程序的生命周期来看，消除这种阻力需要花费很大的代价。\n\n与此同时，轻量的本地服务也不像以前那样引人注目。借助于[Homebrew](http://mxcl.github.com/homebrew/)，[apt-get](https://help.ubuntu.com/community/AptGet/Howto)等现代的打包系统，诸如Memcached、PostgreSQL、RabbitMQ 等后端服务的安装与运行也并不复杂。此外，使用类似 [Chef](http://www.opscode.com/chef/) 和 [Puppet](http://docs.puppetlabs.com/) 的声明式配置工具，结合像 [Vagrant](http://vagrantup.com/) 这样轻量的虚拟环境就可以使得开发人员的本地环境与线上环境无限接近。与同步环境和持续部署所带来的益处相比，安装这些系统显然是值得的。\n\n不同后端服务的适配器仍然是有用的，因为它们可以使移植后端服务变得简单。但应用的所有部署，这其中包括开发、预发布以及线上环境，都应该使用同一个后端服务的相同版本。\n\n## XI. 日志\n\n> 把日志当作事件流\n\n*日志* 使得应用程序运行的动作变得透明。在基于服务器的环境中，日志通常被写在硬盘的一个文件里，但这只是一种输出格式。\n\n日志应该是 [事件流](https://adam.herokuapp.com/past/2011/4/1/logs_are_streams_not_files/) 的汇总，将所有运行中进程和后端服务的输出流按照时间顺序收集起来。尽管在回溯问题时可能需要看很多行，日志最原始的格式确实是一个事件一行。日志没有确定开始和结束，但随着应用在运行会持续的增加。\n\n**12-factor应用本身从不考虑存储自己的输出流。** 不应该试图去写或者管理日志文件。相反，每一个运行的进程都会直接的标准输出（`stdout`）事件流。开发环境中，开发人员可以通过这些数据流，实时在终端看到应用的活动。\n\n在预发布或线上部署中，每个进程的输出流由运行环境截获，并将其他输出流整理在一起，然后一并发送给一个或多个最终的处理程序，用于查看或是长期存档。这些存档路径对于应用来说不可见也不可配置，而是完全交给程序的运行环境管理。类似 [Logplex](https://github.com/heroku/logplex) 和 [Fluentd](https://github.com/fluent/fluentd) 的开源工具可以达到这个目的。\n\n这些事件流可以输出至文件，或者在终端实时观察。最重要的，输出流可以发送到 [Splunk](http://www.splunk.com/) 这样的日志索引及分析系统，或 [Hadoop/Hive](http://hive.apache.org/) 这样的通用数据存储系统。这些系统为查看应用的历史活动提供了强大而灵活的功能，包括：\n\n- 找出过去一段时间特殊的事件。\n- 图形化一个大规模的趋势，比如每分钟的请求量。\n- 根据用户定义的条件实时触发警报，比如每分钟的报错超过某个警戒线。\n\n## XII. 管理进程\n\n> 后台管理任务当作一次性进程运行\n\n[进程构成](https://12factor.net/zh_cn/concurrency)（process formation）是指用来处理应用的常规业务（比如处理 web 请求）的一组进程。与此不同，开发人员经常希望执行一些管理或维护应用的一次性任务，例如：\n\n- 运行数据移植（Django 中的 `manage.py migrate`, Rails 中的 `rake db:migrate`）。\n- 运行一个控制台（也被称为 [REPL](http://en.wikipedia.org/wiki/Read-eval-print_loop) shell），来执行一些代码或是针对线上数据库做一些检查。大多数语言都通过解释器提供了一个 REPL 工具（`python` 或 `perl`） ，或是其他命令（Ruby 使用 `irb`, Rails 使用 `rails console`）。\n- 运行一些提交到代码仓库的一次性脚本。\n\n一次性管理进程应该和正常的 [常驻进程](https://12factor.net/zh_cn/processes) 使用同样的环境。这些管理进程和任何其他的进程一样使用相同的 [代码](https://12factor.net/zh_cn/codebase) 和 [配置](https://12factor.net/zh_cn/config) ，基于某个 [发布版本](https://12factor.net/zh_cn/build-release-run) 运行。后台管理代码应该随其他应用程序代码一起发布，从而避免同步问题。\n\n所有进程类型应该使用同样的 [依赖隔离](https://12factor.net/zh_cn/dependencies) 技术。例如，如果Ruby的web进程使用了命令 `bundle exec thin start` ，那么数据库移植应使用 `bundle exec rake db:migrate` 。同样的，如果一个 Python 程序使用了 Virtualenv，则需要在运行 Tornado Web 服务器和任何 `manage.py` 管理进程时引入 `bin/python` 。\n\n12-factor 尤其青睐那些提供了 REPL shell 的语言，因为那会让运行一次性脚本变得简单。在本地部署中，开发人员直接在命令行使用 shell 命令调用一次性管理进程。在线上部署中，开发人员依旧可以使用ssh或是运行环境提供的其他机制来运行这样的进程。","source":"_posts/archive/code/FFC3580D7E244B5282E3FDD7F3EB8E95.md","raw":"---\ntitle: 开发SaaS应用的12条准则【转】\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-07-07 17:33:40\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- SaaS\ncategories:\n---\n\n# 开发SaaS应用的12条准则【转】\n\n> 原文地址：[https://12factor.net/](https://12factor.net/)\n\n## 简介\n\n如今，软件通常会作为一种服务来交付，它们被称为网络应用程序，或软件即服务（SaaS）。12-Factor 为构建如下的 SaaS 应用提供了方法论：\n\n- 使用**标准化**流程自动配置，从而使新的开发者花费最少的学习成本加入这个项目。\n- 和操作系统之间尽可能的**划清界限**，在各个系统中提供**最大的可移植性**。\n- 适合**部署**在现代的**云计算平台**，从而在服务器和系统管理方面节省资源。\n- 将开发环境和生产环境的**差异降至最低**，并使用**持续交付**实施敏捷开发。\n- 可以在工具、架构和开发流程不发生明显变化的前提下实现**扩展**。\n\n这套理论适用于任意语言和后端服务（数据库、消息队列、缓存等）开发的应用程序。\n\n## 背景\n\n本文的贡献者参与过数以百计的应用程序的开发和部署，并通过 [Heroku](http://www.heroku.com/) 平台间接见证了数十万应用程序的开发，运作以及扩展的过程。\n\n本文综合了我们关于 SaaS 应用几乎所有的经验和智慧，是开发此类应用的理想实践标准，并特别关注于应用程序如何保持良性成长，开发者之间如何进行有效的代码协作，以及如何 [避免软件污染](http://blog.heroku.com/archives/2011/6/28/the_new_heroku_4_erosion_resistance_explicit_contracts/) 。\n\n我们的初衷是分享在现代软件开发过程中发现的一些系统性问题，并加深对这些问题的认识。我们提供了讨论这些问题时所需的共享词汇，同时使用相关术语给出一套针对这些问题的广义解决方案。本文格式的灵感来自于 Martin Fowler 的书籍： *[Patterns of Enterprise Application Architecture](http://books.google.com/books/about/Patterns_of_enterprise_application_archi.html?id=FyWZt5DdvFkC)* ， *[Refactoring](http://books.google.com/books/about/Refactoring.html?id=1MsETFPD3I0C)* 。\n\n## 读者应该是哪些人？\n\n任何 SaaS 应用的开发人员。部署和管理此类应用的运维工程师。\n\n---\n\n## I. 基准代码\n\n> 一份基准代码（Codebase），多份部署（deploy）\n\n![https://12factor.net/images/codebase-deploys.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/tvR5L1V.png)\n\n12-Factor应用(译者注：应该是说一个使用本文概念来设计的应用，下同)通常会使用版本控制系统加以管理，如[Git](http://git-scm.com/), [Mercurial](https://www.mercurial-scm.org/), [Subversion](http://subversion.apache.org/)。一份用来跟踪代码所有修订版本的数据库被称作 *代码库*（code repository, code repo, repo）。\n\n在类似 SVN 这样的集中式版本控制系统中，*基准代码* 就是指控制系统中的这一份代码库；而在 Git 那样的分布式版本控制系统中，*基准代码* 则是指最上游的那份代码库。\n\n基准代码和应用之间总是保持一一对应的关系：\n\n- 一旦有多个基准代码，就不能称为一个应用，而是一个分布式系统。分布式系统中的每一个组件都是一个应用，每一个应用可以分别使用 12-Factor 进行开发。\n- 多个应用共享一份基准代码是有悖于 12-Factor 原则的。解决方案是将共享的代码拆分为独立的类库，然后使用 [依赖管理](https://12factor.net/zh_cn/dependencies) 策略去加载它们。\n\n尽管每个应用只对应一份基准代码，但可以同时存在多份部署。每份 *部署* 相当于运行了一个应用的实例。通常会有一个生产环境，一个或多个预发布环境。此外，每个开发人员都会在自己本地环境运行一个应用实例，这些都相当于一份部署。\n\n所有部署的基准代码相同，但每份部署可以使用其不同的版本。比如，开发人员可能有一些提交还没有同步至预发布环境；预发布环境也有一些提交没有同步至生产环境。但它们都共享一份基准代码，我们就认为它们只是相同应用的不同部署而已。\n\n## II. 依赖\n\n> 显式声明依赖关系（ dependency ）\n\n大多数编程语言都会提供一个打包系统，用来为各个类库提供打包服务，就像 Perl 的 [CPAN](http://www.cpan.org/) 或是 Ruby 的 [Rubygems](http://rubygems.org/) 。通过打包系统安装的类库可以是系统级的（称之为 “site packages”），或仅供某个应用程序使用，部署在相应的目录中（称之为 “vendoring” 或 “bunding”）。\n\n**12-Factor规则下的应用程序不会隐式依赖系统级的类库。** 它一定通过 *依赖清单* ，确切地声明所有依赖项。此外，在运行过程中通过 *依赖隔离* 工具来确保程序不会调用系统中存在但清单中未声明的依赖项。这一做法会统一应用到生产和开发环境。\n\n例如， Ruby 的 [Bundler](https://bundler.io/) 使用 `Gemfile` 作为依赖项声明清单，使用 `bundle exec` 来进行依赖隔离。Python 中则可分别使用两种工具 – [Pip](http://www.pip-installer.org/en/latest/) 用作依赖声明， [Virtualenv](http://www.virtualenv.org/en/latest/) 用作依赖隔离。甚至 C 语言也有类似工具， [Autoconf](http://www.gnu.org/s/autoconf/) 用作依赖声明，静态链接库用作依赖隔离。无论用什么工具，依赖声明和依赖隔离必须一起使用，否则无法满足 12-Factor 规范。\n\n显式声明依赖的优点之一是为新进开发者简化了环境配置流程。新进开发者可以检出应用程序的基准代码，安装编程语言环境和它对应的依赖管理工具，只需通过一个 *构建命令* 来安装所有的依赖项，即可开始工作。例如，Ruby/Bundler 下使用 `bundle install`，而 Clojure/[Leiningen](https://github.com/technomancy/leiningen#readme) 则是 `lein deps`。\n\n12-Factor 应用同样不会隐式依赖某些系统工具，如 ImageMagick 或是`curl`。即使这些工具存在于几乎所有系统，但终究无法保证所有未来的系统都能支持应用顺利运行，或是能够和应用兼容。如果应用必须使用到某些系统工具，那么这些工具应该被包含在应用之中。\n\n## III. 配置\n\n> 在环境中存储配置\n\n通常，应用的 *配置* 在不同 [部署](https://12factor.net/zh_cn/codebase) (预发布、生产环境、开发环境等等)间会有很大差异。这其中包括：\n\n- 数据库，Memcached，以及其他 [后端服务](https://12factor.net/zh_cn/backing-services) 的配置\n- 第三方服务的证书，如 Amazon S3、Twitter 等\n- 每份部署特有的配置，如域名等\n\n有些应用在代码中使用常量保存配置，这与 12-Factor 所要求的**代码和配置严格分离**显然大相径庭。配置文件在各部署间存在大幅差异，代码却完全一致。\n\n判断一个应用是否正确地将配置排除在代码之外，一个简单的方法是看该应用的基准代码是否可以立刻开源，而不用担心会暴露任何敏感的信息。\n\n需要指出的是，这里定义的“配置”并**不**包括应用的内部配置，比如 Rails 的 `config/routes.rb`，或是使用 [Spring](http://spring.io/) 时 [代码模块间的依赖注入关系](http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html) 。这类配置在不同部署间不存在差异，所以应该写入代码。\n\n另外一个解决方法是使用配置文件，但不把它们纳入版本控制系统，就像 Rails 的 `config/database.yml` 。这相对于在代码中使用常量已经是长足进步，但仍然有缺点：总是会不小心将配置文件签入了代码库；配置文件的可能会分散在不同的目录，并有着不同的格式，这让找出一个地方来统一管理所有配置变的不太现实。更糟的是，这些格式通常是语言或框架特定的。\n\n**12-Factor推荐将应用的配置存储于 *环境变量* 中**（ *env vars*, *env* ）。环境变量可以非常方便地在不同的部署间做修改，却不动一行代码；与配置文件不同，不小心把它们签入代码库的概率微乎其微；与一些传统的解决配置问题的机制（比如 Java 的属性配置文件）相比，环境变量与语言和系统无关。\n\n配置管理的另一个方面是分组。有时应用会将配置按照特定部署进行分组（或叫做“环境”），例如Rails中的 `development`,`test`, 和 `production` 环境。这种方法无法轻易扩展：更多部署意味着更多新的环境，例如 `staging` 或 `qa` 。 随着项目的不断深入，开发人员可能还会添加他们自己的环境，比如 `joes-staging` ，这将导致各种配置组合的激增，从而给管理部署增加了很多不确定因素。\n\n12-Factor 应用中，环境变量的粒度要足够小，且相对独立。它们永远也不会组合成一个所谓的“环境”，而是独立存在于每个部署之中。当应用程序不断扩展，需要更多种类的部署时，这种配置管理方式能够做到平滑过渡。\n\n## IV. 后端服务\n\n> 把后端服务(backing services)当作附加资源\n\n*后端服务*是指程序运行所需要的通过网络调用的各种服务，如数据库（[MySQL](http://dev.mysql.com/)，[CouchDB](http://couchdb.apache.org/)），消息/队列系统（[RabbitMQ](http://www.rabbitmq.com/)，[Beanstalkd](https://beanstalkd.github.io/)），SMTP 邮件发送服务（[Postfix](http://www.postfix.org/)），以及缓存系统（[Memcached](http://memcached.org/)）。\n\n类似数据库的后端服务，通常由部署应用程序的系统管理员一起管理。除了本地服务之外，应用程序有可能使用了第三方发布和管理的服务。示例包括 SMTP（例如 [Postmark](http://postmarkapp.com/)），数据收集服务（例如 [New Relic](http://newrelic.com/) 或 [Loggly](http://www.loggly.com/)），数据存储服务（如 [Amazon S3](http://http//aws.amazon.com/s3/)），以及使用 API 访问的服务（例如 [Twitter](http://dev.twitter.com/), [Google Maps](https://developers.google.com/maps/), [Last.fm](http://www.last.fm/api)）。\n\n**12-Factor 应用不会区别对待本地或第三方服务。** 对应用程序而言，两种都是附加资源，通过一个 url 或是其他存储在 [配置](https://12factor.net/zh_cn/config) 中的服务定位/服务证书来获取数据。12-Factor 应用的任意 [部署](https://12factor.net/zh_cn/codebase) ，都应该可以在不进行任何代码改动的情况下，将本地 MySQL 数据库换成第三方服务（例如 [Amazon RDS](http://aws.amazon.com/rds/)）。类似的，本地 SMTP 服务应该也可以和第三方 SMTP 服务（例如 Postmark ）互换。上述 2 个例子中，仅需修改配置中的资源地址。\n\n每个不同的后端服务是一份 *资源* 。例如，一个 MySQL 数据库是一个资源，两个 MySQL 数据库（用来数据分区）就被当作是 2 个不同的资源。12-Factor 应用将这些数据库都视作 *附加资源* ，这些资源和它们附属的部署保持松耦合。\n\n![https://12factor.net/images/attached-resources.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XzCS6LB-20211008161426619.png)\n\n部署可以按需加载或卸载资源。例如，如果应用的数据库服务由于硬件问题出现异常，管理员可以从最近的备份中恢复一个数据库，卸载当前的数据库，然后加载新的数据库 – 整个过程都不需要修改代码。\n\n## V. 构建，发布，运行\n\n> 严格分离构建和运行\n\n[基准代码](https://12factor.net/zh_cn/codebase) 转化为一份部署(非开发环境)需要以下三个阶段：\n\n- *构建阶段* 是指将代码仓库转化为可执行包的过程。构建时会使用指定版本的代码，获取和打包 [依赖项](https://12factor.net/zh_cn/dependencies)，编译成二进制文件和资源文件。\n- *发布阶段* 会将构建的结果和当前部署所需 [配置](https://12factor.net/zh_cn/config) 相结合，并能够立刻在运行环境中投入使用。\n- *运行阶段* （或者说“运行时”）是指针对选定的发布版本，在执行环境中启动一系列应用程序 [进程](https://12factor.net/zh_cn/processes)。\n\n![https://12factor.net/images/release.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/4fVsaeA.png)\n\n**12-factor 应用严格区分构建，发布，运行这三个步骤。** 举例来说，直接修改处于运行状态的代码是非常不可取的做法，因为这些修改很难再同步回构建步骤。\n\n部署工具通常都提供了发布管理工具，最引人注目的功能是退回至较旧的发布版本。比如， [Capistrano](https://github.com/capistrano/capistrano/wiki) 将所有发布版本都存储在一个叫 `releases` 的子目录中，当前的在线版本只需映射至对应的目录即可。该工具的 `rollback` 命令可以很容易地实现回退版本的功能。\n\n每一个发布版本必须对应一个唯一的发布 ID，例如可以使用发布时的时间戳（`2011-04-06-20:32:17`），亦或是一个增长的数字（`v100`）。发布的版本就像一本只能追加的账本，一旦发布就不可修改，任何的变动都应该产生一个新的发布版本。\n\n新的代码在部署之前，需要开发人员触发构建操作。但是，运行阶段不一定需要人为触发，而是可以自动进行。如服务器重启，或是进程管理器重启了一个崩溃的进程。因此，运行阶段应该保持尽可能少的模块，这样假设半夜发生系统故障而开发人员又捉襟见肘也不会引起太大问题。构建阶段是可以相对复杂一些的，因为错误信息能够立刻展示在开发人员面前，从而得到妥善处理。\n\n## VI. 进程\n\n> 以一个或多个无状态进程运行应用\n\n运行环境中，应用程序通常是以一个和多个 *进程* 运行的。\n\n最简单的场景中，代码是一个独立的脚本，运行环境是开发人员自己的笔记本电脑，进程由一条命令行（例如`python my_script.py`）。另外一个极端情况是，复杂的应用可能会使用很多 [进程类型](https://12factor.net/zh_cn/concurrency) ，也就是零个或多个进程实例。\n\n**12-Factor 应用的进程必须无状态且 [无共享](http://en.wikipedia.org/wiki/Shared_nothing_architecture) 。** 任何需要持久化的数据都要存储在 [后端服务](https://12factor.net/zh_cn/backing-services) 内，比如数据库。\n\n内存区域或磁盘空间可以作为进程在做某种事务型操作时的缓存，例如下载一个很大的文件，对其操作并将结果写入数据库的过程。12-Factor应用根本不用考虑这些缓存的内容是不是可以保留给之后的请求来使用，这是因为应用启动了多种类型的进程，将来的请求多半会由其他进程来服务。即使在只有一个进程的情形下，先前保存的数据（内存或文件系统中）也会因为重启（如代码部署、配置更改、或运行环境将进程调度至另一个物理区域执行）而丢失。\n\n源文件打包工具（[Jammit](http://documentcloud.github.com/jammit/), [django-compressor](http://django-compressor.readthedocs.org/)） 使用文件系统来缓存编译过的源文件。12-Factor 应用更倾向于在 [构建步骤](https://12factor.net/zh_cn/build-release-run) 做此动作——正如 [Rails资源管道](http://guides.rubyonrails.org/asset_pipeline.html) ，而不是在运行阶段。\n\n一些互联网系统依赖于 “[粘性 session](http://en.wikipedia.org/wiki/Load_balancing_%28computing%29#Persistence)”， 这是指将用户 session 中的数据缓存至某进程的内存中，并将同一用户的后续请求路由到同一个进程。粘性 session 是 12-Factor 极力反对的。Session 中的数据应该保存在诸如 [Memcached](http://memcached.org/) 或 [Redis](http://redis.io/) 这样的带有过期时间的缓存中。\n\n## VII. 端口绑定\n\n> 通过端口绑定(Port binding)来提供服务\n\n互联网应用有时会运行于服务器的容器之中。例如 PHP 经常作为 [Apache HTTPD](http://httpd.apache.org/) 的一个模块来运行，正如 Java 运行于 [Tomcat](http://tomcat.apache.org/) 。\n\n**12-Factor 应用完全自我加载** 而不依赖于任何网络服务器就可以创建一个面向网络的服务。互联网应用 **通过端口绑定来提供服务** ，并监听发送至该端口的请求。\n\n本地环境中，开发人员通过类似`http://localhost:5000/`的地址来访问服务。在线上环境中，请求统一发送至公共域名而后路由至绑定了端口的网络进程。\n\n通常的实现思路是，将网络服务器类库通过 [依赖声明](https://12factor.net/zh_cn/dependencies) 载入应用。例如，Python 的 [Tornado](http://www.tornadoweb.org/), Ruby 的[Thin](http://code.macournoyer.com/thin/) , Java 以及其他基于 JVM 语言的 [Jetty](http://www.eclipse.org/jetty/)。完全由 *用户端* ，确切的说应该是应用的代码，发起请求。和运行环境约定好绑定的端口即可处理这些请求。\n\nHTTP 并不是唯一一个可以由端口绑定提供的服务。其实几乎所有服务器软件都可以通过进程绑定端口来等待请求。例如，使用 [XMPP](http://xmpp.org/) 的 [ejabberd](http://www.ejabberd.im/) ， 以及使用 [Redis 协议](http://redis.io/topics/protocol) 的 [Redis](http://redis.io/) 。\n\n还要指出的是，端口绑定这种方式也意味着一个应用可以成为另外一个应用的 [后端服务](https://12factor.net/zh_cn/backing-services) ，调用方将服务方提供的相应 URL 当作资源存入 [配置](https://12factor.net/zh_cn/config) 以备将来调用。\n\n## VIII. 并发\n\n> 通过进程模型进行扩展\n\n任何计算机程序，一旦启动，就会生成一个或多个进程。互联网应用采用多种进程运行方式。例如，PHP 进程作为 Apache 的子进程存在，随请求按需启动。Java 进程则采取了相反的方式，在程序启动之初 JVM 就提供了一个超级进程储备了大量的系统资源(CPU 和内存)，并通过多线程实现内部的并发管理。上述 2 个例子中，进程是开发人员可以操作的最小单位。\n\n![https://12factor.net/images/process-types.png](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/lGZVkoW.png)\n\n**在 12-factor 应用中，进程是一等公民。**12-Factor 应用的进程主要借鉴于 [unix 守护进程模型](https://adam.herokuapp.com/past/2011/5/9/applying_the_unix_process_model_to_web_apps/) 。开发人员可以运用这个模型去设计应用架构，将不同的工作分配给不同的 *进程类型* 。例如，HTTP 请求可以交给 web 进程来处理，而常驻的后台工作则交由 worker 进程负责。\n\n这并不包括个别较为特殊的进程，例如通过虚拟机的线程处理并发的内部运算，或是使用诸如 [EventMachine](https://github.com/eventmachine/eventmachine), [Twisted](http://twistedmatrix.com/trac/), [Node.js](http://nodejs.org/) 的异步/事件触发模型。但一台独立的虚拟机的扩展有瓶颈（垂直扩展），所以应用程序必须可以在多台物理机器间跨进程工作。\n\n上述进程模型会在系统急需扩展时大放异彩。 [12-Factor 应用的进程所具备的无共享，水平分区的特性](https://12factor.net/zh_cn/processes) 意味着添加并发会变得简单而稳妥。这些进程的类型以及每个类型中进程的数量就被称作 *进程构成* 。\n\n12-Factor 应用的进程 [不需要守护进程](http://dustin.github.com/2010/02/28/running-processes.html) 或是写入 PID 文件。相反的，应该借助操作系统的进程管理器(例如 [systemd](https://www.freedesktop.org/wiki/Software/systemd/) ，分布式的进程管理云平台，或是类似 [Foreman](http://blog.daviddollar.org/2011/05/06/introducing-foreman.html) 的工具)，来管理 [输出流](https://12factor.net/zh_cn/logs) ，响应崩溃的进程，以及处理用户触发的重启和关闭超级进程的请求。\n\n## IX. 易处理\n\n> 快速启动和优雅终止可最大化健壮性\n\n**12-Factor 应用的 [进程](https://12factor.net/zh_cn/processes) 是 *易处理（disposable）*的，意思是说它们可以瞬间开启或停止。** 这有利于快速、弹性的伸缩应用，迅速部署变化的 [代码](https://12factor.net/zh_cn/codebase) 或 [配置](https://12factor.net/zh_cn/config) ，稳健的部署应用。\n\n进程应当追求 **最小启动时间** 。 理想状态下，进程从敲下命令到真正启动并等待请求的时间应该只需很短的时间。更少的启动时间提供了更敏捷的 [发布](https://12factor.net/zh_cn/build-release-run) 以及扩展过程，此外还增加了健壮性，因为进程管理器可以在授权情形下容易的将进程搬到新的物理机器上。\n\n进程 **一旦接收 [终止信号（`SIGTERM`）](http://en.wikipedia.org/wiki/SIGTERM) 就会优雅的终止** 。就网络进程而言，优雅终止是指停止监听服务的端口，即拒绝所有新的请求，并继续执行当前已接收的请求，然后退出。此类型的进程所隐含的要求是HTTP请求大多都很短(不会超过几秒钟)，而在长时间轮询中，客户端在丢失连接后应该马上尝试重连。\n\n对于 worker 进程来说，优雅终止是指将当前任务退回队列。例如，[RabbitMQ](http://www.rabbitmq.com/) 中，worker 可以发送一个`[NACK](http://www.rabbitmq.com/amqp-0-9-1-quickref.html#basic.nack)`信号。 [Beanstalkd](https://beanstalkd.github.io/) 中，任务终止并退回队列会在worker断开时自动触发。有锁机制的系统诸如 [Delayed Job](https://github.com/collectiveidea/delayed_job#readme) 则需要确定释放了系统资源。此类型的进程所隐含的要求是，任务都应该 [可重复执行](http://en.wikipedia.org/wiki/Reentrant_%28subroutine%29) ， 这主要由将结果包装进事务或是使重复操作 [幂等](http://en.wikipedia.org/wiki/Idempotence) 来实现。\n\n进程还应当**在面对突然死亡时保持健壮**，例如底层硬件故障。虽然这种情况比起优雅终止来说少之又少，但终究有可能发生。一种推荐的方式是使用一个健壮的后端队列，例如 [Beanstalkd](https://beanstalkd.github.io/) ，它可以在客户端断开或超时后自动退回任务。无论如何，12-Factor 应用都应该可以设计能够应对意外的、不优雅的终结。[Crash-only design](http://lwn.net/Articles/191059/) 将这种概念转化为 [合乎逻辑的理论](http://couchdb.apache.org/docs/overview.html)。\n\n## X. 开发环境与线上环境等价\n\n> 尽可能的保持开发，预发布，线上环境相同\n\n从以往经验来看，开发环境（即开发人员的本地 [部署](https://12factor.net/zh_cn/codebase)）和线上环境（外部用户访问的真实部署）之间存在着很多差异。这些差异表现在以下三个方面：\n\n- **时间差异：** 开发人员正在编写的代码可能需要几天，几周，甚至几个月才会上线。\n- **人员差异：** 开发人员编写代码，运维人员部署代码。\n- **工具差异：** 开发人员或许使用 Nginx，SQLite，OS X，而线上环境使用 Apache，MySQL 以及 Linux。\n\n**12-Factor 应用想要做到 [持续部署](http://avc.com/2011/02/continuous-deployment/) 就必须缩小本地与线上差异。** 再回头看上面所描述的三个差异:\n\n- 缩小时间差异：开发人员可以几小时，甚至几分钟就部署代码。\n- 缩小人员差异：开发人员不只要编写代码，更应该密切参与部署过程以及代码在线上的表现。\n- 缩小工具差异：尽量保证开发环境以及线上环境的一致性。\n\n将上述总结变为一个表格如下：\n\n|                      | 传统应用 | 12-Factor 应用 |\n| -------------------- | -------- | -------------- |\n| 每次部署间隔         | 数周     | 几小时         |\n| 开发人员 vs 运维人员 | 不同的人 | 相同的人       |\n| 开发环境 vs 线上环境 | 不同     | 尽量接近       |\n\n[后端服务](https://12factor.net/zh_cn/backing-services) 是保持开发与线上等价的重要部分，例如数据库，队列系统，以及缓存。许多语言都提供了简化获取后端服务的类库，例如不同类型服务的 *适配器* 。下列表格提供了一些例子。\n\n| 类型   | 语言          | 类库                 | 适配器                        |\n| ------ | ------------- | -------------------- | ----------------------------- |\n| 数据库 | Ruby/Rails    | ActiveRecord         | MySQL, PostgreSQL, SQLite     |\n| 队列   | Python/Django | Celery               | RabbitMQ, Beanstalkd, Redis   |\n| 缓存   | Ruby/Rails    | ActiveSupport::Cache | Memory, filesystem, Memcached |\n\n开发人员有时会觉得在本地环境中使用轻量的后端服务具有很强的吸引力，而那些更重量级的健壮的后端服务应该使用在生产环境。例如，本地使用 SQLite 线上使用 PostgreSQL；又如本地缓存在进程内存中而线上存入 Memcached。\n\n**12-Factor 应用的开发人员应该反对在不同环境间使用不同的后端服务** ，即使适配器已经可以几乎消除使用上的差异。这是因为，不同的后端服务意味着会突然出现的不兼容，从而导致测试、预发布都正常的代码在线上出现问题。这些错误会给持续部署带来阻力。从应用程序的生命周期来看，消除这种阻力需要花费很大的代价。\n\n与此同时，轻量的本地服务也不像以前那样引人注目。借助于[Homebrew](http://mxcl.github.com/homebrew/)，[apt-get](https://help.ubuntu.com/community/AptGet/Howto)等现代的打包系统，诸如Memcached、PostgreSQL、RabbitMQ 等后端服务的安装与运行也并不复杂。此外，使用类似 [Chef](http://www.opscode.com/chef/) 和 [Puppet](http://docs.puppetlabs.com/) 的声明式配置工具，结合像 [Vagrant](http://vagrantup.com/) 这样轻量的虚拟环境就可以使得开发人员的本地环境与线上环境无限接近。与同步环境和持续部署所带来的益处相比，安装这些系统显然是值得的。\n\n不同后端服务的适配器仍然是有用的，因为它们可以使移植后端服务变得简单。但应用的所有部署，这其中包括开发、预发布以及线上环境，都应该使用同一个后端服务的相同版本。\n\n## XI. 日志\n\n> 把日志当作事件流\n\n*日志* 使得应用程序运行的动作变得透明。在基于服务器的环境中，日志通常被写在硬盘的一个文件里，但这只是一种输出格式。\n\n日志应该是 [事件流](https://adam.herokuapp.com/past/2011/4/1/logs_are_streams_not_files/) 的汇总，将所有运行中进程和后端服务的输出流按照时间顺序收集起来。尽管在回溯问题时可能需要看很多行，日志最原始的格式确实是一个事件一行。日志没有确定开始和结束，但随着应用在运行会持续的增加。\n\n**12-factor应用本身从不考虑存储自己的输出流。** 不应该试图去写或者管理日志文件。相反，每一个运行的进程都会直接的标准输出（`stdout`）事件流。开发环境中，开发人员可以通过这些数据流，实时在终端看到应用的活动。\n\n在预发布或线上部署中，每个进程的输出流由运行环境截获，并将其他输出流整理在一起，然后一并发送给一个或多个最终的处理程序，用于查看或是长期存档。这些存档路径对于应用来说不可见也不可配置，而是完全交给程序的运行环境管理。类似 [Logplex](https://github.com/heroku/logplex) 和 [Fluentd](https://github.com/fluent/fluentd) 的开源工具可以达到这个目的。\n\n这些事件流可以输出至文件，或者在终端实时观察。最重要的，输出流可以发送到 [Splunk](http://www.splunk.com/) 这样的日志索引及分析系统，或 [Hadoop/Hive](http://hive.apache.org/) 这样的通用数据存储系统。这些系统为查看应用的历史活动提供了强大而灵活的功能，包括：\n\n- 找出过去一段时间特殊的事件。\n- 图形化一个大规模的趋势，比如每分钟的请求量。\n- 根据用户定义的条件实时触发警报，比如每分钟的报错超过某个警戒线。\n\n## XII. 管理进程\n\n> 后台管理任务当作一次性进程运行\n\n[进程构成](https://12factor.net/zh_cn/concurrency)（process formation）是指用来处理应用的常规业务（比如处理 web 请求）的一组进程。与此不同，开发人员经常希望执行一些管理或维护应用的一次性任务，例如：\n\n- 运行数据移植（Django 中的 `manage.py migrate`, Rails 中的 `rake db:migrate`）。\n- 运行一个控制台（也被称为 [REPL](http://en.wikipedia.org/wiki/Read-eval-print_loop) shell），来执行一些代码或是针对线上数据库做一些检查。大多数语言都通过解释器提供了一个 REPL 工具（`python` 或 `perl`） ，或是其他命令（Ruby 使用 `irb`, Rails 使用 `rails console`）。\n- 运行一些提交到代码仓库的一次性脚本。\n\n一次性管理进程应该和正常的 [常驻进程](https://12factor.net/zh_cn/processes) 使用同样的环境。这些管理进程和任何其他的进程一样使用相同的 [代码](https://12factor.net/zh_cn/codebase) 和 [配置](https://12factor.net/zh_cn/config) ，基于某个 [发布版本](https://12factor.net/zh_cn/build-release-run) 运行。后台管理代码应该随其他应用程序代码一起发布，从而避免同步问题。\n\n所有进程类型应该使用同样的 [依赖隔离](https://12factor.net/zh_cn/dependencies) 技术。例如，如果Ruby的web进程使用了命令 `bundle exec thin start` ，那么数据库移植应使用 `bundle exec rake db:migrate` 。同样的，如果一个 Python 程序使用了 Virtualenv，则需要在运行 Tornado Web 服务器和任何 `manage.py` 管理进程时引入 `bin/python` 。\n\n12-factor 尤其青睐那些提供了 REPL shell 的语言，因为那会让运行一次性脚本变得简单。在本地部署中，开发人员直接在命令行使用 shell 命令调用一次性管理进程。在线上部署中，开发人员依旧可以使用ssh或是运行环境提供的其他机制来运行这样的进程。","slug":"archive/code/FFC3580D7E244B5282E3FDD7F3EB8E95","published":1,"updated":"2021-10-08T08:14:54.595Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eht0066vpuc0t9pc3a1","content":"<h1 id=\"开发SaaS应用的12条准则【转】\"><a href=\"#开发SaaS应用的12条准则【转】\" class=\"headerlink\" title=\"开发SaaS应用的12条准则【转】\"></a>开发SaaS应用的12条准则【转】</h1><blockquote>\n<p>原文地址：<a href=\"https://12factor.net/\">https://12factor.net/</a></p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>如今，软件通常会作为一种服务来交付，它们被称为网络应用程序，或软件即服务（SaaS）。12-Factor 为构建如下的 SaaS 应用提供了方法论：</p>\n<ul>\n<li>使用<strong>标准化</strong>流程自动配置，从而使新的开发者花费最少的学习成本加入这个项目。</li>\n<li>和操作系统之间尽可能的<strong>划清界限</strong>，在各个系统中提供<strong>最大的可移植性</strong>。</li>\n<li>适合<strong>部署</strong>在现代的<strong>云计算平台</strong>，从而在服务器和系统管理方面节省资源。</li>\n<li>将开发环境和生产环境的<strong>差异降至最低</strong>，并使用<strong>持续交付</strong>实施敏捷开发。</li>\n<li>可以在工具、架构和开发流程不发生明显变化的前提下实现<strong>扩展</strong>。</li>\n</ul>\n<p>这套理论适用于任意语言和后端服务（数据库、消息队列、缓存等）开发的应用程序。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>本文的贡献者参与过数以百计的应用程序的开发和部署，并通过 <a href=\"http://www.heroku.com/\">Heroku</a> 平台间接见证了数十万应用程序的开发，运作以及扩展的过程。</p>\n<p>本文综合了我们关于 SaaS 应用几乎所有的经验和智慧，是开发此类应用的理想实践标准，并特别关注于应用程序如何保持良性成长，开发者之间如何进行有效的代码协作，以及如何 <a href=\"http://blog.heroku.com/archives/2011/6/28/the_new_heroku_4_erosion_resistance_explicit_contracts/\">避免软件污染</a> 。</p>\n<p>我们的初衷是分享在现代软件开发过程中发现的一些系统性问题，并加深对这些问题的认识。我们提供了讨论这些问题时所需的共享词汇，同时使用相关术语给出一套针对这些问题的广义解决方案。本文格式的灵感来自于 Martin Fowler 的书籍： <em><a href=\"http://books.google.com/books/about/Patterns_of_enterprise_application_archi.html?id=FyWZt5DdvFkC\">Patterns of Enterprise Application Architecture</a></em> ， <em><a href=\"http://books.google.com/books/about/Refactoring.html?id=1MsETFPD3I0C\">Refactoring</a></em> 。</p>\n<h2 id=\"读者应该是哪些人？\"><a href=\"#读者应该是哪些人？\" class=\"headerlink\" title=\"读者应该是哪些人？\"></a>读者应该是哪些人？</h2><p>任何 SaaS 应用的开发人员。部署和管理此类应用的运维工程师。</p>\n<hr>\n<h2 id=\"I-基准代码\"><a href=\"#I-基准代码\" class=\"headerlink\" title=\"I. 基准代码\"></a>I. 基准代码</h2><blockquote>\n<p>一份基准代码（Codebase），多份部署（deploy）</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/tvR5L1V.png\" alt=\"https://12factor.net/images/codebase-deploys.png\"></p>\n<p>12-Factor应用(译者注：应该是说一个使用本文概念来设计的应用，下同)通常会使用版本控制系统加以管理，如<a href=\"http://git-scm.com/\">Git</a>, <a href=\"https://www.mercurial-scm.org/\">Mercurial</a>, <a href=\"http://subversion.apache.org/\">Subversion</a>。一份用来跟踪代码所有修订版本的数据库被称作 <em>代码库</em>（code repository, code repo, repo）。</p>\n<p>在类似 SVN 这样的集中式版本控制系统中，<em>基准代码</em> 就是指控制系统中的这一份代码库；而在 Git 那样的分布式版本控制系统中，<em>基准代码</em> 则是指最上游的那份代码库。</p>\n<p>基准代码和应用之间总是保持一一对应的关系：</p>\n<ul>\n<li>一旦有多个基准代码，就不能称为一个应用，而是一个分布式系统。分布式系统中的每一个组件都是一个应用，每一个应用可以分别使用 12-Factor 进行开发。</li>\n<li>多个应用共享一份基准代码是有悖于 12-Factor 原则的。解决方案是将共享的代码拆分为独立的类库，然后使用 <a href=\"https://12factor.net/zh_cn/dependencies\">依赖管理</a> 策略去加载它们。</li>\n</ul>\n<p>尽管每个应用只对应一份基准代码，但可以同时存在多份部署。每份 <em>部署</em> 相当于运行了一个应用的实例。通常会有一个生产环境，一个或多个预发布环境。此外，每个开发人员都会在自己本地环境运行一个应用实例，这些都相当于一份部署。</p>\n<p>所有部署的基准代码相同，但每份部署可以使用其不同的版本。比如，开发人员可能有一些提交还没有同步至预发布环境；预发布环境也有一些提交没有同步至生产环境。但它们都共享一份基准代码，我们就认为它们只是相同应用的不同部署而已。</p>\n<h2 id=\"II-依赖\"><a href=\"#II-依赖\" class=\"headerlink\" title=\"II. 依赖\"></a>II. 依赖</h2><blockquote>\n<p>显式声明依赖关系（ dependency ）</p>\n</blockquote>\n<p>大多数编程语言都会提供一个打包系统，用来为各个类库提供打包服务，就像 Perl 的 <a href=\"http://www.cpan.org/\">CPAN</a> 或是 Ruby 的 <a href=\"http://rubygems.org/\">Rubygems</a> 。通过打包系统安装的类库可以是系统级的（称之为 “site packages”），或仅供某个应用程序使用，部署在相应的目录中（称之为 “vendoring” 或 “bunding”）。</p>\n<p><strong>12-Factor规则下的应用程序不会隐式依赖系统级的类库。</strong> 它一定通过 <em>依赖清单</em> ，确切地声明所有依赖项。此外，在运行过程中通过 <em>依赖隔离</em> 工具来确保程序不会调用系统中存在但清单中未声明的依赖项。这一做法会统一应用到生产和开发环境。</p>\n<p>例如， Ruby 的 <a href=\"https://bundler.io/\">Bundler</a> 使用 <code>Gemfile</code> 作为依赖项声明清单，使用 <code>bundle exec</code> 来进行依赖隔离。Python 中则可分别使用两种工具 – <a href=\"http://www.pip-installer.org/en/latest/\">Pip</a> 用作依赖声明， <a href=\"http://www.virtualenv.org/en/latest/\">Virtualenv</a> 用作依赖隔离。甚至 C 语言也有类似工具， <a href=\"http://www.gnu.org/s/autoconf/\">Autoconf</a> 用作依赖声明，静态链接库用作依赖隔离。无论用什么工具，依赖声明和依赖隔离必须一起使用，否则无法满足 12-Factor 规范。</p>\n<p>显式声明依赖的优点之一是为新进开发者简化了环境配置流程。新进开发者可以检出应用程序的基准代码，安装编程语言环境和它对应的依赖管理工具，只需通过一个 <em>构建命令</em> 来安装所有的依赖项，即可开始工作。例如，Ruby&#x2F;Bundler 下使用 <code>bundle install</code>，而 Clojure&#x2F;<a href=\"https://github.com/technomancy/leiningen#readme\">Leiningen</a> 则是 <code>lein deps</code>。</p>\n<p>12-Factor 应用同样不会隐式依赖某些系统工具，如 ImageMagick 或是<code>curl</code>。即使这些工具存在于几乎所有系统，但终究无法保证所有未来的系统都能支持应用顺利运行，或是能够和应用兼容。如果应用必须使用到某些系统工具，那么这些工具应该被包含在应用之中。</p>\n<h2 id=\"III-配置\"><a href=\"#III-配置\" class=\"headerlink\" title=\"III. 配置\"></a>III. 配置</h2><blockquote>\n<p>在环境中存储配置</p>\n</blockquote>\n<p>通常，应用的 <em>配置</em> 在不同 <a href=\"https://12factor.net/zh_cn/codebase\">部署</a> (预发布、生产环境、开发环境等等)间会有很大差异。这其中包括：</p>\n<ul>\n<li>数据库，Memcached，以及其他 <a href=\"https://12factor.net/zh_cn/backing-services\">后端服务</a> 的配置</li>\n<li>第三方服务的证书，如 Amazon S3、Twitter 等</li>\n<li>每份部署特有的配置，如域名等</li>\n</ul>\n<p>有些应用在代码中使用常量保存配置，这与 12-Factor 所要求的<strong>代码和配置严格分离</strong>显然大相径庭。配置文件在各部署间存在大幅差异，代码却完全一致。</p>\n<p>判断一个应用是否正确地将配置排除在代码之外，一个简单的方法是看该应用的基准代码是否可以立刻开源，而不用担心会暴露任何敏感的信息。</p>\n<p>需要指出的是，这里定义的“配置”并<strong>不</strong>包括应用的内部配置，比如 Rails 的 <code>config/routes.rb</code>，或是使用 <a href=\"http://spring.io/\">Spring</a> 时 <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html\">代码模块间的依赖注入关系</a> 。这类配置在不同部署间不存在差异，所以应该写入代码。</p>\n<p>另外一个解决方法是使用配置文件，但不把它们纳入版本控制系统，就像 Rails 的 <code>config/database.yml</code> 。这相对于在代码中使用常量已经是长足进步，但仍然有缺点：总是会不小心将配置文件签入了代码库；配置文件的可能会分散在不同的目录，并有着不同的格式，这让找出一个地方来统一管理所有配置变的不太现实。更糟的是，这些格式通常是语言或框架特定的。</p>\n<p><strong>12-Factor推荐将应用的配置存储于 <em>环境变量</em> 中</strong>（ <em>env vars</em>, <em>env</em> ）。环境变量可以非常方便地在不同的部署间做修改，却不动一行代码；与配置文件不同，不小心把它们签入代码库的概率微乎其微；与一些传统的解决配置问题的机制（比如 Java 的属性配置文件）相比，环境变量与语言和系统无关。</p>\n<p>配置管理的另一个方面是分组。有时应用会将配置按照特定部署进行分组（或叫做“环境”），例如Rails中的 <code>development</code>,<code>test</code>, 和 <code>production</code> 环境。这种方法无法轻易扩展：更多部署意味着更多新的环境，例如 <code>staging</code> 或 <code>qa</code> 。 随着项目的不断深入，开发人员可能还会添加他们自己的环境，比如 <code>joes-staging</code> ，这将导致各种配置组合的激增，从而给管理部署增加了很多不确定因素。</p>\n<p>12-Factor 应用中，环境变量的粒度要足够小，且相对独立。它们永远也不会组合成一个所谓的“环境”，而是独立存在于每个部署之中。当应用程序不断扩展，需要更多种类的部署时，这种配置管理方式能够做到平滑过渡。</p>\n<h2 id=\"IV-后端服务\"><a href=\"#IV-后端服务\" class=\"headerlink\" title=\"IV. 后端服务\"></a>IV. 后端服务</h2><blockquote>\n<p>把后端服务(backing services)当作附加资源</p>\n</blockquote>\n<p><em>后端服务</em>是指程序运行所需要的通过网络调用的各种服务，如数据库（<a href=\"http://dev.mysql.com/\">MySQL</a>，<a href=\"http://couchdb.apache.org/\">CouchDB</a>），消息&#x2F;队列系统（<a href=\"http://www.rabbitmq.com/\">RabbitMQ</a>，<a href=\"https://beanstalkd.github.io/\">Beanstalkd</a>），SMTP 邮件发送服务（<a href=\"http://www.postfix.org/\">Postfix</a>），以及缓存系统（<a href=\"http://memcached.org/\">Memcached</a>）。</p>\n<p>类似数据库的后端服务，通常由部署应用程序的系统管理员一起管理。除了本地服务之外，应用程序有可能使用了第三方发布和管理的服务。示例包括 SMTP（例如 <a href=\"http://postmarkapp.com/\">Postmark</a>），数据收集服务（例如 <a href=\"http://newrelic.com/\">New Relic</a> 或 <a href=\"http://www.loggly.com/\">Loggly</a>），数据存储服务（如 <a href=\"http://http//aws.amazon.com/s3/\">Amazon S3</a>），以及使用 API 访问的服务（例如 <a href=\"http://dev.twitter.com/\">Twitter</a>, <a href=\"https://developers.google.com/maps/\">Google Maps</a>, <a href=\"http://www.last.fm/api\">Last.fm</a>）。</p>\n<p><strong>12-Factor 应用不会区别对待本地或第三方服务。</strong> 对应用程序而言，两种都是附加资源，通过一个 url 或是其他存储在 <a href=\"https://12factor.net/zh_cn/config\">配置</a> 中的服务定位&#x2F;服务证书来获取数据。12-Factor 应用的任意 <a href=\"https://12factor.net/zh_cn/codebase\">部署</a> ，都应该可以在不进行任何代码改动的情况下，将本地 MySQL 数据库换成第三方服务（例如 <a href=\"http://aws.amazon.com/rds/\">Amazon RDS</a>）。类似的，本地 SMTP 服务应该也可以和第三方 SMTP 服务（例如 Postmark ）互换。上述 2 个例子中，仅需修改配置中的资源地址。</p>\n<p>每个不同的后端服务是一份 <em>资源</em> 。例如，一个 MySQL 数据库是一个资源，两个 MySQL 数据库（用来数据分区）就被当作是 2 个不同的资源。12-Factor 应用将这些数据库都视作 <em>附加资源</em> ，这些资源和它们附属的部署保持松耦合。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XzCS6LB-20211008161426619.png\" alt=\"https://12factor.net/images/attached-resources.png\"></p>\n<p>部署可以按需加载或卸载资源。例如，如果应用的数据库服务由于硬件问题出现异常，管理员可以从最近的备份中恢复一个数据库，卸载当前的数据库，然后加载新的数据库 – 整个过程都不需要修改代码。</p>\n<h2 id=\"V-构建，发布，运行\"><a href=\"#V-构建，发布，运行\" class=\"headerlink\" title=\"V. 构建，发布，运行\"></a>V. 构建，发布，运行</h2><blockquote>\n<p>严格分离构建和运行</p>\n</blockquote>\n<p><a href=\"https://12factor.net/zh_cn/codebase\">基准代码</a> 转化为一份部署(非开发环境)需要以下三个阶段：</p>\n<ul>\n<li><em>构建阶段</em> 是指将代码仓库转化为可执行包的过程。构建时会使用指定版本的代码，获取和打包 <a href=\"https://12factor.net/zh_cn/dependencies\">依赖项</a>，编译成二进制文件和资源文件。</li>\n<li><em>发布阶段</em> 会将构建的结果和当前部署所需 <a href=\"https://12factor.net/zh_cn/config\">配置</a> 相结合，并能够立刻在运行环境中投入使用。</li>\n<li><em>运行阶段</em> （或者说“运行时”）是指针对选定的发布版本，在执行环境中启动一系列应用程序 <a href=\"https://12factor.net/zh_cn/processes\">进程</a>。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/4fVsaeA.png\" alt=\"https://12factor.net/images/release.png\"></p>\n<p><strong>12-factor 应用严格区分构建，发布，运行这三个步骤。</strong> 举例来说，直接修改处于运行状态的代码是非常不可取的做法，因为这些修改很难再同步回构建步骤。</p>\n<p>部署工具通常都提供了发布管理工具，最引人注目的功能是退回至较旧的发布版本。比如， <a href=\"https://github.com/capistrano/capistrano/wiki\">Capistrano</a> 将所有发布版本都存储在一个叫 <code>releases</code> 的子目录中，当前的在线版本只需映射至对应的目录即可。该工具的 <code>rollback</code> 命令可以很容易地实现回退版本的功能。</p>\n<p>每一个发布版本必须对应一个唯一的发布 ID，例如可以使用发布时的时间戳（<code>2011-04-06-20:32:17</code>），亦或是一个增长的数字（<code>v100</code>）。发布的版本就像一本只能追加的账本，一旦发布就不可修改，任何的变动都应该产生一个新的发布版本。</p>\n<p>新的代码在部署之前，需要开发人员触发构建操作。但是，运行阶段不一定需要人为触发，而是可以自动进行。如服务器重启，或是进程管理器重启了一个崩溃的进程。因此，运行阶段应该保持尽可能少的模块，这样假设半夜发生系统故障而开发人员又捉襟见肘也不会引起太大问题。构建阶段是可以相对复杂一些的，因为错误信息能够立刻展示在开发人员面前，从而得到妥善处理。</p>\n<h2 id=\"VI-进程\"><a href=\"#VI-进程\" class=\"headerlink\" title=\"VI. 进程\"></a>VI. 进程</h2><blockquote>\n<p>以一个或多个无状态进程运行应用</p>\n</blockquote>\n<p>运行环境中，应用程序通常是以一个和多个 <em>进程</em> 运行的。</p>\n<p>最简单的场景中，代码是一个独立的脚本，运行环境是开发人员自己的笔记本电脑，进程由一条命令行（例如<code>python my_script.py</code>）。另外一个极端情况是，复杂的应用可能会使用很多 <a href=\"https://12factor.net/zh_cn/concurrency\">进程类型</a> ，也就是零个或多个进程实例。</p>\n<p><strong>12-Factor 应用的进程必须无状态且 <a href=\"http://en.wikipedia.org/wiki/Shared_nothing_architecture\">无共享</a> 。</strong> 任何需要持久化的数据都要存储在 <a href=\"https://12factor.net/zh_cn/backing-services\">后端服务</a> 内，比如数据库。</p>\n<p>内存区域或磁盘空间可以作为进程在做某种事务型操作时的缓存，例如下载一个很大的文件，对其操作并将结果写入数据库的过程。12-Factor应用根本不用考虑这些缓存的内容是不是可以保留给之后的请求来使用，这是因为应用启动了多种类型的进程，将来的请求多半会由其他进程来服务。即使在只有一个进程的情形下，先前保存的数据（内存或文件系统中）也会因为重启（如代码部署、配置更改、或运行环境将进程调度至另一个物理区域执行）而丢失。</p>\n<p>源文件打包工具（<a href=\"http://documentcloud.github.com/jammit/\">Jammit</a>, <a href=\"http://django-compressor.readthedocs.org/\">django-compressor</a>） 使用文件系统来缓存编译过的源文件。12-Factor 应用更倾向于在 <a href=\"https://12factor.net/zh_cn/build-release-run\">构建步骤</a> 做此动作——正如 <a href=\"http://guides.rubyonrails.org/asset_pipeline.html\">Rails资源管道</a> ，而不是在运行阶段。</p>\n<p>一些互联网系统依赖于 “<a href=\"http://en.wikipedia.org/wiki/Load_balancing_%28computing%29#Persistence\">粘性 session</a>”， 这是指将用户 session 中的数据缓存至某进程的内存中，并将同一用户的后续请求路由到同一个进程。粘性 session 是 12-Factor 极力反对的。Session 中的数据应该保存在诸如 <a href=\"http://memcached.org/\">Memcached</a> 或 <a href=\"http://redis.io/\">Redis</a> 这样的带有过期时间的缓存中。</p>\n<h2 id=\"VII-端口绑定\"><a href=\"#VII-端口绑定\" class=\"headerlink\" title=\"VII. 端口绑定\"></a>VII. 端口绑定</h2><blockquote>\n<p>通过端口绑定(Port binding)来提供服务</p>\n</blockquote>\n<p>互联网应用有时会运行于服务器的容器之中。例如 PHP 经常作为 <a href=\"http://httpd.apache.org/\">Apache HTTPD</a> 的一个模块来运行，正如 Java 运行于 <a href=\"http://tomcat.apache.org/\">Tomcat</a> 。</p>\n<p><strong>12-Factor 应用完全自我加载</strong> 而不依赖于任何网络服务器就可以创建一个面向网络的服务。互联网应用 <strong>通过端口绑定来提供服务</strong> ，并监听发送至该端口的请求。</p>\n<p>本地环境中，开发人员通过类似<code>http://localhost:5000/</code>的地址来访问服务。在线上环境中，请求统一发送至公共域名而后路由至绑定了端口的网络进程。</p>\n<p>通常的实现思路是，将网络服务器类库通过 <a href=\"https://12factor.net/zh_cn/dependencies\">依赖声明</a> 载入应用。例如，Python 的 <a href=\"http://www.tornadoweb.org/\">Tornado</a>, Ruby 的<a href=\"http://code.macournoyer.com/thin/\">Thin</a> , Java 以及其他基于 JVM 语言的 <a href=\"http://www.eclipse.org/jetty/\">Jetty</a>。完全由 <em>用户端</em> ，确切的说应该是应用的代码，发起请求。和运行环境约定好绑定的端口即可处理这些请求。</p>\n<p>HTTP 并不是唯一一个可以由端口绑定提供的服务。其实几乎所有服务器软件都可以通过进程绑定端口来等待请求。例如，使用 <a href=\"http://xmpp.org/\">XMPP</a> 的 <a href=\"http://www.ejabberd.im/\">ejabberd</a> ， 以及使用 <a href=\"http://redis.io/topics/protocol\">Redis 协议</a> 的 <a href=\"http://redis.io/\">Redis</a> 。</p>\n<p>还要指出的是，端口绑定这种方式也意味着一个应用可以成为另外一个应用的 <a href=\"https://12factor.net/zh_cn/backing-services\">后端服务</a> ，调用方将服务方提供的相应 URL 当作资源存入 <a href=\"https://12factor.net/zh_cn/config\">配置</a> 以备将来调用。</p>\n<h2 id=\"VIII-并发\"><a href=\"#VIII-并发\" class=\"headerlink\" title=\"VIII. 并发\"></a>VIII. 并发</h2><blockquote>\n<p>通过进程模型进行扩展</p>\n</blockquote>\n<p>任何计算机程序，一旦启动，就会生成一个或多个进程。互联网应用采用多种进程运行方式。例如，PHP 进程作为 Apache 的子进程存在，随请求按需启动。Java 进程则采取了相反的方式，在程序启动之初 JVM 就提供了一个超级进程储备了大量的系统资源(CPU 和内存)，并通过多线程实现内部的并发管理。上述 2 个例子中，进程是开发人员可以操作的最小单位。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/lGZVkoW.png\" alt=\"https://12factor.net/images/process-types.png\"></p>\n<p><strong>在 12-factor 应用中，进程是一等公民。</strong>12-Factor 应用的进程主要借鉴于 <a href=\"https://adam.herokuapp.com/past/2011/5/9/applying_the_unix_process_model_to_web_apps/\">unix 守护进程模型</a> 。开发人员可以运用这个模型去设计应用架构，将不同的工作分配给不同的 <em>进程类型</em> 。例如，HTTP 请求可以交给 web 进程来处理，而常驻的后台工作则交由 worker 进程负责。</p>\n<p>这并不包括个别较为特殊的进程，例如通过虚拟机的线程处理并发的内部运算，或是使用诸如 <a href=\"https://github.com/eventmachine/eventmachine\">EventMachine</a>, <a href=\"http://twistedmatrix.com/trac/\">Twisted</a>, <a href=\"http://nodejs.org/\">Node.js</a> 的异步&#x2F;事件触发模型。但一台独立的虚拟机的扩展有瓶颈（垂直扩展），所以应用程序必须可以在多台物理机器间跨进程工作。</p>\n<p>上述进程模型会在系统急需扩展时大放异彩。 <a href=\"https://12factor.net/zh_cn/processes\">12-Factor 应用的进程所具备的无共享，水平分区的特性</a> 意味着添加并发会变得简单而稳妥。这些进程的类型以及每个类型中进程的数量就被称作 <em>进程构成</em> 。</p>\n<p>12-Factor 应用的进程 <a href=\"http://dustin.github.com/2010/02/28/running-processes.html\">不需要守护进程</a> 或是写入 PID 文件。相反的，应该借助操作系统的进程管理器(例如 <a href=\"https://www.freedesktop.org/wiki/Software/systemd/\">systemd</a> ，分布式的进程管理云平台，或是类似 <a href=\"http://blog.daviddollar.org/2011/05/06/introducing-foreman.html\">Foreman</a> 的工具)，来管理 <a href=\"https://12factor.net/zh_cn/logs\">输出流</a> ，响应崩溃的进程，以及处理用户触发的重启和关闭超级进程的请求。</p>\n<h2 id=\"IX-易处理\"><a href=\"#IX-易处理\" class=\"headerlink\" title=\"IX. 易处理\"></a>IX. 易处理</h2><blockquote>\n<p>快速启动和优雅终止可最大化健壮性</p>\n</blockquote>\n<p>*<em>12-Factor 应用的 <a href=\"https://12factor.net/zh_cn/processes\">进程</a> 是 <em>易处理（disposable）</em>的，意思是说它们可以瞬间开启或停止。</em>* 这有利于快速、弹性的伸缩应用，迅速部署变化的 <a href=\"https://12factor.net/zh_cn/codebase\">代码</a> 或 <a href=\"https://12factor.net/zh_cn/config\">配置</a> ，稳健的部署应用。</p>\n<p>进程应当追求 <strong>最小启动时间</strong> 。 理想状态下，进程从敲下命令到真正启动并等待请求的时间应该只需很短的时间。更少的启动时间提供了更敏捷的 <a href=\"https://12factor.net/zh_cn/build-release-run\">发布</a> 以及扩展过程，此外还增加了健壮性，因为进程管理器可以在授权情形下容易的将进程搬到新的物理机器上。</p>\n<p>进程 <strong>一旦接收 <a href=\"http://en.wikipedia.org/wiki/SIGTERM\">终止信号（<code>SIGTERM</code>）</a> 就会优雅的终止</strong> 。就网络进程而言，优雅终止是指停止监听服务的端口，即拒绝所有新的请求，并继续执行当前已接收的请求，然后退出。此类型的进程所隐含的要求是HTTP请求大多都很短(不会超过几秒钟)，而在长时间轮询中，客户端在丢失连接后应该马上尝试重连。</p>\n<p>对于 worker 进程来说，优雅终止是指将当前任务退回队列。例如，<a href=\"http://www.rabbitmq.com/\">RabbitMQ</a> 中，worker 可以发送一个<code>[NACK](http://www.rabbitmq.com/amqp-0-9-1-quickref.html#basic.nack)</code>信号。 <a href=\"https://beanstalkd.github.io/\">Beanstalkd</a> 中，任务终止并退回队列会在worker断开时自动触发。有锁机制的系统诸如 <a href=\"https://github.com/collectiveidea/delayed_job#readme\">Delayed Job</a> 则需要确定释放了系统资源。此类型的进程所隐含的要求是，任务都应该 <a href=\"http://en.wikipedia.org/wiki/Reentrant_%28subroutine%29\">可重复执行</a> ， 这主要由将结果包装进事务或是使重复操作 <a href=\"http://en.wikipedia.org/wiki/Idempotence\">幂等</a> 来实现。</p>\n<p>进程还应当<strong>在面对突然死亡时保持健壮</strong>，例如底层硬件故障。虽然这种情况比起优雅终止来说少之又少，但终究有可能发生。一种推荐的方式是使用一个健壮的后端队列，例如 <a href=\"https://beanstalkd.github.io/\">Beanstalkd</a> ，它可以在客户端断开或超时后自动退回任务。无论如何，12-Factor 应用都应该可以设计能够应对意外的、不优雅的终结。<a href=\"http://lwn.net/Articles/191059/\">Crash-only design</a> 将这种概念转化为 <a href=\"http://couchdb.apache.org/docs/overview.html\">合乎逻辑的理论</a>。</p>\n<h2 id=\"X-开发环境与线上环境等价\"><a href=\"#X-开发环境与线上环境等价\" class=\"headerlink\" title=\"X. 开发环境与线上环境等价\"></a>X. 开发环境与线上环境等价</h2><blockquote>\n<p>尽可能的保持开发，预发布，线上环境相同</p>\n</blockquote>\n<p>从以往经验来看，开发环境（即开发人员的本地 <a href=\"https://12factor.net/zh_cn/codebase\">部署</a>）和线上环境（外部用户访问的真实部署）之间存在着很多差异。这些差异表现在以下三个方面：</p>\n<ul>\n<li><strong>时间差异：</strong> 开发人员正在编写的代码可能需要几天，几周，甚至几个月才会上线。</li>\n<li><strong>人员差异：</strong> 开发人员编写代码，运维人员部署代码。</li>\n<li><strong>工具差异：</strong> 开发人员或许使用 Nginx，SQLite，OS X，而线上环境使用 Apache，MySQL 以及 Linux。</li>\n</ul>\n<p><strong>12-Factor 应用想要做到 <a href=\"http://avc.com/2011/02/continuous-deployment/\">持续部署</a> 就必须缩小本地与线上差异。</strong> 再回头看上面所描述的三个差异:</p>\n<ul>\n<li>缩小时间差异：开发人员可以几小时，甚至几分钟就部署代码。</li>\n<li>缩小人员差异：开发人员不只要编写代码，更应该密切参与部署过程以及代码在线上的表现。</li>\n<li>缩小工具差异：尽量保证开发环境以及线上环境的一致性。</li>\n</ul>\n<p>将上述总结变为一个表格如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>传统应用</th>\n<th>12-Factor 应用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>每次部署间隔</td>\n<td>数周</td>\n<td>几小时</td>\n</tr>\n<tr>\n<td>开发人员 vs 运维人员</td>\n<td>不同的人</td>\n<td>相同的人</td>\n</tr>\n<tr>\n<td>开发环境 vs 线上环境</td>\n<td>不同</td>\n<td>尽量接近</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://12factor.net/zh_cn/backing-services\">后端服务</a> 是保持开发与线上等价的重要部分，例如数据库，队列系统，以及缓存。许多语言都提供了简化获取后端服务的类库，例如不同类型服务的 <em>适配器</em> 。下列表格提供了一些例子。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>语言</th>\n<th>类库</th>\n<th>适配器</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据库</td>\n<td>Ruby&#x2F;Rails</td>\n<td>ActiveRecord</td>\n<td>MySQL, PostgreSQL, SQLite</td>\n</tr>\n<tr>\n<td>队列</td>\n<td>Python&#x2F;Django</td>\n<td>Celery</td>\n<td>RabbitMQ, Beanstalkd, Redis</td>\n</tr>\n<tr>\n<td>缓存</td>\n<td>Ruby&#x2F;Rails</td>\n<td>ActiveSupport::Cache</td>\n<td>Memory, filesystem, Memcached</td>\n</tr>\n</tbody></table>\n<p>开发人员有时会觉得在本地环境中使用轻量的后端服务具有很强的吸引力，而那些更重量级的健壮的后端服务应该使用在生产环境。例如，本地使用 SQLite 线上使用 PostgreSQL；又如本地缓存在进程内存中而线上存入 Memcached。</p>\n<p><strong>12-Factor 应用的开发人员应该反对在不同环境间使用不同的后端服务</strong> ，即使适配器已经可以几乎消除使用上的差异。这是因为，不同的后端服务意味着会突然出现的不兼容，从而导致测试、预发布都正常的代码在线上出现问题。这些错误会给持续部署带来阻力。从应用程序的生命周期来看，消除这种阻力需要花费很大的代价。</p>\n<p>与此同时，轻量的本地服务也不像以前那样引人注目。借助于<a href=\"http://mxcl.github.com/homebrew/\">Homebrew</a>，<a href=\"https://help.ubuntu.com/community/AptGet/Howto\">apt-get</a>等现代的打包系统，诸如Memcached、PostgreSQL、RabbitMQ 等后端服务的安装与运行也并不复杂。此外，使用类似 <a href=\"http://www.opscode.com/chef/\">Chef</a> 和 <a href=\"http://docs.puppetlabs.com/\">Puppet</a> 的声明式配置工具，结合像 <a href=\"http://vagrantup.com/\">Vagrant</a> 这样轻量的虚拟环境就可以使得开发人员的本地环境与线上环境无限接近。与同步环境和持续部署所带来的益处相比，安装这些系统显然是值得的。</p>\n<p>不同后端服务的适配器仍然是有用的，因为它们可以使移植后端服务变得简单。但应用的所有部署，这其中包括开发、预发布以及线上环境，都应该使用同一个后端服务的相同版本。</p>\n<h2 id=\"XI-日志\"><a href=\"#XI-日志\" class=\"headerlink\" title=\"XI. 日志\"></a>XI. 日志</h2><blockquote>\n<p>把日志当作事件流</p>\n</blockquote>\n<p><em>日志</em> 使得应用程序运行的动作变得透明。在基于服务器的环境中，日志通常被写在硬盘的一个文件里，但这只是一种输出格式。</p>\n<p>日志应该是 <a href=\"https://adam.herokuapp.com/past/2011/4/1/logs_are_streams_not_files/\">事件流</a> 的汇总，将所有运行中进程和后端服务的输出流按照时间顺序收集起来。尽管在回溯问题时可能需要看很多行，日志最原始的格式确实是一个事件一行。日志没有确定开始和结束，但随着应用在运行会持续的增加。</p>\n<p><strong>12-factor应用本身从不考虑存储自己的输出流。</strong> 不应该试图去写或者管理日志文件。相反，每一个运行的进程都会直接的标准输出（<code>stdout</code>）事件流。开发环境中，开发人员可以通过这些数据流，实时在终端看到应用的活动。</p>\n<p>在预发布或线上部署中，每个进程的输出流由运行环境截获，并将其他输出流整理在一起，然后一并发送给一个或多个最终的处理程序，用于查看或是长期存档。这些存档路径对于应用来说不可见也不可配置，而是完全交给程序的运行环境管理。类似 <a href=\"https://github.com/heroku/logplex\">Logplex</a> 和 <a href=\"https://github.com/fluent/fluentd\">Fluentd</a> 的开源工具可以达到这个目的。</p>\n<p>这些事件流可以输出至文件，或者在终端实时观察。最重要的，输出流可以发送到 <a href=\"http://www.splunk.com/\">Splunk</a> 这样的日志索引及分析系统，或 <a href=\"http://hive.apache.org/\">Hadoop&#x2F;Hive</a> 这样的通用数据存储系统。这些系统为查看应用的历史活动提供了强大而灵活的功能，包括：</p>\n<ul>\n<li>找出过去一段时间特殊的事件。</li>\n<li>图形化一个大规模的趋势，比如每分钟的请求量。</li>\n<li>根据用户定义的条件实时触发警报，比如每分钟的报错超过某个警戒线。</li>\n</ul>\n<h2 id=\"XII-管理进程\"><a href=\"#XII-管理进程\" class=\"headerlink\" title=\"XII. 管理进程\"></a>XII. 管理进程</h2><blockquote>\n<p>后台管理任务当作一次性进程运行</p>\n</blockquote>\n<p><a href=\"https://12factor.net/zh_cn/concurrency\">进程构成</a>（process formation）是指用来处理应用的常规业务（比如处理 web 请求）的一组进程。与此不同，开发人员经常希望执行一些管理或维护应用的一次性任务，例如：</p>\n<ul>\n<li>运行数据移植（Django 中的 <code>manage.py migrate</code>, Rails 中的 <code>rake db:migrate</code>）。</li>\n<li>运行一个控制台（也被称为 <a href=\"http://en.wikipedia.org/wiki/Read-eval-print_loop\">REPL</a> shell），来执行一些代码或是针对线上数据库做一些检查。大多数语言都通过解释器提供了一个 REPL 工具（<code>python</code> 或 <code>perl</code>） ，或是其他命令（Ruby 使用 <code>irb</code>, Rails 使用 <code>rails console</code>）。</li>\n<li>运行一些提交到代码仓库的一次性脚本。</li>\n</ul>\n<p>一次性管理进程应该和正常的 <a href=\"https://12factor.net/zh_cn/processes\">常驻进程</a> 使用同样的环境。这些管理进程和任何其他的进程一样使用相同的 <a href=\"https://12factor.net/zh_cn/codebase\">代码</a> 和 <a href=\"https://12factor.net/zh_cn/config\">配置</a> ，基于某个 <a href=\"https://12factor.net/zh_cn/build-release-run\">发布版本</a> 运行。后台管理代码应该随其他应用程序代码一起发布，从而避免同步问题。</p>\n<p>所有进程类型应该使用同样的 <a href=\"https://12factor.net/zh_cn/dependencies\">依赖隔离</a> 技术。例如，如果Ruby的web进程使用了命令 <code>bundle exec thin start</code> ，那么数据库移植应使用 <code>bundle exec rake db:migrate</code> 。同样的，如果一个 Python 程序使用了 Virtualenv，则需要在运行 Tornado Web 服务器和任何 <code>manage.py</code> 管理进程时引入 <code>bin/python</code> 。</p>\n<p>12-factor 尤其青睐那些提供了 REPL shell 的语言，因为那会让运行一次性脚本变得简单。在本地部署中，开发人员直接在命令行使用 shell 命令调用一次性管理进程。在线上部署中，开发人员依旧可以使用ssh或是运行环境提供的其他机制来运行这样的进程。</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h1 id=\"开发SaaS应用的12条准则【转】\"><a href=\"#开发SaaS应用的12条准则【转】\" class=\"headerlink\" title=\"开发SaaS应用的12条准则【转】\"></a>开发SaaS应用的12条准则【转】</h1><blockquote>\n<p>原文地址：<a href=\"https://12factor.net/\">https://12factor.net/</a></p>\n</blockquote>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>如今，软件通常会作为一种服务来交付，它们被称为网络应用程序，或软件即服务（SaaS）。12-Factor 为构建如下的 SaaS 应用提供了方法论：</p>\n<ul>\n<li>使用<strong>标准化</strong>流程自动配置，从而使新的开发者花费最少的学习成本加入这个项目。</li>\n<li>和操作系统之间尽可能的<strong>划清界限</strong>，在各个系统中提供<strong>最大的可移植性</strong>。</li>\n<li>适合<strong>部署</strong>在现代的<strong>云计算平台</strong>，从而在服务器和系统管理方面节省资源。</li>\n<li>将开发环境和生产环境的<strong>差异降至最低</strong>，并使用<strong>持续交付</strong>实施敏捷开发。</li>\n<li>可以在工具、架构和开发流程不发生明显变化的前提下实现<strong>扩展</strong>。</li>\n</ul>\n<p>这套理论适用于任意语言和后端服务（数据库、消息队列、缓存等）开发的应用程序。</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>本文的贡献者参与过数以百计的应用程序的开发和部署，并通过 <a href=\"http://www.heroku.com/\">Heroku</a> 平台间接见证了数十万应用程序的开发，运作以及扩展的过程。</p>\n<p>本文综合了我们关于 SaaS 应用几乎所有的经验和智慧，是开发此类应用的理想实践标准，并特别关注于应用程序如何保持良性成长，开发者之间如何进行有效的代码协作，以及如何 <a href=\"http://blog.heroku.com/archives/2011/6/28/the_new_heroku_4_erosion_resistance_explicit_contracts/\">避免软件污染</a> 。</p>\n<p>我们的初衷是分享在现代软件开发过程中发现的一些系统性问题，并加深对这些问题的认识。我们提供了讨论这些问题时所需的共享词汇，同时使用相关术语给出一套针对这些问题的广义解决方案。本文格式的灵感来自于 Martin Fowler 的书籍： <em><a href=\"http://books.google.com/books/about/Patterns_of_enterprise_application_archi.html?id=FyWZt5DdvFkC\">Patterns of Enterprise Application Architecture</a></em> ， <em><a href=\"http://books.google.com/books/about/Refactoring.html?id=1MsETFPD3I0C\">Refactoring</a></em> 。</p>\n<h2 id=\"读者应该是哪些人？\"><a href=\"#读者应该是哪些人？\" class=\"headerlink\" title=\"读者应该是哪些人？\"></a>读者应该是哪些人？</h2><p>任何 SaaS 应用的开发人员。部署和管理此类应用的运维工程师。</p>\n<hr>\n<h2 id=\"I-基准代码\"><a href=\"#I-基准代码\" class=\"headerlink\" title=\"I. 基准代码\"></a>I. 基准代码</h2><blockquote>\n<p>一份基准代码（Codebase），多份部署（deploy）</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/tvR5L1V.png\" alt=\"https://12factor.net/images/codebase-deploys.png\"></p>\n<p>12-Factor应用(译者注：应该是说一个使用本文概念来设计的应用，下同)通常会使用版本控制系统加以管理，如<a href=\"http://git-scm.com/\">Git</a>, <a href=\"https://www.mercurial-scm.org/\">Mercurial</a>, <a href=\"http://subversion.apache.org/\">Subversion</a>。一份用来跟踪代码所有修订版本的数据库被称作 <em>代码库</em>（code repository, code repo, repo）。</p>\n<p>在类似 SVN 这样的集中式版本控制系统中，<em>基准代码</em> 就是指控制系统中的这一份代码库；而在 Git 那样的分布式版本控制系统中，<em>基准代码</em> 则是指最上游的那份代码库。</p>\n<p>基准代码和应用之间总是保持一一对应的关系：</p>\n<ul>\n<li>一旦有多个基准代码，就不能称为一个应用，而是一个分布式系统。分布式系统中的每一个组件都是一个应用，每一个应用可以分别使用 12-Factor 进行开发。</li>\n<li>多个应用共享一份基准代码是有悖于 12-Factor 原则的。解决方案是将共享的代码拆分为独立的类库，然后使用 <a href=\"https://12factor.net/zh_cn/dependencies\">依赖管理</a> 策略去加载它们。</li>\n</ul>\n<p>尽管每个应用只对应一份基准代码，但可以同时存在多份部署。每份 <em>部署</em> 相当于运行了一个应用的实例。通常会有一个生产环境，一个或多个预发布环境。此外，每个开发人员都会在自己本地环境运行一个应用实例，这些都相当于一份部署。</p>\n<p>所有部署的基准代码相同，但每份部署可以使用其不同的版本。比如，开发人员可能有一些提交还没有同步至预发布环境；预发布环境也有一些提交没有同步至生产环境。但它们都共享一份基准代码，我们就认为它们只是相同应用的不同部署而已。</p>\n<h2 id=\"II-依赖\"><a href=\"#II-依赖\" class=\"headerlink\" title=\"II. 依赖\"></a>II. 依赖</h2><blockquote>\n<p>显式声明依赖关系（ dependency ）</p>\n</blockquote>\n<p>大多数编程语言都会提供一个打包系统，用来为各个类库提供打包服务，就像 Perl 的 <a href=\"http://www.cpan.org/\">CPAN</a> 或是 Ruby 的 <a href=\"http://rubygems.org/\">Rubygems</a> 。通过打包系统安装的类库可以是系统级的（称之为 “site packages”），或仅供某个应用程序使用，部署在相应的目录中（称之为 “vendoring” 或 “bunding”）。</p>\n<p><strong>12-Factor规则下的应用程序不会隐式依赖系统级的类库。</strong> 它一定通过 <em>依赖清单</em> ，确切地声明所有依赖项。此外，在运行过程中通过 <em>依赖隔离</em> 工具来确保程序不会调用系统中存在但清单中未声明的依赖项。这一做法会统一应用到生产和开发环境。</p>\n<p>例如， Ruby 的 <a href=\"https://bundler.io/\">Bundler</a> 使用 <code>Gemfile</code> 作为依赖项声明清单，使用 <code>bundle exec</code> 来进行依赖隔离。Python 中则可分别使用两种工具 – <a href=\"http://www.pip-installer.org/en/latest/\">Pip</a> 用作依赖声明， <a href=\"http://www.virtualenv.org/en/latest/\">Virtualenv</a> 用作依赖隔离。甚至 C 语言也有类似工具， <a href=\"http://www.gnu.org/s/autoconf/\">Autoconf</a> 用作依赖声明，静态链接库用作依赖隔离。无论用什么工具，依赖声明和依赖隔离必须一起使用，否则无法满足 12-Factor 规范。</p>\n<p>显式声明依赖的优点之一是为新进开发者简化了环境配置流程。新进开发者可以检出应用程序的基准代码，安装编程语言环境和它对应的依赖管理工具，只需通过一个 <em>构建命令</em> 来安装所有的依赖项，即可开始工作。例如，Ruby&#x2F;Bundler 下使用 <code>bundle install</code>，而 Clojure&#x2F;<a href=\"https://github.com/technomancy/leiningen#readme\">Leiningen</a> 则是 <code>lein deps</code>。</p>\n<p>12-Factor 应用同样不会隐式依赖某些系统工具，如 ImageMagick 或是<code>curl</code>。即使这些工具存在于几乎所有系统，但终究无法保证所有未来的系统都能支持应用顺利运行，或是能够和应用兼容。如果应用必须使用到某些系统工具，那么这些工具应该被包含在应用之中。</p>\n<h2 id=\"III-配置\"><a href=\"#III-配置\" class=\"headerlink\" title=\"III. 配置\"></a>III. 配置</h2><blockquote>\n<p>在环境中存储配置</p>\n</blockquote>\n<p>通常，应用的 <em>配置</em> 在不同 <a href=\"https://12factor.net/zh_cn/codebase\">部署</a> (预发布、生产环境、开发环境等等)间会有很大差异。这其中包括：</p>\n<ul>\n<li>数据库，Memcached，以及其他 <a href=\"https://12factor.net/zh_cn/backing-services\">后端服务</a> 的配置</li>\n<li>第三方服务的证书，如 Amazon S3、Twitter 等</li>\n<li>每份部署特有的配置，如域名等</li>\n</ul>\n<p>有些应用在代码中使用常量保存配置，这与 12-Factor 所要求的<strong>代码和配置严格分离</strong>显然大相径庭。配置文件在各部署间存在大幅差异，代码却完全一致。</p>\n<p>判断一个应用是否正确地将配置排除在代码之外，一个简单的方法是看该应用的基准代码是否可以立刻开源，而不用担心会暴露任何敏感的信息。</p>\n<p>需要指出的是，这里定义的“配置”并<strong>不</strong>包括应用的内部配置，比如 Rails 的 <code>config/routes.rb</code>，或是使用 <a href=\"http://spring.io/\">Spring</a> 时 <a href=\"http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html\">代码模块间的依赖注入关系</a> 。这类配置在不同部署间不存在差异，所以应该写入代码。</p>\n<p>另外一个解决方法是使用配置文件，但不把它们纳入版本控制系统，就像 Rails 的 <code>config/database.yml</code> 。这相对于在代码中使用常量已经是长足进步，但仍然有缺点：总是会不小心将配置文件签入了代码库；配置文件的可能会分散在不同的目录，并有着不同的格式，这让找出一个地方来统一管理所有配置变的不太现实。更糟的是，这些格式通常是语言或框架特定的。</p>\n<p><strong>12-Factor推荐将应用的配置存储于 <em>环境变量</em> 中</strong>（ <em>env vars</em>, <em>env</em> ）。环境变量可以非常方便地在不同的部署间做修改，却不动一行代码；与配置文件不同，不小心把它们签入代码库的概率微乎其微；与一些传统的解决配置问题的机制（比如 Java 的属性配置文件）相比，环境变量与语言和系统无关。</p>\n<p>配置管理的另一个方面是分组。有时应用会将配置按照特定部署进行分组（或叫做“环境”），例如Rails中的 <code>development</code>,<code>test</code>, 和 <code>production</code> 环境。这种方法无法轻易扩展：更多部署意味着更多新的环境，例如 <code>staging</code> 或 <code>qa</code> 。 随着项目的不断深入，开发人员可能还会添加他们自己的环境，比如 <code>joes-staging</code> ，这将导致各种配置组合的激增，从而给管理部署增加了很多不确定因素。</p>\n<p>12-Factor 应用中，环境变量的粒度要足够小，且相对独立。它们永远也不会组合成一个所谓的“环境”，而是独立存在于每个部署之中。当应用程序不断扩展，需要更多种类的部署时，这种配置管理方式能够做到平滑过渡。</p>\n<h2 id=\"IV-后端服务\"><a href=\"#IV-后端服务\" class=\"headerlink\" title=\"IV. 后端服务\"></a>IV. 后端服务</h2><blockquote>\n<p>把后端服务(backing services)当作附加资源</p>\n</blockquote>\n<p><em>后端服务</em>是指程序运行所需要的通过网络调用的各种服务，如数据库（<a href=\"http://dev.mysql.com/\">MySQL</a>，<a href=\"http://couchdb.apache.org/\">CouchDB</a>），消息&#x2F;队列系统（<a href=\"http://www.rabbitmq.com/\">RabbitMQ</a>，<a href=\"https://beanstalkd.github.io/\">Beanstalkd</a>），SMTP 邮件发送服务（<a href=\"http://www.postfix.org/\">Postfix</a>），以及缓存系统（<a href=\"http://memcached.org/\">Memcached</a>）。</p>\n<p>类似数据库的后端服务，通常由部署应用程序的系统管理员一起管理。除了本地服务之外，应用程序有可能使用了第三方发布和管理的服务。示例包括 SMTP（例如 <a href=\"http://postmarkapp.com/\">Postmark</a>），数据收集服务（例如 <a href=\"http://newrelic.com/\">New Relic</a> 或 <a href=\"http://www.loggly.com/\">Loggly</a>），数据存储服务（如 <a href=\"http://http//aws.amazon.com/s3/\">Amazon S3</a>），以及使用 API 访问的服务（例如 <a href=\"http://dev.twitter.com/\">Twitter</a>, <a href=\"https://developers.google.com/maps/\">Google Maps</a>, <a href=\"http://www.last.fm/api\">Last.fm</a>）。</p>\n<p><strong>12-Factor 应用不会区别对待本地或第三方服务。</strong> 对应用程序而言，两种都是附加资源，通过一个 url 或是其他存储在 <a href=\"https://12factor.net/zh_cn/config\">配置</a> 中的服务定位&#x2F;服务证书来获取数据。12-Factor 应用的任意 <a href=\"https://12factor.net/zh_cn/codebase\">部署</a> ，都应该可以在不进行任何代码改动的情况下，将本地 MySQL 数据库换成第三方服务（例如 <a href=\"http://aws.amazon.com/rds/\">Amazon RDS</a>）。类似的，本地 SMTP 服务应该也可以和第三方 SMTP 服务（例如 Postmark ）互换。上述 2 个例子中，仅需修改配置中的资源地址。</p>\n<p>每个不同的后端服务是一份 <em>资源</em> 。例如，一个 MySQL 数据库是一个资源，两个 MySQL 数据库（用来数据分区）就被当作是 2 个不同的资源。12-Factor 应用将这些数据库都视作 <em>附加资源</em> ，这些资源和它们附属的部署保持松耦合。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XzCS6LB-20211008161426619.png\" alt=\"https://12factor.net/images/attached-resources.png\"></p>\n<p>部署可以按需加载或卸载资源。例如，如果应用的数据库服务由于硬件问题出现异常，管理员可以从最近的备份中恢复一个数据库，卸载当前的数据库，然后加载新的数据库 – 整个过程都不需要修改代码。</p>\n<h2 id=\"V-构建，发布，运行\"><a href=\"#V-构建，发布，运行\" class=\"headerlink\" title=\"V. 构建，发布，运行\"></a>V. 构建，发布，运行</h2><blockquote>\n<p>严格分离构建和运行</p>\n</blockquote>\n<p><a href=\"https://12factor.net/zh_cn/codebase\">基准代码</a> 转化为一份部署(非开发环境)需要以下三个阶段：</p>\n<ul>\n<li><em>构建阶段</em> 是指将代码仓库转化为可执行包的过程。构建时会使用指定版本的代码，获取和打包 <a href=\"https://12factor.net/zh_cn/dependencies\">依赖项</a>，编译成二进制文件和资源文件。</li>\n<li><em>发布阶段</em> 会将构建的结果和当前部署所需 <a href=\"https://12factor.net/zh_cn/config\">配置</a> 相结合，并能够立刻在运行环境中投入使用。</li>\n<li><em>运行阶段</em> （或者说“运行时”）是指针对选定的发布版本，在执行环境中启动一系列应用程序 <a href=\"https://12factor.net/zh_cn/processes\">进程</a>。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/4fVsaeA.png\" alt=\"https://12factor.net/images/release.png\"></p>\n<p><strong>12-factor 应用严格区分构建，发布，运行这三个步骤。</strong> 举例来说，直接修改处于运行状态的代码是非常不可取的做法，因为这些修改很难再同步回构建步骤。</p>\n<p>部署工具通常都提供了发布管理工具，最引人注目的功能是退回至较旧的发布版本。比如， <a href=\"https://github.com/capistrano/capistrano/wiki\">Capistrano</a> 将所有发布版本都存储在一个叫 <code>releases</code> 的子目录中，当前的在线版本只需映射至对应的目录即可。该工具的 <code>rollback</code> 命令可以很容易地实现回退版本的功能。</p>\n<p>每一个发布版本必须对应一个唯一的发布 ID，例如可以使用发布时的时间戳（<code>2011-04-06-20:32:17</code>），亦或是一个增长的数字（<code>v100</code>）。发布的版本就像一本只能追加的账本，一旦发布就不可修改，任何的变动都应该产生一个新的发布版本。</p>\n<p>新的代码在部署之前，需要开发人员触发构建操作。但是，运行阶段不一定需要人为触发，而是可以自动进行。如服务器重启，或是进程管理器重启了一个崩溃的进程。因此，运行阶段应该保持尽可能少的模块，这样假设半夜发生系统故障而开发人员又捉襟见肘也不会引起太大问题。构建阶段是可以相对复杂一些的，因为错误信息能够立刻展示在开发人员面前，从而得到妥善处理。</p>\n<h2 id=\"VI-进程\"><a href=\"#VI-进程\" class=\"headerlink\" title=\"VI. 进程\"></a>VI. 进程</h2><blockquote>\n<p>以一个或多个无状态进程运行应用</p>\n</blockquote>\n<p>运行环境中，应用程序通常是以一个和多个 <em>进程</em> 运行的。</p>\n<p>最简单的场景中，代码是一个独立的脚本，运行环境是开发人员自己的笔记本电脑，进程由一条命令行（例如<code>python my_script.py</code>）。另外一个极端情况是，复杂的应用可能会使用很多 <a href=\"https://12factor.net/zh_cn/concurrency\">进程类型</a> ，也就是零个或多个进程实例。</p>\n<p><strong>12-Factor 应用的进程必须无状态且 <a href=\"http://en.wikipedia.org/wiki/Shared_nothing_architecture\">无共享</a> 。</strong> 任何需要持久化的数据都要存储在 <a href=\"https://12factor.net/zh_cn/backing-services\">后端服务</a> 内，比如数据库。</p>\n<p>内存区域或磁盘空间可以作为进程在做某种事务型操作时的缓存，例如下载一个很大的文件，对其操作并将结果写入数据库的过程。12-Factor应用根本不用考虑这些缓存的内容是不是可以保留给之后的请求来使用，这是因为应用启动了多种类型的进程，将来的请求多半会由其他进程来服务。即使在只有一个进程的情形下，先前保存的数据（内存或文件系统中）也会因为重启（如代码部署、配置更改、或运行环境将进程调度至另一个物理区域执行）而丢失。</p>\n<p>源文件打包工具（<a href=\"http://documentcloud.github.com/jammit/\">Jammit</a>, <a href=\"http://django-compressor.readthedocs.org/\">django-compressor</a>） 使用文件系统来缓存编译过的源文件。12-Factor 应用更倾向于在 <a href=\"https://12factor.net/zh_cn/build-release-run\">构建步骤</a> 做此动作——正如 <a href=\"http://guides.rubyonrails.org/asset_pipeline.html\">Rails资源管道</a> ，而不是在运行阶段。</p>\n<p>一些互联网系统依赖于 “<a href=\"http://en.wikipedia.org/wiki/Load_balancing_%28computing%29#Persistence\">粘性 session</a>”， 这是指将用户 session 中的数据缓存至某进程的内存中，并将同一用户的后续请求路由到同一个进程。粘性 session 是 12-Factor 极力反对的。Session 中的数据应该保存在诸如 <a href=\"http://memcached.org/\">Memcached</a> 或 <a href=\"http://redis.io/\">Redis</a> 这样的带有过期时间的缓存中。</p>\n<h2 id=\"VII-端口绑定\"><a href=\"#VII-端口绑定\" class=\"headerlink\" title=\"VII. 端口绑定\"></a>VII. 端口绑定</h2><blockquote>\n<p>通过端口绑定(Port binding)来提供服务</p>\n</blockquote>\n<p>互联网应用有时会运行于服务器的容器之中。例如 PHP 经常作为 <a href=\"http://httpd.apache.org/\">Apache HTTPD</a> 的一个模块来运行，正如 Java 运行于 <a href=\"http://tomcat.apache.org/\">Tomcat</a> 。</p>\n<p><strong>12-Factor 应用完全自我加载</strong> 而不依赖于任何网络服务器就可以创建一个面向网络的服务。互联网应用 <strong>通过端口绑定来提供服务</strong> ，并监听发送至该端口的请求。</p>\n<p>本地环境中，开发人员通过类似<code>http://localhost:5000/</code>的地址来访问服务。在线上环境中，请求统一发送至公共域名而后路由至绑定了端口的网络进程。</p>\n<p>通常的实现思路是，将网络服务器类库通过 <a href=\"https://12factor.net/zh_cn/dependencies\">依赖声明</a> 载入应用。例如，Python 的 <a href=\"http://www.tornadoweb.org/\">Tornado</a>, Ruby 的<a href=\"http://code.macournoyer.com/thin/\">Thin</a> , Java 以及其他基于 JVM 语言的 <a href=\"http://www.eclipse.org/jetty/\">Jetty</a>。完全由 <em>用户端</em> ，确切的说应该是应用的代码，发起请求。和运行环境约定好绑定的端口即可处理这些请求。</p>\n<p>HTTP 并不是唯一一个可以由端口绑定提供的服务。其实几乎所有服务器软件都可以通过进程绑定端口来等待请求。例如，使用 <a href=\"http://xmpp.org/\">XMPP</a> 的 <a href=\"http://www.ejabberd.im/\">ejabberd</a> ， 以及使用 <a href=\"http://redis.io/topics/protocol\">Redis 协议</a> 的 <a href=\"http://redis.io/\">Redis</a> 。</p>\n<p>还要指出的是，端口绑定这种方式也意味着一个应用可以成为另外一个应用的 <a href=\"https://12factor.net/zh_cn/backing-services\">后端服务</a> ，调用方将服务方提供的相应 URL 当作资源存入 <a href=\"https://12factor.net/zh_cn/config\">配置</a> 以备将来调用。</p>\n<h2 id=\"VIII-并发\"><a href=\"#VIII-并发\" class=\"headerlink\" title=\"VIII. 并发\"></a>VIII. 并发</h2><blockquote>\n<p>通过进程模型进行扩展</p>\n</blockquote>\n<p>任何计算机程序，一旦启动，就会生成一个或多个进程。互联网应用采用多种进程运行方式。例如，PHP 进程作为 Apache 的子进程存在，随请求按需启动。Java 进程则采取了相反的方式，在程序启动之初 JVM 就提供了一个超级进程储备了大量的系统资源(CPU 和内存)，并通过多线程实现内部的并发管理。上述 2 个例子中，进程是开发人员可以操作的最小单位。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/lGZVkoW.png\" alt=\"https://12factor.net/images/process-types.png\"></p>\n<p><strong>在 12-factor 应用中，进程是一等公民。</strong>12-Factor 应用的进程主要借鉴于 <a href=\"https://adam.herokuapp.com/past/2011/5/9/applying_the_unix_process_model_to_web_apps/\">unix 守护进程模型</a> 。开发人员可以运用这个模型去设计应用架构，将不同的工作分配给不同的 <em>进程类型</em> 。例如，HTTP 请求可以交给 web 进程来处理，而常驻的后台工作则交由 worker 进程负责。</p>\n<p>这并不包括个别较为特殊的进程，例如通过虚拟机的线程处理并发的内部运算，或是使用诸如 <a href=\"https://github.com/eventmachine/eventmachine\">EventMachine</a>, <a href=\"http://twistedmatrix.com/trac/\">Twisted</a>, <a href=\"http://nodejs.org/\">Node.js</a> 的异步&#x2F;事件触发模型。但一台独立的虚拟机的扩展有瓶颈（垂直扩展），所以应用程序必须可以在多台物理机器间跨进程工作。</p>\n<p>上述进程模型会在系统急需扩展时大放异彩。 <a href=\"https://12factor.net/zh_cn/processes\">12-Factor 应用的进程所具备的无共享，水平分区的特性</a> 意味着添加并发会变得简单而稳妥。这些进程的类型以及每个类型中进程的数量就被称作 <em>进程构成</em> 。</p>\n<p>12-Factor 应用的进程 <a href=\"http://dustin.github.com/2010/02/28/running-processes.html\">不需要守护进程</a> 或是写入 PID 文件。相反的，应该借助操作系统的进程管理器(例如 <a href=\"https://www.freedesktop.org/wiki/Software/systemd/\">systemd</a> ，分布式的进程管理云平台，或是类似 <a href=\"http://blog.daviddollar.org/2011/05/06/introducing-foreman.html\">Foreman</a> 的工具)，来管理 <a href=\"https://12factor.net/zh_cn/logs\">输出流</a> ，响应崩溃的进程，以及处理用户触发的重启和关闭超级进程的请求。</p>\n<h2 id=\"IX-易处理\"><a href=\"#IX-易处理\" class=\"headerlink\" title=\"IX. 易处理\"></a>IX. 易处理</h2><blockquote>\n<p>快速启动和优雅终止可最大化健壮性</p>\n</blockquote>\n<p>*<em>12-Factor 应用的 <a href=\"https://12factor.net/zh_cn/processes\">进程</a> 是 <em>易处理（disposable）</em>的，意思是说它们可以瞬间开启或停止。</em>* 这有利于快速、弹性的伸缩应用，迅速部署变化的 <a href=\"https://12factor.net/zh_cn/codebase\">代码</a> 或 <a href=\"https://12factor.net/zh_cn/config\">配置</a> ，稳健的部署应用。</p>\n<p>进程应当追求 <strong>最小启动时间</strong> 。 理想状态下，进程从敲下命令到真正启动并等待请求的时间应该只需很短的时间。更少的启动时间提供了更敏捷的 <a href=\"https://12factor.net/zh_cn/build-release-run\">发布</a> 以及扩展过程，此外还增加了健壮性，因为进程管理器可以在授权情形下容易的将进程搬到新的物理机器上。</p>\n<p>进程 <strong>一旦接收 <a href=\"http://en.wikipedia.org/wiki/SIGTERM\">终止信号（<code>SIGTERM</code>）</a> 就会优雅的终止</strong> 。就网络进程而言，优雅终止是指停止监听服务的端口，即拒绝所有新的请求，并继续执行当前已接收的请求，然后退出。此类型的进程所隐含的要求是HTTP请求大多都很短(不会超过几秒钟)，而在长时间轮询中，客户端在丢失连接后应该马上尝试重连。</p>\n<p>对于 worker 进程来说，优雅终止是指将当前任务退回队列。例如，<a href=\"http://www.rabbitmq.com/\">RabbitMQ</a> 中，worker 可以发送一个<code>[NACK](http://www.rabbitmq.com/amqp-0-9-1-quickref.html#basic.nack)</code>信号。 <a href=\"https://beanstalkd.github.io/\">Beanstalkd</a> 中，任务终止并退回队列会在worker断开时自动触发。有锁机制的系统诸如 <a href=\"https://github.com/collectiveidea/delayed_job#readme\">Delayed Job</a> 则需要确定释放了系统资源。此类型的进程所隐含的要求是，任务都应该 <a href=\"http://en.wikipedia.org/wiki/Reentrant_%28subroutine%29\">可重复执行</a> ， 这主要由将结果包装进事务或是使重复操作 <a href=\"http://en.wikipedia.org/wiki/Idempotence\">幂等</a> 来实现。</p>\n<p>进程还应当<strong>在面对突然死亡时保持健壮</strong>，例如底层硬件故障。虽然这种情况比起优雅终止来说少之又少，但终究有可能发生。一种推荐的方式是使用一个健壮的后端队列，例如 <a href=\"https://beanstalkd.github.io/\">Beanstalkd</a> ，它可以在客户端断开或超时后自动退回任务。无论如何，12-Factor 应用都应该可以设计能够应对意外的、不优雅的终结。<a href=\"http://lwn.net/Articles/191059/\">Crash-only design</a> 将这种概念转化为 <a href=\"http://couchdb.apache.org/docs/overview.html\">合乎逻辑的理论</a>。</p>\n<h2 id=\"X-开发环境与线上环境等价\"><a href=\"#X-开发环境与线上环境等价\" class=\"headerlink\" title=\"X. 开发环境与线上环境等价\"></a>X. 开发环境与线上环境等价</h2><blockquote>\n<p>尽可能的保持开发，预发布，线上环境相同</p>\n</blockquote>\n<p>从以往经验来看，开发环境（即开发人员的本地 <a href=\"https://12factor.net/zh_cn/codebase\">部署</a>）和线上环境（外部用户访问的真实部署）之间存在着很多差异。这些差异表现在以下三个方面：</p>\n<ul>\n<li><strong>时间差异：</strong> 开发人员正在编写的代码可能需要几天，几周，甚至几个月才会上线。</li>\n<li><strong>人员差异：</strong> 开发人员编写代码，运维人员部署代码。</li>\n<li><strong>工具差异：</strong> 开发人员或许使用 Nginx，SQLite，OS X，而线上环境使用 Apache，MySQL 以及 Linux。</li>\n</ul>\n<p><strong>12-Factor 应用想要做到 <a href=\"http://avc.com/2011/02/continuous-deployment/\">持续部署</a> 就必须缩小本地与线上差异。</strong> 再回头看上面所描述的三个差异:</p>\n<ul>\n<li>缩小时间差异：开发人员可以几小时，甚至几分钟就部署代码。</li>\n<li>缩小人员差异：开发人员不只要编写代码，更应该密切参与部署过程以及代码在线上的表现。</li>\n<li>缩小工具差异：尽量保证开发环境以及线上环境的一致性。</li>\n</ul>\n<p>将上述总结变为一个表格如下：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>传统应用</th>\n<th>12-Factor 应用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>每次部署间隔</td>\n<td>数周</td>\n<td>几小时</td>\n</tr>\n<tr>\n<td>开发人员 vs 运维人员</td>\n<td>不同的人</td>\n<td>相同的人</td>\n</tr>\n<tr>\n<td>开发环境 vs 线上环境</td>\n<td>不同</td>\n<td>尽量接近</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://12factor.net/zh_cn/backing-services\">后端服务</a> 是保持开发与线上等价的重要部分，例如数据库，队列系统，以及缓存。许多语言都提供了简化获取后端服务的类库，例如不同类型服务的 <em>适配器</em> 。下列表格提供了一些例子。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>语言</th>\n<th>类库</th>\n<th>适配器</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数据库</td>\n<td>Ruby&#x2F;Rails</td>\n<td>ActiveRecord</td>\n<td>MySQL, PostgreSQL, SQLite</td>\n</tr>\n<tr>\n<td>队列</td>\n<td>Python&#x2F;Django</td>\n<td>Celery</td>\n<td>RabbitMQ, Beanstalkd, Redis</td>\n</tr>\n<tr>\n<td>缓存</td>\n<td>Ruby&#x2F;Rails</td>\n<td>ActiveSupport::Cache</td>\n<td>Memory, filesystem, Memcached</td>\n</tr>\n</tbody></table>\n<p>开发人员有时会觉得在本地环境中使用轻量的后端服务具有很强的吸引力，而那些更重量级的健壮的后端服务应该使用在生产环境。例如，本地使用 SQLite 线上使用 PostgreSQL；又如本地缓存在进程内存中而线上存入 Memcached。</p>\n<p><strong>12-Factor 应用的开发人员应该反对在不同环境间使用不同的后端服务</strong> ，即使适配器已经可以几乎消除使用上的差异。这是因为，不同的后端服务意味着会突然出现的不兼容，从而导致测试、预发布都正常的代码在线上出现问题。这些错误会给持续部署带来阻力。从应用程序的生命周期来看，消除这种阻力需要花费很大的代价。</p>\n<p>与此同时，轻量的本地服务也不像以前那样引人注目。借助于<a href=\"http://mxcl.github.com/homebrew/\">Homebrew</a>，<a href=\"https://help.ubuntu.com/community/AptGet/Howto\">apt-get</a>等现代的打包系统，诸如Memcached、PostgreSQL、RabbitMQ 等后端服务的安装与运行也并不复杂。此外，使用类似 <a href=\"http://www.opscode.com/chef/\">Chef</a> 和 <a href=\"http://docs.puppetlabs.com/\">Puppet</a> 的声明式配置工具，结合像 <a href=\"http://vagrantup.com/\">Vagrant</a> 这样轻量的虚拟环境就可以使得开发人员的本地环境与线上环境无限接近。与同步环境和持续部署所带来的益处相比，安装这些系统显然是值得的。</p>\n<p>不同后端服务的适配器仍然是有用的，因为它们可以使移植后端服务变得简单。但应用的所有部署，这其中包括开发、预发布以及线上环境，都应该使用同一个后端服务的相同版本。</p>\n<h2 id=\"XI-日志\"><a href=\"#XI-日志\" class=\"headerlink\" title=\"XI. 日志\"></a>XI. 日志</h2><blockquote>\n<p>把日志当作事件流</p>\n</blockquote>\n<p><em>日志</em> 使得应用程序运行的动作变得透明。在基于服务器的环境中，日志通常被写在硬盘的一个文件里，但这只是一种输出格式。</p>\n<p>日志应该是 <a href=\"https://adam.herokuapp.com/past/2011/4/1/logs_are_streams_not_files/\">事件流</a> 的汇总，将所有运行中进程和后端服务的输出流按照时间顺序收集起来。尽管在回溯问题时可能需要看很多行，日志最原始的格式确实是一个事件一行。日志没有确定开始和结束，但随着应用在运行会持续的增加。</p>\n<p><strong>12-factor应用本身从不考虑存储自己的输出流。</strong> 不应该试图去写或者管理日志文件。相反，每一个运行的进程都会直接的标准输出（<code>stdout</code>）事件流。开发环境中，开发人员可以通过这些数据流，实时在终端看到应用的活动。</p>\n<p>在预发布或线上部署中，每个进程的输出流由运行环境截获，并将其他输出流整理在一起，然后一并发送给一个或多个最终的处理程序，用于查看或是长期存档。这些存档路径对于应用来说不可见也不可配置，而是完全交给程序的运行环境管理。类似 <a href=\"https://github.com/heroku/logplex\">Logplex</a> 和 <a href=\"https://github.com/fluent/fluentd\">Fluentd</a> 的开源工具可以达到这个目的。</p>\n<p>这些事件流可以输出至文件，或者在终端实时观察。最重要的，输出流可以发送到 <a href=\"http://www.splunk.com/\">Splunk</a> 这样的日志索引及分析系统，或 <a href=\"http://hive.apache.org/\">Hadoop&#x2F;Hive</a> 这样的通用数据存储系统。这些系统为查看应用的历史活动提供了强大而灵活的功能，包括：</p>\n<ul>\n<li>找出过去一段时间特殊的事件。</li>\n<li>图形化一个大规模的趋势，比如每分钟的请求量。</li>\n<li>根据用户定义的条件实时触发警报，比如每分钟的报错超过某个警戒线。</li>\n</ul>\n<h2 id=\"XII-管理进程\"><a href=\"#XII-管理进程\" class=\"headerlink\" title=\"XII. 管理进程\"></a>XII. 管理进程</h2><blockquote>\n<p>后台管理任务当作一次性进程运行</p>\n</blockquote>\n<p><a href=\"https://12factor.net/zh_cn/concurrency\">进程构成</a>（process formation）是指用来处理应用的常规业务（比如处理 web 请求）的一组进程。与此不同，开发人员经常希望执行一些管理或维护应用的一次性任务，例如：</p>\n<ul>\n<li>运行数据移植（Django 中的 <code>manage.py migrate</code>, Rails 中的 <code>rake db:migrate</code>）。</li>\n<li>运行一个控制台（也被称为 <a href=\"http://en.wikipedia.org/wiki/Read-eval-print_loop\">REPL</a> shell），来执行一些代码或是针对线上数据库做一些检查。大多数语言都通过解释器提供了一个 REPL 工具（<code>python</code> 或 <code>perl</code>） ，或是其他命令（Ruby 使用 <code>irb</code>, Rails 使用 <code>rails console</code>）。</li>\n<li>运行一些提交到代码仓库的一次性脚本。</li>\n</ul>\n<p>一次性管理进程应该和正常的 <a href=\"https://12factor.net/zh_cn/processes\">常驻进程</a> 使用同样的环境。这些管理进程和任何其他的进程一样使用相同的 <a href=\"https://12factor.net/zh_cn/codebase\">代码</a> 和 <a href=\"https://12factor.net/zh_cn/config\">配置</a> ，基于某个 <a href=\"https://12factor.net/zh_cn/build-release-run\">发布版本</a> 运行。后台管理代码应该随其他应用程序代码一起发布，从而避免同步问题。</p>\n<p>所有进程类型应该使用同样的 <a href=\"https://12factor.net/zh_cn/dependencies\">依赖隔离</a> 技术。例如，如果Ruby的web进程使用了命令 <code>bundle exec thin start</code> ，那么数据库移植应使用 <code>bundle exec rake db:migrate</code> 。同样的，如果一个 Python 程序使用了 Virtualenv，则需要在运行 Tornado Web 服务器和任何 <code>manage.py</code> 管理进程时引入 <code>bin/python</code> 。</p>\n<p>12-factor 尤其青睐那些提供了 REPL shell 的语言，因为那会让运行一次性脚本变得简单。在本地部署中，开发人员直接在命令行使用 shell 命令调用一次性管理进程。在线上部署中，开发人员依旧可以使用ssh或是运行环境提供的其他机制来运行这样的进程。</p>\n"},{"title":"Quarkus项目配置方式详解","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-07-12T09:29:23.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 配置加载流程\n\nQuarkus 可以从多个地方获取项目的配置，它读取配置优先级入下图，在下面的优先级中，一旦读取到某个配置，就不会再继续读取后面配置中的这个配置了。\n\n![config-sources](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XRTAgG7.png)\n\n## 0x1 System Properties\n\n系统属性可以在启动期间通过 `-D` 标志传递给应用程序。\n\n比如要设置 http 服务的运行端口，各个运行方式传递系统参数的方式如下：\n\n- **Quarkus dev**模式：`mvn quarkus:dev -Dquarkus.http.port=8888`\n- 运行 **jar** 包：`java -Dquarkus.http.port=8888 -jar quarkus-run.jar`\n- 运行 **native-image**：`app-runner -Dquarkus.http.port=8888`\n\n## 0x2 Environment variables\n\n> 环境变量的名字遵循 [MicroProfile Config](https://github.com/eclipse/microprofile-config/blob/master/spec/src/main/asciidoc/configsources.asciidoc#default-configsources)\n>\n> ```shell\n> Environment Variables Mapping Rules\n> Some operating systems allow only alphabetic characters or an underscore, _, in environment variables. Other characters such as ., /, etc may be disallowed. In order to set a value for a config property that has a name containing such disallowed characters from an environment variable, the following rules are used.\n> \n> The ConfigSource for the environment variables searches three environment variables for a given property name (e.g. com.ACME.size):\n> \n> 1. Exact match (i.e. com.ACME.size)\n> \n> 2. Replace each character that is neither alphanumeric nor _ with _ (i.e. com_ACME_size)\n> \n> 3. Replace each character that is neither alphanumeric nor _ with _; then convert the name to upper case (i.e. COM_ACME_SIZE)\n> \n> The first environment variable that is found is returned by this ConfigSource.\n> ```\n\n环境变量的话各个系统设置的方式不一样，具体可以查一下自己系统设置环境变量的方式，一般 **Unix** 类的系统设置环境变量一般分为**命令行设置**和**环境变量文件配置**\n\n- 命令行配置：`export QUARKUS_HTTP_PORT:8888`\n- 配置文件配置：环境变量配置文件又分用户变量配置文件和系统变量配置文件，直接在对应的配置文件里加上这一样就可以了，但是一般不推荐这么用\n\n## 0x3 .env 文件\n\n> **注意：.env 文件中的环境变量无法像普通的环境变量通过 System.getenv(String) API 获得。**\n\n`.env` 文件的作用和环境变量类似，但是作用域更小，**它只作用于当前项目，不像环境变量可以作用于所有项目**。\n\n它的设置方式是在 `.env` 文件里配置键值对的方式来设置变量，键名称和设置环境变量一样遵守 [MicroProfile Config](https://github.com/eclipse/microprofile-config/blob/master/spec/src/main/asciidoc/configsources.asciidoc#default-configsources) 规范\n\n使用方式：\n\n- 对于 **dev** 模式：可以放在项目的根目录下来使用，**但是不要把它和代码一起打包**\n- 对于 **jar** 和 **native-image** 运行方式下：可以将 `.env` 文件放在和 jar 包或 native-image 同一目录下\n\n## 0x4 Quarkus Application配置文件\n\nQuarkus 和 Spring Boot 项目一样，支持 `application.properties` 配置文件。同时在 **jar** 包和 **native-image** 的运行模式下还支持当前 jar 文件和native-image 文件同目录下 **config 文件夹**里的 `application.properties` 配置文件，并且 **config 文件夹**里的配置文件优先级高于项目 **resources 文件夹**里的配置文件\n\n> 对于 dev 的运行模式下，项目也可以使用 config 文件里的配置文件，就是手动把 config 文件夹移到 **target 文件夹**里，但是在使用 `mvn clean` 命令时会把这个文件夹清理掉，到时候又要自己手动重新创建 config 文件夹和里面的配置文件，所以在 dev 模式下不推荐使用 `config/application.properties`\n\n\n\n## 0x5 MicroProfile 配置文件\n\n它放在 `src/main/resources/META-INF/microprofile-config.properties` 里\n\n它的工作原理和项目的 resources 文件夹下的 application.properties 完全相同，建议使用 resources 文件夹下的配置文件\n\n\n\n## 使用 yml 配置文件\n\n以上配置中，除了系统属性、环境变量、.env 文件外，配置文件都可以支持 yml 格式的配置，不过需要额外添加依赖\n\n### 添加依赖\n\n1. pom.xml 文件添加依赖\n\n  ```xml\n  <dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-config-yaml</artifactId>\n  </dependency>\n  ```\n\n2. 或者可以直接用 maven 命令来添加拓展依赖\n\n```shell\n./mvnw quarkus:add-extension -Dextensions=\"io.quarkus:quarkus-config-yaml\"\n```\n\n### 添加yml文件\n\n移除`src/main/resources/application.properties` 文件，添加 `src/main/resources/application.yaml` 文件\n\n如果两个文件都存在，Quarkus 会优先使用来自 `yml` 的配置，然后再使用 `properties` 的配置，所以为了不搞混淆，建议删除 `properties` 文件。\n\n配置文件扩展名支持 `yml` 和 `yaml`\n\n## 参考资料\n\n1. https://quarkus.io/guides/config-yaml\n2. https://quarkus.pro/guides/config.html\n3. https://quarkus.io/guides/config-reference","source":"_posts/archive/quarkus/3EC6E900CDCB4BCEBA3B0BE40C9AADBB.md","raw":"---\ntitle: Quarkus项目配置方式详解\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-07-12 17:29:23\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Quarkus\ncategories:\n- Quarkus\n---\n\n## 配置加载流程\n\nQuarkus 可以从多个地方获取项目的配置，它读取配置优先级入下图，在下面的优先级中，一旦读取到某个配置，就不会再继续读取后面配置中的这个配置了。\n\n![config-sources](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XRTAgG7.png)\n\n## 0x1 System Properties\n\n系统属性可以在启动期间通过 `-D` 标志传递给应用程序。\n\n比如要设置 http 服务的运行端口，各个运行方式传递系统参数的方式如下：\n\n- **Quarkus dev**模式：`mvn quarkus:dev -Dquarkus.http.port=8888`\n- 运行 **jar** 包：`java -Dquarkus.http.port=8888 -jar quarkus-run.jar`\n- 运行 **native-image**：`app-runner -Dquarkus.http.port=8888`\n\n## 0x2 Environment variables\n\n> 环境变量的名字遵循 [MicroProfile Config](https://github.com/eclipse/microprofile-config/blob/master/spec/src/main/asciidoc/configsources.asciidoc#default-configsources)\n>\n> ```shell\n> Environment Variables Mapping Rules\n> Some operating systems allow only alphabetic characters or an underscore, _, in environment variables. Other characters such as ., /, etc may be disallowed. In order to set a value for a config property that has a name containing such disallowed characters from an environment variable, the following rules are used.\n> \n> The ConfigSource for the environment variables searches three environment variables for a given property name (e.g. com.ACME.size):\n> \n> 1. Exact match (i.e. com.ACME.size)\n> \n> 2. Replace each character that is neither alphanumeric nor _ with _ (i.e. com_ACME_size)\n> \n> 3. Replace each character that is neither alphanumeric nor _ with _; then convert the name to upper case (i.e. COM_ACME_SIZE)\n> \n> The first environment variable that is found is returned by this ConfigSource.\n> ```\n\n环境变量的话各个系统设置的方式不一样，具体可以查一下自己系统设置环境变量的方式，一般 **Unix** 类的系统设置环境变量一般分为**命令行设置**和**环境变量文件配置**\n\n- 命令行配置：`export QUARKUS_HTTP_PORT:8888`\n- 配置文件配置：环境变量配置文件又分用户变量配置文件和系统变量配置文件，直接在对应的配置文件里加上这一样就可以了，但是一般不推荐这么用\n\n## 0x3 .env 文件\n\n> **注意：.env 文件中的环境变量无法像普通的环境变量通过 System.getenv(String) API 获得。**\n\n`.env` 文件的作用和环境变量类似，但是作用域更小，**它只作用于当前项目，不像环境变量可以作用于所有项目**。\n\n它的设置方式是在 `.env` 文件里配置键值对的方式来设置变量，键名称和设置环境变量一样遵守 [MicroProfile Config](https://github.com/eclipse/microprofile-config/blob/master/spec/src/main/asciidoc/configsources.asciidoc#default-configsources) 规范\n\n使用方式：\n\n- 对于 **dev** 模式：可以放在项目的根目录下来使用，**但是不要把它和代码一起打包**\n- 对于 **jar** 和 **native-image** 运行方式下：可以将 `.env` 文件放在和 jar 包或 native-image 同一目录下\n\n## 0x4 Quarkus Application配置文件\n\nQuarkus 和 Spring Boot 项目一样，支持 `application.properties` 配置文件。同时在 **jar** 包和 **native-image** 的运行模式下还支持当前 jar 文件和native-image 文件同目录下 **config 文件夹**里的 `application.properties` 配置文件，并且 **config 文件夹**里的配置文件优先级高于项目 **resources 文件夹**里的配置文件\n\n> 对于 dev 的运行模式下，项目也可以使用 config 文件里的配置文件，就是手动把 config 文件夹移到 **target 文件夹**里，但是在使用 `mvn clean` 命令时会把这个文件夹清理掉，到时候又要自己手动重新创建 config 文件夹和里面的配置文件，所以在 dev 模式下不推荐使用 `config/application.properties`\n\n\n\n## 0x5 MicroProfile 配置文件\n\n它放在 `src/main/resources/META-INF/microprofile-config.properties` 里\n\n它的工作原理和项目的 resources 文件夹下的 application.properties 完全相同，建议使用 resources 文件夹下的配置文件\n\n\n\n## 使用 yml 配置文件\n\n以上配置中，除了系统属性、环境变量、.env 文件外，配置文件都可以支持 yml 格式的配置，不过需要额外添加依赖\n\n### 添加依赖\n\n1. pom.xml 文件添加依赖\n\n  ```xml\n  <dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-config-yaml</artifactId>\n  </dependency>\n  ```\n\n2. 或者可以直接用 maven 命令来添加拓展依赖\n\n```shell\n./mvnw quarkus:add-extension -Dextensions=\"io.quarkus:quarkus-config-yaml\"\n```\n\n### 添加yml文件\n\n移除`src/main/resources/application.properties` 文件，添加 `src/main/resources/application.yaml` 文件\n\n如果两个文件都存在，Quarkus 会优先使用来自 `yml` 的配置，然后再使用 `properties` 的配置，所以为了不搞混淆，建议删除 `properties` 文件。\n\n配置文件扩展名支持 `yml` 和 `yaml`\n\n## 参考资料\n\n1. https://quarkus.io/guides/config-yaml\n2. https://quarkus.pro/guides/config.html\n3. https://quarkus.io/guides/config-reference","slug":"archive/quarkus/3EC6E900CDCB4BCEBA3B0BE40C9AADBB","published":1,"updated":"2021-10-08T08:15:12.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehu0067vpuc22a2eig4","content":"<h2 id=\"配置加载流程\"><a href=\"#配置加载流程\" class=\"headerlink\" title=\"配置加载流程\"></a>配置加载流程</h2><p>Quarkus 可以从多个地方获取项目的配置，它读取配置优先级入下图，在下面的优先级中，一旦读取到某个配置，就不会再继续读取后面配置中的这个配置了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XRTAgG7.png\" alt=\"config-sources\"></p>\n<h2 id=\"0x1-System-Properties\"><a href=\"#0x1-System-Properties\" class=\"headerlink\" title=\"0x1 System Properties\"></a>0x1 System Properties</h2><p>系统属性可以在启动期间通过 <code>-D</code> 标志传递给应用程序。</p>\n<p>比如要设置 http 服务的运行端口，各个运行方式传递系统参数的方式如下：</p>\n<ul>\n<li><strong>Quarkus dev</strong>模式：<code>mvn quarkus:dev -Dquarkus.http.port=8888</code></li>\n<li>运行 <strong>jar</strong> 包：<code>java -Dquarkus.http.port=8888 -jar quarkus-run.jar</code></li>\n<li>运行 <strong>native-image</strong>：<code>app-runner -Dquarkus.http.port=8888</code></li>\n</ul>\n<h2 id=\"0x2-Environment-variables\"><a href=\"#0x2-Environment-variables\" class=\"headerlink\" title=\"0x2 Environment variables\"></a>0x2 Environment variables</h2><blockquote>\n<p>环境变量的名字遵循 <a href=\"https://github.com/eclipse/microprofile-config/blob/master/spec/src/main/asciidoc/configsources.asciidoc#default-configsources\">MicroProfile Config</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Environment Variables Mapping Rules</span><br><span class=\"line\">Some operating systems allow only alphabetic characters or an underscore, _, in environment variables. Other characters such as ., /, etc may be disallowed. In order to set a value for a config property that has a name containing such disallowed characters from an environment variable, the following rules are used.</span><br><span class=\"line\"></span><br><span class=\"line\">The ConfigSource for the environment variables searches three environment variables for a given property name (e.g. com.ACME.size):</span><br><span class=\"line\"></span><br><span class=\"line\">1. Exact match (i.e. com.ACME.size)</span><br><span class=\"line\"></span><br><span class=\"line\">2. Replace each character that is neither alphanumeric nor _ with _ (i.e. com_ACME_size)</span><br><span class=\"line\"></span><br><span class=\"line\">3. Replace each character that is neither alphanumeric nor _ with _; then convert the name to upper case (i.e. COM_ACME_SIZE)</span><br><span class=\"line\"></span><br><span class=\"line\">The first environment variable that is found is returned by this ConfigSource.</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>环境变量的话各个系统设置的方式不一样，具体可以查一下自己系统设置环境变量的方式，一般 <strong>Unix</strong> 类的系统设置环境变量一般分为<strong>命令行设置</strong>和<strong>环境变量文件配置</strong></p>\n<ul>\n<li>命令行配置：<code>export QUARKUS_HTTP_PORT:8888</code></li>\n<li>配置文件配置：环境变量配置文件又分用户变量配置文件和系统变量配置文件，直接在对应的配置文件里加上这一样就可以了，但是一般不推荐这么用</li>\n</ul>\n<h2 id=\"0x3-env-文件\"><a href=\"#0x3-env-文件\" class=\"headerlink\" title=\"0x3 .env 文件\"></a>0x3 .env 文件</h2><blockquote>\n<p><strong>注意：.env 文件中的环境变量无法像普通的环境变量通过 System.getenv(String) API 获得。</strong></p>\n</blockquote>\n<p><code>.env</code> 文件的作用和环境变量类似，但是作用域更小，<strong>它只作用于当前项目，不像环境变量可以作用于所有项目</strong>。</p>\n<p>它的设置方式是在 <code>.env</code> 文件里配置键值对的方式来设置变量，键名称和设置环境变量一样遵守 <a href=\"https://github.com/eclipse/microprofile-config/blob/master/spec/src/main/asciidoc/configsources.asciidoc#default-configsources\">MicroProfile Config</a> 规范</p>\n<p>使用方式：</p>\n<ul>\n<li>对于 <strong>dev</strong> 模式：可以放在项目的根目录下来使用，<strong>但是不要把它和代码一起打包</strong></li>\n<li>对于 <strong>jar</strong> 和 <strong>native-image</strong> 运行方式下：可以将 <code>.env</code> 文件放在和 jar 包或 native-image 同一目录下</li>\n</ul>\n<h2 id=\"0x4-Quarkus-Application配置文件\"><a href=\"#0x4-Quarkus-Application配置文件\" class=\"headerlink\" title=\"0x4 Quarkus Application配置文件\"></a>0x4 Quarkus Application配置文件</h2><p>Quarkus 和 Spring Boot 项目一样，支持 <code>application.properties</code> 配置文件。同时在 <strong>jar</strong> 包和 <strong>native-image</strong> 的运行模式下还支持当前 jar 文件和native-image 文件同目录下 <strong>config 文件夹</strong>里的 <code>application.properties</code> 配置文件，并且 <strong>config 文件夹</strong>里的配置文件优先级高于项目 <strong>resources 文件夹</strong>里的配置文件</p>\n<blockquote>\n<p>对于 dev 的运行模式下，项目也可以使用 config 文件里的配置文件，就是手动把 config 文件夹移到 <strong>target 文件夹</strong>里，但是在使用 <code>mvn clean</code> 命令时会把这个文件夹清理掉，到时候又要自己手动重新创建 config 文件夹和里面的配置文件，所以在 dev 模式下不推荐使用 <code>config/application.properties</code></p>\n</blockquote>\n<h2 id=\"0x5-MicroProfile-配置文件\"><a href=\"#0x5-MicroProfile-配置文件\" class=\"headerlink\" title=\"0x5 MicroProfile 配置文件\"></a>0x5 MicroProfile 配置文件</h2><p>它放在 <code>src/main/resources/META-INF/microprofile-config.properties</code> 里</p>\n<p>它的工作原理和项目的 resources 文件夹下的 application.properties 完全相同，建议使用 resources 文件夹下的配置文件</p>\n<h2 id=\"使用-yml-配置文件\"><a href=\"#使用-yml-配置文件\" class=\"headerlink\" title=\"使用 yml 配置文件\"></a>使用 yml 配置文件</h2><p>以上配置中，除了系统属性、环境变量、.env 文件外，配置文件都可以支持 yml 格式的配置，不过需要额外添加依赖</p>\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><ol>\n<li>pom.xml 文件添加依赖</li>\n</ol>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.quarkus<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>quarkus-config-yaml<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>或者可以直接用 maven 命令来添加拓展依赖</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">./mvnw quarkus:add-extension -Dextensions=&quot;io.quarkus:quarkus-config-yaml&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加yml文件\"><a href=\"#添加yml文件\" class=\"headerlink\" title=\"添加yml文件\"></a>添加yml文件</h3><p>移除<code>src/main/resources/application.properties</code> 文件，添加 <code>src/main/resources/application.yaml</code> 文件</p>\n<p>如果两个文件都存在，Quarkus 会优先使用来自 <code>yml</code> 的配置，然后再使用 <code>properties</code> 的配置，所以为了不搞混淆，建议删除 <code>properties</code> 文件。</p>\n<p>配置文件扩展名支持 <code>yml</code> 和 <code>yaml</code></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"https://quarkus.io/guides/config-yaml\">https://quarkus.io/guides/config-yaml</a></li>\n<li><a href=\"https://quarkus.pro/guides/config.html\">https://quarkus.pro/guides/config.html</a></li>\n<li><a href=\"https://quarkus.io/guides/config-reference\">https://quarkus.io/guides/config-reference</a></li>\n</ol>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"配置加载流程\"><a href=\"#配置加载流程\" class=\"headerlink\" title=\"配置加载流程\"></a>配置加载流程</h2><p>Quarkus 可以从多个地方获取项目的配置，它读取配置优先级入下图，在下面的优先级中，一旦读取到某个配置，就不会再继续读取后面配置中的这个配置了。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/XRTAgG7.png\" alt=\"config-sources\"></p>\n<h2 id=\"0x1-System-Properties\"><a href=\"#0x1-System-Properties\" class=\"headerlink\" title=\"0x1 System Properties\"></a>0x1 System Properties</h2><p>系统属性可以在启动期间通过 <code>-D</code> 标志传递给应用程序。</p>\n<p>比如要设置 http 服务的运行端口，各个运行方式传递系统参数的方式如下：</p>\n<ul>\n<li><strong>Quarkus dev</strong>模式：<code>mvn quarkus:dev -Dquarkus.http.port=8888</code></li>\n<li>运行 <strong>jar</strong> 包：<code>java -Dquarkus.http.port=8888 -jar quarkus-run.jar</code></li>\n<li>运行 <strong>native-image</strong>：<code>app-runner -Dquarkus.http.port=8888</code></li>\n</ul>\n<h2 id=\"0x2-Environment-variables\"><a href=\"#0x2-Environment-variables\" class=\"headerlink\" title=\"0x2 Environment variables\"></a>0x2 Environment variables</h2><blockquote>\n<p>环境变量的名字遵循 <a href=\"https://github.com/eclipse/microprofile-config/blob/master/spec/src/main/asciidoc/configsources.asciidoc#default-configsources\">MicroProfile Config</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Environment Variables Mapping Rules</span><br><span class=\"line\">Some operating systems allow only alphabetic characters or an underscore, _, in environment variables. Other characters such as ., /, etc may be disallowed. In order to set a value for a config property that has a name containing such disallowed characters from an environment variable, the following rules are used.</span><br><span class=\"line\"></span><br><span class=\"line\">The ConfigSource for the environment variables searches three environment variables for a given property name (e.g. com.ACME.size):</span><br><span class=\"line\"></span><br><span class=\"line\">1. Exact match (i.e. com.ACME.size)</span><br><span class=\"line\"></span><br><span class=\"line\">2. Replace each character that is neither alphanumeric nor _ with _ (i.e. com_ACME_size)</span><br><span class=\"line\"></span><br><span class=\"line\">3. Replace each character that is neither alphanumeric nor _ with _; then convert the name to upper case (i.e. COM_ACME_SIZE)</span><br><span class=\"line\"></span><br><span class=\"line\">The first environment variable that is found is returned by this ConfigSource.</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>环境变量的话各个系统设置的方式不一样，具体可以查一下自己系统设置环境变量的方式，一般 <strong>Unix</strong> 类的系统设置环境变量一般分为<strong>命令行设置</strong>和<strong>环境变量文件配置</strong></p>\n<ul>\n<li>命令行配置：<code>export QUARKUS_HTTP_PORT:8888</code></li>\n<li>配置文件配置：环境变量配置文件又分用户变量配置文件和系统变量配置文件，直接在对应的配置文件里加上这一样就可以了，但是一般不推荐这么用</li>\n</ul>\n<h2 id=\"0x3-env-文件\"><a href=\"#0x3-env-文件\" class=\"headerlink\" title=\"0x3 .env 文件\"></a>0x3 .env 文件</h2><blockquote>\n<p><strong>注意：.env 文件中的环境变量无法像普通的环境变量通过 System.getenv(String) API 获得。</strong></p>\n</blockquote>\n<p><code>.env</code> 文件的作用和环境变量类似，但是作用域更小，<strong>它只作用于当前项目，不像环境变量可以作用于所有项目</strong>。</p>\n<p>它的设置方式是在 <code>.env</code> 文件里配置键值对的方式来设置变量，键名称和设置环境变量一样遵守 <a href=\"https://github.com/eclipse/microprofile-config/blob/master/spec/src/main/asciidoc/configsources.asciidoc#default-configsources\">MicroProfile Config</a> 规范</p>\n<p>使用方式：</p>\n<ul>\n<li>对于 <strong>dev</strong> 模式：可以放在项目的根目录下来使用，<strong>但是不要把它和代码一起打包</strong></li>\n<li>对于 <strong>jar</strong> 和 <strong>native-image</strong> 运行方式下：可以将 <code>.env</code> 文件放在和 jar 包或 native-image 同一目录下</li>\n</ul>\n<h2 id=\"0x4-Quarkus-Application配置文件\"><a href=\"#0x4-Quarkus-Application配置文件\" class=\"headerlink\" title=\"0x4 Quarkus Application配置文件\"></a>0x4 Quarkus Application配置文件</h2><p>Quarkus 和 Spring Boot 项目一样，支持 <code>application.properties</code> 配置文件。同时在 <strong>jar</strong> 包和 <strong>native-image</strong> 的运行模式下还支持当前 jar 文件和native-image 文件同目录下 <strong>config 文件夹</strong>里的 <code>application.properties</code> 配置文件，并且 <strong>config 文件夹</strong>里的配置文件优先级高于项目 <strong>resources 文件夹</strong>里的配置文件</p>\n<blockquote>\n<p>对于 dev 的运行模式下，项目也可以使用 config 文件里的配置文件，就是手动把 config 文件夹移到 <strong>target 文件夹</strong>里，但是在使用 <code>mvn clean</code> 命令时会把这个文件夹清理掉，到时候又要自己手动重新创建 config 文件夹和里面的配置文件，所以在 dev 模式下不推荐使用 <code>config/application.properties</code></p>\n</blockquote>\n<h2 id=\"0x5-MicroProfile-配置文件\"><a href=\"#0x5-MicroProfile-配置文件\" class=\"headerlink\" title=\"0x5 MicroProfile 配置文件\"></a>0x5 MicroProfile 配置文件</h2><p>它放在 <code>src/main/resources/META-INF/microprofile-config.properties</code> 里</p>\n<p>它的工作原理和项目的 resources 文件夹下的 application.properties 完全相同，建议使用 resources 文件夹下的配置文件</p>\n<h2 id=\"使用-yml-配置文件\"><a href=\"#使用-yml-配置文件\" class=\"headerlink\" title=\"使用 yml 配置文件\"></a>使用 yml 配置文件</h2><p>以上配置中，除了系统属性、环境变量、.env 文件外，配置文件都可以支持 yml 格式的配置，不过需要额外添加依赖</p>\n<h3 id=\"添加依赖\"><a href=\"#添加依赖\" class=\"headerlink\" title=\"添加依赖\"></a>添加依赖</h3><ol>\n<li>pom.xml 文件添加依赖</li>\n</ol>\n  <figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.quarkus<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>quarkus-config-yaml<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>或者可以直接用 maven 命令来添加拓展依赖</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">./mvnw quarkus:add-extension -Dextensions=&quot;io.quarkus:quarkus-config-yaml&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加yml文件\"><a href=\"#添加yml文件\" class=\"headerlink\" title=\"添加yml文件\"></a>添加yml文件</h3><p>移除<code>src/main/resources/application.properties</code> 文件，添加 <code>src/main/resources/application.yaml</code> 文件</p>\n<p>如果两个文件都存在，Quarkus 会优先使用来自 <code>yml</code> 的配置，然后再使用 <code>properties</code> 的配置，所以为了不搞混淆，建议删除 <code>properties</code> 文件。</p>\n<p>配置文件扩展名支持 <code>yml</code> 和 <code>yaml</code></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"https://quarkus.io/guides/config-yaml\">https://quarkus.io/guides/config-yaml</a></li>\n<li><a href=\"https://quarkus.pro/guides/config.html\">https://quarkus.pro/guides/config.html</a></li>\n<li><a href=\"https://quarkus.io/guides/config-reference\">https://quarkus.io/guides/config-reference</a></li>\n</ol>\n"},{"title":"Quarkus构建native-image遇到的问题及解决","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-07-09T09:44:33.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 本机构建 native-image\n\n如果你本地安装了 Graal VM 的话，可以在项目目录下直接执行：\n\n```shell\nmvn clean package -Pnative\n```\n\n构建的时间比较长，构建完成后就会在 `./target` 目录下生成一个二进制执行文件，一般名字是 `quarkus-demo-1.0-runner`，直接执行这个二进制文件就可以运行项目了。\n\n```shell\n➜  target: ./quarkus-demo-1.0-runner \n__  ____  __  _____   ___  __ ____  ______ \n --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ \n -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\   \n--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   \n2021-07-09 16:54:10,812 INFO  [io.quarkus] (main) quarkus-demo 1.0 native (powered by Quarkus 2.0.1.Final) started in 0.121s. Listening on: http://0.0.0.0:8080\n2021-07-09 16:54:11,041 INFO  [io.quarkus] (main) Profile prod activated. \n2021-07-09 16:54:11,041 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, smallrye-context-propagation]\n^C2021-07-09 16:55:12,904 INFO  [io.quarkus] (Shutdown thread) quarkus-demo stopped in 0.008s\n```\n\n## 容器构建 native-image\n\n如果你本地没有安装 Graal VM 的话，Quarkus 官方还提供了一个构建的基础镜像：`quay.io/quarkus/ubi-quarkus-native-image`，我们可以直接执行以下命令进行构建：\n\n```shell\nmvn clean package -Pnative -Dquarkus.native.container-build=true\n```\n\n### 容器构建遇到的问题\n\n####  1. 构建时内存不足\n\n在使用容器构建 native-image 的时候，可以会报如下错误：\n\n```shell\n[ERROR] Failed to execute goal io.quarkus:quarkus-maven-plugin:2.0.1.Final:build (default) on project quarkus-demo: Failed to build quarkus application: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\n[ERROR]         [error]: Build step io.quarkus.deployment.pkg.steps.NativeImageBuildStep#build threw an exception: java.lang.RuntimeException: Failed to build native image\n[ERROR]         at io.quarkus.deployment.pkg.steps.NativeImageBuildStep.build(NativeImageBuildStep.java:223)\n[ERROR]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[ERROR]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n[ERROR]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n[ERROR]         at java.base/java.lang.reflect.Method.invoke(Method.java:566)\n[ERROR]         at io.quarkus.deployment.ExtensionLoader$2.execute(ExtensionLoader.java:820)\n[ERROR]         at io.quarkus.builder.BuildContext.run(BuildContext.java:277)\n[ERROR]         at org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\n[ERROR]         at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2442)\n[ERROR]         at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1476)\n[ERROR]         at java.base/java.lang.Thread.run(Thread.java:829)\n[ERROR]         at org.jboss.threads.JBossThread.run(JBossThread.java:501)\n[ERROR] Caused by: java.lang.RuntimeException: Image generation failed. Exit code was 137 which indicates an out of memory error. Consider increasing the Xmx value for native image generation by setting the \"quarkus.native.native-image-xmx\" property\n[ERROR]         at io.quarkus.deployment.pkg.steps.NativeImageBuildStep.imageGenerationFailed(NativeImageBuildStep.java:360)\n[ERROR]         at io.quarkus.deployment.pkg.steps.NativeImageBuildStep.build(NativeImageBuildStep.java:200)\n[ERROR]         ... 11 more\n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n```\n\n错误提示时内存不足，可以尝试设置 `quarkus.native.native-image-xmx` 参数，但是设置了这个参数还是报这个错。在查阅资料后，在一个 [stackoverflow](https://stackoverflow.com/questions/55157074/packaging-native-image-using-graalvm-and-quarkus-gave-an-error) 的回答中看到了这样一句话：\n\n```\n Pay attention it has to be less than the memory you set in your docker daemon.\n```\n\n他说必须小于您在 docker 守护进程中设置的内存。\n\n然后我查看 docker 的官方文档时发现，在 Mac 和 Windows 中默认的内存是 2GB。\n\n所以只要调高这个值就可以了，推荐是 8GB，各系统设置方法：\n\nMac：https://docs.docker.com/docker-for-mac/#resources\n\nWindows：https://docs.docker.com/docker-for-windows/#resources\n\n#### 2. 容器构建后的二进制文件无法运行\n\n容器构建 native-image 完成后生成的二进制文件不能执行，提示 `zsh: exec format error: ./quarkus-demo-1.0-runner`\n\n这是因为我本机是 Mac 系统，但是 Quarkus 提供的构建镜像是 Linux 系统，但是 **Graal VM 目前好像并不支持交叉编译**，所以在 Linux 系统里构建的二进制文件只能在 Linux 系统里执行。\n\n所以我们可以直接用容器来运行这个构建好的二进制文件。\n","source":"_posts/archive/quarkus/5756337C1CEA4B599E678A3380DCFE00.md","raw":"---\ntitle: Quarkus构建native-image遇到的问题及解决\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-07-09 17:44:33\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Quarkus\n- Graal VM\ncategories:\n- Quarkus\n---\n\n## 本机构建 native-image\n\n如果你本地安装了 Graal VM 的话，可以在项目目录下直接执行：\n\n```shell\nmvn clean package -Pnative\n```\n\n构建的时间比较长，构建完成后就会在 `./target` 目录下生成一个二进制执行文件，一般名字是 `quarkus-demo-1.0-runner`，直接执行这个二进制文件就可以运行项目了。\n\n```shell\n➜  target: ./quarkus-demo-1.0-runner \n__  ____  __  _____   ___  __ ____  ______ \n --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ \n -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\   \n--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   \n2021-07-09 16:54:10,812 INFO  [io.quarkus] (main) quarkus-demo 1.0 native (powered by Quarkus 2.0.1.Final) started in 0.121s. Listening on: http://0.0.0.0:8080\n2021-07-09 16:54:11,041 INFO  [io.quarkus] (main) Profile prod activated. \n2021-07-09 16:54:11,041 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, smallrye-context-propagation]\n^C2021-07-09 16:55:12,904 INFO  [io.quarkus] (Shutdown thread) quarkus-demo stopped in 0.008s\n```\n\n## 容器构建 native-image\n\n如果你本地没有安装 Graal VM 的话，Quarkus 官方还提供了一个构建的基础镜像：`quay.io/quarkus/ubi-quarkus-native-image`，我们可以直接执行以下命令进行构建：\n\n```shell\nmvn clean package -Pnative -Dquarkus.native.container-build=true\n```\n\n### 容器构建遇到的问题\n\n####  1. 构建时内存不足\n\n在使用容器构建 native-image 的时候，可以会报如下错误：\n\n```shell\n[ERROR] Failed to execute goal io.quarkus:quarkus-maven-plugin:2.0.1.Final:build (default) on project quarkus-demo: Failed to build quarkus application: io.quarkus.builder.BuildException: Build failure: Build failed due to errors\n[ERROR]         [error]: Build step io.quarkus.deployment.pkg.steps.NativeImageBuildStep#build threw an exception: java.lang.RuntimeException: Failed to build native image\n[ERROR]         at io.quarkus.deployment.pkg.steps.NativeImageBuildStep.build(NativeImageBuildStep.java:223)\n[ERROR]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[ERROR]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n[ERROR]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n[ERROR]         at java.base/java.lang.reflect.Method.invoke(Method.java:566)\n[ERROR]         at io.quarkus.deployment.ExtensionLoader$2.execute(ExtensionLoader.java:820)\n[ERROR]         at io.quarkus.builder.BuildContext.run(BuildContext.java:277)\n[ERROR]         at org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)\n[ERROR]         at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2442)\n[ERROR]         at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1476)\n[ERROR]         at java.base/java.lang.Thread.run(Thread.java:829)\n[ERROR]         at org.jboss.threads.JBossThread.run(JBossThread.java:501)\n[ERROR] Caused by: java.lang.RuntimeException: Image generation failed. Exit code was 137 which indicates an out of memory error. Consider increasing the Xmx value for native image generation by setting the \"quarkus.native.native-image-xmx\" property\n[ERROR]         at io.quarkus.deployment.pkg.steps.NativeImageBuildStep.imageGenerationFailed(NativeImageBuildStep.java:360)\n[ERROR]         at io.quarkus.deployment.pkg.steps.NativeImageBuildStep.build(NativeImageBuildStep.java:200)\n[ERROR]         ... 11 more\n[ERROR] -> [Help 1]\n[ERROR] \n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n[ERROR] \n[ERROR] For more information about the errors and possible solutions, please read the following articles:\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException\n```\n\n错误提示时内存不足，可以尝试设置 `quarkus.native.native-image-xmx` 参数，但是设置了这个参数还是报这个错。在查阅资料后，在一个 [stackoverflow](https://stackoverflow.com/questions/55157074/packaging-native-image-using-graalvm-and-quarkus-gave-an-error) 的回答中看到了这样一句话：\n\n```\n Pay attention it has to be less than the memory you set in your docker daemon.\n```\n\n他说必须小于您在 docker 守护进程中设置的内存。\n\n然后我查看 docker 的官方文档时发现，在 Mac 和 Windows 中默认的内存是 2GB。\n\n所以只要调高这个值就可以了，推荐是 8GB，各系统设置方法：\n\nMac：https://docs.docker.com/docker-for-mac/#resources\n\nWindows：https://docs.docker.com/docker-for-windows/#resources\n\n#### 2. 容器构建后的二进制文件无法运行\n\n容器构建 native-image 完成后生成的二进制文件不能执行，提示 `zsh: exec format error: ./quarkus-demo-1.0-runner`\n\n这是因为我本机是 Mac 系统，但是 Quarkus 提供的构建镜像是 Linux 系统，但是 **Graal VM 目前好像并不支持交叉编译**，所以在 Linux 系统里构建的二进制文件只能在 Linux 系统里执行。\n\n所以我们可以直接用容器来运行这个构建好的二进制文件。\n","slug":"archive/quarkus/5756337C1CEA4B599E678A3380DCFE00","published":1,"updated":"2021-10-08T07:57:24.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehv006bvpucg8fzdwmh","content":"<h2 id=\"本机构建-native-image\"><a href=\"#本机构建-native-image\" class=\"headerlink\" title=\"本机构建 native-image\"></a>本机构建 native-image</h2><p>如果你本地安装了 Graal VM 的话，可以在项目目录下直接执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean package -Pnative</span><br></pre></td></tr></table></figure>\n\n<p>构建的时间比较长，构建完成后就会在 <code>./target</code> 目录下生成一个二进制执行文件，一般名字是 <code>quarkus-demo-1.0-runner</code>，直接执行这个二进制文件就可以运行项目了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜  target: ./quarkus-demo-1.0-runner </span><br><span class=\"line\">__  ____  __  _____   ___  __ ____  ______ </span><br><span class=\"line\"> --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ </span><br><span class=\"line\"> -/ /_/ / /_/ / __ |/ , _/ ,&lt; / /_/ /\\ \\   </span><br><span class=\"line\">--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   </span><br><span class=\"line\">2021-07-09 16:54:10,812 INFO  [io.quarkus] (main) quarkus-demo 1.0 native (powered by Quarkus 2.0.1.Final) started in 0.121s. Listening on: http://0.0.0.0:8080</span><br><span class=\"line\">2021-07-09 16:54:11,041 INFO  [io.quarkus] (main) Profile prod activated. </span><br><span class=\"line\">2021-07-09 16:54:11,041 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, smallrye-context-propagation]</span><br><span class=\"line\">^C2021-07-09 16:55:12,904 INFO  [io.quarkus] (Shutdown thread) quarkus-demo stopped in 0.008s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"容器构建-native-image\"><a href=\"#容器构建-native-image\" class=\"headerlink\" title=\"容器构建 native-image\"></a>容器构建 native-image</h2><p>如果你本地没有安装 Graal VM 的话，Quarkus 官方还提供了一个构建的基础镜像：<code>quay.io/quarkus/ubi-quarkus-native-image</code>，我们可以直接执行以下命令进行构建：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean package -Pnative -Dquarkus.native.container-build=true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"容器构建遇到的问题\"><a href=\"#容器构建遇到的问题\" class=\"headerlink\" title=\"容器构建遇到的问题\"></a>容器构建遇到的问题</h3><h4 id=\"1-构建时内存不足\"><a href=\"#1-构建时内存不足\" class=\"headerlink\" title=\"1. 构建时内存不足\"></a>1. 构建时内存不足</h4><p>在使用容器构建 native-image 的时候，可以会报如下错误：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal io.quarkus:quarkus-maven-plugin:2.0.1.Final:build (default) on project quarkus-demo: Failed to build quarkus application: io.quarkus.builder.BuildException: Build failure: Build failed due to errors</span><br><span class=\"line\">[ERROR]         [error]: Build step io.quarkus.deployment.pkg.steps.NativeImageBuildStep#build threw an exception: java.lang.RuntimeException: Failed to build native image</span><br><span class=\"line\">[ERROR]         at io.quarkus.deployment.pkg.steps.NativeImageBuildStep.build(NativeImageBuildStep.java:223)</span><br><span class=\"line\">[ERROR]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">[ERROR]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">[ERROR]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">[ERROR]         at java.base/java.lang.reflect.Method.invoke(Method.java:566)</span><br><span class=\"line\">[ERROR]         at io.quarkus.deployment.ExtensionLoader$2.execute(ExtensionLoader.java:820)</span><br><span class=\"line\">[ERROR]         at io.quarkus.builder.BuildContext.run(BuildContext.java:277)</span><br><span class=\"line\">[ERROR]         at org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)</span><br><span class=\"line\">[ERROR]         at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2442)</span><br><span class=\"line\">[ERROR]         at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1476)</span><br><span class=\"line\">[ERROR]         at java.base/java.lang.Thread.run(Thread.java:829)</span><br><span class=\"line\">[ERROR]         at org.jboss.threads.JBossThread.run(JBossThread.java:501)</span><br><span class=\"line\">[ERROR] Caused by: java.lang.RuntimeException: Image generation failed. Exit code was 137 which indicates an out of memory error. Consider increasing the Xmx value for native image generation by setting the &quot;quarkus.native.native-image-xmx&quot; property</span><br><span class=\"line\">[ERROR]         at io.quarkus.deployment.pkg.steps.NativeImageBuildStep.imageGenerationFailed(NativeImageBuildStep.java:360)</span><br><span class=\"line\">[ERROR]         at io.quarkus.deployment.pkg.steps.NativeImageBuildStep.build(NativeImageBuildStep.java:200)</span><br><span class=\"line\">[ERROR]         ... 11 more</span><br><span class=\"line\">[ERROR] -&gt; [Help 1]</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class=\"line\">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class=\"line\">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException</span><br></pre></td></tr></table></figure>\n\n<p>错误提示时内存不足，可以尝试设置 <code>quarkus.native.native-image-xmx</code> 参数，但是设置了这个参数还是报这个错。在查阅资料后，在一个 <a href=\"https://stackoverflow.com/questions/55157074/packaging-native-image-using-graalvm-and-quarkus-gave-an-error\">stackoverflow</a> 的回答中看到了这样一句话：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Pay attention it has to be less than the memory you set in your docker daemon.</span><br></pre></td></tr></table></figure>\n\n<p>他说必须小于您在 docker 守护进程中设置的内存。</p>\n<p>然后我查看 docker 的官方文档时发现，在 Mac 和 Windows 中默认的内存是 2GB。</p>\n<p>所以只要调高这个值就可以了，推荐是 8GB，各系统设置方法：</p>\n<p>Mac：<a href=\"https://docs.docker.com/docker-for-mac/#resources\">https://docs.docker.com/docker-for-mac/#resources</a></p>\n<p>Windows：<a href=\"https://docs.docker.com/docker-for-windows/#resources\">https://docs.docker.com/docker-for-windows/#resources</a></p>\n<h4 id=\"2-容器构建后的二进制文件无法运行\"><a href=\"#2-容器构建后的二进制文件无法运行\" class=\"headerlink\" title=\"2. 容器构建后的二进制文件无法运行\"></a>2. 容器构建后的二进制文件无法运行</h4><p>容器构建 native-image 完成后生成的二进制文件不能执行，提示 <code>zsh: exec format error: ./quarkus-demo-1.0-runner</code></p>\n<p>这是因为我本机是 Mac 系统，但是 Quarkus 提供的构建镜像是 Linux 系统，但是 <strong>Graal VM 目前好像并不支持交叉编译</strong>，所以在 Linux 系统里构建的二进制文件只能在 Linux 系统里执行。</p>\n<p>所以我们可以直接用容器来运行这个构建好的二进制文件。</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"本机构建-native-image\"><a href=\"#本机构建-native-image\" class=\"headerlink\" title=\"本机构建 native-image\"></a>本机构建 native-image</h2><p>如果你本地安装了 Graal VM 的话，可以在项目目录下直接执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean package -Pnative</span><br></pre></td></tr></table></figure>\n\n<p>构建的时间比较长，构建完成后就会在 <code>./target</code> 目录下生成一个二进制执行文件，一般名字是 <code>quarkus-demo-1.0-runner</code>，直接执行这个二进制文件就可以运行项目了。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜  target: ./quarkus-demo-1.0-runner </span><br><span class=\"line\">__  ____  __  _____   ___  __ ____  ______ </span><br><span class=\"line\"> --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ </span><br><span class=\"line\"> -/ /_/ / /_/ / __ |/ , _/ ,&lt; / /_/ /\\ \\   </span><br><span class=\"line\">--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   </span><br><span class=\"line\">2021-07-09 16:54:10,812 INFO  [io.quarkus] (main) quarkus-demo 1.0 native (powered by Quarkus 2.0.1.Final) started in 0.121s. Listening on: http://0.0.0.0:8080</span><br><span class=\"line\">2021-07-09 16:54:11,041 INFO  [io.quarkus] (main) Profile prod activated. </span><br><span class=\"line\">2021-07-09 16:54:11,041 INFO  [io.quarkus] (main) Installed features: [cdi, resteasy, smallrye-context-propagation]</span><br><span class=\"line\">^C2021-07-09 16:55:12,904 INFO  [io.quarkus] (Shutdown thread) quarkus-demo stopped in 0.008s</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"容器构建-native-image\"><a href=\"#容器构建-native-image\" class=\"headerlink\" title=\"容器构建 native-image\"></a>容器构建 native-image</h2><p>如果你本地没有安装 Graal VM 的话，Quarkus 官方还提供了一个构建的基础镜像：<code>quay.io/quarkus/ubi-quarkus-native-image</code>，我们可以直接执行以下命令进行构建：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn clean package -Pnative -Dquarkus.native.container-build=true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"容器构建遇到的问题\"><a href=\"#容器构建遇到的问题\" class=\"headerlink\" title=\"容器构建遇到的问题\"></a>容器构建遇到的问题</h3><h4 id=\"1-构建时内存不足\"><a href=\"#1-构建时内存不足\" class=\"headerlink\" title=\"1. 构建时内存不足\"></a>1. 构建时内存不足</h4><p>在使用容器构建 native-image 的时候，可以会报如下错误：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[ERROR] Failed to execute goal io.quarkus:quarkus-maven-plugin:2.0.1.Final:build (default) on project quarkus-demo: Failed to build quarkus application: io.quarkus.builder.BuildException: Build failure: Build failed due to errors</span><br><span class=\"line\">[ERROR]         [error]: Build step io.quarkus.deployment.pkg.steps.NativeImageBuildStep#build threw an exception: java.lang.RuntimeException: Failed to build native image</span><br><span class=\"line\">[ERROR]         at io.quarkus.deployment.pkg.steps.NativeImageBuildStep.build(NativeImageBuildStep.java:223)</span><br><span class=\"line\">[ERROR]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class=\"line\">[ERROR]         at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class=\"line\">[ERROR]         at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class=\"line\">[ERROR]         at java.base/java.lang.reflect.Method.invoke(Method.java:566)</span><br><span class=\"line\">[ERROR]         at io.quarkus.deployment.ExtensionLoader$2.execute(ExtensionLoader.java:820)</span><br><span class=\"line\">[ERROR]         at io.quarkus.builder.BuildContext.run(BuildContext.java:277)</span><br><span class=\"line\">[ERROR]         at org.jboss.threads.ContextHandler$1.runWith(ContextHandler.java:18)</span><br><span class=\"line\">[ERROR]         at org.jboss.threads.EnhancedQueueExecutor$Task.run(EnhancedQueueExecutor.java:2442)</span><br><span class=\"line\">[ERROR]         at org.jboss.threads.EnhancedQueueExecutor$ThreadBody.run(EnhancedQueueExecutor.java:1476)</span><br><span class=\"line\">[ERROR]         at java.base/java.lang.Thread.run(Thread.java:829)</span><br><span class=\"line\">[ERROR]         at org.jboss.threads.JBossThread.run(JBossThread.java:501)</span><br><span class=\"line\">[ERROR] Caused by: java.lang.RuntimeException: Image generation failed. Exit code was 137 which indicates an out of memory error. Consider increasing the Xmx value for native image generation by setting the &quot;quarkus.native.native-image-xmx&quot; property</span><br><span class=\"line\">[ERROR]         at io.quarkus.deployment.pkg.steps.NativeImageBuildStep.imageGenerationFailed(NativeImageBuildStep.java:360)</span><br><span class=\"line\">[ERROR]         at io.quarkus.deployment.pkg.steps.NativeImageBuildStep.build(NativeImageBuildStep.java:200)</span><br><span class=\"line\">[ERROR]         ... 11 more</span><br><span class=\"line\">[ERROR] -&gt; [Help 1]</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.</span><br><span class=\"line\">[ERROR] Re-run Maven using the -X switch to enable full debug logging.</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] For more information about the errors and possible solutions, please read the following articles:</span><br><span class=\"line\">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoExecutionException</span><br></pre></td></tr></table></figure>\n\n<p>错误提示时内存不足，可以尝试设置 <code>quarkus.native.native-image-xmx</code> 参数，但是设置了这个参数还是报这个错。在查阅资料后，在一个 <a href=\"https://stackoverflow.com/questions/55157074/packaging-native-image-using-graalvm-and-quarkus-gave-an-error\">stackoverflow</a> 的回答中看到了这样一句话：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\">Pay attention it has to be less than the memory you set in your docker daemon.</span><br></pre></td></tr></table></figure>\n\n<p>他说必须小于您在 docker 守护进程中设置的内存。</p>\n<p>然后我查看 docker 的官方文档时发现，在 Mac 和 Windows 中默认的内存是 2GB。</p>\n<p>所以只要调高这个值就可以了，推荐是 8GB，各系统设置方法：</p>\n<p>Mac：<a href=\"https://docs.docker.com/docker-for-mac/#resources\">https://docs.docker.com/docker-for-mac/#resources</a></p>\n<p>Windows：<a href=\"https://docs.docker.com/docker-for-windows/#resources\">https://docs.docker.com/docker-for-windows/#resources</a></p>\n<h4 id=\"2-容器构建后的二进制文件无法运行\"><a href=\"#2-容器构建后的二进制文件无法运行\" class=\"headerlink\" title=\"2. 容器构建后的二进制文件无法运行\"></a>2. 容器构建后的二进制文件无法运行</h4><p>容器构建 native-image 完成后生成的二进制文件不能执行，提示 <code>zsh: exec format error: ./quarkus-demo-1.0-runner</code></p>\n<p>这是因为我本机是 Mac 系统，但是 Quarkus 提供的构建镜像是 Linux 系统，但是 <strong>Graal VM 目前好像并不支持交叉编译</strong>，所以在 Linux 系统里构建的二进制文件只能在 Linux 系统里执行。</p>\n<p>所以我们可以直接用容器来运行这个构建好的二进制文件。</p>\n"},{"title":"使用Maven工具创建Quarkus项目","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-07-09T07:22:39.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 环境\n\n我这边使用的是 `Maven 3.8.1`  版本，可以使用 Quarkus 官方提供的 `io.quarkus:quarkus-maven-plugin:2.0.1.Final`  插件来快速穿件 Quarkus 项目。\n\n## 创建项目\n\n使用以下 Maven 命令来创建一个新项目：\n\n```shell\nmvn io.quarkus:quarkus-maven-plugin:2.0.1.Final:create \\\n    -DprojectGroupId=top.mjava \\\n    -DprojectArtifactId=quarkus-demo \\\n    -DprojectVersion=1.0 \\\n    -DclassName=\"top.mjava.demo.Application\"\n```\n\n在执行命令的当前目录下会为项目生成和 ArtifactId 同名的文件夹，如果已存在该同名文件夹，则项目会创建失败。\n\n在 `src/main/docker` 目录下还生成了 native 和 jvm 模式的 Dockerfile，构建镜像和运行容器的指令写在这些 Dockerfile 中。\n\n### 命令描述\n\n| 属性                 | 默认值                     | 描述                                                         |\n| :------------------- | :------------------------- | :----------------------------------------------------------- |\n| `projectGroupId`     | `org.acme.sample`          | 项目的 GroupId                                               |\n| `projectArtifactId`  | 没有默认值，但是必填       | 项目的 ArtifactId                                            |\n| `projectVersion`     | `1.0.0-SNAPSHOT`           | 项目版本                                                     |\n| `platformGroupId`    | `io.quarkus`               | 目标平台的组 ID。鉴于所有现有平台都来自 io.quarkus，实际上不会明确使用这一平台。但它仍然是一个选择。 |\n| `platformArtifactId` | `quarkus-universe-bom`     | 目标平台 BOM 的工件 ID。为了使用本地构建的 Quarkus，它应该是 quarkus-bom。 |\n| `platformVersion`    | 如果未指定，将解析最新的。 | 您希望项目使用的平台版本。它还可以接受版本范围，在这种情况下，将使用指定范围中的最新版本。 |\n| `className`          | *如果省略则不创建*         | 生成的资源的完全限定名称                                     |\n| `path`               | `/hello`                   | 资源路径，仅在设置了 className 时生效。                      |\n| `extensions`         | *[]*                       | 要添加到项目的扩展列表（逗号分隔）                           |\n\n## 管理扩展\n\n创建项目后就可以进入到项目文件夹，可以使用简短的命令来操作项目了，例如：`mvn quarkus:[command]`\n\n### 查看所有扩展\n\n```shell\nmvn quarkus:list-extensions\n```\n\n该命令可以查看当前项目所使用的的所有扩展。\n\n```shell\n➜  quarkus-demo: mvn quarkus:list-extensions\n[INFO] Scanning for projects...\n[INFO] \n[INFO] -----------------------< top.mjava:quarkus-demo >-----------------------\n[INFO] Building quarkus-demo 1.0\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] \n[INFO] --- quarkus-maven-plugin:2.0.1.Final:list-extensions (default-cli) @ quarkus-demo ---\n[INFO] Current Quarkus extensions available: \n[INFO] \n[INFO] Blaze-Persistence                                  blaze-persistence-integration-quarkus             \n[INFO] Camel ActiveMQ                                     camel-quarkus-activemq                            \n[INFO] Camel Async HTTP Client (AHC)                      camel-quarkus-ahc                                 \n[INFO] Camel Async HTTP Client (AHC) Websocket            camel-quarkus-ahc-ws                              \n[INFO] Camel AMQP                                         camel-quarkus-amqp           \n......\n```\n\n### 添加扩展\n\n```shell\nmvn quarkus:add-extensions -Dextension=vertx\n```\n\n该命令可以添加扩展，例如上面这条命令为项目添加了 `vertx` 扩展\n\n```shell\n➜  quarkus-demo: mvn quarkus:add-extensions -Dextension=vertx\n[INFO] Scanning for projects...\n[INFO] \n[INFO] -----------------------< top.mjava:quarkus-demo >-----------------------\n[INFO] Building quarkus-demo 1.0\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] \n[INFO] --- quarkus-maven-plugin:2.0.1.Final:add-extensions (default-cli) @ quarkus-demo ---\n[INFO] [SUCCESS] ✅  Extension io.quarkus:quarkus-vertx has been installed\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  2.370 s\n[INFO] Finished at: 2021-07-09T15:06:50+08:00\n[INFO] ------------------------------------------------------------------------\n```\n\n### 删除扩展\n\n```shell\nmvn quarkus:remove-extensions -Dextension=vertx\n```\n\n该命令可以删除不用的扩展，比如删除刚刚添加的 `vertx` 扩展\n\n```shell\n➜  quarkus-demo: mvn quarkus:remove-extensions -Dextension=vertx\n[INFO] Scanning for projects...\n[INFO] \n[INFO] -----------------------< top.mjava:quarkus-demo >-----------------------\n[INFO] Building quarkus-demo 1.0\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] \n[INFO] --- quarkus-maven-plugin:2.0.1.Final:remove-extensions (default-cli) @ quarkus-demo ---\n[INFO] [SUCCESS] ✅  Extension io.quarkus:quarkus-vertx has been uninstalled\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  2.112 s\n[INFO] Finished at: 2021-07-09T15:08:48+08:00\n[INFO] ------------------------------------------------------------------------\n```\n\n## 项目构建\n\n### 运行项目\n\n```shell\nmvn quarkus:dev\n```\n\n执行该命令时，项目会被运行，此时访问 http://localhost:8080/hello 就会得到 `Hello RESTEasy` 输出\n\n```shell\n  quarkus-demo: mvn quarkus:dev                             \n[INFO] Scanning for projects...\n[INFO] \n[INFO] -----------------------< top.mjava:quarkus-demo >-----------------------\n[INFO] Building quarkus-demo 1.0\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] \n[INFO] --- quarkus-maven-plugin:2.0.1.Final:dev (default-cli) @ quarkus-demo ---\n[INFO] Invoking io.quarkus:quarkus-maven-plugin:2.0.1.Final:generate-code @ quarkus-demo\n[INFO] Invoking org.apache.maven.plugins:maven-resources-plugin:2.6:resources @ quarkus-demo\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] Copying 2 resources\n[INFO] Invoking org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile @ quarkus-demo\n[INFO] Nothing to compile - all classes are up to date\n[INFO] Invoking org.apache.maven.plugins:maven-resources-plugin:2.6:testResources @ quarkus-demo\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] skip non existing resourceDirectory /Users/zheng/coding/study/quarkus-demo/src/test/resources\n[INFO] Invoking org.apache.maven.plugins:maven-compiler-plugin:3.8.1:testCompile @ quarkus-demo\n[INFO] Nothing to compile - all classes are up to date\nListening for transport dt_socket at address: 5005\n__  ____  __  _____   ___  __ ____  ______ \n --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ \n -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\   \n--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   \n2021-07-09 15:16:47,146 INFO  [io.quarkus] (Quarkus Main Thread) quarkus-demo 1.0 on JVM (powered by Quarkus 2.0.1.Final) started in 3.412s. Listening on: http://localhost:8080\n2021-07-09 15:16:47,194 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.\n2021-07-09 15:16:47,199 INFO  [io.quarkus] (Quarkus Main Thread) Installed features: [cdi, resteasy, smallrye-context-propagation]\n```\n\n### 构建项目\n\n```shell\nmvn quarkus:build\n```\n\n该命令会构建项目，并会在 `target/quarkus-app/` 目录下创建一个可运行的 `jar` 包\n\n```shell\n➜  quarkus-demo mvn quarkus:build\n[INFO] Scanning for projects...\n[INFO] \n[INFO] -----------------------< top.mjava:quarkus-demo >-----------------------\n[INFO] Building quarkus-demo 1.0\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] \n[INFO] --- quarkus-maven-plugin:2.0.1.Final:build (default-cli) @ quarkus-demo ---\n[INFO] [org.jboss.threads] JBoss Threads version 3.4.0.Final\n[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 1977ms\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  4.776 s\n[INFO] Finished at: 2021-07-09T15:13:54+08:00\n[INFO] ------------------------------------------------------------------------\n```\n\n## 总结\n\n更多命令可以执行下面的命令查看，本文只介绍了几种常用的\n\n```shell\nmvn io.quarkus:quarkus-maven-plugin:2.0.1.Final:help\n\n// 或者在项目目录下可使用简短命令\nmvn quarkus:help\n```\n\n参考资料：https://quarkus.io/guides/maven-tooling\n","source":"_posts/archive/quarkus/5870388109C640649633FA0BB2F5C9C1.md","raw":"---\ntitle: 使用Maven工具创建Quarkus项目\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-07-09 15:22:39\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Quarkus\n- Maven\ncategories:\n- Quarkus\n---\n\n## 环境\n\n我这边使用的是 `Maven 3.8.1`  版本，可以使用 Quarkus 官方提供的 `io.quarkus:quarkus-maven-plugin:2.0.1.Final`  插件来快速穿件 Quarkus 项目。\n\n## 创建项目\n\n使用以下 Maven 命令来创建一个新项目：\n\n```shell\nmvn io.quarkus:quarkus-maven-plugin:2.0.1.Final:create \\\n    -DprojectGroupId=top.mjava \\\n    -DprojectArtifactId=quarkus-demo \\\n    -DprojectVersion=1.0 \\\n    -DclassName=\"top.mjava.demo.Application\"\n```\n\n在执行命令的当前目录下会为项目生成和 ArtifactId 同名的文件夹，如果已存在该同名文件夹，则项目会创建失败。\n\n在 `src/main/docker` 目录下还生成了 native 和 jvm 模式的 Dockerfile，构建镜像和运行容器的指令写在这些 Dockerfile 中。\n\n### 命令描述\n\n| 属性                 | 默认值                     | 描述                                                         |\n| :------------------- | :------------------------- | :----------------------------------------------------------- |\n| `projectGroupId`     | `org.acme.sample`          | 项目的 GroupId                                               |\n| `projectArtifactId`  | 没有默认值，但是必填       | 项目的 ArtifactId                                            |\n| `projectVersion`     | `1.0.0-SNAPSHOT`           | 项目版本                                                     |\n| `platformGroupId`    | `io.quarkus`               | 目标平台的组 ID。鉴于所有现有平台都来自 io.quarkus，实际上不会明确使用这一平台。但它仍然是一个选择。 |\n| `platformArtifactId` | `quarkus-universe-bom`     | 目标平台 BOM 的工件 ID。为了使用本地构建的 Quarkus，它应该是 quarkus-bom。 |\n| `platformVersion`    | 如果未指定，将解析最新的。 | 您希望项目使用的平台版本。它还可以接受版本范围，在这种情况下，将使用指定范围中的最新版本。 |\n| `className`          | *如果省略则不创建*         | 生成的资源的完全限定名称                                     |\n| `path`               | `/hello`                   | 资源路径，仅在设置了 className 时生效。                      |\n| `extensions`         | *[]*                       | 要添加到项目的扩展列表（逗号分隔）                           |\n\n## 管理扩展\n\n创建项目后就可以进入到项目文件夹，可以使用简短的命令来操作项目了，例如：`mvn quarkus:[command]`\n\n### 查看所有扩展\n\n```shell\nmvn quarkus:list-extensions\n```\n\n该命令可以查看当前项目所使用的的所有扩展。\n\n```shell\n➜  quarkus-demo: mvn quarkus:list-extensions\n[INFO] Scanning for projects...\n[INFO] \n[INFO] -----------------------< top.mjava:quarkus-demo >-----------------------\n[INFO] Building quarkus-demo 1.0\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] \n[INFO] --- quarkus-maven-plugin:2.0.1.Final:list-extensions (default-cli) @ quarkus-demo ---\n[INFO] Current Quarkus extensions available: \n[INFO] \n[INFO] Blaze-Persistence                                  blaze-persistence-integration-quarkus             \n[INFO] Camel ActiveMQ                                     camel-quarkus-activemq                            \n[INFO] Camel Async HTTP Client (AHC)                      camel-quarkus-ahc                                 \n[INFO] Camel Async HTTP Client (AHC) Websocket            camel-quarkus-ahc-ws                              \n[INFO] Camel AMQP                                         camel-quarkus-amqp           \n......\n```\n\n### 添加扩展\n\n```shell\nmvn quarkus:add-extensions -Dextension=vertx\n```\n\n该命令可以添加扩展，例如上面这条命令为项目添加了 `vertx` 扩展\n\n```shell\n➜  quarkus-demo: mvn quarkus:add-extensions -Dextension=vertx\n[INFO] Scanning for projects...\n[INFO] \n[INFO] -----------------------< top.mjava:quarkus-demo >-----------------------\n[INFO] Building quarkus-demo 1.0\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] \n[INFO] --- quarkus-maven-plugin:2.0.1.Final:add-extensions (default-cli) @ quarkus-demo ---\n[INFO] [SUCCESS] ✅  Extension io.quarkus:quarkus-vertx has been installed\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  2.370 s\n[INFO] Finished at: 2021-07-09T15:06:50+08:00\n[INFO] ------------------------------------------------------------------------\n```\n\n### 删除扩展\n\n```shell\nmvn quarkus:remove-extensions -Dextension=vertx\n```\n\n该命令可以删除不用的扩展，比如删除刚刚添加的 `vertx` 扩展\n\n```shell\n➜  quarkus-demo: mvn quarkus:remove-extensions -Dextension=vertx\n[INFO] Scanning for projects...\n[INFO] \n[INFO] -----------------------< top.mjava:quarkus-demo >-----------------------\n[INFO] Building quarkus-demo 1.0\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] \n[INFO] --- quarkus-maven-plugin:2.0.1.Final:remove-extensions (default-cli) @ quarkus-demo ---\n[INFO] [SUCCESS] ✅  Extension io.quarkus:quarkus-vertx has been uninstalled\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  2.112 s\n[INFO] Finished at: 2021-07-09T15:08:48+08:00\n[INFO] ------------------------------------------------------------------------\n```\n\n## 项目构建\n\n### 运行项目\n\n```shell\nmvn quarkus:dev\n```\n\n执行该命令时，项目会被运行，此时访问 http://localhost:8080/hello 就会得到 `Hello RESTEasy` 输出\n\n```shell\n  quarkus-demo: mvn quarkus:dev                             \n[INFO] Scanning for projects...\n[INFO] \n[INFO] -----------------------< top.mjava:quarkus-demo >-----------------------\n[INFO] Building quarkus-demo 1.0\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] \n[INFO] --- quarkus-maven-plugin:2.0.1.Final:dev (default-cli) @ quarkus-demo ---\n[INFO] Invoking io.quarkus:quarkus-maven-plugin:2.0.1.Final:generate-code @ quarkus-demo\n[INFO] Invoking org.apache.maven.plugins:maven-resources-plugin:2.6:resources @ quarkus-demo\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] Copying 2 resources\n[INFO] Invoking org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile @ quarkus-demo\n[INFO] Nothing to compile - all classes are up to date\n[INFO] Invoking org.apache.maven.plugins:maven-resources-plugin:2.6:testResources @ quarkus-demo\n[INFO] Using 'UTF-8' encoding to copy filtered resources.\n[INFO] skip non existing resourceDirectory /Users/zheng/coding/study/quarkus-demo/src/test/resources\n[INFO] Invoking org.apache.maven.plugins:maven-compiler-plugin:3.8.1:testCompile @ quarkus-demo\n[INFO] Nothing to compile - all classes are up to date\nListening for transport dt_socket at address: 5005\n__  ____  __  _____   ___  __ ____  ______ \n --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ \n -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\   \n--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   \n2021-07-09 15:16:47,146 INFO  [io.quarkus] (Quarkus Main Thread) quarkus-demo 1.0 on JVM (powered by Quarkus 2.0.1.Final) started in 3.412s. Listening on: http://localhost:8080\n2021-07-09 15:16:47,194 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.\n2021-07-09 15:16:47,199 INFO  [io.quarkus] (Quarkus Main Thread) Installed features: [cdi, resteasy, smallrye-context-propagation]\n```\n\n### 构建项目\n\n```shell\nmvn quarkus:build\n```\n\n该命令会构建项目，并会在 `target/quarkus-app/` 目录下创建一个可运行的 `jar` 包\n\n```shell\n➜  quarkus-demo mvn quarkus:build\n[INFO] Scanning for projects...\n[INFO] \n[INFO] -----------------------< top.mjava:quarkus-demo >-----------------------\n[INFO] Building quarkus-demo 1.0\n[INFO] --------------------------------[ jar ]---------------------------------\n[INFO] \n[INFO] --- quarkus-maven-plugin:2.0.1.Final:build (default-cli) @ quarkus-demo ---\n[INFO] [org.jboss.threads] JBoss Threads version 3.4.0.Final\n[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 1977ms\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time:  4.776 s\n[INFO] Finished at: 2021-07-09T15:13:54+08:00\n[INFO] ------------------------------------------------------------------------\n```\n\n## 总结\n\n更多命令可以执行下面的命令查看，本文只介绍了几种常用的\n\n```shell\nmvn io.quarkus:quarkus-maven-plugin:2.0.1.Final:help\n\n// 或者在项目目录下可使用简短命令\nmvn quarkus:help\n```\n\n参考资料：https://quarkus.io/guides/maven-tooling\n","slug":"archive/quarkus/5870388109C640649633FA0BB2F5C9C1","published":1,"updated":"2021-10-08T07:57:24.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehw006dvpucea23e1mz","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>我这边使用的是 <code>Maven 3.8.1</code>  版本，可以使用 Quarkus 官方提供的 <code>io.quarkus:quarkus-maven-plugin:2.0.1.Final</code>  插件来快速穿件 Quarkus 项目。</p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>使用以下 Maven 命令来创建一个新项目：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn io.quarkus:quarkus-maven-plugin:2.0.1.Final:create \\</span><br><span class=\"line\">    -DprojectGroupId=top.mjava \\</span><br><span class=\"line\">    -DprojectArtifactId=quarkus-demo \\</span><br><span class=\"line\">    -DprojectVersion=1.0 \\</span><br><span class=\"line\">    -DclassName=&quot;top.mjava.demo.Application&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在执行命令的当前目录下会为项目生成和 ArtifactId 同名的文件夹，如果已存在该同名文件夹，则项目会创建失败。</p>\n<p>在 <code>src/main/docker</code> 目录下还生成了 native 和 jvm 模式的 Dockerfile，构建镜像和运行容器的指令写在这些 Dockerfile 中。</p>\n<h3 id=\"命令描述\"><a href=\"#命令描述\" class=\"headerlink\" title=\"命令描述\"></a>命令描述</h3><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">默认值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>projectGroupId</code></td>\n<td align=\"left\"><code>org.acme.sample</code></td>\n<td align=\"left\">项目的 GroupId</td>\n</tr>\n<tr>\n<td align=\"left\"><code>projectArtifactId</code></td>\n<td align=\"left\">没有默认值，但是必填</td>\n<td align=\"left\">项目的 ArtifactId</td>\n</tr>\n<tr>\n<td align=\"left\"><code>projectVersion</code></td>\n<td align=\"left\"><code>1.0.0-SNAPSHOT</code></td>\n<td align=\"left\">项目版本</td>\n</tr>\n<tr>\n<td align=\"left\"><code>platformGroupId</code></td>\n<td align=\"left\"><code>io.quarkus</code></td>\n<td align=\"left\">目标平台的组 ID。鉴于所有现有平台都来自 io.quarkus，实际上不会明确使用这一平台。但它仍然是一个选择。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>platformArtifactId</code></td>\n<td align=\"left\"><code>quarkus-universe-bom</code></td>\n<td align=\"left\">目标平台 BOM 的工件 ID。为了使用本地构建的 Quarkus，它应该是 quarkus-bom。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>platformVersion</code></td>\n<td align=\"left\">如果未指定，将解析最新的。</td>\n<td align=\"left\">您希望项目使用的平台版本。它还可以接受版本范围，在这种情况下，将使用指定范围中的最新版本。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>className</code></td>\n<td align=\"left\"><em>如果省略则不创建</em></td>\n<td align=\"left\">生成的资源的完全限定名称</td>\n</tr>\n<tr>\n<td align=\"left\"><code>path</code></td>\n<td align=\"left\"><code>/hello</code></td>\n<td align=\"left\">资源路径，仅在设置了 className 时生效。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>extensions</code></td>\n<td align=\"left\"><em>[]</em></td>\n<td align=\"left\">要添加到项目的扩展列表（逗号分隔）</td>\n</tr>\n</tbody></table>\n<h2 id=\"管理扩展\"><a href=\"#管理扩展\" class=\"headerlink\" title=\"管理扩展\"></a>管理扩展</h2><p>创建项目后就可以进入到项目文件夹，可以使用简短的命令来操作项目了，例如：<code>mvn quarkus:[command]</code></p>\n<h3 id=\"查看所有扩展\"><a href=\"#查看所有扩展\" class=\"headerlink\" title=\"查看所有扩展\"></a>查看所有扩展</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn quarkus:list-extensions</span><br></pre></td></tr></table></figure>\n\n<p>该命令可以查看当前项目所使用的的所有扩展。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜  quarkus-demo: mvn quarkus:list-extensions</span><br><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] -----------------------&lt; top.mjava:quarkus-demo &gt;-----------------------</span><br><span class=\"line\">[INFO] Building quarkus-demo 1.0</span><br><span class=\"line\">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] --- quarkus-maven-plugin:2.0.1.Final:list-extensions (default-cli) @ quarkus-demo ---</span><br><span class=\"line\">[INFO] Current Quarkus extensions available: </span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] Blaze-Persistence                                  blaze-persistence-integration-quarkus             </span><br><span class=\"line\">[INFO] Camel ActiveMQ                                     camel-quarkus-activemq                            </span><br><span class=\"line\">[INFO] Camel Async HTTP Client (AHC)                      camel-quarkus-ahc                                 </span><br><span class=\"line\">[INFO] Camel Async HTTP Client (AHC) Websocket            camel-quarkus-ahc-ws                              </span><br><span class=\"line\">[INFO] Camel AMQP                                         camel-quarkus-amqp           </span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加扩展\"><a href=\"#添加扩展\" class=\"headerlink\" title=\"添加扩展\"></a>添加扩展</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn quarkus:add-extensions -Dextension=vertx</span><br></pre></td></tr></table></figure>\n\n<p>该命令可以添加扩展，例如上面这条命令为项目添加了 <code>vertx</code> 扩展</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜  quarkus-demo: mvn quarkus:add-extensions -Dextension=vertx</span><br><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] -----------------------&lt; top.mjava:quarkus-demo &gt;-----------------------</span><br><span class=\"line\">[INFO] Building quarkus-demo 1.0</span><br><span class=\"line\">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] --- quarkus-maven-plugin:2.0.1.Final:add-extensions (default-cli) @ quarkus-demo ---</span><br><span class=\"line\">[INFO] [SUCCESS] ✅  Extension io.quarkus:quarkus-vertx has been installed</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time:  2.370 s</span><br><span class=\"line\">[INFO] Finished at: 2021-07-09T15:06:50+08:00</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除扩展\"><a href=\"#删除扩展\" class=\"headerlink\" title=\"删除扩展\"></a>删除扩展</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn quarkus:remove-extensions -Dextension=vertx</span><br></pre></td></tr></table></figure>\n\n<p>该命令可以删除不用的扩展，比如删除刚刚添加的 <code>vertx</code> 扩展</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜  quarkus-demo: mvn quarkus:remove-extensions -Dextension=vertx</span><br><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] -----------------------&lt; top.mjava:quarkus-demo &gt;-----------------------</span><br><span class=\"line\">[INFO] Building quarkus-demo 1.0</span><br><span class=\"line\">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] --- quarkus-maven-plugin:2.0.1.Final:remove-extensions (default-cli) @ quarkus-demo ---</span><br><span class=\"line\">[INFO] [SUCCESS] ✅  Extension io.quarkus:quarkus-vertx has been uninstalled</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time:  2.112 s</span><br><span class=\"line\">[INFO] Finished at: 2021-07-09T15:08:48+08:00</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目构建\"><a href=\"#项目构建\" class=\"headerlink\" title=\"项目构建\"></a>项目构建</h2><h3 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn quarkus:dev</span><br></pre></td></tr></table></figure>\n\n<p>执行该命令时，项目会被运行，此时访问 <a href=\"http://localhost:8080/hello\">http://localhost:8080/hello</a> 就会得到 <code>Hello RESTEasy</code> 输出</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">  quarkus-demo: mvn quarkus:dev                             </span><br><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] -----------------------&lt; top.mjava:quarkus-demo &gt;-----------------------</span><br><span class=\"line\">[INFO] Building quarkus-demo 1.0</span><br><span class=\"line\">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] --- quarkus-maven-plugin:2.0.1.Final:dev (default-cli) @ quarkus-demo ---</span><br><span class=\"line\">[INFO] Invoking io.quarkus:quarkus-maven-plugin:2.0.1.Final:generate-code @ quarkus-demo</span><br><span class=\"line\">[INFO] Invoking org.apache.maven.plugins:maven-resources-plugin:2.6:resources @ quarkus-demo</span><br><span class=\"line\">[INFO] Using &#x27;UTF-8&#x27; encoding to copy filtered resources.</span><br><span class=\"line\">[INFO] Copying 2 resources</span><br><span class=\"line\">[INFO] Invoking org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile @ quarkus-demo</span><br><span class=\"line\">[INFO] Nothing to compile - all classes are up to date</span><br><span class=\"line\">[INFO] Invoking org.apache.maven.plugins:maven-resources-plugin:2.6:testResources @ quarkus-demo</span><br><span class=\"line\">[INFO] Using &#x27;UTF-8&#x27; encoding to copy filtered resources.</span><br><span class=\"line\">[INFO] skip non existing resourceDirectory /Users/zheng/coding/study/quarkus-demo/src/test/resources</span><br><span class=\"line\">[INFO] Invoking org.apache.maven.plugins:maven-compiler-plugin:3.8.1:testCompile @ quarkus-demo</span><br><span class=\"line\">[INFO] Nothing to compile - all classes are up to date</span><br><span class=\"line\">Listening for transport dt_socket at address: 5005</span><br><span class=\"line\">__  ____  __  _____   ___  __ ____  ______ </span><br><span class=\"line\"> --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ </span><br><span class=\"line\"> -/ /_/ / /_/ / __ |/ , _/ ,&lt; / /_/ /\\ \\   </span><br><span class=\"line\">--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   </span><br><span class=\"line\">2021-07-09 15:16:47,146 INFO  [io.quarkus] (Quarkus Main Thread) quarkus-demo 1.0 on JVM (powered by Quarkus 2.0.1.Final) started in 3.412s. Listening on: http://localhost:8080</span><br><span class=\"line\">2021-07-09 15:16:47,194 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.</span><br><span class=\"line\">2021-07-09 15:16:47,199 INFO  [io.quarkus] (Quarkus Main Thread) Installed features: [cdi, resteasy, smallrye-context-propagation]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构建项目\"><a href=\"#构建项目\" class=\"headerlink\" title=\"构建项目\"></a>构建项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn quarkus:build</span><br></pre></td></tr></table></figure>\n\n<p>该命令会构建项目，并会在 <code>target/quarkus-app/</code> 目录下创建一个可运行的 <code>jar</code> 包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜  quarkus-demo mvn quarkus:build</span><br><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] -----------------------&lt; top.mjava:quarkus-demo &gt;-----------------------</span><br><span class=\"line\">[INFO] Building quarkus-demo 1.0</span><br><span class=\"line\">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] --- quarkus-maven-plugin:2.0.1.Final:build (default-cli) @ quarkus-demo ---</span><br><span class=\"line\">[INFO] [org.jboss.threads] JBoss Threads version 3.4.0.Final</span><br><span class=\"line\">[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 1977ms</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time:  4.776 s</span><br><span class=\"line\">[INFO] Finished at: 2021-07-09T15:13:54+08:00</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>更多命令可以执行下面的命令查看，本文只介绍了几种常用的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn io.quarkus:quarkus-maven-plugin:2.0.1.Final:help</span><br><span class=\"line\"></span><br><span class=\"line\">// 或者在项目目录下可使用简短命令</span><br><span class=\"line\">mvn quarkus:help</span><br></pre></td></tr></table></figure>\n\n<p>参考资料：<a href=\"https://quarkus.io/guides/maven-tooling\">https://quarkus.io/guides/maven-tooling</a></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>我这边使用的是 <code>Maven 3.8.1</code>  版本，可以使用 Quarkus 官方提供的 <code>io.quarkus:quarkus-maven-plugin:2.0.1.Final</code>  插件来快速穿件 Quarkus 项目。</p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><p>使用以下 Maven 命令来创建一个新项目：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn io.quarkus:quarkus-maven-plugin:2.0.1.Final:create \\</span><br><span class=\"line\">    -DprojectGroupId=top.mjava \\</span><br><span class=\"line\">    -DprojectArtifactId=quarkus-demo \\</span><br><span class=\"line\">    -DprojectVersion=1.0 \\</span><br><span class=\"line\">    -DclassName=&quot;top.mjava.demo.Application&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在执行命令的当前目录下会为项目生成和 ArtifactId 同名的文件夹，如果已存在该同名文件夹，则项目会创建失败。</p>\n<p>在 <code>src/main/docker</code> 目录下还生成了 native 和 jvm 模式的 Dockerfile，构建镜像和运行容器的指令写在这些 Dockerfile 中。</p>\n<h3 id=\"命令描述\"><a href=\"#命令描述\" class=\"headerlink\" title=\"命令描述\"></a>命令描述</h3><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">默认值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>projectGroupId</code></td>\n<td align=\"left\"><code>org.acme.sample</code></td>\n<td align=\"left\">项目的 GroupId</td>\n</tr>\n<tr>\n<td align=\"left\"><code>projectArtifactId</code></td>\n<td align=\"left\">没有默认值，但是必填</td>\n<td align=\"left\">项目的 ArtifactId</td>\n</tr>\n<tr>\n<td align=\"left\"><code>projectVersion</code></td>\n<td align=\"left\"><code>1.0.0-SNAPSHOT</code></td>\n<td align=\"left\">项目版本</td>\n</tr>\n<tr>\n<td align=\"left\"><code>platformGroupId</code></td>\n<td align=\"left\"><code>io.quarkus</code></td>\n<td align=\"left\">目标平台的组 ID。鉴于所有现有平台都来自 io.quarkus，实际上不会明确使用这一平台。但它仍然是一个选择。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>platformArtifactId</code></td>\n<td align=\"left\"><code>quarkus-universe-bom</code></td>\n<td align=\"left\">目标平台 BOM 的工件 ID。为了使用本地构建的 Quarkus，它应该是 quarkus-bom。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>platformVersion</code></td>\n<td align=\"left\">如果未指定，将解析最新的。</td>\n<td align=\"left\">您希望项目使用的平台版本。它还可以接受版本范围，在这种情况下，将使用指定范围中的最新版本。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>className</code></td>\n<td align=\"left\"><em>如果省略则不创建</em></td>\n<td align=\"left\">生成的资源的完全限定名称</td>\n</tr>\n<tr>\n<td align=\"left\"><code>path</code></td>\n<td align=\"left\"><code>/hello</code></td>\n<td align=\"left\">资源路径，仅在设置了 className 时生效。</td>\n</tr>\n<tr>\n<td align=\"left\"><code>extensions</code></td>\n<td align=\"left\"><em>[]</em></td>\n<td align=\"left\">要添加到项目的扩展列表（逗号分隔）</td>\n</tr>\n</tbody></table>\n<h2 id=\"管理扩展\"><a href=\"#管理扩展\" class=\"headerlink\" title=\"管理扩展\"></a>管理扩展</h2><p>创建项目后就可以进入到项目文件夹，可以使用简短的命令来操作项目了，例如：<code>mvn quarkus:[command]</code></p>\n<h3 id=\"查看所有扩展\"><a href=\"#查看所有扩展\" class=\"headerlink\" title=\"查看所有扩展\"></a>查看所有扩展</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn quarkus:list-extensions</span><br></pre></td></tr></table></figure>\n\n<p>该命令可以查看当前项目所使用的的所有扩展。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜  quarkus-demo: mvn quarkus:list-extensions</span><br><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] -----------------------&lt; top.mjava:quarkus-demo &gt;-----------------------</span><br><span class=\"line\">[INFO] Building quarkus-demo 1.0</span><br><span class=\"line\">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] --- quarkus-maven-plugin:2.0.1.Final:list-extensions (default-cli) @ quarkus-demo ---</span><br><span class=\"line\">[INFO] Current Quarkus extensions available: </span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] Blaze-Persistence                                  blaze-persistence-integration-quarkus             </span><br><span class=\"line\">[INFO] Camel ActiveMQ                                     camel-quarkus-activemq                            </span><br><span class=\"line\">[INFO] Camel Async HTTP Client (AHC)                      camel-quarkus-ahc                                 </span><br><span class=\"line\">[INFO] Camel Async HTTP Client (AHC) Websocket            camel-quarkus-ahc-ws                              </span><br><span class=\"line\">[INFO] Camel AMQP                                         camel-quarkus-amqp           </span><br><span class=\"line\">......</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加扩展\"><a href=\"#添加扩展\" class=\"headerlink\" title=\"添加扩展\"></a>添加扩展</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn quarkus:add-extensions -Dextension=vertx</span><br></pre></td></tr></table></figure>\n\n<p>该命令可以添加扩展，例如上面这条命令为项目添加了 <code>vertx</code> 扩展</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜  quarkus-demo: mvn quarkus:add-extensions -Dextension=vertx</span><br><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] -----------------------&lt; top.mjava:quarkus-demo &gt;-----------------------</span><br><span class=\"line\">[INFO] Building quarkus-demo 1.0</span><br><span class=\"line\">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] --- quarkus-maven-plugin:2.0.1.Final:add-extensions (default-cli) @ quarkus-demo ---</span><br><span class=\"line\">[INFO] [SUCCESS] ✅  Extension io.quarkus:quarkus-vertx has been installed</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time:  2.370 s</span><br><span class=\"line\">[INFO] Finished at: 2021-07-09T15:06:50+08:00</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除扩展\"><a href=\"#删除扩展\" class=\"headerlink\" title=\"删除扩展\"></a>删除扩展</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn quarkus:remove-extensions -Dextension=vertx</span><br></pre></td></tr></table></figure>\n\n<p>该命令可以删除不用的扩展，比如删除刚刚添加的 <code>vertx</code> 扩展</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜  quarkus-demo: mvn quarkus:remove-extensions -Dextension=vertx</span><br><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] -----------------------&lt; top.mjava:quarkus-demo &gt;-----------------------</span><br><span class=\"line\">[INFO] Building quarkus-demo 1.0</span><br><span class=\"line\">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] --- quarkus-maven-plugin:2.0.1.Final:remove-extensions (default-cli) @ quarkus-demo ---</span><br><span class=\"line\">[INFO] [SUCCESS] ✅  Extension io.quarkus:quarkus-vertx has been uninstalled</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time:  2.112 s</span><br><span class=\"line\">[INFO] Finished at: 2021-07-09T15:08:48+08:00</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"项目构建\"><a href=\"#项目构建\" class=\"headerlink\" title=\"项目构建\"></a>项目构建</h2><h3 id=\"运行项目\"><a href=\"#运行项目\" class=\"headerlink\" title=\"运行项目\"></a>运行项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn quarkus:dev</span><br></pre></td></tr></table></figure>\n\n<p>执行该命令时，项目会被运行，此时访问 <a href=\"http://localhost:8080/hello\">http://localhost:8080/hello</a> 就会得到 <code>Hello RESTEasy</code> 输出</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">  quarkus-demo: mvn quarkus:dev                             </span><br><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] -----------------------&lt; top.mjava:quarkus-demo &gt;-----------------------</span><br><span class=\"line\">[INFO] Building quarkus-demo 1.0</span><br><span class=\"line\">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] --- quarkus-maven-plugin:2.0.1.Final:dev (default-cli) @ quarkus-demo ---</span><br><span class=\"line\">[INFO] Invoking io.quarkus:quarkus-maven-plugin:2.0.1.Final:generate-code @ quarkus-demo</span><br><span class=\"line\">[INFO] Invoking org.apache.maven.plugins:maven-resources-plugin:2.6:resources @ quarkus-demo</span><br><span class=\"line\">[INFO] Using &#x27;UTF-8&#x27; encoding to copy filtered resources.</span><br><span class=\"line\">[INFO] Copying 2 resources</span><br><span class=\"line\">[INFO] Invoking org.apache.maven.plugins:maven-compiler-plugin:3.8.1:compile @ quarkus-demo</span><br><span class=\"line\">[INFO] Nothing to compile - all classes are up to date</span><br><span class=\"line\">[INFO] Invoking org.apache.maven.plugins:maven-resources-plugin:2.6:testResources @ quarkus-demo</span><br><span class=\"line\">[INFO] Using &#x27;UTF-8&#x27; encoding to copy filtered resources.</span><br><span class=\"line\">[INFO] skip non existing resourceDirectory /Users/zheng/coding/study/quarkus-demo/src/test/resources</span><br><span class=\"line\">[INFO] Invoking org.apache.maven.plugins:maven-compiler-plugin:3.8.1:testCompile @ quarkus-demo</span><br><span class=\"line\">[INFO] Nothing to compile - all classes are up to date</span><br><span class=\"line\">Listening for transport dt_socket at address: 5005</span><br><span class=\"line\">__  ____  __  _____   ___  __ ____  ______ </span><br><span class=\"line\"> --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ </span><br><span class=\"line\"> -/ /_/ / /_/ / __ |/ , _/ ,&lt; / /_/ /\\ \\   </span><br><span class=\"line\">--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   </span><br><span class=\"line\">2021-07-09 15:16:47,146 INFO  [io.quarkus] (Quarkus Main Thread) quarkus-demo 1.0 on JVM (powered by Quarkus 2.0.1.Final) started in 3.412s. Listening on: http://localhost:8080</span><br><span class=\"line\">2021-07-09 15:16:47,194 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev activated. Live Coding activated.</span><br><span class=\"line\">2021-07-09 15:16:47,199 INFO  [io.quarkus] (Quarkus Main Thread) Installed features: [cdi, resteasy, smallrye-context-propagation]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"构建项目\"><a href=\"#构建项目\" class=\"headerlink\" title=\"构建项目\"></a>构建项目</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn quarkus:build</span><br></pre></td></tr></table></figure>\n\n<p>该命令会构建项目，并会在 <code>target/quarkus-app/</code> 目录下创建一个可运行的 <code>jar</code> 包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">➜  quarkus-demo mvn quarkus:build</span><br><span class=\"line\">[INFO] Scanning for projects...</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] -----------------------&lt; top.mjava:quarkus-demo &gt;-----------------------</span><br><span class=\"line\">[INFO] Building quarkus-demo 1.0</span><br><span class=\"line\">[INFO] --------------------------------[ jar ]---------------------------------</span><br><span class=\"line\">[INFO] </span><br><span class=\"line\">[INFO] --- quarkus-maven-plugin:2.0.1.Final:build (default-cli) @ quarkus-demo ---</span><br><span class=\"line\">[INFO] [org.jboss.threads] JBoss Threads version 3.4.0.Final</span><br><span class=\"line\">[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 1977ms</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time:  4.776 s</span><br><span class=\"line\">[INFO] Finished at: 2021-07-09T15:13:54+08:00</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>更多命令可以执行下面的命令查看，本文只介绍了几种常用的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mvn io.quarkus:quarkus-maven-plugin:2.0.1.Final:help</span><br><span class=\"line\"></span><br><span class=\"line\">// 或者在项目目录下可使用简短命令</span><br><span class=\"line\">mvn quarkus:help</span><br></pre></td></tr></table></figure>\n\n<p>参考资料：<a href=\"https://quarkus.io/guides/maven-tooling\">https://quarkus.io/guides/maven-tooling</a></p>\n"},{"title":"OAuth2.0与JWT","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-12T06:59:43.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n\n\n\n\n## OAuth2.0\n\nOAuth2.0是一个授权协议，它允许软件应用代表资源拥有者去访问资源拥有者的资源。应用向资源拥有者请求`令牌`，并用这个令牌来访问资源拥有者的资源。\n\n### 角色\n\n- 客户端：相当于访问受保护资源的软件\n- 授权服务器：授予客户端令牌的服务\n- 资源拥有者：受保护的资源拥有者，有权决定将不将令牌授权给客户端\n- 受保护的资源：除资源拥有者外，要访问此资源必须要有授权服务器颁发的有效的令牌\n\n### 授权类型\n\n\n\n#### 授权码许可类型![授权码许可类型](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/kz7JqTx.png)\n\n---\n\n#### 隐式许可类型![隐式许可类型](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/fHnS4Ea.png)\n\n---\n\n#### 客户端凭证许可类型![客户端凭证许可类型](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/4AHqDCn.png)\n\n---\n\n#### 资源拥有者凭证许可类型(账号密码模式)![资源拥有者凭证许可类型(账号密码模式)](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/kfl2IOk.png)\n\n---\n\n#### 断言许可类型![断言许可类型](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/MSP1YWU.png)\n\n\n\n## JWT\n\nJWT全称：JSON Web Token，是一种令牌格式。其格式类似为`xxxxx.yyyyy.zzzzz`,分为三部分，每个部分都用`Base64`进行编码，之间用`.`分隔。\n\n第一部分：为Header部分，标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。\n\n```json\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\n\n\n第二部分：令牌的第二部分是有效负载，其中包含声明。 声明是有关实体（通常是用户）和其他数据的声明。 共有三种类型的声明：注册的，公共的和私有的三种声明。当然里面可以存放任何有效的字段信息（私有声明）。但是为了避免不同实现之间不兼容，可以准守JWT官方提供的声明字段。\n\n- 注册声明：JWT官方提供的声明，参考资料:https://tools.ietf.org/html/rfc7519#section-4.1\n- 公共声明：用户发邮件给JWT官方进行注册的声明字段，参考资料：https://tools.ietf.org/html/rfc7519#section-4.2\n- 私有声明：完全用户自定义，参考资料https://tools.ietf.org/html/rfc7519#section-4.3\n\n第三部分：为令牌签名部分，使用这个字段后，资源服务器只会接受签名正确的令牌。","source":"_posts/archive/web-security/oauth-and-jwt.md","raw":"---\ntitle: OAuth2.0与JWT\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-12 14:59:43\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- OAuth2.0\n- JWT\ncategories:\n- WebSecurity\n---\n\n\n\n\n\n\n\n## OAuth2.0\n\nOAuth2.0是一个授权协议，它允许软件应用代表资源拥有者去访问资源拥有者的资源。应用向资源拥有者请求`令牌`，并用这个令牌来访问资源拥有者的资源。\n\n### 角色\n\n- 客户端：相当于访问受保护资源的软件\n- 授权服务器：授予客户端令牌的服务\n- 资源拥有者：受保护的资源拥有者，有权决定将不将令牌授权给客户端\n- 受保护的资源：除资源拥有者外，要访问此资源必须要有授权服务器颁发的有效的令牌\n\n### 授权类型\n\n\n\n#### 授权码许可类型![授权码许可类型](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/kz7JqTx.png)\n\n---\n\n#### 隐式许可类型![隐式许可类型](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/fHnS4Ea.png)\n\n---\n\n#### 客户端凭证许可类型![客户端凭证许可类型](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/4AHqDCn.png)\n\n---\n\n#### 资源拥有者凭证许可类型(账号密码模式)![资源拥有者凭证许可类型(账号密码模式)](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/kfl2IOk.png)\n\n---\n\n#### 断言许可类型![断言许可类型](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/MSP1YWU.png)\n\n\n\n## JWT\n\nJWT全称：JSON Web Token，是一种令牌格式。其格式类似为`xxxxx.yyyyy.zzzzz`,分为三部分，每个部分都用`Base64`进行编码，之间用`.`分隔。\n\n第一部分：为Header部分，标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。\n\n```json\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\n\n\n第二部分：令牌的第二部分是有效负载，其中包含声明。 声明是有关实体（通常是用户）和其他数据的声明。 共有三种类型的声明：注册的，公共的和私有的三种声明。当然里面可以存放任何有效的字段信息（私有声明）。但是为了避免不同实现之间不兼容，可以准守JWT官方提供的声明字段。\n\n- 注册声明：JWT官方提供的声明，参考资料:https://tools.ietf.org/html/rfc7519#section-4.1\n- 公共声明：用户发邮件给JWT官方进行注册的声明字段，参考资料：https://tools.ietf.org/html/rfc7519#section-4.2\n- 私有声明：完全用户自定义，参考资料https://tools.ietf.org/html/rfc7519#section-4.3\n\n第三部分：为令牌签名部分，使用这个字段后，资源服务器只会接受签名正确的令牌。","slug":"archive/web-security/oauth-and-jwt","published":1,"updated":"2021-10-08T08:15:37.475Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehx006ivpucbhf5ax4o","content":"<h2 id=\"OAuth2-0\"><a href=\"#OAuth2-0\" class=\"headerlink\" title=\"OAuth2.0\"></a>OAuth2.0</h2><p>OAuth2.0是一个授权协议，它允许软件应用代表资源拥有者去访问资源拥有者的资源。应用向资源拥有者请求<code>令牌</code>，并用这个令牌来访问资源拥有者的资源。</p>\n<h3 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h3><ul>\n<li>客户端：相当于访问受保护资源的软件</li>\n<li>授权服务器：授予客户端令牌的服务</li>\n<li>资源拥有者：受保护的资源拥有者，有权决定将不将令牌授权给客户端</li>\n<li>受保护的资源：除资源拥有者外，要访问此资源必须要有授权服务器颁发的有效的令牌</li>\n</ul>\n<h3 id=\"授权类型\"><a href=\"#授权类型\" class=\"headerlink\" title=\"授权类型\"></a>授权类型</h3><h4 id=\"授权码许可类型\"><a href=\"#授权码许可类型\" class=\"headerlink\" title=\"授权码许可类型\"></a>授权码许可类型<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/kz7JqTx.png\" alt=\"授权码许可类型\"></h4><hr>\n<h4 id=\"隐式许可类型\"><a href=\"#隐式许可类型\" class=\"headerlink\" title=\"隐式许可类型\"></a>隐式许可类型<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/fHnS4Ea.png\" alt=\"隐式许可类型\"></h4><hr>\n<h4 id=\"客户端凭证许可类型\"><a href=\"#客户端凭证许可类型\" class=\"headerlink\" title=\"客户端凭证许可类型\"></a>客户端凭证许可类型<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/4AHqDCn.png\" alt=\"客户端凭证许可类型\"></h4><hr>\n<h4 id=\"资源拥有者凭证许可类型-账号密码模式\"><a href=\"#资源拥有者凭证许可类型-账号密码模式\" class=\"headerlink\" title=\"资源拥有者凭证许可类型(账号密码模式)\"></a>资源拥有者凭证许可类型(账号密码模式)<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/kfl2IOk.png\" alt=\"资源拥有者凭证许可类型(账号密码模式)\"></h4><hr>\n<h4 id=\"断言许可类型\"><a href=\"#断言许可类型\" class=\"headerlink\" title=\"断言许可类型\"></a>断言许可类型<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/MSP1YWU.png\" alt=\"断言许可类型\"></h4><h2 id=\"JWT\"><a href=\"#JWT\" class=\"headerlink\" title=\"JWT\"></a>JWT</h2><p>JWT全称：JSON Web Token，是一种令牌格式。其格式类似为<code>xxxxx.yyyyy.zzzzz</code>,分为三部分，每个部分都用<code>Base64</code>进行编码，之间用<code>.</code>分隔。</p>\n<p>第一部分：为Header部分，标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;alg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;HS256&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;typ&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;JWT&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>第二部分：令牌的第二部分是有效负载，其中包含声明。 声明是有关实体（通常是用户）和其他数据的声明。 共有三种类型的声明：注册的，公共的和私有的三种声明。当然里面可以存放任何有效的字段信息（私有声明）。但是为了避免不同实现之间不兼容，可以准守JWT官方提供的声明字段。</p>\n<ul>\n<li>注册声明：JWT官方提供的声明，参考资料:<a href=\"https://tools.ietf.org/html/rfc7519#section-4.1\">https://tools.ietf.org/html/rfc7519#section-4.1</a></li>\n<li>公共声明：用户发邮件给JWT官方进行注册的声明字段，参考资料：<a href=\"https://tools.ietf.org/html/rfc7519#section-4.2\">https://tools.ietf.org/html/rfc7519#section-4.2</a></li>\n<li>私有声明：完全用户自定义，参考资料<a href=\"https://tools.ietf.org/html/rfc7519#section-4.3\">https://tools.ietf.org/html/rfc7519#section-4.3</a></li>\n</ul>\n<p>第三部分：为令牌签名部分，使用这个字段后，资源服务器只会接受签名正确的令牌。</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"OAuth2-0\"><a href=\"#OAuth2-0\" class=\"headerlink\" title=\"OAuth2.0\"></a>OAuth2.0</h2><p>OAuth2.0是一个授权协议，它允许软件应用代表资源拥有者去访问资源拥有者的资源。应用向资源拥有者请求<code>令牌</code>，并用这个令牌来访问资源拥有者的资源。</p>\n<h3 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h3><ul>\n<li>客户端：相当于访问受保护资源的软件</li>\n<li>授权服务器：授予客户端令牌的服务</li>\n<li>资源拥有者：受保护的资源拥有者，有权决定将不将令牌授权给客户端</li>\n<li>受保护的资源：除资源拥有者外，要访问此资源必须要有授权服务器颁发的有效的令牌</li>\n</ul>\n<h3 id=\"授权类型\"><a href=\"#授权类型\" class=\"headerlink\" title=\"授权类型\"></a>授权类型</h3><h4 id=\"授权码许可类型\"><a href=\"#授权码许可类型\" class=\"headerlink\" title=\"授权码许可类型\"></a>授权码许可类型<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/kz7JqTx.png\" alt=\"授权码许可类型\"></h4><hr>\n<h4 id=\"隐式许可类型\"><a href=\"#隐式许可类型\" class=\"headerlink\" title=\"隐式许可类型\"></a>隐式许可类型<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/fHnS4Ea.png\" alt=\"隐式许可类型\"></h4><hr>\n<h4 id=\"客户端凭证许可类型\"><a href=\"#客户端凭证许可类型\" class=\"headerlink\" title=\"客户端凭证许可类型\"></a>客户端凭证许可类型<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/4AHqDCn.png\" alt=\"客户端凭证许可类型\"></h4><hr>\n<h4 id=\"资源拥有者凭证许可类型-账号密码模式\"><a href=\"#资源拥有者凭证许可类型-账号密码模式\" class=\"headerlink\" title=\"资源拥有者凭证许可类型(账号密码模式)\"></a>资源拥有者凭证许可类型(账号密码模式)<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/kfl2IOk.png\" alt=\"资源拥有者凭证许可类型(账号密码模式)\"></h4><hr>\n<h4 id=\"断言许可类型\"><a href=\"#断言许可类型\" class=\"headerlink\" title=\"断言许可类型\"></a>断言许可类型<img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/MSP1YWU.png\" alt=\"断言许可类型\"></h4><h2 id=\"JWT\"><a href=\"#JWT\" class=\"headerlink\" title=\"JWT\"></a>JWT</h2><p>JWT全称：JSON Web Token，是一种令牌格式。其格式类似为<code>xxxxx.yyyyy.zzzzz</code>,分为三部分，每个部分都用<code>Base64</code>进行编码，之间用<code>.</code>分隔。</p>\n<p>第一部分：为Header部分，标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;alg&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;HS256&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;typ&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;JWT&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>第二部分：令牌的第二部分是有效负载，其中包含声明。 声明是有关实体（通常是用户）和其他数据的声明。 共有三种类型的声明：注册的，公共的和私有的三种声明。当然里面可以存放任何有效的字段信息（私有声明）。但是为了避免不同实现之间不兼容，可以准守JWT官方提供的声明字段。</p>\n<ul>\n<li>注册声明：JWT官方提供的声明，参考资料:<a href=\"https://tools.ietf.org/html/rfc7519#section-4.1\">https://tools.ietf.org/html/rfc7519#section-4.1</a></li>\n<li>公共声明：用户发邮件给JWT官方进行注册的声明字段，参考资料：<a href=\"https://tools.ietf.org/html/rfc7519#section-4.2\">https://tools.ietf.org/html/rfc7519#section-4.2</a></li>\n<li>私有声明：完全用户自定义，参考资料<a href=\"https://tools.ietf.org/html/rfc7519#section-4.3\">https://tools.ietf.org/html/rfc7519#section-4.3</a></li>\n</ul>\n<p>第三部分：为令牌签名部分，使用这个字段后，资源服务器只会接受签名正确的令牌。</p>\n"},{"title":"基于SpringCloud搭建Spring-security-oauth认证服务器","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-19T12:25:06.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n\n\n## 准备阶段\n\n这里搭建一个用OAuth2.0密码模式认证的服务器，token存入redis，client存入Mysql；\n\n所以事先要准备好：\n\n- Redis\n- Mysql\n\n并且Mysql执行[Spring-security-oauth初始化Sql](https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql)这个SQL，初始化Spring-security-oauth所需要的表。然后执行\n\n```sql\n-- 插入client_id和client_secret都为sunline的客户端\ninsert into \n\toauth_client_details (client_id, client_secret, authorized_grant_types , autoapprove)\nvalues \n\t(\"sunline\",\"\t{bcrypt}$2a$10$G1CFd535SiyOtvi6ckbZWexQy.hW5x/I/fLBPiW/E4UmctCfKYbgG\",\"password\",\"true\");\n```\n\n> client_secret为`new BCryptPasswordEncoder().encode(\"sunline\")`方法加密后，然后在加上`{bcrypt}`\n\n\n\n## 开始搭建\n\n\n\n### 导入pom依赖\n\n```java\n<!--security-oauth-->\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-oauth2</artifactId>\n</dependency>\n    \n<!--redis-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n    \n<!--mysql-->\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.17</version>\n    <scope>compile</scope>\n</dependency>\n```\n\n\n\n### 配置application.properties\n\n```properties\n#datasource\nspring.datasource.url=jdbc:mysql://localhost:3307/grey_code?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai\nspring.datasource.username=zmh\nspring.datasource.password=zmh\n\n#redis\nspring.redis.host=127.0.0.1\nspring.redis.port=6379\n\n\nserver.port=9991\nserver.servlet.context-path=/oauthServer\n```\n\n\n\n### 创建用户详情服务类\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/PBwaTcT.png)\n\n#### 创建权限控制类\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/U0y9Di5.png)\n\n### 创建认证授权类\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/lVXiu5n.png)\n\n## 获取令牌\n\n访问:`/oauth/token`就可以获取到令牌\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/4ieRNLw.png)\n\n```json\n{\n    \"accessToken\": \"e28f9a99-e60d-4693-b6c3-73e06a1d14f5ZMH10086\",\n    \"expiration\": \"2020-05-19T21:11:39.883+0000\",\n    \"scope\": [\n        \"all\"\n    ],\n    \"tokenType\": \"bearer\"\n}\n```\n\n\n\n### 访问资源\n\n带上获取到的令牌\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/W57xN9e.png)","source":"_posts/archive/web-security/spring-security-oauth-server-demo.md","raw":"---\ntitle: 基于SpringCloud搭建Spring-security-oauth认证服务器\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-19 20:25:06\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- OAuth\n- spring-security\ncategories:\n- WebSecurity\n---\n\n\n\n\n\n## 准备阶段\n\n这里搭建一个用OAuth2.0密码模式认证的服务器，token存入redis，client存入Mysql；\n\n所以事先要准备好：\n\n- Redis\n- Mysql\n\n并且Mysql执行[Spring-security-oauth初始化Sql](https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql)这个SQL，初始化Spring-security-oauth所需要的表。然后执行\n\n```sql\n-- 插入client_id和client_secret都为sunline的客户端\ninsert into \n\toauth_client_details (client_id, client_secret, authorized_grant_types , autoapprove)\nvalues \n\t(\"sunline\",\"\t{bcrypt}$2a$10$G1CFd535SiyOtvi6ckbZWexQy.hW5x/I/fLBPiW/E4UmctCfKYbgG\",\"password\",\"true\");\n```\n\n> client_secret为`new BCryptPasswordEncoder().encode(\"sunline\")`方法加密后，然后在加上`{bcrypt}`\n\n\n\n## 开始搭建\n\n\n\n### 导入pom依赖\n\n```java\n<!--security-oauth-->\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-oauth2</artifactId>\n</dependency>\n    \n<!--redis-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n    \n<!--mysql-->\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.17</version>\n    <scope>compile</scope>\n</dependency>\n```\n\n\n\n### 配置application.properties\n\n```properties\n#datasource\nspring.datasource.url=jdbc:mysql://localhost:3307/grey_code?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai\nspring.datasource.username=zmh\nspring.datasource.password=zmh\n\n#redis\nspring.redis.host=127.0.0.1\nspring.redis.port=6379\n\n\nserver.port=9991\nserver.servlet.context-path=/oauthServer\n```\n\n\n\n### 创建用户详情服务类\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/PBwaTcT.png)\n\n#### 创建权限控制类\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/U0y9Di5.png)\n\n### 创建认证授权类\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/lVXiu5n.png)\n\n## 获取令牌\n\n访问:`/oauth/token`就可以获取到令牌\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/4ieRNLw.png)\n\n```json\n{\n    \"accessToken\": \"e28f9a99-e60d-4693-b6c3-73e06a1d14f5ZMH10086\",\n    \"expiration\": \"2020-05-19T21:11:39.883+0000\",\n    \"scope\": [\n        \"all\"\n    ],\n    \"tokenType\": \"bearer\"\n}\n```\n\n\n\n### 访问资源\n\n带上获取到的令牌\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/W57xN9e.png)","slug":"archive/web-security/spring-security-oauth-server-demo","published":1,"updated":"2021-10-08T08:16:40.509Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehx006kvpuc3b8ufmte","content":"<h2 id=\"准备阶段\"><a href=\"#准备阶段\" class=\"headerlink\" title=\"准备阶段\"></a>准备阶段</h2><p>这里搭建一个用OAuth2.0密码模式认证的服务器，token存入redis，client存入Mysql；</p>\n<p>所以事先要准备好：</p>\n<ul>\n<li>Redis</li>\n<li>Mysql</li>\n</ul>\n<p>并且Mysql执行<a href=\"https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql\">Spring-security-oauth初始化Sql</a>这个SQL，初始化Spring-security-oauth所需要的表。然后执行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 插入client_id和client_secret都为sunline的客户端</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> </span><br><span class=\"line\">\toauth_client_details (client_id, client_secret, authorized_grant_types , autoapprove)</span><br><span class=\"line\"><span class=\"keyword\">values</span> </span><br><span class=\"line\">\t(&quot;sunline&quot;,&quot;\t&#123;bcrypt&#125;$2a$10$G1CFd535SiyOtvi6ckbZWexQy.hW5x/I/fLBPiW/E4UmctCfKYbgG&quot;,&quot;password&quot;,&quot;true&quot;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>client_secret为<code>new BCryptPasswordEncoder().encode(&quot;sunline&quot;)</code>方法加密后，然后在加上<code>&#123;bcrypt&#125;</code></p>\n</blockquote>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><h3 id=\"导入pom依赖\"><a href=\"#导入pom依赖\" class=\"headerlink\" title=\"导入pom依赖\"></a>导入pom依赖</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!--security-oauth--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;!--redis--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;!--mysql--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">8.0</span><span class=\"number\">.17</span>&lt;/version&gt;</span><br><span class=\"line\">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"配置application-properties\"><a href=\"#配置application-properties\" class=\"headerlink\" title=\"配置application.properties\"></a>配置application.properties</h3><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#datasource</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.url</span>=<span class=\"string\">jdbc:mysql://localhost:3307/grey_code?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.username</span>=<span class=\"string\">zmh</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.password</span>=<span class=\"string\">zmh</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#redis</span></span><br><span class=\"line\"><span class=\"attr\">spring.redis.host</span>=<span class=\"string\">127.0.0.1</span></span><br><span class=\"line\"><span class=\"attr\">spring.redis.port</span>=<span class=\"string\">6379</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">9991</span></span><br><span class=\"line\"><span class=\"attr\">server.servlet.context-path</span>=<span class=\"string\">/oauthServer</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建用户详情服务类\"><a href=\"#创建用户详情服务类\" class=\"headerlink\" title=\"创建用户详情服务类\"></a>创建用户详情服务类</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/PBwaTcT.png\" alt=\"图片\"></p>\n<h4 id=\"创建权限控制类\"><a href=\"#创建权限控制类\" class=\"headerlink\" title=\"创建权限控制类\"></a>创建权限控制类</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/U0y9Di5.png\" alt=\"图片\"></p>\n<h3 id=\"创建认证授权类\"><a href=\"#创建认证授权类\" class=\"headerlink\" title=\"创建认证授权类\"></a>创建认证授权类</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/lVXiu5n.png\" alt=\"图片\"></p>\n<h2 id=\"获取令牌\"><a href=\"#获取令牌\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h2><p>访问:<code>/oauth/token</code>就可以获取到令牌</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/4ieRNLw.png\" alt=\"图片\"></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;accessToken&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;e28f9a99-e60d-4693-b6c3-73e06a1d14f5ZMH10086&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;expiration&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2020-05-19T21:11:39.883+0000&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;all&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;tokenType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;bearer&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"访问资源\"><a href=\"#访问资源\" class=\"headerlink\" title=\"访问资源\"></a>访问资源</h3><p>带上获取到的令牌</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/W57xN9e.png\" alt=\"图片\"></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"准备阶段\"><a href=\"#准备阶段\" class=\"headerlink\" title=\"准备阶段\"></a>准备阶段</h2><p>这里搭建一个用OAuth2.0密码模式认证的服务器，token存入redis，client存入Mysql；</p>\n<p>所以事先要准备好：</p>\n<ul>\n<li>Redis</li>\n<li>Mysql</li>\n</ul>\n<p>并且Mysql执行<a href=\"https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql\">Spring-security-oauth初始化Sql</a>这个SQL，初始化Spring-security-oauth所需要的表。然后执行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 插入client_id和client_secret都为sunline的客户端</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> </span><br><span class=\"line\">\toauth_client_details (client_id, client_secret, authorized_grant_types , autoapprove)</span><br><span class=\"line\"><span class=\"keyword\">values</span> </span><br><span class=\"line\">\t(&quot;sunline&quot;,&quot;\t&#123;bcrypt&#125;$2a$10$G1CFd535SiyOtvi6ckbZWexQy.hW5x/I/fLBPiW/E4UmctCfKYbgG&quot;,&quot;password&quot;,&quot;true&quot;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>client_secret为<code>new BCryptPasswordEncoder().encode(&quot;sunline&quot;)</code>方法加密后，然后在加上<code>&#123;bcrypt&#125;</code></p>\n</blockquote>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><h3 id=\"导入pom依赖\"><a href=\"#导入pom依赖\" class=\"headerlink\" title=\"导入pom依赖\"></a>导入pom依赖</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!--security-oauth--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;!--redis--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;!--mysql--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;<span class=\"number\">8.0</span><span class=\"number\">.17</span>&lt;/version&gt;</span><br><span class=\"line\">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"配置application-properties\"><a href=\"#配置application-properties\" class=\"headerlink\" title=\"配置application.properties\"></a>配置application.properties</h3><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#datasource</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.url</span>=<span class=\"string\">jdbc:mysql://localhost:3307/grey_code?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.username</span>=<span class=\"string\">zmh</span></span><br><span class=\"line\"><span class=\"attr\">spring.datasource.password</span>=<span class=\"string\">zmh</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">#redis</span></span><br><span class=\"line\"><span class=\"attr\">spring.redis.host</span>=<span class=\"string\">127.0.0.1</span></span><br><span class=\"line\"><span class=\"attr\">spring.redis.port</span>=<span class=\"string\">6379</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server.port</span>=<span class=\"string\">9991</span></span><br><span class=\"line\"><span class=\"attr\">server.servlet.context-path</span>=<span class=\"string\">/oauthServer</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"创建用户详情服务类\"><a href=\"#创建用户详情服务类\" class=\"headerlink\" title=\"创建用户详情服务类\"></a>创建用户详情服务类</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/PBwaTcT.png\" alt=\"图片\"></p>\n<h4 id=\"创建权限控制类\"><a href=\"#创建权限控制类\" class=\"headerlink\" title=\"创建权限控制类\"></a>创建权限控制类</h4><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/U0y9Di5.png\" alt=\"图片\"></p>\n<h3 id=\"创建认证授权类\"><a href=\"#创建认证授权类\" class=\"headerlink\" title=\"创建认证授权类\"></a>创建认证授权类</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/lVXiu5n.png\" alt=\"图片\"></p>\n<h2 id=\"获取令牌\"><a href=\"#获取令牌\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h2><p>访问:<code>/oauth/token</code>就可以获取到令牌</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/4ieRNLw.png\" alt=\"图片\"></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;accessToken&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;e28f9a99-e60d-4693-b6c3-73e06a1d14f5ZMH10086&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;expiration&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;2020-05-19T21:11:39.883+0000&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;scope&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span></span><br><span class=\"line\">        <span class=\"string\">&quot;all&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">]</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;tokenType&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;bearer&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"访问资源\"><a href=\"#访问资源\" class=\"headerlink\" title=\"访问资源\"></a>访问资源</h3><p>带上获取到的令牌</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/W57xN9e.png\" alt=\"图片\"></p>\n"},{"title":"SSO单点登录和CAS框架","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-14T11:27:14.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## SSO单点登录\n\n**单点登录**（英语：Single sign-on，缩写为 SSO），又译为**单一签入**，一种对于许多相互关连，但是又是各自独立的软件系统，提供[访问控制](https://zh.wikipedia.org/wiki/存取控制)的属性。当拥有这项属性时，当用户[登录](https://zh.wikipedia.org/wiki/登入)时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录。这项功能通常是以[轻型目录访问协议](https://zh.wikipedia.org/wiki/轻型目录访问协议)（LDAP）来实现，在服务器上会将用户信息存储到LDAP数据库中。相同的，**单一退出**（single sign-off）就是指，只需要单一的退出动作，就可以结束对于多个系统的访问权限。\n\n### 优点\n\n使用单点登录的好处包括：\n\n- 降低访问第三方网站的风险（不存储用户密码，或在外部管理）。\n- 减少因不同的用户名和密码组合而带来的[密码疲劳](https://zh.wikipedia.org/w/index.php?title=密碼疲勞&action=edit&redlink=1)。\n- 减少为相同的身份重新输入密码所花费的时间。\n- 因减少与密码相关的调用IT[服务台](https://zh.wikipedia.org/wiki/服务台)的次数而降低IT成本。[[1\\]](https://zh.wikipedia.org/wiki/單一登入#cite_note-1)\n\nSSO为所有其它应用程序和系统，以集中的[验证服务器](https://zh.wikipedia.org/w/index.php?title=验证服务器&action=edit&redlink=1)提供身份验证，并结合技术以确保用户不必频繁输入密码。\n\n\n\n## CAS框架\n\nCAS 协议基于在**客户端**Web浏览器、Web**应用**和**CAS服务器**之间的票据验证。当客户端访问访问应用程序，请求身份验证时，应用程序重定向到CAS。CAS验证客户端是否被授权，通常通过在数据库对用户名和密码进行检查。如果身份验证成功，CAS一次性在客户端以Cookie形式发放TGT票据，在其有效期CAS将一直信任用户，同时将客户端自动返回到应用程序，并向应用传递身份验证票（Service ticket）。然后，应用程序通过安全连接连接CAS，并提供自己的服务标识和验证票。之后CAS给出了关于特定用户是否已成功通过身份验证的应用程序授信信息。\n\n### 历史\n\n- CAS是由[耶鲁大学](https://zh.wikipedia.org/wiki/耶鲁大学)[[1\\]](https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-1)的Shawn Bayern创始的，后来由耶鲁大学的Drew Mazurek维护。CAS1.0实现了单点登录。 CAS2.0引入了多级代理认证（Multi-tier proxy authentication）。CAS其他几个版本已经有了新的功能。\n\n- 2004年12月，CAS成为[Jasig](https://zh.wikipedia.org/w/index.php?title=Jasig&action=edit&redlink=1)[[2\\]](https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-2)的一个项目，2008年该组织负责CAS的维护和发展。CAS原名“耶鲁大学CAS”，此后被称为“Jasig CAS”。\n\n- 2005年5月，CAS协议版本2发布，引入代理和服务验证。\n\n- 2006年12月，[安德鲁·W·梅隆基金会](https://zh.wikipedia.org/w/index.php?title=安德鲁·W·梅隆基金会&action=edit&redlink=1)授予耶鲁大学第一届梅隆技术协作奖，颁发50000美元的奖金对耶鲁大学开发CAS进行奖励。[[3\\]](https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-3)颁奖之时，CAS在“数以百计的大学校园”中使用。\n\n- 2012年12月，JASIG与Sakai基金合并，CAS改名为Apereo CAS。\n\n- 2016年11月，基于Spring Boot的CAS软件版本5发布。","source":"_posts/archive/web-security/sso-and-cas.md","raw":"---\ntitle: SSO单点登录和CAS框架\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-14 19:27:14\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- SSO\n- CAS框架\ncategories:\n- WebSecurity\n---\n\n## SSO单点登录\n\n**单点登录**（英语：Single sign-on，缩写为 SSO），又译为**单一签入**，一种对于许多相互关连，但是又是各自独立的软件系统，提供[访问控制](https://zh.wikipedia.org/wiki/存取控制)的属性。当拥有这项属性时，当用户[登录](https://zh.wikipedia.org/wiki/登入)时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录。这项功能通常是以[轻型目录访问协议](https://zh.wikipedia.org/wiki/轻型目录访问协议)（LDAP）来实现，在服务器上会将用户信息存储到LDAP数据库中。相同的，**单一退出**（single sign-off）就是指，只需要单一的退出动作，就可以结束对于多个系统的访问权限。\n\n### 优点\n\n使用单点登录的好处包括：\n\n- 降低访问第三方网站的风险（不存储用户密码，或在外部管理）。\n- 减少因不同的用户名和密码组合而带来的[密码疲劳](https://zh.wikipedia.org/w/index.php?title=密碼疲勞&action=edit&redlink=1)。\n- 减少为相同的身份重新输入密码所花费的时间。\n- 因减少与密码相关的调用IT[服务台](https://zh.wikipedia.org/wiki/服务台)的次数而降低IT成本。[[1\\]](https://zh.wikipedia.org/wiki/單一登入#cite_note-1)\n\nSSO为所有其它应用程序和系统，以集中的[验证服务器](https://zh.wikipedia.org/w/index.php?title=验证服务器&action=edit&redlink=1)提供身份验证，并结合技术以确保用户不必频繁输入密码。\n\n\n\n## CAS框架\n\nCAS 协议基于在**客户端**Web浏览器、Web**应用**和**CAS服务器**之间的票据验证。当客户端访问访问应用程序，请求身份验证时，应用程序重定向到CAS。CAS验证客户端是否被授权，通常通过在数据库对用户名和密码进行检查。如果身份验证成功，CAS一次性在客户端以Cookie形式发放TGT票据，在其有效期CAS将一直信任用户，同时将客户端自动返回到应用程序，并向应用传递身份验证票（Service ticket）。然后，应用程序通过安全连接连接CAS，并提供自己的服务标识和验证票。之后CAS给出了关于特定用户是否已成功通过身份验证的应用程序授信信息。\n\n### 历史\n\n- CAS是由[耶鲁大学](https://zh.wikipedia.org/wiki/耶鲁大学)[[1\\]](https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-1)的Shawn Bayern创始的，后来由耶鲁大学的Drew Mazurek维护。CAS1.0实现了单点登录。 CAS2.0引入了多级代理认证（Multi-tier proxy authentication）。CAS其他几个版本已经有了新的功能。\n\n- 2004年12月，CAS成为[Jasig](https://zh.wikipedia.org/w/index.php?title=Jasig&action=edit&redlink=1)[[2\\]](https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-2)的一个项目，2008年该组织负责CAS的维护和发展。CAS原名“耶鲁大学CAS”，此后被称为“Jasig CAS”。\n\n- 2005年5月，CAS协议版本2发布，引入代理和服务验证。\n\n- 2006年12月，[安德鲁·W·梅隆基金会](https://zh.wikipedia.org/w/index.php?title=安德鲁·W·梅隆基金会&action=edit&redlink=1)授予耶鲁大学第一届梅隆技术协作奖，颁发50000美元的奖金对耶鲁大学开发CAS进行奖励。[[3\\]](https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-3)颁奖之时，CAS在“数以百计的大学校园”中使用。\n\n- 2012年12月，JASIG与Sakai基金合并，CAS改名为Apereo CAS。\n\n- 2016年11月，基于Spring Boot的CAS软件版本5发布。","slug":"archive/web-security/sso-and-cas","published":1,"updated":"2021-10-08T07:57:24.159Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehy006ovpuc5lzi95sy","content":"<h2 id=\"SSO单点登录\"><a href=\"#SSO单点登录\" class=\"headerlink\" title=\"SSO单点登录\"></a>SSO单点登录</h2><p><strong>单点登录</strong>（英语：Single sign-on，缩写为 SSO），又译为<strong>单一签入</strong>，一种对于许多相互关连，但是又是各自独立的软件系统，提供<a href=\"https://zh.wikipedia.org/wiki/%E5%AD%98%E5%8F%96%E6%8E%A7%E5%88%B6\">访问控制</a>的属性。当拥有这项属性时，当用户<a href=\"https://zh.wikipedia.org/wiki/%E7%99%BB%E5%85%A5\">登录</a>时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录。这项功能通常是以<a href=\"https://zh.wikipedia.org/wiki/%E8%BD%BB%E5%9E%8B%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AE\">轻型目录访问协议</a>（LDAP）来实现，在服务器上会将用户信息存储到LDAP数据库中。相同的，<strong>单一退出</strong>（single sign-off）就是指，只需要单一的退出动作，就可以结束对于多个系统的访问权限。</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>使用单点登录的好处包括：</p>\n<ul>\n<li>降低访问第三方网站的风险（不存储用户密码，或在外部管理）。</li>\n<li>减少因不同的用户名和密码组合而带来的<a href=\"https://zh.wikipedia.org/w/index.php?title=%E5%AF%86%E7%A2%BC%E7%96%B2%E5%8B%9E&action=edit&redlink=1\">密码疲劳</a>。</li>\n<li>减少为相同的身份重新输入密码所花费的时间。</li>\n<li>因减少与密码相关的调用IT<a href=\"https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%8F%B0\">服务台</a>的次数而降低IT成本。[<a href=\"https://zh.wikipedia.org/wiki/%E5%96%AE%E4%B8%80%E7%99%BB%E5%85%A5#cite_note-1\">1]</a></li>\n</ul>\n<p>SSO为所有其它应用程序和系统，以集中的<a href=\"https://zh.wikipedia.org/w/index.php?title=%E9%AA%8C%E8%AF%81%E6%9C%8D%E5%8A%A1%E5%99%A8&action=edit&redlink=1\">验证服务器</a>提供身份验证，并结合技术以确保用户不必频繁输入密码。</p>\n<h2 id=\"CAS框架\"><a href=\"#CAS框架\" class=\"headerlink\" title=\"CAS框架\"></a>CAS框架</h2><p>CAS 协议基于在<strong>客户端</strong>Web浏览器、Web<strong>应用</strong>和<strong>CAS服务器</strong>之间的票据验证。当客户端访问访问应用程序，请求身份验证时，应用程序重定向到CAS。CAS验证客户端是否被授权，通常通过在数据库对用户名和密码进行检查。如果身份验证成功，CAS一次性在客户端以Cookie形式发放TGT票据，在其有效期CAS将一直信任用户，同时将客户端自动返回到应用程序，并向应用传递身份验证票（Service ticket）。然后，应用程序通过安全连接连接CAS，并提供自己的服务标识和验证票。之后CAS给出了关于特定用户是否已成功通过身份验证的应用程序授信信息。</p>\n<h3 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h3><ul>\n<li><p>CAS是由<a href=\"https://zh.wikipedia.org/wiki/%E8%80%B6%E9%B2%81%E5%A4%A7%E5%AD%A6\">耶鲁大学</a>[<a href=\"https://zh.wikipedia.org/wiki/%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1#cite_note-1\">1]</a>的Shawn Bayern创始的，后来由耶鲁大学的Drew Mazurek维护。CAS1.0实现了单点登录。 CAS2.0引入了多级代理认证（Multi-tier proxy authentication）。CAS其他几个版本已经有了新的功能。</p>\n</li>\n<li><p>2004年12月，CAS成为<a href=\"https://zh.wikipedia.org/w/index.php?title=Jasig&action=edit&redlink=1\">Jasig</a>[<a href=\"https://zh.wikipedia.org/wiki/%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1#cite_note-2\">2]</a>的一个项目，2008年该组织负责CAS的维护和发展。CAS原名“耶鲁大学CAS”，此后被称为“Jasig CAS”。</p>\n</li>\n<li><p>2005年5月，CAS协议版本2发布，引入代理和服务验证。</p>\n</li>\n<li><p>2006年12月，<a href=\"https://zh.wikipedia.org/w/index.php?title=%E5%AE%89%E5%BE%B7%E9%B2%81%C2%B7W%C2%B7%E6%A2%85%E9%9A%86%E5%9F%BA%E9%87%91%E4%BC%9A&action=edit&redlink=1\">安德鲁·W·梅隆基金会</a>授予耶鲁大学第一届梅隆技术协作奖，颁发50000美元的奖金对耶鲁大学开发CAS进行奖励。[<a href=\"https://zh.wikipedia.org/wiki/%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1#cite_note-3\">3]</a>颁奖之时，CAS在“数以百计的大学校园”中使用。</p>\n</li>\n<li><p>2012年12月，JASIG与Sakai基金合并，CAS改名为Apereo CAS。</p>\n</li>\n<li><p>2016年11月，基于Spring Boot的CAS软件版本5发布。</p>\n</li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"SSO单点登录\"><a href=\"#SSO单点登录\" class=\"headerlink\" title=\"SSO单点登录\"></a>SSO单点登录</h2><p><strong>单点登录</strong>（英语：Single sign-on，缩写为 SSO），又译为<strong>单一签入</strong>，一种对于许多相互关连，但是又是各自独立的软件系统，提供<a href=\"https://zh.wikipedia.org/wiki/%E5%AD%98%E5%8F%96%E6%8E%A7%E5%88%B6\">访问控制</a>的属性。当拥有这项属性时，当用户<a href=\"https://zh.wikipedia.org/wiki/%E7%99%BB%E5%85%A5\">登录</a>时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录。这项功能通常是以<a href=\"https://zh.wikipedia.org/wiki/%E8%BD%BB%E5%9E%8B%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE%E5%8D%8F%E8%AE%AE\">轻型目录访问协议</a>（LDAP）来实现，在服务器上会将用户信息存储到LDAP数据库中。相同的，<strong>单一退出</strong>（single sign-off）就是指，只需要单一的退出动作，就可以结束对于多个系统的访问权限。</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>使用单点登录的好处包括：</p>\n<ul>\n<li>降低访问第三方网站的风险（不存储用户密码，或在外部管理）。</li>\n<li>减少因不同的用户名和密码组合而带来的<a href=\"https://zh.wikipedia.org/w/index.php?title=%E5%AF%86%E7%A2%BC%E7%96%B2%E5%8B%9E&action=edit&redlink=1\">密码疲劳</a>。</li>\n<li>减少为相同的身份重新输入密码所花费的时间。</li>\n<li>因减少与密码相关的调用IT<a href=\"https://zh.wikipedia.org/wiki/%E6%9C%8D%E5%8A%A1%E5%8F%B0\">服务台</a>的次数而降低IT成本。[<a href=\"https://zh.wikipedia.org/wiki/%E5%96%AE%E4%B8%80%E7%99%BB%E5%85%A5#cite_note-1\">1]</a></li>\n</ul>\n<p>SSO为所有其它应用程序和系统，以集中的<a href=\"https://zh.wikipedia.org/w/index.php?title=%E9%AA%8C%E8%AF%81%E6%9C%8D%E5%8A%A1%E5%99%A8&action=edit&redlink=1\">验证服务器</a>提供身份验证，并结合技术以确保用户不必频繁输入密码。</p>\n<h2 id=\"CAS框架\"><a href=\"#CAS框架\" class=\"headerlink\" title=\"CAS框架\"></a>CAS框架</h2><p>CAS 协议基于在<strong>客户端</strong>Web浏览器、Web<strong>应用</strong>和<strong>CAS服务器</strong>之间的票据验证。当客户端访问访问应用程序，请求身份验证时，应用程序重定向到CAS。CAS验证客户端是否被授权，通常通过在数据库对用户名和密码进行检查。如果身份验证成功，CAS一次性在客户端以Cookie形式发放TGT票据，在其有效期CAS将一直信任用户，同时将客户端自动返回到应用程序，并向应用传递身份验证票（Service ticket）。然后，应用程序通过安全连接连接CAS，并提供自己的服务标识和验证票。之后CAS给出了关于特定用户是否已成功通过身份验证的应用程序授信信息。</p>\n<h3 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h3><ul>\n<li><p>CAS是由<a href=\"https://zh.wikipedia.org/wiki/%E8%80%B6%E9%B2%81%E5%A4%A7%E5%AD%A6\">耶鲁大学</a>[<a href=\"https://zh.wikipedia.org/wiki/%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1#cite_note-1\">1]</a>的Shawn Bayern创始的，后来由耶鲁大学的Drew Mazurek维护。CAS1.0实现了单点登录。 CAS2.0引入了多级代理认证（Multi-tier proxy authentication）。CAS其他几个版本已经有了新的功能。</p>\n</li>\n<li><p>2004年12月，CAS成为<a href=\"https://zh.wikipedia.org/w/index.php?title=Jasig&action=edit&redlink=1\">Jasig</a>[<a href=\"https://zh.wikipedia.org/wiki/%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1#cite_note-2\">2]</a>的一个项目，2008年该组织负责CAS的维护和发展。CAS原名“耶鲁大学CAS”，此后被称为“Jasig CAS”。</p>\n</li>\n<li><p>2005年5月，CAS协议版本2发布，引入代理和服务验证。</p>\n</li>\n<li><p>2006年12月，<a href=\"https://zh.wikipedia.org/w/index.php?title=%E5%AE%89%E5%BE%B7%E9%B2%81%C2%B7W%C2%B7%E6%A2%85%E9%9A%86%E5%9F%BA%E9%87%91%E4%BC%9A&action=edit&redlink=1\">安德鲁·W·梅隆基金会</a>授予耶鲁大学第一届梅隆技术协作奖，颁发50000美元的奖金对耶鲁大学开发CAS进行奖励。[<a href=\"https://zh.wikipedia.org/wiki/%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1#cite_note-3\">3]</a>颁奖之时，CAS在“数以百计的大学校园”中使用。</p>\n</li>\n<li><p>2012年12月，JASIG与Sakai基金合并，CAS改名为Apereo CAS。</p>\n</li>\n<li><p>2016年11月，基于Spring Boot的CAS软件版本5发布。</p>\n</li>\n</ul>\n"},{"title":"ZooKeeper单机伪集群搭建","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-08-11T07:59:52.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\nError contacting service. It is probably not running.\n","source":"_posts/archive/zookeeper/2B9475B258994C18BCC5FCFA4B6D81D2.md","raw":"---\ntitle: ZooKeeper单机伪集群搭建\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-08-11 15:59:52\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 集群\n- 分布式\n- ZooKeeper\ncategories:\n- ZooKeeper\n---\n\nError contacting service. It is probably not running.\n","slug":"archive/zookeeper/2B9475B258994C18BCC5FCFA4B6D81D2","published":1,"updated":"2021-10-08T07:57:24.160Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ehz006pvpuc86hu8zft","content":"<p>Error contacting service. It is probably not running.</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p>Error contacting service. It is probably not running.</p>\n"},{"title":"ZooKeeper客户端详解及可视化客户端","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-08-09T06:54:39.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 下载\n\n我们可以去 [ZooKeeper 官网](http://zookeeper.apache.org/releases.html) 下载，这里我下载了 [ZooKeeper 3.7.0](https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz) 版本\n\n下载解压后，进入 `apache-zookeeper-3.7.0-bin/bin` 目录，这里有**客户端**、**服务端**和一些工具。在 Windows 中可以执行`.cmd` 结尾的执行文件，在 Mac 或 Linux 中可以执行 `.sh` 结尾的可执行文件。名为 `zkCli` 的文件就是 ZooKeeper 的客户端了，我们可以用这个客户端来连接到 ZooKeeper 注册中心，来对节点进行查看或增删操作。\n\n## 使用\n\n> 我是在 **Mac 环境下演示使用的**\n\n接下来就说下这个客户端怎么使用。\n\n## 连接\n\n第一步就是要连接到 ZooKeeper 服务，当你执行 `zkCli.sh` 不带任何参数时，它默认是连接到本地的 `localhost:2181` 地址。如果你要连接到指定地址，可以使用 `-server` 配置：\n\n```bash\n./zkCli.sh -server localhost:2181\n\n# 还可以加上连接超时时间（单位：毫秒）\n./zkCli.sh -timeout 3000 -server localhost:2181\n```\n\n连接上后，终端就会变成这样：\n\n```bash\n[zk: localhost:2181(CONNECTED) 0] \n```\n\n然后你可以输入 `help` 来查看执行的命令：\n\n```bash\nZooKeeper -server host:port -client-configuration properties-file cmd args\n\taddWatch [-m mode] path # optional mode is one of [PERSISTENT, PERSISTENT_RECURSIVE] - default is PERSISTENT_RECURSIVE\n\taddauth scheme auth\n\tclose\n\tconfig [-c] [-w] [-s]\n\tconnect host:port\n\tcreate [-s] [-e] [-c] [-t ttl] path [data] [acl]\n\tdelete [-v version] path\n\tdeleteall path [-b batch size]\n\tdelquota [-n|-b|-N|-B] path\n\tget [-s] [-w] path\n\tgetAcl [-s] path\n\tgetAllChildrenNumber path\n\tgetEphemerals path\n\thistory\n\tlistquota path\n\tls [-s] [-w] [-R] path\n\tprintwatches on|off\n\tquit\n\treconfig [-s] [-v version] [[-file path] | [-members serverID=host:port1:port2;port3[,...]*]] | [-add serverId=host:port1:port2;port3[,...]]* [-remove serverId[,...]*]\n\tredo cmdno\n\tremovewatches path [-c|-d|-a] [-l]\n\tset [-s] [-v version] path data\n\tsetAcl [-s] [-v version] [-R] path acl\n\tsetquota -n|-b|-N|-B val path\n\tstat [-w] path\n\tsync path\n\tversion\n\twhoami\n```\n\n在客户端里面，也可以使用命令 `connect` 来切换连接的 ZooKeeper 的服务地址：\n\n```bash\n[zk: localhost:2181(CONNECTED) 12] connect localhost:2181\n```\n\n## 创建节点\n\n### 永久节点\n\n可以使用 `create` 命令来创建一个永久节点：\n\n```bash\n[zk: localhost:2181(CONNECTED) 18] create /node\nCreated /node\n```\n\n### 临时节点\n\n临时节点当客户端断开后，这个节点就会被删除\n\n```bash\n[zk: localhost:2181(CONNECTED) 19] create -e /tmp_node\nCreated /tmp_node\n```\n\n临时节点不能够有子节点，当要创建它的子节点时就会报错 `Ephemerals cannot have children` :\n\n```bash\n[zk: localhost:2181(CONNECTED) 20] create -e /tmp_node/t1\nEphemerals cannot have children: /tmp_node/t1\n```\n\n### 顺序节点\n\nZooKeeper 可以为我们自定创建递增的顺序节点\n\n```bash\n[zk: localhost:2181(CONNECTED) 23] create -s /seq_node\nCreated /seq_node0000000017\n[zk: localhost:2181(CONNECTED) 24] create -s /seq_node\nCreated /seq_node0000000018\n[zk: localhost:2181(CONNECTED) 25] create -s /seq_node\nCreated /seq_node0000000019\n```\n\n### 容器节点\n\n容器节点当其子**所有节点**都被删除时，它自己也会被删除\n\n```bash\n# 创建容器节点\n[zk: localhost:2181(CONNECTED) 39] create -c /container\nCreated /container\n\n# 创建容器节点的子节点\n[zk: localhost:2181(CONNECTED) 43] create /container/c1\nCreated /container/c1\n[zk: localhost:2181(CONNECTED) 44] create /container/c2\nCreated /container/c2\n\n# 删除容器节点的子节点\n[zk: localhost:2181(CONNECTED) 46] delete /container/c1\n[zk: localhost:2181(CONNECTED) 47] delete /container/c2\n\n# 过了一会后，容器节点被删除了\n[zk: localhost:2181(CONNECTED) 56] get /container\norg.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /container\n```\n\n### ttl 节点\n\nZooKeeper 也可以为节点设置有效期，单位是毫秒。要创建这个节点时，需要 ZooKeeper 服务端在启动时设置 `zookeeper.extendedTypesEnabled=true` ，否则在创建时就会失败：`KeeperErrorCode = Unimplemented`\n\n创建时设置的过期时间单位时毫秒：\n\n```bash\n[zk: localhost:2181(CONNECTED) 57] create -t 3000 /ttl_node\nCreated /ttl_node\n```\n\n## 删除节点\n\n在 `zkCli` 中可以用 `delete` 命令来删除节点，在删除一个节点时，必须保证该节点下面没有子节点\n\n```bash\n[zk: localhost:2181(CONNECTED) 6] create /node1\nCreated /node1\n[zk: localhost:2181(CONNECTED) 7] delete /node1\n\n# 如果有子节点的话，删除时会报错\n[zk: localhost:2181(CONNECTED) 10] create /node1\nCreated /node1\n[zk: localhost:2181(CONNECTED) 11] create /node1/n1\nCreated /node1/n1\n[zk: localhost:2181(CONNECTED) 12] delete /node1\nNode not empty: /node1\n```\n\n如果你想一次性删除节点包括其所有子节点时，可以使用 `deleteall` 命令来进行删除\n\n```bash\n[zk: localhost:2181(CONNECTED) 14] deleteall /node1\n```\n\n## 查看节点\n\n### 查看所有子节点\n\n我们可以用 `ls` 命令来查看某个节点的所有子节点，比如我们查看根目录下的所有节点时，就可以这样用：\n\n```bash\n[zk: localhost:2181(CONNECTED) 20] ls /\n[quota, zookeeper]\n```\n\n查看 zookeeper 节点的子节点\n\n```bash\n[zk: localhost:2181(CONNECTED) 21] ls /zookeeper\n[config, quota]\n```\n\n### 查看节点的状态\n\n可以用 `stat` 来查看一个节点的状态，比如我们查看根节点的状态时：\n\n```bash\n[zk: localhost:2181(CONNECTED) 22] stat /\ncZxid = 0x0\nctime = Thu Jan 01 08:00:00 CST 1970\nmZxid = 0x0\nmtime = Thu Jan 01 08:00:00 CST 1970\npZxid = 0xe\ncversion = 4\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 0\nnumChildren = 2\n```\n\n**字段说明：**\n\n| 字段           | 描述                                                         |\n| -------------- | ------------------------------------------------------------ |\n| czxid          | 创建znode的zxid                                              |\n| mzxid          | 最近一次修改znode的zxid(创建、删除、set直系子节点、set自身节点都会计数) |\n| pzxid          | 最近一次修改子节点的zxid(创建、删除直系子节点都会计数，set子节点不会计数) |\n| ctime          | 创建znode的时间，单位毫秒                                    |\n| mtime          | 最近一次修改znode的时间，单位毫秒                            |\n| dataVersion    | 修改znode数据的次数                                          |\n| cversion       | 修改子节点的次数(创建、删除直系子节点都会计数，set子节点不会计数) |\n| aclVersion     | 该znode的ACL修改次数                                         |\n| ephemeralOwner | 临时znode节点的session id，如果不是临时节点，值为0           |\n| dataLength     | znode携带的数据长度，单位字节                                |\n| numChildren    | 直系子节点的数量(不会递归计算孙节点)                         |\n\n### 查看节点的数据\n\n可以使用 `set` 命令来设置节点的数据，当要获取这个设置的数据时，就可以使用 `get` 命令来获取节点的数据\n\n```bash\n[zk: localhost:2181(CONNECTED) 27] create /node\nCreated /node\n[zk: localhost:2181(CONNECTED) 28] set /node 我的数据\n[zk: localhost:2181(CONNECTED) 29] get /node\n我的数据\n```\n\n## 终端可视化客户端\n\n![screen1](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/PP6ACH0.gif)\n\n下载地址：https://github.com/greycodee/zk-cli/releases\n\nGithub：https://github.com/greycodee/zk-cli","source":"_posts/archive/zookeeper/8B8235DEF437432C99C81E97D68D0644.md","raw":"---\ntitle: ZooKeeper客户端详解及可视化客户端\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-08-09 14:54:39\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- ZooKeeper\n- 分布式\ncategories:\n- ZooKeeper\n---\n\n## 下载\n\n我们可以去 [ZooKeeper 官网](http://zookeeper.apache.org/releases.html) 下载，这里我下载了 [ZooKeeper 3.7.0](https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz) 版本\n\n下载解压后，进入 `apache-zookeeper-3.7.0-bin/bin` 目录，这里有**客户端**、**服务端**和一些工具。在 Windows 中可以执行`.cmd` 结尾的执行文件，在 Mac 或 Linux 中可以执行 `.sh` 结尾的可执行文件。名为 `zkCli` 的文件就是 ZooKeeper 的客户端了，我们可以用这个客户端来连接到 ZooKeeper 注册中心，来对节点进行查看或增删操作。\n\n## 使用\n\n> 我是在 **Mac 环境下演示使用的**\n\n接下来就说下这个客户端怎么使用。\n\n## 连接\n\n第一步就是要连接到 ZooKeeper 服务，当你执行 `zkCli.sh` 不带任何参数时，它默认是连接到本地的 `localhost:2181` 地址。如果你要连接到指定地址，可以使用 `-server` 配置：\n\n```bash\n./zkCli.sh -server localhost:2181\n\n# 还可以加上连接超时时间（单位：毫秒）\n./zkCli.sh -timeout 3000 -server localhost:2181\n```\n\n连接上后，终端就会变成这样：\n\n```bash\n[zk: localhost:2181(CONNECTED) 0] \n```\n\n然后你可以输入 `help` 来查看执行的命令：\n\n```bash\nZooKeeper -server host:port -client-configuration properties-file cmd args\n\taddWatch [-m mode] path # optional mode is one of [PERSISTENT, PERSISTENT_RECURSIVE] - default is PERSISTENT_RECURSIVE\n\taddauth scheme auth\n\tclose\n\tconfig [-c] [-w] [-s]\n\tconnect host:port\n\tcreate [-s] [-e] [-c] [-t ttl] path [data] [acl]\n\tdelete [-v version] path\n\tdeleteall path [-b batch size]\n\tdelquota [-n|-b|-N|-B] path\n\tget [-s] [-w] path\n\tgetAcl [-s] path\n\tgetAllChildrenNumber path\n\tgetEphemerals path\n\thistory\n\tlistquota path\n\tls [-s] [-w] [-R] path\n\tprintwatches on|off\n\tquit\n\treconfig [-s] [-v version] [[-file path] | [-members serverID=host:port1:port2;port3[,...]*]] | [-add serverId=host:port1:port2;port3[,...]]* [-remove serverId[,...]*]\n\tredo cmdno\n\tremovewatches path [-c|-d|-a] [-l]\n\tset [-s] [-v version] path data\n\tsetAcl [-s] [-v version] [-R] path acl\n\tsetquota -n|-b|-N|-B val path\n\tstat [-w] path\n\tsync path\n\tversion\n\twhoami\n```\n\n在客户端里面，也可以使用命令 `connect` 来切换连接的 ZooKeeper 的服务地址：\n\n```bash\n[zk: localhost:2181(CONNECTED) 12] connect localhost:2181\n```\n\n## 创建节点\n\n### 永久节点\n\n可以使用 `create` 命令来创建一个永久节点：\n\n```bash\n[zk: localhost:2181(CONNECTED) 18] create /node\nCreated /node\n```\n\n### 临时节点\n\n临时节点当客户端断开后，这个节点就会被删除\n\n```bash\n[zk: localhost:2181(CONNECTED) 19] create -e /tmp_node\nCreated /tmp_node\n```\n\n临时节点不能够有子节点，当要创建它的子节点时就会报错 `Ephemerals cannot have children` :\n\n```bash\n[zk: localhost:2181(CONNECTED) 20] create -e /tmp_node/t1\nEphemerals cannot have children: /tmp_node/t1\n```\n\n### 顺序节点\n\nZooKeeper 可以为我们自定创建递增的顺序节点\n\n```bash\n[zk: localhost:2181(CONNECTED) 23] create -s /seq_node\nCreated /seq_node0000000017\n[zk: localhost:2181(CONNECTED) 24] create -s /seq_node\nCreated /seq_node0000000018\n[zk: localhost:2181(CONNECTED) 25] create -s /seq_node\nCreated /seq_node0000000019\n```\n\n### 容器节点\n\n容器节点当其子**所有节点**都被删除时，它自己也会被删除\n\n```bash\n# 创建容器节点\n[zk: localhost:2181(CONNECTED) 39] create -c /container\nCreated /container\n\n# 创建容器节点的子节点\n[zk: localhost:2181(CONNECTED) 43] create /container/c1\nCreated /container/c1\n[zk: localhost:2181(CONNECTED) 44] create /container/c2\nCreated /container/c2\n\n# 删除容器节点的子节点\n[zk: localhost:2181(CONNECTED) 46] delete /container/c1\n[zk: localhost:2181(CONNECTED) 47] delete /container/c2\n\n# 过了一会后，容器节点被删除了\n[zk: localhost:2181(CONNECTED) 56] get /container\norg.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /container\n```\n\n### ttl 节点\n\nZooKeeper 也可以为节点设置有效期，单位是毫秒。要创建这个节点时，需要 ZooKeeper 服务端在启动时设置 `zookeeper.extendedTypesEnabled=true` ，否则在创建时就会失败：`KeeperErrorCode = Unimplemented`\n\n创建时设置的过期时间单位时毫秒：\n\n```bash\n[zk: localhost:2181(CONNECTED) 57] create -t 3000 /ttl_node\nCreated /ttl_node\n```\n\n## 删除节点\n\n在 `zkCli` 中可以用 `delete` 命令来删除节点，在删除一个节点时，必须保证该节点下面没有子节点\n\n```bash\n[zk: localhost:2181(CONNECTED) 6] create /node1\nCreated /node1\n[zk: localhost:2181(CONNECTED) 7] delete /node1\n\n# 如果有子节点的话，删除时会报错\n[zk: localhost:2181(CONNECTED) 10] create /node1\nCreated /node1\n[zk: localhost:2181(CONNECTED) 11] create /node1/n1\nCreated /node1/n1\n[zk: localhost:2181(CONNECTED) 12] delete /node1\nNode not empty: /node1\n```\n\n如果你想一次性删除节点包括其所有子节点时，可以使用 `deleteall` 命令来进行删除\n\n```bash\n[zk: localhost:2181(CONNECTED) 14] deleteall /node1\n```\n\n## 查看节点\n\n### 查看所有子节点\n\n我们可以用 `ls` 命令来查看某个节点的所有子节点，比如我们查看根目录下的所有节点时，就可以这样用：\n\n```bash\n[zk: localhost:2181(CONNECTED) 20] ls /\n[quota, zookeeper]\n```\n\n查看 zookeeper 节点的子节点\n\n```bash\n[zk: localhost:2181(CONNECTED) 21] ls /zookeeper\n[config, quota]\n```\n\n### 查看节点的状态\n\n可以用 `stat` 来查看一个节点的状态，比如我们查看根节点的状态时：\n\n```bash\n[zk: localhost:2181(CONNECTED) 22] stat /\ncZxid = 0x0\nctime = Thu Jan 01 08:00:00 CST 1970\nmZxid = 0x0\nmtime = Thu Jan 01 08:00:00 CST 1970\npZxid = 0xe\ncversion = 4\ndataVersion = 0\naclVersion = 0\nephemeralOwner = 0x0\ndataLength = 0\nnumChildren = 2\n```\n\n**字段说明：**\n\n| 字段           | 描述                                                         |\n| -------------- | ------------------------------------------------------------ |\n| czxid          | 创建znode的zxid                                              |\n| mzxid          | 最近一次修改znode的zxid(创建、删除、set直系子节点、set自身节点都会计数) |\n| pzxid          | 最近一次修改子节点的zxid(创建、删除直系子节点都会计数，set子节点不会计数) |\n| ctime          | 创建znode的时间，单位毫秒                                    |\n| mtime          | 最近一次修改znode的时间，单位毫秒                            |\n| dataVersion    | 修改znode数据的次数                                          |\n| cversion       | 修改子节点的次数(创建、删除直系子节点都会计数，set子节点不会计数) |\n| aclVersion     | 该znode的ACL修改次数                                         |\n| ephemeralOwner | 临时znode节点的session id，如果不是临时节点，值为0           |\n| dataLength     | znode携带的数据长度，单位字节                                |\n| numChildren    | 直系子节点的数量(不会递归计算孙节点)                         |\n\n### 查看节点的数据\n\n可以使用 `set` 命令来设置节点的数据，当要获取这个设置的数据时，就可以使用 `get` 命令来获取节点的数据\n\n```bash\n[zk: localhost:2181(CONNECTED) 27] create /node\nCreated /node\n[zk: localhost:2181(CONNECTED) 28] set /node 我的数据\n[zk: localhost:2181(CONNECTED) 29] get /node\n我的数据\n```\n\n## 终端可视化客户端\n\n![screen1](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/PP6ACH0.gif)\n\n下载地址：https://github.com/greycodee/zk-cli/releases\n\nGithub：https://github.com/greycodee/zk-cli","slug":"archive/zookeeper/8B8235DEF437432C99C81E97D68D0644","published":1,"updated":"2021-10-08T08:16:59.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ei0006tvpucd7evfsiz","content":"<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>我们可以去 <a href=\"http://zookeeper.apache.org/releases.html\">ZooKeeper 官网</a> 下载，这里我下载了 <a href=\"https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz\">ZooKeeper 3.7.0</a> 版本</p>\n<p>下载解压后，进入 <code>apache-zookeeper-3.7.0-bin/bin</code> 目录，这里有<strong>客户端</strong>、<strong>服务端</strong>和一些工具。在 Windows 中可以执行<code>.cmd</code> 结尾的执行文件，在 Mac 或 Linux 中可以执行 <code>.sh</code> 结尾的可执行文件。名为 <code>zkCli</code> 的文件就是 ZooKeeper 的客户端了，我们可以用这个客户端来连接到 ZooKeeper 注册中心，来对节点进行查看或增删操作。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><blockquote>\n<p>我是在 <strong>Mac 环境下演示使用的</strong></p>\n</blockquote>\n<p>接下来就说下这个客户端怎么使用。</p>\n<h2 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h2><p>第一步就是要连接到 ZooKeeper 服务，当你执行 <code>zkCli.sh</code> 不带任何参数时，它默认是连接到本地的 <code>localhost:2181</code> 地址。如果你要连接到指定地址，可以使用 <code>-server</code> 配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./zkCli.sh -server localhost:2181</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还可以加上连接超时时间（单位：毫秒）</span></span><br><span class=\"line\">./zkCli.sh -<span class=\"built_in\">timeout</span> 3000 -server localhost:2181</span><br></pre></td></tr></table></figure>\n\n<p>连接上后，终端就会变成这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 0] </span><br></pre></td></tr></table></figure>\n\n<p>然后你可以输入 <code>help</code> 来查看执行的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ZooKeeper -server host:port -client-configuration properties-file cmd args</span><br><span class=\"line\">\taddWatch [-m mode] path <span class=\"comment\"># optional mode is one of [PERSISTENT, PERSISTENT_RECURSIVE] - default is PERSISTENT_RECURSIVE</span></span><br><span class=\"line\">\taddauth scheme auth</span><br><span class=\"line\">\tclose</span><br><span class=\"line\">\tconfig [-c] [-w] [-s]</span><br><span class=\"line\">\tconnect host:port</span><br><span class=\"line\">\tcreate [-s] [-e] [-c] [-t ttl] path [data] [acl]</span><br><span class=\"line\">\tdelete [-v version] path</span><br><span class=\"line\">\tdeleteall path [-b batch size]</span><br><span class=\"line\">\tdelquota [-n|-b|-N|-B] path</span><br><span class=\"line\">\tget [-s] [-w] path</span><br><span class=\"line\">\tgetAcl [-s] path</span><br><span class=\"line\">\tgetAllChildrenNumber path</span><br><span class=\"line\">\tgetEphemerals path</span><br><span class=\"line\">\t<span class=\"built_in\">history</span></span><br><span class=\"line\">\tlistquota path</span><br><span class=\"line\">\t<span class=\"built_in\">ls</span> [-s] [-w] [-R] path</span><br><span class=\"line\">\tprintwatches on|off</span><br><span class=\"line\">\tquit</span><br><span class=\"line\">\treconfig [-s] [-v version] [[-file path] | [-members serverID=host:port1:port2;port3[,...]*]] | [-add serverId=host:port1:port2;port3[,...]]* [-remove serverId[,...]*]</span><br><span class=\"line\">\tredo cmdno</span><br><span class=\"line\">\tremovewatches path [-c|-d|-a] [-l]</span><br><span class=\"line\">\t<span class=\"built_in\">set</span> [-s] [-v version] path data</span><br><span class=\"line\">\tsetAcl [-s] [-v version] [-R] path acl</span><br><span class=\"line\">\tsetquota -n|-b|-N|-B val path</span><br><span class=\"line\">\t<span class=\"built_in\">stat</span> [-w] path</span><br><span class=\"line\">\t<span class=\"built_in\">sync</span> path</span><br><span class=\"line\">\tversion</span><br><span class=\"line\">\t<span class=\"built_in\">whoami</span></span><br></pre></td></tr></table></figure>\n\n<p>在客户端里面，也可以使用命令 <code>connect</code> 来切换连接的 ZooKeeper 的服务地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 12] connect localhost:2181</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h2><h3 id=\"永久节点\"><a href=\"#永久节点\" class=\"headerlink\" title=\"永久节点\"></a>永久节点</h3><p>可以使用 <code>create</code> 命令来创建一个永久节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 18] create /node</span><br><span class=\"line\">Created /node</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"临时节点\"><a href=\"#临时节点\" class=\"headerlink\" title=\"临时节点\"></a>临时节点</h3><p>临时节点当客户端断开后，这个节点就会被删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 19] create -e /tmp_node</span><br><span class=\"line\">Created /tmp_node</span><br></pre></td></tr></table></figure>\n\n<p>临时节点不能够有子节点，当要创建它的子节点时就会报错 <code>Ephemerals cannot have children</code> :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 20] create -e /tmp_node/t1</span><br><span class=\"line\">Ephemerals cannot have children: /tmp_node/t1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"顺序节点\"><a href=\"#顺序节点\" class=\"headerlink\" title=\"顺序节点\"></a>顺序节点</h3><p>ZooKeeper 可以为我们自定创建递增的顺序节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 23] create -s /seq_node</span><br><span class=\"line\">Created /seq_node0000000017</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 24] create -s /seq_node</span><br><span class=\"line\">Created /seq_node0000000018</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 25] create -s /seq_node</span><br><span class=\"line\">Created /seq_node0000000019</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"容器节点\"><a href=\"#容器节点\" class=\"headerlink\" title=\"容器节点\"></a>容器节点</h3><p>容器节点当其子<strong>所有节点</strong>都被删除时，它自己也会被删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建容器节点</span></span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 39] create -c /container</span><br><span class=\"line\">Created /container</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建容器节点的子节点</span></span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 43] create /container/c1</span><br><span class=\"line\">Created /container/c1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 44] create /container/c2</span><br><span class=\"line\">Created /container/c2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除容器节点的子节点</span></span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 46] delete /container/c1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 47] delete /container/c2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 过了一会后，容器节点被删除了</span></span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 56] get /container</span><br><span class=\"line\">org.apache.zookeeper.KeeperException<span class=\"variable\">$NoNodeException</span>: KeeperErrorCode = NoNode <span class=\"keyword\">for</span> /container</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ttl-节点\"><a href=\"#ttl-节点\" class=\"headerlink\" title=\"ttl 节点\"></a>ttl 节点</h3><p>ZooKeeper 也可以为节点设置有效期，单位是毫秒。要创建这个节点时，需要 ZooKeeper 服务端在启动时设置 <code>zookeeper.extendedTypesEnabled=true</code> ，否则在创建时就会失败：<code>KeeperErrorCode = Unimplemented</code></p>\n<p>创建时设置的过期时间单位时毫秒：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 57] create -t 3000 /ttl_node</span><br><span class=\"line\">Created /ttl_node</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h2><p>在 <code>zkCli</code> 中可以用 <code>delete</code> 命令来删除节点，在删除一个节点时，必须保证该节点下面没有子节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 6] create /node1</span><br><span class=\"line\">Created /node1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 7] delete /node1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果有子节点的话，删除时会报错</span></span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 10] create /node1</span><br><span class=\"line\">Created /node1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 11] create /node1/n1</span><br><span class=\"line\">Created /node1/n1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 12] delete /node1</span><br><span class=\"line\">Node not empty: /node1</span><br></pre></td></tr></table></figure>\n\n<p>如果你想一次性删除节点包括其所有子节点时，可以使用 <code>deleteall</code> 命令来进行删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 14] deleteall /node1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看节点\"><a href=\"#查看节点\" class=\"headerlink\" title=\"查看节点\"></a>查看节点</h2><h3 id=\"查看所有子节点\"><a href=\"#查看所有子节点\" class=\"headerlink\" title=\"查看所有子节点\"></a>查看所有子节点</h3><p>我们可以用 <code>ls</code> 命令来查看某个节点的所有子节点，比如我们查看根目录下的所有节点时，就可以这样用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 20] <span class=\"built_in\">ls</span> /</span><br><span class=\"line\">[quota, zookeeper]</span><br></pre></td></tr></table></figure>\n\n<p>查看 zookeeper 节点的子节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 21] <span class=\"built_in\">ls</span> /zookeeper</span><br><span class=\"line\">[config, quota]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看节点的状态\"><a href=\"#查看节点的状态\" class=\"headerlink\" title=\"查看节点的状态\"></a>查看节点的状态</h3><p>可以用 <code>stat</code> 来查看一个节点的状态，比如我们查看根节点的状态时：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 22] <span class=\"built_in\">stat</span> /</span><br><span class=\"line\">cZxid = 0x0</span><br><span class=\"line\">ctime = Thu Jan 01 08:00:00 CST 1970</span><br><span class=\"line\">mZxid = 0x0</span><br><span class=\"line\">mtime = Thu Jan 01 08:00:00 CST 1970</span><br><span class=\"line\">pZxid = 0xe</span><br><span class=\"line\">cversion = 4</span><br><span class=\"line\">dataVersion = 0</span><br><span class=\"line\">aclVersion = 0</span><br><span class=\"line\">ephemeralOwner = 0x0</span><br><span class=\"line\">dataLength = 0</span><br><span class=\"line\">numChildren = 2</span><br></pre></td></tr></table></figure>\n\n<p><strong>字段说明：</strong></p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>czxid</td>\n<td>创建znode的zxid</td>\n</tr>\n<tr>\n<td>mzxid</td>\n<td>最近一次修改znode的zxid(创建、删除、set直系子节点、set自身节点都会计数)</td>\n</tr>\n<tr>\n<td>pzxid</td>\n<td>最近一次修改子节点的zxid(创建、删除直系子节点都会计数，set子节点不会计数)</td>\n</tr>\n<tr>\n<td>ctime</td>\n<td>创建znode的时间，单位毫秒</td>\n</tr>\n<tr>\n<td>mtime</td>\n<td>最近一次修改znode的时间，单位毫秒</td>\n</tr>\n<tr>\n<td>dataVersion</td>\n<td>修改znode数据的次数</td>\n</tr>\n<tr>\n<td>cversion</td>\n<td>修改子节点的次数(创建、删除直系子节点都会计数，set子节点不会计数)</td>\n</tr>\n<tr>\n<td>aclVersion</td>\n<td>该znode的ACL修改次数</td>\n</tr>\n<tr>\n<td>ephemeralOwner</td>\n<td>临时znode节点的session id，如果不是临时节点，值为0</td>\n</tr>\n<tr>\n<td>dataLength</td>\n<td>znode携带的数据长度，单位字节</td>\n</tr>\n<tr>\n<td>numChildren</td>\n<td>直系子节点的数量(不会递归计算孙节点)</td>\n</tr>\n</tbody></table>\n<h3 id=\"查看节点的数据\"><a href=\"#查看节点的数据\" class=\"headerlink\" title=\"查看节点的数据\"></a>查看节点的数据</h3><p>可以使用 <code>set</code> 命令来设置节点的数据，当要获取这个设置的数据时，就可以使用 <code>get</code> 命令来获取节点的数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 27] create /node</span><br><span class=\"line\">Created /node</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 28] <span class=\"built_in\">set</span> /node 我的数据</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 29] get /node</span><br><span class=\"line\">我的数据</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"终端可视化客户端\"><a href=\"#终端可视化客户端\" class=\"headerlink\" title=\"终端可视化客户端\"></a>终端可视化客户端</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/PP6ACH0.gif\" alt=\"screen1\"></p>\n<p>下载地址：<a href=\"https://github.com/greycodee/zk-cli/releases\">https://github.com/greycodee/zk-cli/releases</a></p>\n<p>Github：<a href=\"https://github.com/greycodee/zk-cli\">https://github.com/greycodee/zk-cli</a></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>我们可以去 <a href=\"http://zookeeper.apache.org/releases.html\">ZooKeeper 官网</a> 下载，这里我下载了 <a href=\"https://www.apache.org/dyn/closer.lua/zookeeper/zookeeper-3.7.0/apache-zookeeper-3.7.0-bin.tar.gz\">ZooKeeper 3.7.0</a> 版本</p>\n<p>下载解压后，进入 <code>apache-zookeeper-3.7.0-bin/bin</code> 目录，这里有<strong>客户端</strong>、<strong>服务端</strong>和一些工具。在 Windows 中可以执行<code>.cmd</code> 结尾的执行文件，在 Mac 或 Linux 中可以执行 <code>.sh</code> 结尾的可执行文件。名为 <code>zkCli</code> 的文件就是 ZooKeeper 的客户端了，我们可以用这个客户端来连接到 ZooKeeper 注册中心，来对节点进行查看或增删操作。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><blockquote>\n<p>我是在 <strong>Mac 环境下演示使用的</strong></p>\n</blockquote>\n<p>接下来就说下这个客户端怎么使用。</p>\n<h2 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h2><p>第一步就是要连接到 ZooKeeper 服务，当你执行 <code>zkCli.sh</code> 不带任何参数时，它默认是连接到本地的 <code>localhost:2181</code> 地址。如果你要连接到指定地址，可以使用 <code>-server</code> 配置：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">./zkCli.sh -server localhost:2181</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 还可以加上连接超时时间（单位：毫秒）</span></span><br><span class=\"line\">./zkCli.sh -<span class=\"built_in\">timeout</span> 3000 -server localhost:2181</span><br></pre></td></tr></table></figure>\n\n<p>连接上后，终端就会变成这样：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 0] </span><br></pre></td></tr></table></figure>\n\n<p>然后你可以输入 <code>help</code> 来查看执行的命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">ZooKeeper -server host:port -client-configuration properties-file cmd args</span><br><span class=\"line\">\taddWatch [-m mode] path <span class=\"comment\"># optional mode is one of [PERSISTENT, PERSISTENT_RECURSIVE] - default is PERSISTENT_RECURSIVE</span></span><br><span class=\"line\">\taddauth scheme auth</span><br><span class=\"line\">\tclose</span><br><span class=\"line\">\tconfig [-c] [-w] [-s]</span><br><span class=\"line\">\tconnect host:port</span><br><span class=\"line\">\tcreate [-s] [-e] [-c] [-t ttl] path [data] [acl]</span><br><span class=\"line\">\tdelete [-v version] path</span><br><span class=\"line\">\tdeleteall path [-b batch size]</span><br><span class=\"line\">\tdelquota [-n|-b|-N|-B] path</span><br><span class=\"line\">\tget [-s] [-w] path</span><br><span class=\"line\">\tgetAcl [-s] path</span><br><span class=\"line\">\tgetAllChildrenNumber path</span><br><span class=\"line\">\tgetEphemerals path</span><br><span class=\"line\">\t<span class=\"built_in\">history</span></span><br><span class=\"line\">\tlistquota path</span><br><span class=\"line\">\t<span class=\"built_in\">ls</span> [-s] [-w] [-R] path</span><br><span class=\"line\">\tprintwatches on|off</span><br><span class=\"line\">\tquit</span><br><span class=\"line\">\treconfig [-s] [-v version] [[-file path] | [-members serverID=host:port1:port2;port3[,...]*]] | [-add serverId=host:port1:port2;port3[,...]]* [-remove serverId[,...]*]</span><br><span class=\"line\">\tredo cmdno</span><br><span class=\"line\">\tremovewatches path [-c|-d|-a] [-l]</span><br><span class=\"line\">\t<span class=\"built_in\">set</span> [-s] [-v version] path data</span><br><span class=\"line\">\tsetAcl [-s] [-v version] [-R] path acl</span><br><span class=\"line\">\tsetquota -n|-b|-N|-B val path</span><br><span class=\"line\">\t<span class=\"built_in\">stat</span> [-w] path</span><br><span class=\"line\">\t<span class=\"built_in\">sync</span> path</span><br><span class=\"line\">\tversion</span><br><span class=\"line\">\t<span class=\"built_in\">whoami</span></span><br></pre></td></tr></table></figure>\n\n<p>在客户端里面，也可以使用命令 <code>connect</code> 来切换连接的 ZooKeeper 的服务地址：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 12] connect localhost:2181</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建节点\"><a href=\"#创建节点\" class=\"headerlink\" title=\"创建节点\"></a>创建节点</h2><h3 id=\"永久节点\"><a href=\"#永久节点\" class=\"headerlink\" title=\"永久节点\"></a>永久节点</h3><p>可以使用 <code>create</code> 命令来创建一个永久节点：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 18] create /node</span><br><span class=\"line\">Created /node</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"临时节点\"><a href=\"#临时节点\" class=\"headerlink\" title=\"临时节点\"></a>临时节点</h3><p>临时节点当客户端断开后，这个节点就会被删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 19] create -e /tmp_node</span><br><span class=\"line\">Created /tmp_node</span><br></pre></td></tr></table></figure>\n\n<p>临时节点不能够有子节点，当要创建它的子节点时就会报错 <code>Ephemerals cannot have children</code> :</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 20] create -e /tmp_node/t1</span><br><span class=\"line\">Ephemerals cannot have children: /tmp_node/t1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"顺序节点\"><a href=\"#顺序节点\" class=\"headerlink\" title=\"顺序节点\"></a>顺序节点</h3><p>ZooKeeper 可以为我们自定创建递增的顺序节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 23] create -s /seq_node</span><br><span class=\"line\">Created /seq_node0000000017</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 24] create -s /seq_node</span><br><span class=\"line\">Created /seq_node0000000018</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 25] create -s /seq_node</span><br><span class=\"line\">Created /seq_node0000000019</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"容器节点\"><a href=\"#容器节点\" class=\"headerlink\" title=\"容器节点\"></a>容器节点</h3><p>容器节点当其子<strong>所有节点</strong>都被删除时，它自己也会被删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 创建容器节点</span></span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 39] create -c /container</span><br><span class=\"line\">Created /container</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建容器节点的子节点</span></span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 43] create /container/c1</span><br><span class=\"line\">Created /container/c1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 44] create /container/c2</span><br><span class=\"line\">Created /container/c2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 删除容器节点的子节点</span></span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 46] delete /container/c1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 47] delete /container/c2</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 过了一会后，容器节点被删除了</span></span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 56] get /container</span><br><span class=\"line\">org.apache.zookeeper.KeeperException<span class=\"variable\">$NoNodeException</span>: KeeperErrorCode = NoNode <span class=\"keyword\">for</span> /container</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ttl-节点\"><a href=\"#ttl-节点\" class=\"headerlink\" title=\"ttl 节点\"></a>ttl 节点</h3><p>ZooKeeper 也可以为节点设置有效期，单位是毫秒。要创建这个节点时，需要 ZooKeeper 服务端在启动时设置 <code>zookeeper.extendedTypesEnabled=true</code> ，否则在创建时就会失败：<code>KeeperErrorCode = Unimplemented</code></p>\n<p>创建时设置的过期时间单位时毫秒：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 57] create -t 3000 /ttl_node</span><br><span class=\"line\">Created /ttl_node</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除节点\"><a href=\"#删除节点\" class=\"headerlink\" title=\"删除节点\"></a>删除节点</h2><p>在 <code>zkCli</code> 中可以用 <code>delete</code> 命令来删除节点，在删除一个节点时，必须保证该节点下面没有子节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 6] create /node1</span><br><span class=\"line\">Created /node1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 7] delete /node1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果有子节点的话，删除时会报错</span></span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 10] create /node1</span><br><span class=\"line\">Created /node1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 11] create /node1/n1</span><br><span class=\"line\">Created /node1/n1</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 12] delete /node1</span><br><span class=\"line\">Node not empty: /node1</span><br></pre></td></tr></table></figure>\n\n<p>如果你想一次性删除节点包括其所有子节点时，可以使用 <code>deleteall</code> 命令来进行删除</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 14] deleteall /node1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看节点\"><a href=\"#查看节点\" class=\"headerlink\" title=\"查看节点\"></a>查看节点</h2><h3 id=\"查看所有子节点\"><a href=\"#查看所有子节点\" class=\"headerlink\" title=\"查看所有子节点\"></a>查看所有子节点</h3><p>我们可以用 <code>ls</code> 命令来查看某个节点的所有子节点，比如我们查看根目录下的所有节点时，就可以这样用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 20] <span class=\"built_in\">ls</span> /</span><br><span class=\"line\">[quota, zookeeper]</span><br></pre></td></tr></table></figure>\n\n<p>查看 zookeeper 节点的子节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 21] <span class=\"built_in\">ls</span> /zookeeper</span><br><span class=\"line\">[config, quota]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看节点的状态\"><a href=\"#查看节点的状态\" class=\"headerlink\" title=\"查看节点的状态\"></a>查看节点的状态</h3><p>可以用 <code>stat</code> 来查看一个节点的状态，比如我们查看根节点的状态时：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 22] <span class=\"built_in\">stat</span> /</span><br><span class=\"line\">cZxid = 0x0</span><br><span class=\"line\">ctime = Thu Jan 01 08:00:00 CST 1970</span><br><span class=\"line\">mZxid = 0x0</span><br><span class=\"line\">mtime = Thu Jan 01 08:00:00 CST 1970</span><br><span class=\"line\">pZxid = 0xe</span><br><span class=\"line\">cversion = 4</span><br><span class=\"line\">dataVersion = 0</span><br><span class=\"line\">aclVersion = 0</span><br><span class=\"line\">ephemeralOwner = 0x0</span><br><span class=\"line\">dataLength = 0</span><br><span class=\"line\">numChildren = 2</span><br></pre></td></tr></table></figure>\n\n<p><strong>字段说明：</strong></p>\n<table>\n<thead>\n<tr>\n<th>字段</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>czxid</td>\n<td>创建znode的zxid</td>\n</tr>\n<tr>\n<td>mzxid</td>\n<td>最近一次修改znode的zxid(创建、删除、set直系子节点、set自身节点都会计数)</td>\n</tr>\n<tr>\n<td>pzxid</td>\n<td>最近一次修改子节点的zxid(创建、删除直系子节点都会计数，set子节点不会计数)</td>\n</tr>\n<tr>\n<td>ctime</td>\n<td>创建znode的时间，单位毫秒</td>\n</tr>\n<tr>\n<td>mtime</td>\n<td>最近一次修改znode的时间，单位毫秒</td>\n</tr>\n<tr>\n<td>dataVersion</td>\n<td>修改znode数据的次数</td>\n</tr>\n<tr>\n<td>cversion</td>\n<td>修改子节点的次数(创建、删除直系子节点都会计数，set子节点不会计数)</td>\n</tr>\n<tr>\n<td>aclVersion</td>\n<td>该znode的ACL修改次数</td>\n</tr>\n<tr>\n<td>ephemeralOwner</td>\n<td>临时znode节点的session id，如果不是临时节点，值为0</td>\n</tr>\n<tr>\n<td>dataLength</td>\n<td>znode携带的数据长度，单位字节</td>\n</tr>\n<tr>\n<td>numChildren</td>\n<td>直系子节点的数量(不会递归计算孙节点)</td>\n</tr>\n</tbody></table>\n<h3 id=\"查看节点的数据\"><a href=\"#查看节点的数据\" class=\"headerlink\" title=\"查看节点的数据\"></a>查看节点的数据</h3><p>可以使用 <code>set</code> 命令来设置节点的数据，当要获取这个设置的数据时，就可以使用 <code>get</code> 命令来获取节点的数据</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">[zk: localhost:2181(CONNECTED) 27] create /node</span><br><span class=\"line\">Created /node</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 28] <span class=\"built_in\">set</span> /node 我的数据</span><br><span class=\"line\">[zk: localhost:2181(CONNECTED) 29] get /node</span><br><span class=\"line\">我的数据</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"终端可视化客户端\"><a href=\"#终端可视化客户端\" class=\"headerlink\" title=\"终端可视化客户端\"></a>终端可视化客户端</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/PP6ACH0.gif\" alt=\"screen1\"></p>\n<p>下载地址：<a href=\"https://github.com/greycodee/zk-cli/releases\">https://github.com/greycodee/zk-cli/releases</a></p>\n<p>Github：<a href=\"https://github.com/greycodee/zk-cli\">https://github.com/greycodee/zk-cli</a></p>\n"},{"title":"Disruptor-缓存行填充","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-03-01T02:02:08.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 伪共享概念\n\n### CPU架构\n\n常见的CPU架构如下图：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201116145239.jpg)\n\n在某个CPU核心上运行一个线程时，他获取数据是先从**L1缓存**上面找，没有命中数据时，再从**L2缓存**上面找、还是没有命中时再从**L3缓存**上找，如果还没有的话就再从主内存里面找。**找到后再一层一层的传递数据**。\n\n所以查找数据的顺序为：\n\n` L1 》L2 》 L3 》主内存`\n\n刷新缓存的顺序为：\n\n`主内存 》L3 》L2 》L1`\n\n### 缓存存储结构\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201116150451.jpg)\n\n在计算机缓存中，**存储数据是以缓存行为单位的**，不同的系统缓存行的大小也不一样，现在常见的64位操作系统，他每行可以存储64字节数据。比如Java中`Long`类型的数据占8个字节，所以**一行可以存8个Long数据类型的数据**。\n\n**所以当加载缓存行中任意一个数据时，其他在当前缓存行里的数据也会一起加载**\n\n### 线程数据共享\n\n当线程共享一个变量时，每个线程的更改都会把最新数据刷新回主内存，如果处理器发现自己缓存行对应的内存地址呗修改，就会将当前处理器的缓存行设置无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据库读到处理器缓存中（**嗅探机制**）。\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201116153352.jpg)\n\n### 伪共享\n\n上面说的是**共享一个缓存行的一个数据，这样是完全没问题的**。可是**当不同线程要使用一个缓存行里的不同数据时**，这样就会出现一种**伪共享**的情况:\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201116155013.jpg)\n\n尽管`变量a`没有被其他线程更改，可以由于他和`变量d`在同一缓存行里，所以每次都会**受变量d的影响**,缓存都会被设置为无效状态，所以每次使用时都会从主内存里重新拉取。这样速度就会大大的打折扣。\n\n### RingBuffer的解决方法\n\n在`RingBuffer`解决伪共享的方法就是**缓存行填充**\n\n```java\nabstract class RingBufferPad\n{\n    protected long p1, p2, p3, p4, p5, p6, p7;\n}\n```","source":"_posts/java/disruptor/18e3fbd6-ff4b-4a0a-b82f-a547dbef8d0c.md","raw":"---\ntitle: Disruptor-缓存行填充\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-03-01 10:02:08\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Disruptor\n- Java\ncategories:\n- Java\n---\n\n## 伪共享概念\n\n### CPU架构\n\n常见的CPU架构如下图：\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201116145239.jpg)\n\n在某个CPU核心上运行一个线程时，他获取数据是先从**L1缓存**上面找，没有命中数据时，再从**L2缓存**上面找、还是没有命中时再从**L3缓存**上找，如果还没有的话就再从主内存里面找。**找到后再一层一层的传递数据**。\n\n所以查找数据的顺序为：\n\n` L1 》L2 》 L3 》主内存`\n\n刷新缓存的顺序为：\n\n`主内存 》L3 》L2 》L1`\n\n### 缓存存储结构\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201116150451.jpg)\n\n在计算机缓存中，**存储数据是以缓存行为单位的**，不同的系统缓存行的大小也不一样，现在常见的64位操作系统，他每行可以存储64字节数据。比如Java中`Long`类型的数据占8个字节，所以**一行可以存8个Long数据类型的数据**。\n\n**所以当加载缓存行中任意一个数据时，其他在当前缓存行里的数据也会一起加载**\n\n### 线程数据共享\n\n当线程共享一个变量时，每个线程的更改都会把最新数据刷新回主内存，如果处理器发现自己缓存行对应的内存地址呗修改，就会将当前处理器的缓存行设置无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据库读到处理器缓存中（**嗅探机制**）。\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201116153352.jpg)\n\n### 伪共享\n\n上面说的是**共享一个缓存行的一个数据，这样是完全没问题的**。可是**当不同线程要使用一个缓存行里的不同数据时**，这样就会出现一种**伪共享**的情况:\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201116155013.jpg)\n\n尽管`变量a`没有被其他线程更改，可以由于他和`变量d`在同一缓存行里，所以每次都会**受变量d的影响**,缓存都会被设置为无效状态，所以每次使用时都会从主内存里重新拉取。这样速度就会大大的打折扣。\n\n### RingBuffer的解决方法\n\n在`RingBuffer`解决伪共享的方法就是**缓存行填充**\n\n```java\nabstract class RingBufferPad\n{\n    protected long p1, p2, p3, p4, p5, p6, p7;\n}\n```","slug":"java/disruptor/18e3fbd6-ff4b-4a0a-b82f-a547dbef8d0c","published":1,"updated":"2021-10-08T08:24:57.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ei1006uvpuch28j4r3a","content":"<h2 id=\"伪共享概念\"><a href=\"#伪共享概念\" class=\"headerlink\" title=\"伪共享概念\"></a>伪共享概念</h2><h3 id=\"CPU架构\"><a href=\"#CPU架构\" class=\"headerlink\" title=\"CPU架构\"></a>CPU架构</h3><p>常见的CPU架构如下图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201116145239.jpg\" alt=\"图片\"></p>\n<p>在某个CPU核心上运行一个线程时，他获取数据是先从<strong>L1缓存</strong>上面找，没有命中数据时，再从<strong>L2缓存</strong>上面找、还是没有命中时再从<strong>L3缓存</strong>上找，如果还没有的话就再从主内存里面找。<strong>找到后再一层一层的传递数据</strong>。</p>\n<p>所以查找数据的顺序为：</p>\n<p><code> L1 》L2 》 L3 》主内存</code></p>\n<p>刷新缓存的顺序为：</p>\n<p><code>主内存 》L3 》L2 》L1</code></p>\n<h3 id=\"缓存存储结构\"><a href=\"#缓存存储结构\" class=\"headerlink\" title=\"缓存存储结构\"></a>缓存存储结构</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201116150451.jpg\" alt=\"图片\"></p>\n<p>在计算机缓存中，<strong>存储数据是以缓存行为单位的</strong>，不同的系统缓存行的大小也不一样，现在常见的64位操作系统，他每行可以存储64字节数据。比如Java中<code>Long</code>类型的数据占8个字节，所以<strong>一行可以存8个Long数据类型的数据</strong>。</p>\n<p><strong>所以当加载缓存行中任意一个数据时，其他在当前缓存行里的数据也会一起加载</strong></p>\n<h3 id=\"线程数据共享\"><a href=\"#线程数据共享\" class=\"headerlink\" title=\"线程数据共享\"></a>线程数据共享</h3><p>当线程共享一个变量时，每个线程的更改都会把最新数据刷新回主内存，如果处理器发现自己缓存行对应的内存地址呗修改，就会将当前处理器的缓存行设置无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据库读到处理器缓存中（<strong>嗅探机制</strong>）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201116153352.jpg\" alt=\"图片\"></p>\n<h3 id=\"伪共享\"><a href=\"#伪共享\" class=\"headerlink\" title=\"伪共享\"></a>伪共享</h3><p>上面说的是<strong>共享一个缓存行的一个数据，这样是完全没问题的</strong>。可是<strong>当不同线程要使用一个缓存行里的不同数据时</strong>，这样就会出现一种<strong>伪共享</strong>的情况:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201116155013.jpg\" alt=\"图片\"></p>\n<p>尽管<code>变量a</code>没有被其他线程更改，可以由于他和<code>变量d</code>在同一缓存行里，所以每次都会<strong>受变量d的影响</strong>,缓存都会被设置为无效状态，所以每次使用时都会从主内存里重新拉取。这样速度就会大大的打折扣。</p>\n<h3 id=\"RingBuffer的解决方法\"><a href=\"#RingBuffer的解决方法\" class=\"headerlink\" title=\"RingBuffer的解决方法\"></a>RingBuffer的解决方法</h3><p>在<code>RingBuffer</code>解决伪共享的方法就是<strong>缓存行填充</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RingBufferPad</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">long</span> p1, p2, p3, p4, p5, p6, p7;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"伪共享概念\"><a href=\"#伪共享概念\" class=\"headerlink\" title=\"伪共享概念\"></a>伪共享概念</h2><h3 id=\"CPU架构\"><a href=\"#CPU架构\" class=\"headerlink\" title=\"CPU架构\"></a>CPU架构</h3><p>常见的CPU架构如下图：</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201116145239.jpg\" alt=\"图片\"></p>\n<p>在某个CPU核心上运行一个线程时，他获取数据是先从<strong>L1缓存</strong>上面找，没有命中数据时，再从<strong>L2缓存</strong>上面找、还是没有命中时再从<strong>L3缓存</strong>上找，如果还没有的话就再从主内存里面找。<strong>找到后再一层一层的传递数据</strong>。</p>\n<p>所以查找数据的顺序为：</p>\n<p><code> L1 》L2 》 L3 》主内存</code></p>\n<p>刷新缓存的顺序为：</p>\n<p><code>主内存 》L3 》L2 》L1</code></p>\n<h3 id=\"缓存存储结构\"><a href=\"#缓存存储结构\" class=\"headerlink\" title=\"缓存存储结构\"></a>缓存存储结构</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201116150451.jpg\" alt=\"图片\"></p>\n<p>在计算机缓存中，<strong>存储数据是以缓存行为单位的</strong>，不同的系统缓存行的大小也不一样，现在常见的64位操作系统，他每行可以存储64字节数据。比如Java中<code>Long</code>类型的数据占8个字节，所以<strong>一行可以存8个Long数据类型的数据</strong>。</p>\n<p><strong>所以当加载缓存行中任意一个数据时，其他在当前缓存行里的数据也会一起加载</strong></p>\n<h3 id=\"线程数据共享\"><a href=\"#线程数据共享\" class=\"headerlink\" title=\"线程数据共享\"></a>线程数据共享</h3><p>当线程共享一个变量时，每个线程的更改都会把最新数据刷新回主内存，如果处理器发现自己缓存行对应的内存地址呗修改，就会将当前处理器的缓存行设置无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据库读到处理器缓存中（<strong>嗅探机制</strong>）。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201116153352.jpg\" alt=\"图片\"></p>\n<h3 id=\"伪共享\"><a href=\"#伪共享\" class=\"headerlink\" title=\"伪共享\"></a>伪共享</h3><p>上面说的是<strong>共享一个缓存行的一个数据，这样是完全没问题的</strong>。可是<strong>当不同线程要使用一个缓存行里的不同数据时</strong>，这样就会出现一种<strong>伪共享</strong>的情况:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201116155013.jpg\" alt=\"图片\"></p>\n<p>尽管<code>变量a</code>没有被其他线程更改，可以由于他和<code>变量d</code>在同一缓存行里，所以每次都会<strong>受变量d的影响</strong>,缓存都会被设置为无效状态，所以每次使用时都会从主内存里重新拉取。这样速度就会大大的打折扣。</p>\n<h3 id=\"RingBuffer的解决方法\"><a href=\"#RingBuffer的解决方法\" class=\"headerlink\" title=\"RingBuffer的解决方法\"></a>RingBuffer的解决方法</h3><p>在<code>RingBuffer</code>解决伪共享的方法就是<strong>缓存行填充</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RingBufferPad</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"type\">long</span> p1, p2, p3, p4, p5, p6, p7;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Disruptor-生产者发布方式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-03-01T01:57:58.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 旧版本API发布方式\n\n```java\nimport com.lmax.disruptor.RingBuffer;\n\npublic class LongEventProducer{\n    \n    private final RingBuffer<LongEvent> ringBuffer;\n    \n    public LongEventProducer(RingBuffer<LongEvent> ringBuffer){\n        this.ringBuffer = ringBuffer;\n    }\n    \n    public void onData(ByteBuffer bb){\n        long sequence = ringBuffer.next();  // Grab the next sequence\n        try{\n            LongEvent event = ringBuffer.get(sequence); // Get the entry in the Disruptor\n                                                        // for the sequence\n            event.set(bb.getLong(0));  // Fill with data\n        }\n        finally{\n            ringBuffer.publish(sequence);\n        }\n    }\n}\n\n\n```\n\n### 使用\n\n```java\nRingBuffer<LongEvent> ringBuffer = disruptor.start();\n\nLongEventProducer producer = new LongEventProducer(ringBuffer);\n\nByteBuffer bb = ByteBuffer.allocate(8);\nfor (long l = 0; l<5; l++) {\n    bb.putLong(0, l);\n    producer.onData(bb)\n}\nSystem.out.println(\"发布完成\");\n```\n\n\n\n## 使用Translators发布\n\n```java\nimport com.lmax.disruptor.RingBuffer;\nimport com.lmax.disruptor.EventTranslatorOneArg;\n\npublic class LongEventProducerWithTranslator{\n    \n    private final RingBuffer<LongEvent> ringBuffer;\n    \n    public LongEventProducerWithTranslator(RingBuffer<LongEvent> ringBuffer){\n        this.ringBuffer = ringBuffer;\n    }\n    \n    private static final EventTranslatorOneArg<LongEvent, ByteBuffer> TRANSLATOR =\n        new EventTranslatorOneArg<LongEvent, ByteBuffer>(){\n            public void translateTo(LongEvent event, long sequence, ByteBuffer bb){\n                event.set(bb.getLong(0));\n            }\n        };\n    \n    public void onData(ByteBuffer bb){\n        ringBuffer.publishEvent(TRANSLATOR, bb);\n    }\n}\n```\n\n### 使用\n\n```diff\nRingBuffer<LongEvent> ringBuffer = disruptor.start();\n\n- LongEventProducer producer = new LongEventProducer(ringBuffer);\n+ LongEventProducerWithTranslator producer = new LongEventProducerWithTranslator(ringBuffer);\n\nByteBuffer bb = ByteBuffer.allocate(8);\nfor (long l = 0; l<5; l++) {\n    bb.putLong(0, l);\n    producer.onData(bb)\n}\nSystem.out.println(\"发布完成\");\n```\n\n\n\n## 使用Java8的Lambda表达式发布\n\n```diff\nRingBuffer<LongEvent> ringBuffer = disruptor.start();\n- LongEventProducerWithTranslator producer = new LongEventProducerWithTranslator(ringBuffer);\nByteBuffer bb = ByteBuffer.allocate(8);\nfor (long l = 0; true; l++){\n    bb.putLong(0, l);\n-   producer.onData(bb);\n+   ringBuffer.publishEvent((event, sequence, buffer) ->event.set(buffer.getLong(0)),bb);\n}\n```","source":"_posts/java/disruptor/926f33f0-651d-471a-ad0c-b632fcce8c0f.md","raw":"---\ntitle: Disruptor-生产者发布方式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-03-01 09:57:58\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Disruptor\n- Java\ncategories:\n- Java\n---\n\n## 旧版本API发布方式\n\n```java\nimport com.lmax.disruptor.RingBuffer;\n\npublic class LongEventProducer{\n    \n    private final RingBuffer<LongEvent> ringBuffer;\n    \n    public LongEventProducer(RingBuffer<LongEvent> ringBuffer){\n        this.ringBuffer = ringBuffer;\n    }\n    \n    public void onData(ByteBuffer bb){\n        long sequence = ringBuffer.next();  // Grab the next sequence\n        try{\n            LongEvent event = ringBuffer.get(sequence); // Get the entry in the Disruptor\n                                                        // for the sequence\n            event.set(bb.getLong(0));  // Fill with data\n        }\n        finally{\n            ringBuffer.publish(sequence);\n        }\n    }\n}\n\n\n```\n\n### 使用\n\n```java\nRingBuffer<LongEvent> ringBuffer = disruptor.start();\n\nLongEventProducer producer = new LongEventProducer(ringBuffer);\n\nByteBuffer bb = ByteBuffer.allocate(8);\nfor (long l = 0; l<5; l++) {\n    bb.putLong(0, l);\n    producer.onData(bb)\n}\nSystem.out.println(\"发布完成\");\n```\n\n\n\n## 使用Translators发布\n\n```java\nimport com.lmax.disruptor.RingBuffer;\nimport com.lmax.disruptor.EventTranslatorOneArg;\n\npublic class LongEventProducerWithTranslator{\n    \n    private final RingBuffer<LongEvent> ringBuffer;\n    \n    public LongEventProducerWithTranslator(RingBuffer<LongEvent> ringBuffer){\n        this.ringBuffer = ringBuffer;\n    }\n    \n    private static final EventTranslatorOneArg<LongEvent, ByteBuffer> TRANSLATOR =\n        new EventTranslatorOneArg<LongEvent, ByteBuffer>(){\n            public void translateTo(LongEvent event, long sequence, ByteBuffer bb){\n                event.set(bb.getLong(0));\n            }\n        };\n    \n    public void onData(ByteBuffer bb){\n        ringBuffer.publishEvent(TRANSLATOR, bb);\n    }\n}\n```\n\n### 使用\n\n```diff\nRingBuffer<LongEvent> ringBuffer = disruptor.start();\n\n- LongEventProducer producer = new LongEventProducer(ringBuffer);\n+ LongEventProducerWithTranslator producer = new LongEventProducerWithTranslator(ringBuffer);\n\nByteBuffer bb = ByteBuffer.allocate(8);\nfor (long l = 0; l<5; l++) {\n    bb.putLong(0, l);\n    producer.onData(bb)\n}\nSystem.out.println(\"发布完成\");\n```\n\n\n\n## 使用Java8的Lambda表达式发布\n\n```diff\nRingBuffer<LongEvent> ringBuffer = disruptor.start();\n- LongEventProducerWithTranslator producer = new LongEventProducerWithTranslator(ringBuffer);\nByteBuffer bb = ByteBuffer.allocate(8);\nfor (long l = 0; true; l++){\n    bb.putLong(0, l);\n-   producer.onData(bb);\n+   ringBuffer.publishEvent((event, sequence, buffer) ->event.set(buffer.getLong(0)),bb);\n}\n```","slug":"java/disruptor/926f33f0-651d-471a-ad0c-b632fcce8c0f","published":1,"updated":"2021-10-08T07:57:24.165Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ei1006xvpuchcap84yr","content":"<h2 id=\"旧版本API发布方式\"><a href=\"#旧版本API发布方式\" class=\"headerlink\" title=\"旧版本API发布方式\"></a>旧版本API发布方式</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.lmax.disruptor.RingBuffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongEventProducer</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RingBuffer&lt;LongEvent&gt; ringBuffer;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LongEventProducer</span><span class=\"params\">(RingBuffer&lt;LongEvent&gt; ringBuffer)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.ringBuffer = ringBuffer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onData</span><span class=\"params\">(ByteBuffer bb)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">sequence</span> <span class=\"operator\">=</span> ringBuffer.next();  <span class=\"comment\">// Grab the next sequence</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">LongEvent</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> ringBuffer.get(sequence); <span class=\"comment\">// Get the entry in the Disruptor</span></span><br><span class=\"line\">                                                        <span class=\"comment\">// for the sequence</span></span><br><span class=\"line\">            event.set(bb.getLong(<span class=\"number\">0</span>));  <span class=\"comment\">// Fill with data</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">            ringBuffer.publish(sequence);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LongEventProducer</span> <span class=\"variable\">producer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEventProducer</span>(ringBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ByteBuffer</span> <span class=\"variable\">bb</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">long</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; l&lt;<span class=\"number\">5</span>; l++) &#123;</span><br><span class=\"line\">    bb.putLong(<span class=\"number\">0</span>, l);</span><br><span class=\"line\">    producer.onData(bb)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;发布完成&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用Translators发布\"><a href=\"#使用Translators发布\" class=\"headerlink\" title=\"使用Translators发布\"></a>使用Translators发布</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.lmax.disruptor.RingBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lmax.disruptor.EventTranslatorOneArg;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongEventProducerWithTranslator</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RingBuffer&lt;LongEvent&gt; ringBuffer;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LongEventProducerWithTranslator</span><span class=\"params\">(RingBuffer&lt;LongEvent&gt; ringBuffer)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.ringBuffer = ringBuffer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> EventTranslatorOneArg&lt;LongEvent, ByteBuffer&gt; TRANSLATOR =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">EventTranslatorOneArg</span>&lt;LongEvent, ByteBuffer&gt;()&#123;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">translateTo</span><span class=\"params\">(LongEvent event, <span class=\"type\">long</span> sequence, ByteBuffer bb)</span>&#123;</span><br><span class=\"line\">                event.set(bb.getLong(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onData</span><span class=\"params\">(ByteBuffer bb)</span>&#123;</span><br><span class=\"line\">        ringBuffer.publishEvent(TRANSLATOR, bb);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\">RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- LongEventProducer producer = new LongEventProducer(ringBuffer);</span></span><br><span class=\"line\"><span class=\"addition\">+ LongEventProducerWithTranslator producer = new LongEventProducerWithTranslator(ringBuffer);</span></span><br><span class=\"line\"></span><br><span class=\"line\">ByteBuffer bb = ByteBuffer.allocate(8);</span><br><span class=\"line\">for (long l = 0; l&lt;5; l++) &#123;</span><br><span class=\"line\">    bb.putLong(0, l);</span><br><span class=\"line\">    producer.onData(bb)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(&quot;发布完成&quot;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用Java8的Lambda表达式发布\"><a href=\"#使用Java8的Lambda表达式发布\" class=\"headerlink\" title=\"使用Java8的Lambda表达式发布\"></a>使用Java8的Lambda表达式发布</h2><figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\">RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.start();</span><br><span class=\"line\"><span class=\"deletion\">- LongEventProducerWithTranslator producer = new LongEventProducerWithTranslator(ringBuffer);</span></span><br><span class=\"line\">ByteBuffer bb = ByteBuffer.allocate(8);</span><br><span class=\"line\">for (long l = 0; true; l++)&#123;</span><br><span class=\"line\">    bb.putLong(0, l);</span><br><span class=\"line\"><span class=\"deletion\">-   producer.onData(bb);</span></span><br><span class=\"line\"><span class=\"addition\">+   ringBuffer.publishEvent((event, sequence, buffer) -&gt;event.set(buffer.getLong(0)),bb);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"旧版本API发布方式\"><a href=\"#旧版本API发布方式\" class=\"headerlink\" title=\"旧版本API发布方式\"></a>旧版本API发布方式</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.lmax.disruptor.RingBuffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongEventProducer</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RingBuffer&lt;LongEvent&gt; ringBuffer;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LongEventProducer</span><span class=\"params\">(RingBuffer&lt;LongEvent&gt; ringBuffer)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.ringBuffer = ringBuffer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onData</span><span class=\"params\">(ByteBuffer bb)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">sequence</span> <span class=\"operator\">=</span> ringBuffer.next();  <span class=\"comment\">// Grab the next sequence</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">LongEvent</span> <span class=\"variable\">event</span> <span class=\"operator\">=</span> ringBuffer.get(sequence); <span class=\"comment\">// Get the entry in the Disruptor</span></span><br><span class=\"line\">                                                        <span class=\"comment\">// for the sequence</span></span><br><span class=\"line\">            event.set(bb.getLong(<span class=\"number\">0</span>));  <span class=\"comment\">// Fill with data</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">            ringBuffer.publish(sequence);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">LongEventProducer</span> <span class=\"variable\">producer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEventProducer</span>(ringBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ByteBuffer</span> <span class=\"variable\">bb</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">long</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; l&lt;<span class=\"number\">5</span>; l++) &#123;</span><br><span class=\"line\">    bb.putLong(<span class=\"number\">0</span>, l);</span><br><span class=\"line\">    producer.onData(bb)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;发布完成&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用Translators发布\"><a href=\"#使用Translators发布\" class=\"headerlink\" title=\"使用Translators发布\"></a>使用Translators发布</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> com.lmax.disruptor.RingBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lmax.disruptor.EventTranslatorOneArg;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongEventProducerWithTranslator</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> RingBuffer&lt;LongEvent&gt; ringBuffer;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LongEventProducerWithTranslator</span><span class=\"params\">(RingBuffer&lt;LongEvent&gt; ringBuffer)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.ringBuffer = ringBuffer;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> EventTranslatorOneArg&lt;LongEvent, ByteBuffer&gt; TRANSLATOR =</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">EventTranslatorOneArg</span>&lt;LongEvent, ByteBuffer&gt;()&#123;</span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">translateTo</span><span class=\"params\">(LongEvent event, <span class=\"type\">long</span> sequence, ByteBuffer bb)</span>&#123;</span><br><span class=\"line\">                event.set(bb.getLong(<span class=\"number\">0</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onData</span><span class=\"params\">(ByteBuffer bb)</span>&#123;</span><br><span class=\"line\">        ringBuffer.publishEvent(TRANSLATOR, bb);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\">RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"deletion\">- LongEventProducer producer = new LongEventProducer(ringBuffer);</span></span><br><span class=\"line\"><span class=\"addition\">+ LongEventProducerWithTranslator producer = new LongEventProducerWithTranslator(ringBuffer);</span></span><br><span class=\"line\"></span><br><span class=\"line\">ByteBuffer bb = ByteBuffer.allocate(8);</span><br><span class=\"line\">for (long l = 0; l&lt;5; l++) &#123;</span><br><span class=\"line\">    bb.putLong(0, l);</span><br><span class=\"line\">    producer.onData(bb)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(&quot;发布完成&quot;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用Java8的Lambda表达式发布\"><a href=\"#使用Java8的Lambda表达式发布\" class=\"headerlink\" title=\"使用Java8的Lambda表达式发布\"></a>使用Java8的Lambda表达式发布</h2><figure class=\"highlight diff\"><table><tr><td class=\"code\"><pre><span class=\"line\">RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.start();</span><br><span class=\"line\"><span class=\"deletion\">- LongEventProducerWithTranslator producer = new LongEventProducerWithTranslator(ringBuffer);</span></span><br><span class=\"line\">ByteBuffer bb = ByteBuffer.allocate(8);</span><br><span class=\"line\">for (long l = 0; true; l++)&#123;</span><br><span class=\"line\">    bb.putLong(0, l);</span><br><span class=\"line\"><span class=\"deletion\">-   producer.onData(bb);</span></span><br><span class=\"line\"><span class=\"addition\">+   ringBuffer.publishEvent((event, sequence, buffer) -&gt;event.set(buffer.getLong(0)),bb);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Disruptor-消费模式简介(单个实例)","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-03-01T02:01:00.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 并行模式\n\n并行模式下两个Handler同时执行，互不影响\n\n```java\ndisruptor.handleEventsWith(new A1Handler(),new B1Handler());\n```\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111164411.jpg)\n\n### 结果示例\n\n```shell\n++++++++++\n1605084168915+B1Handler:5\n1605084168915+A1Handler:1\n++++++++++\n1605084169915+B1Handler:6\n1605084169915+A1Handler:2\n```\n\n## 串行模式\n\n串行模式下，`Handler`执行必须是从前往后，按顺序执行。\n\n```java\ndisruptor.handleEventsWith(new A1Handler()).then(new B1Handler());\n// or\ndisruptor.handleEventsWith(new B1Handler()).then(new A1Handler());\n```\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111164910-20211008162404729.jpg)\n\n### 结果示例\n\n结果和`handler`放置的顺序有关，后面的handler要等前面的执行完才会执行\n\n```shell\n++++++++++\n1605084411462+A1Handler:1\n1605084411467+B1Handler:5\n++++++++++\n1605084412463+A1Handler:2\n1605084412463+B1Handler:6\n\n// or\n\n++++++++++\n1605084638285+B1Handler:5\n1605084638289+A1Handler:1\n++++++++++\n1605084639286+B1Handler:6\n1605084639286+A1Handler:2\n```\n\n\n\n## 菱形模式\n\n菱形模式其实就是并行和串行的结合体，先并行执行，再串行执行\n\n```java\ndisruptor.handleEventsWith(new A1Handler(), new A2Handler()).then(new B1Handler());\n```\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111165759.jpg)\n\n### 结果示例\n\n`B1Handler`要等`A1Handler`和`A2Handler`全部执行完，它才会执行。\n\n```shell\n++++++++++\n1605085280283+A1Handler:1\n1605085280283+A2Handler:3\n1605085280287+B1Handler:5\n++++++++++\n1605085281283+A1Handler:2\n1605085281283+A2Handler:4\n1605085281283+B1Handler:6\n```\n\n## 链式模式\n\n链式模式也是并行和串行的结合，并行模式执行串行模式\n\n```java\ndisruptor.handleEventsWith(new A1Handler()).then(new A2Handler());\ndisruptor.handleEventsWith(new B1Handler()).then(new B2Handler());\n```\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111171009-20211008162410892.jpg)\n\n### 结果示例\n\n```shell\n++++++++++\n1605085843558+B1Handler:5\n1605085843558+A1Handler:1\n1605085843563+A2Handler:3\n1605085843563+B2Handler:7\n++++++++++\n1605085844558+B1Handler:6\n1605085844558+A1Handler:2\n1605085844558+B2Handler:8\n1605085844559+A2Handler:4\n```\n\n## 总结\n\n所有的模式都可以根据**并行**和**串行**来衍生出各种模式，玩法多种多样。","source":"_posts/java/disruptor/9a1bdb74-8ed3-4905-88bc-7b3b4e0a4af2.md","raw":"---\ntitle: Disruptor-消费模式简介(单个实例)\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-03-01 10:01:00\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Disruptor\n- Java\ncategories:\n- Java\n---\n\n## 并行模式\n\n并行模式下两个Handler同时执行，互不影响\n\n```java\ndisruptor.handleEventsWith(new A1Handler(),new B1Handler());\n```\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111164411.jpg)\n\n### 结果示例\n\n```shell\n++++++++++\n1605084168915+B1Handler:5\n1605084168915+A1Handler:1\n++++++++++\n1605084169915+B1Handler:6\n1605084169915+A1Handler:2\n```\n\n## 串行模式\n\n串行模式下，`Handler`执行必须是从前往后，按顺序执行。\n\n```java\ndisruptor.handleEventsWith(new A1Handler()).then(new B1Handler());\n// or\ndisruptor.handleEventsWith(new B1Handler()).then(new A1Handler());\n```\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111164910-20211008162404729.jpg)\n\n### 结果示例\n\n结果和`handler`放置的顺序有关，后面的handler要等前面的执行完才会执行\n\n```shell\n++++++++++\n1605084411462+A1Handler:1\n1605084411467+B1Handler:5\n++++++++++\n1605084412463+A1Handler:2\n1605084412463+B1Handler:6\n\n// or\n\n++++++++++\n1605084638285+B1Handler:5\n1605084638289+A1Handler:1\n++++++++++\n1605084639286+B1Handler:6\n1605084639286+A1Handler:2\n```\n\n\n\n## 菱形模式\n\n菱形模式其实就是并行和串行的结合体，先并行执行，再串行执行\n\n```java\ndisruptor.handleEventsWith(new A1Handler(), new A2Handler()).then(new B1Handler());\n```\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111165759.jpg)\n\n### 结果示例\n\n`B1Handler`要等`A1Handler`和`A2Handler`全部执行完，它才会执行。\n\n```shell\n++++++++++\n1605085280283+A1Handler:1\n1605085280283+A2Handler:3\n1605085280287+B1Handler:5\n++++++++++\n1605085281283+A1Handler:2\n1605085281283+A2Handler:4\n1605085281283+B1Handler:6\n```\n\n## 链式模式\n\n链式模式也是并行和串行的结合，并行模式执行串行模式\n\n```java\ndisruptor.handleEventsWith(new A1Handler()).then(new A2Handler());\ndisruptor.handleEventsWith(new B1Handler()).then(new B2Handler());\n```\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111171009-20211008162410892.jpg)\n\n### 结果示例\n\n```shell\n++++++++++\n1605085843558+B1Handler:5\n1605085843558+A1Handler:1\n1605085843563+A2Handler:3\n1605085843563+B2Handler:7\n++++++++++\n1605085844558+B1Handler:6\n1605085844558+A1Handler:2\n1605085844558+B2Handler:8\n1605085844559+A2Handler:4\n```\n\n## 总结\n\n所有的模式都可以根据**并行**和**串行**来衍生出各种模式，玩法多种多样。","slug":"java/disruptor/9a1bdb74-8ed3-4905-88bc-7b3b4e0a4af2","published":1,"updated":"2021-10-08T08:24:25.344Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ei2006zvpucbtasa5bw","content":"<h2 id=\"并行模式\"><a href=\"#并行模式\" class=\"headerlink\" title=\"并行模式\"></a>并行模式</h2><p>并行模式下两个Handler同时执行，互不影响</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">B1Handler</span>());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111164411.jpg\" alt=\"图片\"></p>\n<h3 id=\"结果示例\"><a href=\"#结果示例\" class=\"headerlink\" title=\"结果示例\"></a>结果示例</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">++++++++++</span><br><span class=\"line\">1605084168915+B1Handler:5</span><br><span class=\"line\">1605084168915+A1Handler:1</span><br><span class=\"line\">++++++++++</span><br><span class=\"line\">1605084169915+B1Handler:6</span><br><span class=\"line\">1605084169915+A1Handler:2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"串行模式\"><a href=\"#串行模式\" class=\"headerlink\" title=\"串行模式\"></a>串行模式</h2><p>串行模式下，<code>Handler</code>执行必须是从前往后，按顺序执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>()).then(<span class=\"keyword\">new</span> <span class=\"title class_\">B1Handler</span>());</span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\">disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">B1Handler</span>()).then(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111164910-20211008162404729.jpg\" alt=\"图片\"></p>\n<h3 id=\"结果示例-1\"><a href=\"#结果示例-1\" class=\"headerlink\" title=\"结果示例\"></a>结果示例</h3><p>结果和<code>handler</code>放置的顺序有关，后面的handler要等前面的执行完才会执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">++++++++++</span><br><span class=\"line\">1605084411462+A1Handler:1</span><br><span class=\"line\">1605084411467+B1Handler:5</span><br><span class=\"line\">++++++++++</span><br><span class=\"line\">1605084412463+A1Handler:2</span><br><span class=\"line\">1605084412463+B1Handler:6</span><br><span class=\"line\"></span><br><span class=\"line\">// or</span><br><span class=\"line\"></span><br><span class=\"line\">++++++++++</span><br><span class=\"line\">1605084638285+B1Handler:5</span><br><span class=\"line\">1605084638289+A1Handler:1</span><br><span class=\"line\">++++++++++</span><br><span class=\"line\">1605084639286+B1Handler:6</span><br><span class=\"line\">1605084639286+A1Handler:2</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"菱形模式\"><a href=\"#菱形模式\" class=\"headerlink\" title=\"菱形模式\"></a>菱形模式</h2><p>菱形模式其实就是并行和串行的结合体，先并行执行，再串行执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(), <span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>()).then(<span class=\"keyword\">new</span> <span class=\"title class_\">B1Handler</span>());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111165759.jpg\" alt=\"图片\"></p>\n<h3 id=\"结果示例-2\"><a href=\"#结果示例-2\" class=\"headerlink\" title=\"结果示例\"></a>结果示例</h3><p><code>B1Handler</code>要等<code>A1Handler</code>和<code>A2Handler</code>全部执行完，它才会执行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">++++++++++</span><br><span class=\"line\">1605085280283+A1Handler:1</span><br><span class=\"line\">1605085280283+A2Handler:3</span><br><span class=\"line\">1605085280287+B1Handler:5</span><br><span class=\"line\">++++++++++</span><br><span class=\"line\">1605085281283+A1Handler:2</span><br><span class=\"line\">1605085281283+A2Handler:4</span><br><span class=\"line\">1605085281283+B1Handler:6</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链式模式\"><a href=\"#链式模式\" class=\"headerlink\" title=\"链式模式\"></a>链式模式</h2><p>链式模式也是并行和串行的结合，并行模式执行串行模式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>()).then(<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>());</span><br><span class=\"line\">disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">B1Handler</span>()).then(<span class=\"keyword\">new</span> <span class=\"title class_\">B2Handler</span>());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111171009-20211008162410892.jpg\" alt=\"图片\"></p>\n<h3 id=\"结果示例-3\"><a href=\"#结果示例-3\" class=\"headerlink\" title=\"结果示例\"></a>结果示例</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">++++++++++</span><br><span class=\"line\">1605085843558+B1Handler:5</span><br><span class=\"line\">1605085843558+A1Handler:1</span><br><span class=\"line\">1605085843563+A2Handler:3</span><br><span class=\"line\">1605085843563+B2Handler:7</span><br><span class=\"line\">++++++++++</span><br><span class=\"line\">1605085844558+B1Handler:6</span><br><span class=\"line\">1605085844558+A1Handler:2</span><br><span class=\"line\">1605085844558+B2Handler:8</span><br><span class=\"line\">1605085844559+A2Handler:4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>所有的模式都可以根据<strong>并行</strong>和<strong>串行</strong>来衍生出各种模式，玩法多种多样。</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"并行模式\"><a href=\"#并行模式\" class=\"headerlink\" title=\"并行模式\"></a>并行模式</h2><p>并行模式下两个Handler同时执行，互不影响</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">B1Handler</span>());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111164411.jpg\" alt=\"图片\"></p>\n<h3 id=\"结果示例\"><a href=\"#结果示例\" class=\"headerlink\" title=\"结果示例\"></a>结果示例</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">++++++++++</span><br><span class=\"line\">1605084168915+B1Handler:5</span><br><span class=\"line\">1605084168915+A1Handler:1</span><br><span class=\"line\">++++++++++</span><br><span class=\"line\">1605084169915+B1Handler:6</span><br><span class=\"line\">1605084169915+A1Handler:2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"串行模式\"><a href=\"#串行模式\" class=\"headerlink\" title=\"串行模式\"></a>串行模式</h2><p>串行模式下，<code>Handler</code>执行必须是从前往后，按顺序执行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>()).then(<span class=\"keyword\">new</span> <span class=\"title class_\">B1Handler</span>());</span><br><span class=\"line\"><span class=\"comment\">// or</span></span><br><span class=\"line\">disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">B1Handler</span>()).then(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111164910-20211008162404729.jpg\" alt=\"图片\"></p>\n<h3 id=\"结果示例-1\"><a href=\"#结果示例-1\" class=\"headerlink\" title=\"结果示例\"></a>结果示例</h3><p>结果和<code>handler</code>放置的顺序有关，后面的handler要等前面的执行完才会执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">++++++++++</span><br><span class=\"line\">1605084411462+A1Handler:1</span><br><span class=\"line\">1605084411467+B1Handler:5</span><br><span class=\"line\">++++++++++</span><br><span class=\"line\">1605084412463+A1Handler:2</span><br><span class=\"line\">1605084412463+B1Handler:6</span><br><span class=\"line\"></span><br><span class=\"line\">// or</span><br><span class=\"line\"></span><br><span class=\"line\">++++++++++</span><br><span class=\"line\">1605084638285+B1Handler:5</span><br><span class=\"line\">1605084638289+A1Handler:1</span><br><span class=\"line\">++++++++++</span><br><span class=\"line\">1605084639286+B1Handler:6</span><br><span class=\"line\">1605084639286+A1Handler:2</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"菱形模式\"><a href=\"#菱形模式\" class=\"headerlink\" title=\"菱形模式\"></a>菱形模式</h2><p>菱形模式其实就是并行和串行的结合体，先并行执行，再串行执行</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(), <span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>()).then(<span class=\"keyword\">new</span> <span class=\"title class_\">B1Handler</span>());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111165759.jpg\" alt=\"图片\"></p>\n<h3 id=\"结果示例-2\"><a href=\"#结果示例-2\" class=\"headerlink\" title=\"结果示例\"></a>结果示例</h3><p><code>B1Handler</code>要等<code>A1Handler</code>和<code>A2Handler</code>全部执行完，它才会执行。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">++++++++++</span><br><span class=\"line\">1605085280283+A1Handler:1</span><br><span class=\"line\">1605085280283+A2Handler:3</span><br><span class=\"line\">1605085280287+B1Handler:5</span><br><span class=\"line\">++++++++++</span><br><span class=\"line\">1605085281283+A1Handler:2</span><br><span class=\"line\">1605085281283+A2Handler:4</span><br><span class=\"line\">1605085281283+B1Handler:6</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"链式模式\"><a href=\"#链式模式\" class=\"headerlink\" title=\"链式模式\"></a>链式模式</h2><p>链式模式也是并行和串行的结合，并行模式执行串行模式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>()).then(<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>());</span><br><span class=\"line\">disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">B1Handler</span>()).then(<span class=\"keyword\">new</span> <span class=\"title class_\">B2Handler</span>());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111171009-20211008162410892.jpg\" alt=\"图片\"></p>\n<h3 id=\"结果示例-3\"><a href=\"#结果示例-3\" class=\"headerlink\" title=\"结果示例\"></a>结果示例</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">++++++++++</span><br><span class=\"line\">1605085843558+B1Handler:5</span><br><span class=\"line\">1605085843558+A1Handler:1</span><br><span class=\"line\">1605085843563+A2Handler:3</span><br><span class=\"line\">1605085843563+B2Handler:7</span><br><span class=\"line\">++++++++++</span><br><span class=\"line\">1605085844558+B1Handler:6</span><br><span class=\"line\">1605085844558+A1Handler:2</span><br><span class=\"line\">1605085844558+B2Handler:8</span><br><span class=\"line\">1605085844559+A2Handler:4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>所有的模式都可以根据<strong>并行</strong>和<strong>串行</strong>来衍生出各种模式，玩法多种多样。</p>\n"},{"title":"Disruptor-快速开始","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-03-01T01:58:03.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 创建一个事件实体\n\n```java\npublic class LongEvent{\n    private Long id;\n    \n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n}\n```\n\n\n\n## 创建一个事件实体工厂\n\n```java\npublic class LongEventFactory implements EventFactory<LongEvent> {\n\n    public LongEvent newInstance() {\n        return new LongEvent();\n    }\n}\n```\n\n\n\n## 创建两个事件处理类\n\n```java\n\n/**\n* EventHandler<LongEvent> 是没有池化的实现方式,每个消费者中只有一个示例\n* WorkHandler<LongEvent> 是池化的实现方式，每个消费者中可以以类似线程池的方式去执行这个事件\n* 实际根据业务场景 实现其中一个接口就可以\n*/\npublic class A1Handler implements EventHandler<LongEvent> , WorkHandler<LongEvent> {\n\n    public void onEvent(LongEvent longEvent, long l, boolean b) throws Exception {\n        long id = longEvent.getId();\n        id+=1;\n        System.out.println(\"**************************\");\n        System.out.println(Thread.currentThread().getName());\n        System.out.println(System.currentTimeMillis()+\"+A1Handler:\"+id);\n        System.out.println(\"**************************\");\n    }\n\n    /**\n     * 池化执行\n     * */\n    @Override\n    public void onEvent(LongEvent longEvent) throws Exception {\n        long id = longEvent.getId();\n        id+=10;\n        System.out.println(\"**************************\");\n        System.out.println(Thread.currentThread().getName());\n        System.out.println(System.currentTimeMillis()+\"+A1Handler:\"+id);\n        System.out.println(\"**************************\");\n    }\n}\n```\n\n```java\npublic class A2Handler implements EventHandler<LongEvent> , WorkHandler<LongEvent> {\n    public void onEvent(LongEvent longEvent, long l, boolean b) throws Exception {\n        long id = longEvent.getId();\n        id+=3;\n        System.out.println(\"**************************\");\n        System.out.println(Thread.currentThread().getName());\n        System.out.println(System.currentTimeMillis()+\"+A2Handler:\"+id);\n        System.out.println(\"**************************\");\n    }\n\n    /**\n     * 池化执行\n     * */\n    @Override\n    public void onEvent(LongEvent longEvent) throws Exception {\n        long id = longEvent.getId();\n        id+=30;\n        System.out.println(\"**************************\");\n        System.out.println(Thread.currentThread().getName());\n        System.out.println(System.currentTimeMillis()+\"+A2Handler:\"+id);\n        System.out.println(\"**************************\");\n    }\n}\n```\n\n\n\n\n\n## 实例化Disruptor\n\n```java\n// 事件工厂\nLongEventFactory factory = new LongEventFactory();\n\n// 定义RingBuff大小  注意：数值一定是2的幂次方\nint bufferSize = 1024;\n\n// 创建ThreadFactory\nThreadFactory threadFactory = new ThreadFactory() {\n    private int counter = 0;\n    private String prefix = \"DisruptorWorker\";\n    @Override\n    public Thread newThread(Runnable r) {\n        return new Thread(r, prefix + \"-\" + counter++);\n    }\n};\n\n/* 实例化Disruptor （官方有4个实例化方法）\n * factory 是事件工厂\n * bufferSize 是上面定义的RingBuffer的大小\n * ProducerType.MULTI 是生产者模式 有SINGL和MULTI两种\n * new BlockingWaitStrategy() 是等待阻塞策略\n */\nDisruptor<LongEvent> disruptor = new Disruptor<LongEvent>(\n    factory, \n    bufferSize, \n    threadFactory,\n    ProducerType.MULTI,\n    new BlockingWaitStrategy());\n```\n\n\n\n## 创建消费者\n\n### 单个模式\n\ndisruptor会创建2和线程，一个线程用来执行`A1Handler`，一个线程用来执行`A2Handler`.每个线程互不影响。\n\n```java\ndisruptor.handleEventsWith(new A1Handler(),new A2Handler());\n```\n\n### 池化模式\n\ndisruptor会创建4个线程，其中两个线程组成**线程池**来执行`A1Handler`，另外两个线程也组成**线程池**用来执行`A2Handler`\n\n```java\ndisruptor.handleEventsWithWorkerPool(new A1Handler(),new A1Handler())\ndisruptor.handleEventsWithWorkerPool(new A2Handler(),new A2Handler())\n```\n\n## 获取RingBuffer\n\n```java\nRingBuffer<LongEvent> ringBuffer = disruptor.start();\n```\n\n## 生产者发布消息\n\n这边直接使用Java8的发布方式来发布消息\n\n```java\n// 创建ByteBuffer缓冲区 \nByteBuffer bb = ByteBuffer.allocate(8);\n// 生产者发布5条消息\nfor (long l = 0; l<5; l++) {\n    // 写入消息到Bufer缓冲区\n    bb.putLong(0, l);\n    // Java8 lambda发布方式\n    ringBuffer.publishEvent((event,sequece,buffer) -> event.setId(buffer.getLong(0)),bb);\n}\nSystem.out.println(\"发布完成\");\n```\n\n\n\n## 完整的Main方法\n\n```java\npublic class DisruptorMain {\n    public static void main(String[] args) {\n        // 实例化事件工厂\n        LongEventFactory factory = new LongEventFactory();\n        // 定义RingBuffer大小\n        int bufferSize = 1024;\n        // 创建线程工厂\n        ThreadFactory threadFactory = new ThreadFactory() {\n            private int counter = 0;\n            private String prefix = \"DisruptorWorker\";\n            @Override\n            public Thread newThread(Runnable r) {\n                return new Thread(r, prefix + \"-\" + counter++);\n            }\n        };\n        // 实例化Disruptor\n        Disruptor<LongEvent> disruptor = new Disruptor<LongEvent>(\n                factory,\n                bufferSize,\n                threadFactory,\n                ProducerType.MULTI,\n                new BlockingWaitStrategy());\n\n        // 并行模式 两个Handler互不影响\n        disruptor.handleEventsWith(new A1Handler(),new A2Handler());\n\n        // 并行 每个消费端有两个线程实例 (池化模式)\n//        disruptor.handleEventsWithWorkerPool(new A1Handler(),new A1Handler());\n//        disruptor.handleEventsWithWorkerPool(new A2Handler(),new A2Handler());\n\n        // 获取RingBuffer\n        RingBuffer<LongEvent> ringBuffer = disruptor.start();\n        \n        // 创建ByteBuffer缓冲区\n        ByteBuffer bb = ByteBuffer.allocate(8);\n        for (long l = 0; l<5; l++) {\n            // 写入数据到缓冲区\n            bb.putLong(0, l);\n            // Java8的发布方式\n            ringBuffer.publishEvent((event,sequece,buffer) -> event.setId(buffer.getLong(0)),bb);\n        }\n        System.out.println(\"发布完成\");\n    }\n}\n\n```","source":"_posts/java/disruptor/a552f7f0-4cbe-4628-8fcf-02f8b8730b56.md","raw":"---\ntitle: Disruptor-快速开始\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-03-01 09:58:03\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Disruptor\n- Java\ncategories:\n- Java\n---\n\n## 创建一个事件实体\n\n```java\npublic class LongEvent{\n    private Long id;\n    \n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n}\n```\n\n\n\n## 创建一个事件实体工厂\n\n```java\npublic class LongEventFactory implements EventFactory<LongEvent> {\n\n    public LongEvent newInstance() {\n        return new LongEvent();\n    }\n}\n```\n\n\n\n## 创建两个事件处理类\n\n```java\n\n/**\n* EventHandler<LongEvent> 是没有池化的实现方式,每个消费者中只有一个示例\n* WorkHandler<LongEvent> 是池化的实现方式，每个消费者中可以以类似线程池的方式去执行这个事件\n* 实际根据业务场景 实现其中一个接口就可以\n*/\npublic class A1Handler implements EventHandler<LongEvent> , WorkHandler<LongEvent> {\n\n    public void onEvent(LongEvent longEvent, long l, boolean b) throws Exception {\n        long id = longEvent.getId();\n        id+=1;\n        System.out.println(\"**************************\");\n        System.out.println(Thread.currentThread().getName());\n        System.out.println(System.currentTimeMillis()+\"+A1Handler:\"+id);\n        System.out.println(\"**************************\");\n    }\n\n    /**\n     * 池化执行\n     * */\n    @Override\n    public void onEvent(LongEvent longEvent) throws Exception {\n        long id = longEvent.getId();\n        id+=10;\n        System.out.println(\"**************************\");\n        System.out.println(Thread.currentThread().getName());\n        System.out.println(System.currentTimeMillis()+\"+A1Handler:\"+id);\n        System.out.println(\"**************************\");\n    }\n}\n```\n\n```java\npublic class A2Handler implements EventHandler<LongEvent> , WorkHandler<LongEvent> {\n    public void onEvent(LongEvent longEvent, long l, boolean b) throws Exception {\n        long id = longEvent.getId();\n        id+=3;\n        System.out.println(\"**************************\");\n        System.out.println(Thread.currentThread().getName());\n        System.out.println(System.currentTimeMillis()+\"+A2Handler:\"+id);\n        System.out.println(\"**************************\");\n    }\n\n    /**\n     * 池化执行\n     * */\n    @Override\n    public void onEvent(LongEvent longEvent) throws Exception {\n        long id = longEvent.getId();\n        id+=30;\n        System.out.println(\"**************************\");\n        System.out.println(Thread.currentThread().getName());\n        System.out.println(System.currentTimeMillis()+\"+A2Handler:\"+id);\n        System.out.println(\"**************************\");\n    }\n}\n```\n\n\n\n\n\n## 实例化Disruptor\n\n```java\n// 事件工厂\nLongEventFactory factory = new LongEventFactory();\n\n// 定义RingBuff大小  注意：数值一定是2的幂次方\nint bufferSize = 1024;\n\n// 创建ThreadFactory\nThreadFactory threadFactory = new ThreadFactory() {\n    private int counter = 0;\n    private String prefix = \"DisruptorWorker\";\n    @Override\n    public Thread newThread(Runnable r) {\n        return new Thread(r, prefix + \"-\" + counter++);\n    }\n};\n\n/* 实例化Disruptor （官方有4个实例化方法）\n * factory 是事件工厂\n * bufferSize 是上面定义的RingBuffer的大小\n * ProducerType.MULTI 是生产者模式 有SINGL和MULTI两种\n * new BlockingWaitStrategy() 是等待阻塞策略\n */\nDisruptor<LongEvent> disruptor = new Disruptor<LongEvent>(\n    factory, \n    bufferSize, \n    threadFactory,\n    ProducerType.MULTI,\n    new BlockingWaitStrategy());\n```\n\n\n\n## 创建消费者\n\n### 单个模式\n\ndisruptor会创建2和线程，一个线程用来执行`A1Handler`，一个线程用来执行`A2Handler`.每个线程互不影响。\n\n```java\ndisruptor.handleEventsWith(new A1Handler(),new A2Handler());\n```\n\n### 池化模式\n\ndisruptor会创建4个线程，其中两个线程组成**线程池**来执行`A1Handler`，另外两个线程也组成**线程池**用来执行`A2Handler`\n\n```java\ndisruptor.handleEventsWithWorkerPool(new A1Handler(),new A1Handler())\ndisruptor.handleEventsWithWorkerPool(new A2Handler(),new A2Handler())\n```\n\n## 获取RingBuffer\n\n```java\nRingBuffer<LongEvent> ringBuffer = disruptor.start();\n```\n\n## 生产者发布消息\n\n这边直接使用Java8的发布方式来发布消息\n\n```java\n// 创建ByteBuffer缓冲区 \nByteBuffer bb = ByteBuffer.allocate(8);\n// 生产者发布5条消息\nfor (long l = 0; l<5; l++) {\n    // 写入消息到Bufer缓冲区\n    bb.putLong(0, l);\n    // Java8 lambda发布方式\n    ringBuffer.publishEvent((event,sequece,buffer) -> event.setId(buffer.getLong(0)),bb);\n}\nSystem.out.println(\"发布完成\");\n```\n\n\n\n## 完整的Main方法\n\n```java\npublic class DisruptorMain {\n    public static void main(String[] args) {\n        // 实例化事件工厂\n        LongEventFactory factory = new LongEventFactory();\n        // 定义RingBuffer大小\n        int bufferSize = 1024;\n        // 创建线程工厂\n        ThreadFactory threadFactory = new ThreadFactory() {\n            private int counter = 0;\n            private String prefix = \"DisruptorWorker\";\n            @Override\n            public Thread newThread(Runnable r) {\n                return new Thread(r, prefix + \"-\" + counter++);\n            }\n        };\n        // 实例化Disruptor\n        Disruptor<LongEvent> disruptor = new Disruptor<LongEvent>(\n                factory,\n                bufferSize,\n                threadFactory,\n                ProducerType.MULTI,\n                new BlockingWaitStrategy());\n\n        // 并行模式 两个Handler互不影响\n        disruptor.handleEventsWith(new A1Handler(),new A2Handler());\n\n        // 并行 每个消费端有两个线程实例 (池化模式)\n//        disruptor.handleEventsWithWorkerPool(new A1Handler(),new A1Handler());\n//        disruptor.handleEventsWithWorkerPool(new A2Handler(),new A2Handler());\n\n        // 获取RingBuffer\n        RingBuffer<LongEvent> ringBuffer = disruptor.start();\n        \n        // 创建ByteBuffer缓冲区\n        ByteBuffer bb = ByteBuffer.allocate(8);\n        for (long l = 0; l<5; l++) {\n            // 写入数据到缓冲区\n            bb.putLong(0, l);\n            // Java8的发布方式\n            ringBuffer.publishEvent((event,sequece,buffer) -> event.setId(buffer.getLong(0)),bb);\n        }\n        System.out.println(\"发布完成\");\n    }\n}\n\n```","slug":"java/disruptor/a552f7f0-4cbe-4628-8fcf-02f8b8730b56","published":1,"updated":"2021-10-08T07:57:24.166Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ei30072vpuc2fuaf8l0","content":"<h2 id=\"创建一个事件实体\"><a href=\"#创建一个事件实体\" class=\"headerlink\" title=\"创建一个事件实体\"></a>创建一个事件实体</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongEvent</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Long <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建一个事件实体工厂\"><a href=\"#创建一个事件实体工厂\" class=\"headerlink\" title=\"创建一个事件实体工厂\"></a>创建一个事件实体工厂</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongEventFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EventFactory</span>&lt;LongEvent&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LongEvent <span class=\"title function_\">newInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEvent</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建两个事件处理类\"><a href=\"#创建两个事件处理类\" class=\"headerlink\" title=\"创建两个事件处理类\"></a>创建两个事件处理类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* EventHandler&lt;LongEvent&gt; 是没有池化的实现方式,每个消费者中只有一个示例</span></span><br><span class=\"line\"><span class=\"comment\">* WorkHandler&lt;LongEvent&gt; 是池化的实现方式，每个消费者中可以以类似线程池的方式去执行这个事件</span></span><br><span class=\"line\"><span class=\"comment\">* 实际根据业务场景 实现其中一个接口就可以</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A1Handler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EventHandler</span>&lt;LongEvent&gt; , WorkHandler&lt;LongEvent&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent longEvent, <span class=\"type\">long</span> l, <span class=\"type\">boolean</span> b)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> longEvent.getId();</span><br><span class=\"line\">        id+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis()+<span class=\"string\">&quot;+A1Handler:&quot;</span>+id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 池化执行</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent longEvent)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> longEvent.getId();</span><br><span class=\"line\">        id+=<span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis()+<span class=\"string\">&quot;+A1Handler:&quot;</span>+id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A2Handler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EventHandler</span>&lt;LongEvent&gt; , WorkHandler&lt;LongEvent&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent longEvent, <span class=\"type\">long</span> l, <span class=\"type\">boolean</span> b)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> longEvent.getId();</span><br><span class=\"line\">        id+=<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis()+<span class=\"string\">&quot;+A2Handler:&quot;</span>+id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 池化执行</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent longEvent)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> longEvent.getId();</span><br><span class=\"line\">        id+=<span class=\"number\">30</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis()+<span class=\"string\">&quot;+A2Handler:&quot;</span>+id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"实例化Disruptor\"><a href=\"#实例化Disruptor\" class=\"headerlink\" title=\"实例化Disruptor\"></a>实例化Disruptor</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 事件工厂</span></span><br><span class=\"line\"><span class=\"type\">LongEventFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEventFactory</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义RingBuff大小  注意：数值一定是2的幂次方</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">bufferSize</span> <span class=\"operator\">=</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建ThreadFactory</span></span><br><span class=\"line\"><span class=\"type\">ThreadFactory</span> <span class=\"variable\">threadFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadFactory</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">prefix</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;DisruptorWorker&quot;</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Thread <span class=\"title function_\">newThread</span><span class=\"params\">(Runnable r)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(r, prefix + <span class=\"string\">&quot;-&quot;</span> + counter++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 实例化Disruptor （官方有4个实例化方法）</span></span><br><span class=\"line\"><span class=\"comment\"> * factory 是事件工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * bufferSize 是上面定义的RingBuffer的大小</span></span><br><span class=\"line\"><span class=\"comment\"> * ProducerType.MULTI 是生产者模式 有SINGL和MULTI两种</span></span><br><span class=\"line\"><span class=\"comment\"> * new BlockingWaitStrategy() 是等待阻塞策略</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Disruptor&lt;LongEvent&gt; disruptor = <span class=\"keyword\">new</span> <span class=\"title class_\">Disruptor</span>&lt;LongEvent&gt;(</span><br><span class=\"line\">    factory, </span><br><span class=\"line\">    bufferSize, </span><br><span class=\"line\">    threadFactory,</span><br><span class=\"line\">    ProducerType.MULTI,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">BlockingWaitStrategy</span>());</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建消费者\"><a href=\"#创建消费者\" class=\"headerlink\" title=\"创建消费者\"></a>创建消费者</h2><h3 id=\"单个模式\"><a href=\"#单个模式\" class=\"headerlink\" title=\"单个模式\"></a>单个模式</h3><p>disruptor会创建2和线程，一个线程用来执行<code>A1Handler</code>，一个线程用来执行<code>A2Handler</code>.每个线程互不影响。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"池化模式\"><a href=\"#池化模式\" class=\"headerlink\" title=\"池化模式\"></a>池化模式</h3><p>disruptor会创建4个线程，其中两个线程组成<strong>线程池</strong>来执行<code>A1Handler</code>，另外两个线程也组成<strong>线程池</strong>用来执行<code>A2Handler</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWithWorkerPool(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>())</span><br><span class=\"line\">disruptor.handleEventsWithWorkerPool(<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取RingBuffer\"><a href=\"#获取RingBuffer\" class=\"headerlink\" title=\"获取RingBuffer\"></a>获取RingBuffer</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.start();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生产者发布消息\"><a href=\"#生产者发布消息\" class=\"headerlink\" title=\"生产者发布消息\"></a>生产者发布消息</h2><p>这边直接使用Java8的发布方式来发布消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建ByteBuffer缓冲区 </span></span><br><span class=\"line\"><span class=\"type\">ByteBuffer</span> <span class=\"variable\">bb</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"comment\">// 生产者发布5条消息</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">long</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; l&lt;<span class=\"number\">5</span>; l++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 写入消息到Bufer缓冲区</span></span><br><span class=\"line\">    bb.putLong(<span class=\"number\">0</span>, l);</span><br><span class=\"line\">    <span class=\"comment\">// Java8 lambda发布方式</span></span><br><span class=\"line\">    ringBuffer.publishEvent((event,sequece,buffer) -&gt; event.setId(buffer.getLong(<span class=\"number\">0</span>)),bb);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;发布完成&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"完整的Main方法\"><a href=\"#完整的Main方法\" class=\"headerlink\" title=\"完整的Main方法\"></a>完整的Main方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DisruptorMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 实例化事件工厂</span></span><br><span class=\"line\">        <span class=\"type\">LongEventFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEventFactory</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 定义RingBuffer大小</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">bufferSize</span> <span class=\"operator\">=</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 创建线程工厂</span></span><br><span class=\"line\">        <span class=\"type\">ThreadFactory</span> <span class=\"variable\">threadFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadFactory</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">prefix</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;DisruptorWorker&quot;</span>;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Thread <span class=\"title function_\">newThread</span><span class=\"params\">(Runnable r)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(r, prefix + <span class=\"string\">&quot;-&quot;</span> + counter++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 实例化Disruptor</span></span><br><span class=\"line\">        Disruptor&lt;LongEvent&gt; disruptor = <span class=\"keyword\">new</span> <span class=\"title class_\">Disruptor</span>&lt;LongEvent&gt;(</span><br><span class=\"line\">                factory,</span><br><span class=\"line\">                bufferSize,</span><br><span class=\"line\">                threadFactory,</span><br><span class=\"line\">                ProducerType.MULTI,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">BlockingWaitStrategy</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 并行模式 两个Handler互不影响</span></span><br><span class=\"line\">        disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 并行 每个消费端有两个线程实例 (池化模式)</span></span><br><span class=\"line\"><span class=\"comment\">//        disruptor.handleEventsWithWorkerPool(new A1Handler(),new A1Handler());</span></span><br><span class=\"line\"><span class=\"comment\">//        disruptor.handleEventsWithWorkerPool(new A2Handler(),new A2Handler());</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取RingBuffer</span></span><br><span class=\"line\">        RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.start();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 创建ByteBuffer缓冲区</span></span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">bb</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">8</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">long</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; l&lt;<span class=\"number\">5</span>; l++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 写入数据到缓冲区</span></span><br><span class=\"line\">            bb.putLong(<span class=\"number\">0</span>, l);</span><br><span class=\"line\">            <span class=\"comment\">// Java8的发布方式</span></span><br><span class=\"line\">            ringBuffer.publishEvent((event,sequece,buffer) -&gt; event.setId(buffer.getLong(<span class=\"number\">0</span>)),bb);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发布完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"创建一个事件实体\"><a href=\"#创建一个事件实体\" class=\"headerlink\" title=\"创建一个事件实体\"></a>创建一个事件实体</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongEvent</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Long <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建一个事件实体工厂\"><a href=\"#创建一个事件实体工厂\" class=\"headerlink\" title=\"创建一个事件实体工厂\"></a>创建一个事件实体工厂</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongEventFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EventFactory</span>&lt;LongEvent&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LongEvent <span class=\"title function_\">newInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEvent</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建两个事件处理类\"><a href=\"#创建两个事件处理类\" class=\"headerlink\" title=\"创建两个事件处理类\"></a>创建两个事件处理类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* EventHandler&lt;LongEvent&gt; 是没有池化的实现方式,每个消费者中只有一个示例</span></span><br><span class=\"line\"><span class=\"comment\">* WorkHandler&lt;LongEvent&gt; 是池化的实现方式，每个消费者中可以以类似线程池的方式去执行这个事件</span></span><br><span class=\"line\"><span class=\"comment\">* 实际根据业务场景 实现其中一个接口就可以</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A1Handler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EventHandler</span>&lt;LongEvent&gt; , WorkHandler&lt;LongEvent&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent longEvent, <span class=\"type\">long</span> l, <span class=\"type\">boolean</span> b)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> longEvent.getId();</span><br><span class=\"line\">        id+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis()+<span class=\"string\">&quot;+A1Handler:&quot;</span>+id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 池化执行</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent longEvent)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> longEvent.getId();</span><br><span class=\"line\">        id+=<span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis()+<span class=\"string\">&quot;+A1Handler:&quot;</span>+id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A2Handler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EventHandler</span>&lt;LongEvent&gt; , WorkHandler&lt;LongEvent&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent longEvent, <span class=\"type\">long</span> l, <span class=\"type\">boolean</span> b)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> longEvent.getId();</span><br><span class=\"line\">        id+=<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis()+<span class=\"string\">&quot;+A2Handler:&quot;</span>+id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 池化执行</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent longEvent)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> longEvent.getId();</span><br><span class=\"line\">        id+=<span class=\"number\">30</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis()+<span class=\"string\">&quot;+A2Handler:&quot;</span>+id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"实例化Disruptor\"><a href=\"#实例化Disruptor\" class=\"headerlink\" title=\"实例化Disruptor\"></a>实例化Disruptor</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 事件工厂</span></span><br><span class=\"line\"><span class=\"type\">LongEventFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEventFactory</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义RingBuff大小  注意：数值一定是2的幂次方</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">bufferSize</span> <span class=\"operator\">=</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建ThreadFactory</span></span><br><span class=\"line\"><span class=\"type\">ThreadFactory</span> <span class=\"variable\">threadFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadFactory</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">prefix</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;DisruptorWorker&quot;</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Thread <span class=\"title function_\">newThread</span><span class=\"params\">(Runnable r)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(r, prefix + <span class=\"string\">&quot;-&quot;</span> + counter++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 实例化Disruptor （官方有4个实例化方法）</span></span><br><span class=\"line\"><span class=\"comment\"> * factory 是事件工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * bufferSize 是上面定义的RingBuffer的大小</span></span><br><span class=\"line\"><span class=\"comment\"> * ProducerType.MULTI 是生产者模式 有SINGL和MULTI两种</span></span><br><span class=\"line\"><span class=\"comment\"> * new BlockingWaitStrategy() 是等待阻塞策略</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Disruptor&lt;LongEvent&gt; disruptor = <span class=\"keyword\">new</span> <span class=\"title class_\">Disruptor</span>&lt;LongEvent&gt;(</span><br><span class=\"line\">    factory, </span><br><span class=\"line\">    bufferSize, </span><br><span class=\"line\">    threadFactory,</span><br><span class=\"line\">    ProducerType.MULTI,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">BlockingWaitStrategy</span>());</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建消费者\"><a href=\"#创建消费者\" class=\"headerlink\" title=\"创建消费者\"></a>创建消费者</h2><h3 id=\"单个模式\"><a href=\"#单个模式\" class=\"headerlink\" title=\"单个模式\"></a>单个模式</h3><p>disruptor会创建2和线程，一个线程用来执行<code>A1Handler</code>，一个线程用来执行<code>A2Handler</code>.每个线程互不影响。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"池化模式\"><a href=\"#池化模式\" class=\"headerlink\" title=\"池化模式\"></a>池化模式</h3><p>disruptor会创建4个线程，其中两个线程组成<strong>线程池</strong>来执行<code>A1Handler</code>，另外两个线程也组成<strong>线程池</strong>用来执行<code>A2Handler</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWithWorkerPool(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>())</span><br><span class=\"line\">disruptor.handleEventsWithWorkerPool(<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取RingBuffer\"><a href=\"#获取RingBuffer\" class=\"headerlink\" title=\"获取RingBuffer\"></a>获取RingBuffer</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.start();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生产者发布消息\"><a href=\"#生产者发布消息\" class=\"headerlink\" title=\"生产者发布消息\"></a>生产者发布消息</h2><p>这边直接使用Java8的发布方式来发布消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建ByteBuffer缓冲区 </span></span><br><span class=\"line\"><span class=\"type\">ByteBuffer</span> <span class=\"variable\">bb</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"comment\">// 生产者发布5条消息</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">long</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; l&lt;<span class=\"number\">5</span>; l++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 写入消息到Bufer缓冲区</span></span><br><span class=\"line\">    bb.putLong(<span class=\"number\">0</span>, l);</span><br><span class=\"line\">    <span class=\"comment\">// Java8 lambda发布方式</span></span><br><span class=\"line\">    ringBuffer.publishEvent((event,sequece,buffer) -&gt; event.setId(buffer.getLong(<span class=\"number\">0</span>)),bb);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;发布完成&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"完整的Main方法\"><a href=\"#完整的Main方法\" class=\"headerlink\" title=\"完整的Main方法\"></a>完整的Main方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DisruptorMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 实例化事件工厂</span></span><br><span class=\"line\">        <span class=\"type\">LongEventFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEventFactory</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 定义RingBuffer大小</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">bufferSize</span> <span class=\"operator\">=</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 创建线程工厂</span></span><br><span class=\"line\">        <span class=\"type\">ThreadFactory</span> <span class=\"variable\">threadFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadFactory</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">prefix</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;DisruptorWorker&quot;</span>;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Thread <span class=\"title function_\">newThread</span><span class=\"params\">(Runnable r)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(r, prefix + <span class=\"string\">&quot;-&quot;</span> + counter++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 实例化Disruptor</span></span><br><span class=\"line\">        Disruptor&lt;LongEvent&gt; disruptor = <span class=\"keyword\">new</span> <span class=\"title class_\">Disruptor</span>&lt;LongEvent&gt;(</span><br><span class=\"line\">                factory,</span><br><span class=\"line\">                bufferSize,</span><br><span class=\"line\">                threadFactory,</span><br><span class=\"line\">                ProducerType.MULTI,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">BlockingWaitStrategy</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 并行模式 两个Handler互不影响</span></span><br><span class=\"line\">        disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 并行 每个消费端有两个线程实例 (池化模式)</span></span><br><span class=\"line\"><span class=\"comment\">//        disruptor.handleEventsWithWorkerPool(new A1Handler(),new A1Handler());</span></span><br><span class=\"line\"><span class=\"comment\">//        disruptor.handleEventsWithWorkerPool(new A2Handler(),new A2Handler());</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取RingBuffer</span></span><br><span class=\"line\">        RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.start();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 创建ByteBuffer缓冲区</span></span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">bb</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">8</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">long</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; l&lt;<span class=\"number\">5</span>; l++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 写入数据到缓冲区</span></span><br><span class=\"line\">            bb.putLong(<span class=\"number\">0</span>, l);</span><br><span class=\"line\">            <span class=\"comment\">// Java8的发布方式</span></span><br><span class=\"line\">            ringBuffer.publishEvent((event,sequece,buffer) -&gt; event.setId(buffer.getLong(<span class=\"number\">0</span>)),bb);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发布完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Disruptor-实例化方法","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-03-01T01:58:05.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 创建一个事件实体\n\n```java\npublic class LongEvent{\n    private Long id;\n    \n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n}\n```\n\n\n\n## 创建一个事件实体工厂\n\n```java\npublic class LongEventFactory implements EventFactory<LongEvent> {\n\n    public LongEvent newInstance() {\n        return new LongEvent();\n    }\n}\n```\n\n\n\n## 创建两个事件处理类\n\n```java\n\n/**\n* EventHandler<LongEvent> 是没有池化的实现方式,每个消费者中只有一个示例\n* WorkHandler<LongEvent> 是池化的实现方式，每个消费者中可以以类似线程池的方式去执行这个事件\n* 实际根据业务场景 实现其中一个接口就可以\n*/\npublic class A1Handler implements EventHandler<LongEvent> , WorkHandler<LongEvent> {\n\n    public void onEvent(LongEvent longEvent, long l, boolean b) throws Exception {\n        long id = longEvent.getId();\n        id+=1;\n        System.out.println(\"**************************\");\n        System.out.println(Thread.currentThread().getName());\n        System.out.println(System.currentTimeMillis()+\"+A1Handler:\"+id);\n        System.out.println(\"**************************\");\n    }\n\n    /**\n     * 池化执行\n     * */\n    @Override\n    public void onEvent(LongEvent longEvent) throws Exception {\n        long id = longEvent.getId();\n        id+=10;\n        System.out.println(\"**************************\");\n        System.out.println(Thread.currentThread().getName());\n        System.out.println(System.currentTimeMillis()+\"+A1Handler:\"+id);\n        System.out.println(\"**************************\");\n    }\n}\n```\n\n```java\npublic class A2Handler implements EventHandler<LongEvent> , WorkHandler<LongEvent> {\n    public void onEvent(LongEvent longEvent, long l, boolean b) throws Exception {\n        long id = longEvent.getId();\n        id+=3;\n        System.out.println(\"**************************\");\n        System.out.println(Thread.currentThread().getName());\n        System.out.println(System.currentTimeMillis()+\"+A2Handler:\"+id);\n        System.out.println(\"**************************\");\n    }\n\n    /**\n     * 池化执行\n     * */\n    @Override\n    public void onEvent(LongEvent longEvent) throws Exception {\n        long id = longEvent.getId();\n        id+=30;\n        System.out.println(\"**************************\");\n        System.out.println(Thread.currentThread().getName());\n        System.out.println(System.currentTimeMillis()+\"+A2Handler:\"+id);\n        System.out.println(\"**************************\");\n    }\n}\n```\n\n\n\n\n\n## 实例化Disruptor\n\n```java\n// 事件工厂\nLongEventFactory factory = new LongEventFactory();\n\n// 定义RingBuff大小  注意：数值一定是2的幂次方\nint bufferSize = 1024;\n\n// 创建ThreadFactory\nThreadFactory threadFactory = new ThreadFactory() {\n    private int counter = 0;\n    private String prefix = \"DisruptorWorker\";\n    @Override\n    public Thread newThread(Runnable r) {\n        return new Thread(r, prefix + \"-\" + counter++);\n    }\n};\n\n/* 实例化Disruptor （官方有4个实例化方法）\n * factory 是事件工厂\n * bufferSize 是上面定义的RingBuffer的大小\n * ProducerType.MULTI 是生产者模式 有SINGL和MULTI两种\n * new BlockingWaitStrategy() 是等待阻塞策略\n */\nDisruptor<LongEvent> disruptor = new Disruptor<LongEvent>(\n    factory, \n    bufferSize, \n    threadFactory,\n    ProducerType.MULTI,\n    new BlockingWaitStrategy());\n```\n\n\n\n## 创建消费者\n\n### 单个模式\n\ndisruptor会创建2和线程，一个线程用来执行`A1Handler`，一个线程用来执行`A2Handler`.每个线程互不影响。\n\n```java\ndisruptor.handleEventsWith(new A1Handler(),new A2Handler());\n```\n\n### 池化模式\n\ndisruptor会创建4个线程，其中两个线程组成**线程池**来执行`A1Handler`，另外两个线程也组成**线程池**用来执行`A2Handler`\n\n```java\ndisruptor.handleEventsWithWorkerPool(new A1Handler(),new A1Handler())\ndisruptor.handleEventsWithWorkerPool(new A2Handler(),new A2Handler())\n```\n\n## 获取RingBuffer\n\n```java\nRingBuffer<LongEvent> ringBuffer = disruptor.start();\n```\n\n## 生产者发布消息\n\n这边直接使用Java8的发布方式来发布消息\n\n```java\n// 创建ByteBuffer缓冲区 \nByteBuffer bb = ByteBuffer.allocate(8);\n// 生产者发布5条消息\nfor (long l = 0; l<5; l++) {\n    // 写入消息到Bufer缓冲区\n    bb.putLong(0, l);\n    // Java8 lambda发布方式\n    ringBuffer.publishEvent((event,sequece,buffer) -> event.setId(buffer.getLong(0)),bb);\n}\nSystem.out.println(\"发布完成\");\n```\n\n\n\n## 完整的Main方法\n\n```java\npublic class DisruptorMain {\n    public static void main(String[] args) {\n        // 实例化事件工厂\n        LongEventFactory factory = new LongEventFactory();\n        // 定义RingBuffer大小\n        int bufferSize = 1024;\n        // 创建线程工厂\n        ThreadFactory threadFactory = new ThreadFactory() {\n            private int counter = 0;\n            private String prefix = \"DisruptorWorker\";\n            @Override\n            public Thread newThread(Runnable r) {\n                return new Thread(r, prefix + \"-\" + counter++);\n            }\n        };\n        // 实例化Disruptor\n        Disruptor<LongEvent> disruptor = new Disruptor<LongEvent>(\n                factory,\n                bufferSize,\n                threadFactory,\n                ProducerType.MULTI,\n                new BlockingWaitStrategy());\n\n        // 并行模式 两个Handler互不影响\n        disruptor.handleEventsWith(new A1Handler(),new A2Handler());\n\n        // 并行 每个消费端有两个线程实例 (池化模式)\n//        disruptor.handleEventsWithWorkerPool(new A1Handler(),new A1Handler());\n//        disruptor.handleEventsWithWorkerPool(new A2Handler(),new A2Handler());\n\n        // 获取RingBuffer\n        RingBuffer<LongEvent> ringBuffer = disruptor.start();\n        \n        // 创建ByteBuffer缓冲区\n        ByteBuffer bb = ByteBuffer.allocate(8);\n        for (long l = 0; l<5; l++) {\n            // 写入数据到缓冲区\n            bb.putLong(0, l);\n            // Java8的发布方式\n            ringBuffer.publishEvent((event,sequece,buffer) -> event.setId(buffer.getLong(0)),bb);\n        }\n        System.out.println(\"发布完成\");\n    }\n}\n\n```","source":"_posts/java/disruptor/b3025291-ae52-4d26-a70c-66a79bda07d7.md","raw":"---\ntitle: Disruptor-实例化方法\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-03-01 09:58:05\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Disruptor\n- Java\ncategories:\n- Java\n---\n\n## 创建一个事件实体\n\n```java\npublic class LongEvent{\n    private Long id;\n    \n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n}\n```\n\n\n\n## 创建一个事件实体工厂\n\n```java\npublic class LongEventFactory implements EventFactory<LongEvent> {\n\n    public LongEvent newInstance() {\n        return new LongEvent();\n    }\n}\n```\n\n\n\n## 创建两个事件处理类\n\n```java\n\n/**\n* EventHandler<LongEvent> 是没有池化的实现方式,每个消费者中只有一个示例\n* WorkHandler<LongEvent> 是池化的实现方式，每个消费者中可以以类似线程池的方式去执行这个事件\n* 实际根据业务场景 实现其中一个接口就可以\n*/\npublic class A1Handler implements EventHandler<LongEvent> , WorkHandler<LongEvent> {\n\n    public void onEvent(LongEvent longEvent, long l, boolean b) throws Exception {\n        long id = longEvent.getId();\n        id+=1;\n        System.out.println(\"**************************\");\n        System.out.println(Thread.currentThread().getName());\n        System.out.println(System.currentTimeMillis()+\"+A1Handler:\"+id);\n        System.out.println(\"**************************\");\n    }\n\n    /**\n     * 池化执行\n     * */\n    @Override\n    public void onEvent(LongEvent longEvent) throws Exception {\n        long id = longEvent.getId();\n        id+=10;\n        System.out.println(\"**************************\");\n        System.out.println(Thread.currentThread().getName());\n        System.out.println(System.currentTimeMillis()+\"+A1Handler:\"+id);\n        System.out.println(\"**************************\");\n    }\n}\n```\n\n```java\npublic class A2Handler implements EventHandler<LongEvent> , WorkHandler<LongEvent> {\n    public void onEvent(LongEvent longEvent, long l, boolean b) throws Exception {\n        long id = longEvent.getId();\n        id+=3;\n        System.out.println(\"**************************\");\n        System.out.println(Thread.currentThread().getName());\n        System.out.println(System.currentTimeMillis()+\"+A2Handler:\"+id);\n        System.out.println(\"**************************\");\n    }\n\n    /**\n     * 池化执行\n     * */\n    @Override\n    public void onEvent(LongEvent longEvent) throws Exception {\n        long id = longEvent.getId();\n        id+=30;\n        System.out.println(\"**************************\");\n        System.out.println(Thread.currentThread().getName());\n        System.out.println(System.currentTimeMillis()+\"+A2Handler:\"+id);\n        System.out.println(\"**************************\");\n    }\n}\n```\n\n\n\n\n\n## 实例化Disruptor\n\n```java\n// 事件工厂\nLongEventFactory factory = new LongEventFactory();\n\n// 定义RingBuff大小  注意：数值一定是2的幂次方\nint bufferSize = 1024;\n\n// 创建ThreadFactory\nThreadFactory threadFactory = new ThreadFactory() {\n    private int counter = 0;\n    private String prefix = \"DisruptorWorker\";\n    @Override\n    public Thread newThread(Runnable r) {\n        return new Thread(r, prefix + \"-\" + counter++);\n    }\n};\n\n/* 实例化Disruptor （官方有4个实例化方法）\n * factory 是事件工厂\n * bufferSize 是上面定义的RingBuffer的大小\n * ProducerType.MULTI 是生产者模式 有SINGL和MULTI两种\n * new BlockingWaitStrategy() 是等待阻塞策略\n */\nDisruptor<LongEvent> disruptor = new Disruptor<LongEvent>(\n    factory, \n    bufferSize, \n    threadFactory,\n    ProducerType.MULTI,\n    new BlockingWaitStrategy());\n```\n\n\n\n## 创建消费者\n\n### 单个模式\n\ndisruptor会创建2和线程，一个线程用来执行`A1Handler`，一个线程用来执行`A2Handler`.每个线程互不影响。\n\n```java\ndisruptor.handleEventsWith(new A1Handler(),new A2Handler());\n```\n\n### 池化模式\n\ndisruptor会创建4个线程，其中两个线程组成**线程池**来执行`A1Handler`，另外两个线程也组成**线程池**用来执行`A2Handler`\n\n```java\ndisruptor.handleEventsWithWorkerPool(new A1Handler(),new A1Handler())\ndisruptor.handleEventsWithWorkerPool(new A2Handler(),new A2Handler())\n```\n\n## 获取RingBuffer\n\n```java\nRingBuffer<LongEvent> ringBuffer = disruptor.start();\n```\n\n## 生产者发布消息\n\n这边直接使用Java8的发布方式来发布消息\n\n```java\n// 创建ByteBuffer缓冲区 \nByteBuffer bb = ByteBuffer.allocate(8);\n// 生产者发布5条消息\nfor (long l = 0; l<5; l++) {\n    // 写入消息到Bufer缓冲区\n    bb.putLong(0, l);\n    // Java8 lambda发布方式\n    ringBuffer.publishEvent((event,sequece,buffer) -> event.setId(buffer.getLong(0)),bb);\n}\nSystem.out.println(\"发布完成\");\n```\n\n\n\n## 完整的Main方法\n\n```java\npublic class DisruptorMain {\n    public static void main(String[] args) {\n        // 实例化事件工厂\n        LongEventFactory factory = new LongEventFactory();\n        // 定义RingBuffer大小\n        int bufferSize = 1024;\n        // 创建线程工厂\n        ThreadFactory threadFactory = new ThreadFactory() {\n            private int counter = 0;\n            private String prefix = \"DisruptorWorker\";\n            @Override\n            public Thread newThread(Runnable r) {\n                return new Thread(r, prefix + \"-\" + counter++);\n            }\n        };\n        // 实例化Disruptor\n        Disruptor<LongEvent> disruptor = new Disruptor<LongEvent>(\n                factory,\n                bufferSize,\n                threadFactory,\n                ProducerType.MULTI,\n                new BlockingWaitStrategy());\n\n        // 并行模式 两个Handler互不影响\n        disruptor.handleEventsWith(new A1Handler(),new A2Handler());\n\n        // 并行 每个消费端有两个线程实例 (池化模式)\n//        disruptor.handleEventsWithWorkerPool(new A1Handler(),new A1Handler());\n//        disruptor.handleEventsWithWorkerPool(new A2Handler(),new A2Handler());\n\n        // 获取RingBuffer\n        RingBuffer<LongEvent> ringBuffer = disruptor.start();\n        \n        // 创建ByteBuffer缓冲区\n        ByteBuffer bb = ByteBuffer.allocate(8);\n        for (long l = 0; l<5; l++) {\n            // 写入数据到缓冲区\n            bb.putLong(0, l);\n            // Java8的发布方式\n            ringBuffer.publishEvent((event,sequece,buffer) -> event.setId(buffer.getLong(0)),bb);\n        }\n        System.out.println(\"发布完成\");\n    }\n}\n\n```","slug":"java/disruptor/b3025291-ae52-4d26-a70c-66a79bda07d7","published":1,"updated":"2021-10-08T07:57:24.166Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ei40075vpucgwu1gsoy","content":"<h2 id=\"创建一个事件实体\"><a href=\"#创建一个事件实体\" class=\"headerlink\" title=\"创建一个事件实体\"></a>创建一个事件实体</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongEvent</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Long <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建一个事件实体工厂\"><a href=\"#创建一个事件实体工厂\" class=\"headerlink\" title=\"创建一个事件实体工厂\"></a>创建一个事件实体工厂</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongEventFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EventFactory</span>&lt;LongEvent&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LongEvent <span class=\"title function_\">newInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEvent</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建两个事件处理类\"><a href=\"#创建两个事件处理类\" class=\"headerlink\" title=\"创建两个事件处理类\"></a>创建两个事件处理类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* EventHandler&lt;LongEvent&gt; 是没有池化的实现方式,每个消费者中只有一个示例</span></span><br><span class=\"line\"><span class=\"comment\">* WorkHandler&lt;LongEvent&gt; 是池化的实现方式，每个消费者中可以以类似线程池的方式去执行这个事件</span></span><br><span class=\"line\"><span class=\"comment\">* 实际根据业务场景 实现其中一个接口就可以</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A1Handler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EventHandler</span>&lt;LongEvent&gt; , WorkHandler&lt;LongEvent&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent longEvent, <span class=\"type\">long</span> l, <span class=\"type\">boolean</span> b)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> longEvent.getId();</span><br><span class=\"line\">        id+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis()+<span class=\"string\">&quot;+A1Handler:&quot;</span>+id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 池化执行</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent longEvent)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> longEvent.getId();</span><br><span class=\"line\">        id+=<span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis()+<span class=\"string\">&quot;+A1Handler:&quot;</span>+id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A2Handler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EventHandler</span>&lt;LongEvent&gt; , WorkHandler&lt;LongEvent&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent longEvent, <span class=\"type\">long</span> l, <span class=\"type\">boolean</span> b)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> longEvent.getId();</span><br><span class=\"line\">        id+=<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis()+<span class=\"string\">&quot;+A2Handler:&quot;</span>+id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 池化执行</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent longEvent)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> longEvent.getId();</span><br><span class=\"line\">        id+=<span class=\"number\">30</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis()+<span class=\"string\">&quot;+A2Handler:&quot;</span>+id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"实例化Disruptor\"><a href=\"#实例化Disruptor\" class=\"headerlink\" title=\"实例化Disruptor\"></a>实例化Disruptor</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 事件工厂</span></span><br><span class=\"line\"><span class=\"type\">LongEventFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEventFactory</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义RingBuff大小  注意：数值一定是2的幂次方</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">bufferSize</span> <span class=\"operator\">=</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建ThreadFactory</span></span><br><span class=\"line\"><span class=\"type\">ThreadFactory</span> <span class=\"variable\">threadFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadFactory</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">prefix</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;DisruptorWorker&quot;</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Thread <span class=\"title function_\">newThread</span><span class=\"params\">(Runnable r)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(r, prefix + <span class=\"string\">&quot;-&quot;</span> + counter++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 实例化Disruptor （官方有4个实例化方法）</span></span><br><span class=\"line\"><span class=\"comment\"> * factory 是事件工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * bufferSize 是上面定义的RingBuffer的大小</span></span><br><span class=\"line\"><span class=\"comment\"> * ProducerType.MULTI 是生产者模式 有SINGL和MULTI两种</span></span><br><span class=\"line\"><span class=\"comment\"> * new BlockingWaitStrategy() 是等待阻塞策略</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Disruptor&lt;LongEvent&gt; disruptor = <span class=\"keyword\">new</span> <span class=\"title class_\">Disruptor</span>&lt;LongEvent&gt;(</span><br><span class=\"line\">    factory, </span><br><span class=\"line\">    bufferSize, </span><br><span class=\"line\">    threadFactory,</span><br><span class=\"line\">    ProducerType.MULTI,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">BlockingWaitStrategy</span>());</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建消费者\"><a href=\"#创建消费者\" class=\"headerlink\" title=\"创建消费者\"></a>创建消费者</h2><h3 id=\"单个模式\"><a href=\"#单个模式\" class=\"headerlink\" title=\"单个模式\"></a>单个模式</h3><p>disruptor会创建2和线程，一个线程用来执行<code>A1Handler</code>，一个线程用来执行<code>A2Handler</code>.每个线程互不影响。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"池化模式\"><a href=\"#池化模式\" class=\"headerlink\" title=\"池化模式\"></a>池化模式</h3><p>disruptor会创建4个线程，其中两个线程组成<strong>线程池</strong>来执行<code>A1Handler</code>，另外两个线程也组成<strong>线程池</strong>用来执行<code>A2Handler</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWithWorkerPool(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>())</span><br><span class=\"line\">disruptor.handleEventsWithWorkerPool(<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取RingBuffer\"><a href=\"#获取RingBuffer\" class=\"headerlink\" title=\"获取RingBuffer\"></a>获取RingBuffer</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.start();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生产者发布消息\"><a href=\"#生产者发布消息\" class=\"headerlink\" title=\"生产者发布消息\"></a>生产者发布消息</h2><p>这边直接使用Java8的发布方式来发布消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建ByteBuffer缓冲区 </span></span><br><span class=\"line\"><span class=\"type\">ByteBuffer</span> <span class=\"variable\">bb</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"comment\">// 生产者发布5条消息</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">long</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; l&lt;<span class=\"number\">5</span>; l++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 写入消息到Bufer缓冲区</span></span><br><span class=\"line\">    bb.putLong(<span class=\"number\">0</span>, l);</span><br><span class=\"line\">    <span class=\"comment\">// Java8 lambda发布方式</span></span><br><span class=\"line\">    ringBuffer.publishEvent((event,sequece,buffer) -&gt; event.setId(buffer.getLong(<span class=\"number\">0</span>)),bb);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;发布完成&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"完整的Main方法\"><a href=\"#完整的Main方法\" class=\"headerlink\" title=\"完整的Main方法\"></a>完整的Main方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DisruptorMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 实例化事件工厂</span></span><br><span class=\"line\">        <span class=\"type\">LongEventFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEventFactory</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 定义RingBuffer大小</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">bufferSize</span> <span class=\"operator\">=</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 创建线程工厂</span></span><br><span class=\"line\">        <span class=\"type\">ThreadFactory</span> <span class=\"variable\">threadFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadFactory</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">prefix</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;DisruptorWorker&quot;</span>;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Thread <span class=\"title function_\">newThread</span><span class=\"params\">(Runnable r)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(r, prefix + <span class=\"string\">&quot;-&quot;</span> + counter++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 实例化Disruptor</span></span><br><span class=\"line\">        Disruptor&lt;LongEvent&gt; disruptor = <span class=\"keyword\">new</span> <span class=\"title class_\">Disruptor</span>&lt;LongEvent&gt;(</span><br><span class=\"line\">                factory,</span><br><span class=\"line\">                bufferSize,</span><br><span class=\"line\">                threadFactory,</span><br><span class=\"line\">                ProducerType.MULTI,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">BlockingWaitStrategy</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 并行模式 两个Handler互不影响</span></span><br><span class=\"line\">        disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 并行 每个消费端有两个线程实例 (池化模式)</span></span><br><span class=\"line\"><span class=\"comment\">//        disruptor.handleEventsWithWorkerPool(new A1Handler(),new A1Handler());</span></span><br><span class=\"line\"><span class=\"comment\">//        disruptor.handleEventsWithWorkerPool(new A2Handler(),new A2Handler());</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取RingBuffer</span></span><br><span class=\"line\">        RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.start();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 创建ByteBuffer缓冲区</span></span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">bb</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">8</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">long</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; l&lt;<span class=\"number\">5</span>; l++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 写入数据到缓冲区</span></span><br><span class=\"line\">            bb.putLong(<span class=\"number\">0</span>, l);</span><br><span class=\"line\">            <span class=\"comment\">// Java8的发布方式</span></span><br><span class=\"line\">            ringBuffer.publishEvent((event,sequece,buffer) -&gt; event.setId(buffer.getLong(<span class=\"number\">0</span>)),bb);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发布完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"创建一个事件实体\"><a href=\"#创建一个事件实体\" class=\"headerlink\" title=\"创建一个事件实体\"></a>创建一个事件实体</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongEvent</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long id;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> Long <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(Long id)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建一个事件实体工厂\"><a href=\"#创建一个事件实体工厂\" class=\"headerlink\" title=\"创建一个事件实体工厂\"></a>创建一个事件实体工厂</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LongEventFactory</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EventFactory</span>&lt;LongEvent&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LongEvent <span class=\"title function_\">newInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEvent</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建两个事件处理类\"><a href=\"#创建两个事件处理类\" class=\"headerlink\" title=\"创建两个事件处理类\"></a>创建两个事件处理类</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* EventHandler&lt;LongEvent&gt; 是没有池化的实现方式,每个消费者中只有一个示例</span></span><br><span class=\"line\"><span class=\"comment\">* WorkHandler&lt;LongEvent&gt; 是池化的实现方式，每个消费者中可以以类似线程池的方式去执行这个事件</span></span><br><span class=\"line\"><span class=\"comment\">* 实际根据业务场景 实现其中一个接口就可以</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A1Handler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EventHandler</span>&lt;LongEvent&gt; , WorkHandler&lt;LongEvent&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent longEvent, <span class=\"type\">long</span> l, <span class=\"type\">boolean</span> b)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> longEvent.getId();</span><br><span class=\"line\">        id+=<span class=\"number\">1</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis()+<span class=\"string\">&quot;+A1Handler:&quot;</span>+id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 池化执行</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent longEvent)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> longEvent.getId();</span><br><span class=\"line\">        id+=<span class=\"number\">10</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis()+<span class=\"string\">&quot;+A1Handler:&quot;</span>+id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">A2Handler</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">EventHandler</span>&lt;LongEvent&gt; , WorkHandler&lt;LongEvent&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent longEvent, <span class=\"type\">long</span> l, <span class=\"type\">boolean</span> b)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> longEvent.getId();</span><br><span class=\"line\">        id+=<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis()+<span class=\"string\">&quot;+A2Handler:&quot;</span>+id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 池化执行</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onEvent</span><span class=\"params\">(LongEvent longEvent)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> longEvent.getId();</span><br><span class=\"line\">        id+=<span class=\"number\">30</span>;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">        System.out.println(System.currentTimeMillis()+<span class=\"string\">&quot;+A2Handler:&quot;</span>+id);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;**************************&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"实例化Disruptor\"><a href=\"#实例化Disruptor\" class=\"headerlink\" title=\"实例化Disruptor\"></a>实例化Disruptor</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 事件工厂</span></span><br><span class=\"line\"><span class=\"type\">LongEventFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEventFactory</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义RingBuff大小  注意：数值一定是2的幂次方</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">bufferSize</span> <span class=\"operator\">=</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建ThreadFactory</span></span><br><span class=\"line\"><span class=\"type\">ThreadFactory</span> <span class=\"variable\">threadFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadFactory</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">prefix</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;DisruptorWorker&quot;</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Thread <span class=\"title function_\">newThread</span><span class=\"params\">(Runnable r)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(r, prefix + <span class=\"string\">&quot;-&quot;</span> + counter++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 实例化Disruptor （官方有4个实例化方法）</span></span><br><span class=\"line\"><span class=\"comment\"> * factory 是事件工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * bufferSize 是上面定义的RingBuffer的大小</span></span><br><span class=\"line\"><span class=\"comment\"> * ProducerType.MULTI 是生产者模式 有SINGL和MULTI两种</span></span><br><span class=\"line\"><span class=\"comment\"> * new BlockingWaitStrategy() 是等待阻塞策略</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">Disruptor&lt;LongEvent&gt; disruptor = <span class=\"keyword\">new</span> <span class=\"title class_\">Disruptor</span>&lt;LongEvent&gt;(</span><br><span class=\"line\">    factory, </span><br><span class=\"line\">    bufferSize, </span><br><span class=\"line\">    threadFactory,</span><br><span class=\"line\">    ProducerType.MULTI,</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">BlockingWaitStrategy</span>());</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"创建消费者\"><a href=\"#创建消费者\" class=\"headerlink\" title=\"创建消费者\"></a>创建消费者</h2><h3 id=\"单个模式\"><a href=\"#单个模式\" class=\"headerlink\" title=\"单个模式\"></a>单个模式</h3><p>disruptor会创建2和线程，一个线程用来执行<code>A1Handler</code>，一个线程用来执行<code>A2Handler</code>.每个线程互不影响。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"池化模式\"><a href=\"#池化模式\" class=\"headerlink\" title=\"池化模式\"></a>池化模式</h3><p>disruptor会创建4个线程，其中两个线程组成<strong>线程池</strong>来执行<code>A1Handler</code>，另外两个线程也组成<strong>线程池</strong>用来执行<code>A2Handler</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWithWorkerPool(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>())</span><br><span class=\"line\">disruptor.handleEventsWithWorkerPool(<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>())</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取RingBuffer\"><a href=\"#获取RingBuffer\" class=\"headerlink\" title=\"获取RingBuffer\"></a>获取RingBuffer</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.start();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"生产者发布消息\"><a href=\"#生产者发布消息\" class=\"headerlink\" title=\"生产者发布消息\"></a>生产者发布消息</h2><p>这边直接使用Java8的发布方式来发布消息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建ByteBuffer缓冲区 </span></span><br><span class=\"line\"><span class=\"type\">ByteBuffer</span> <span class=\"variable\">bb</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">8</span>);</span><br><span class=\"line\"><span class=\"comment\">// 生产者发布5条消息</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">long</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; l&lt;<span class=\"number\">5</span>; l++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 写入消息到Bufer缓冲区</span></span><br><span class=\"line\">    bb.putLong(<span class=\"number\">0</span>, l);</span><br><span class=\"line\">    <span class=\"comment\">// Java8 lambda发布方式</span></span><br><span class=\"line\">    ringBuffer.publishEvent((event,sequece,buffer) -&gt; event.setId(buffer.getLong(<span class=\"number\">0</span>)),bb);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;发布完成&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"完整的Main方法\"><a href=\"#完整的Main方法\" class=\"headerlink\" title=\"完整的Main方法\"></a>完整的Main方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DisruptorMain</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 实例化事件工厂</span></span><br><span class=\"line\">        <span class=\"type\">LongEventFactory</span> <span class=\"variable\">factory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LongEventFactory</span>();</span><br><span class=\"line\">        <span class=\"comment\">// 定义RingBuffer大小</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">bufferSize</span> <span class=\"operator\">=</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 创建线程工厂</span></span><br><span class=\"line\">        <span class=\"type\">ThreadFactory</span> <span class=\"variable\">threadFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadFactory</span>() &#123;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">private</span> <span class=\"type\">String</span> <span class=\"variable\">prefix</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;DisruptorWorker&quot;</span>;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Thread <span class=\"title function_\">newThread</span><span class=\"params\">(Runnable r)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(r, prefix + <span class=\"string\">&quot;-&quot;</span> + counter++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">// 实例化Disruptor</span></span><br><span class=\"line\">        Disruptor&lt;LongEvent&gt; disruptor = <span class=\"keyword\">new</span> <span class=\"title class_\">Disruptor</span>&lt;LongEvent&gt;(</span><br><span class=\"line\">                factory,</span><br><span class=\"line\">                bufferSize,</span><br><span class=\"line\">                threadFactory,</span><br><span class=\"line\">                ProducerType.MULTI,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">BlockingWaitStrategy</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 并行模式 两个Handler互不影响</span></span><br><span class=\"line\">        disruptor.handleEventsWith(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 并行 每个消费端有两个线程实例 (池化模式)</span></span><br><span class=\"line\"><span class=\"comment\">//        disruptor.handleEventsWithWorkerPool(new A1Handler(),new A1Handler());</span></span><br><span class=\"line\"><span class=\"comment\">//        disruptor.handleEventsWithWorkerPool(new A2Handler(),new A2Handler());</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 获取RingBuffer</span></span><br><span class=\"line\">        RingBuffer&lt;LongEvent&gt; ringBuffer = disruptor.start();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// 创建ByteBuffer缓冲区</span></span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">bb</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">8</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">long</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; l&lt;<span class=\"number\">5</span>; l++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 写入数据到缓冲区</span></span><br><span class=\"line\">            bb.putLong(<span class=\"number\">0</span>, l);</span><br><span class=\"line\">            <span class=\"comment\">// Java8的发布方式</span></span><br><span class=\"line\">            ringBuffer.publishEvent((event,sequece,buffer) -&gt; event.setId(buffer.getLong(<span class=\"number\">0</span>)),bb);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发布完成&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Disruptor-消费模式简介(池化)","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-03-01T02:02:15.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 并行模式(池化)\n\n每个消费端有两个线程实例\n\n```java\ndisruptor.handleEventsWithWorkerPool(new A1Handler(),new A1Handler());\ndisruptor.handleEventsWithWorkerPool(new A2Handler(),new A2Handler());\n```\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111210802.jpg)\n\n### 结果示例\n\n可以看到每次执行的线程是不一样的\n\n```shell\n++++++++++++++++++++++++++++++++++++++++++++++++\n**************************\nDisruptorWorker-0\n**************************\n1605100167571+A1Handler:10\n**************************\nDisruptorWorker-2\n1605100167572+A2Handler:30\n**************************\n++++++++++++++++++++++++++++++++++++++++++++++++\n**************************\nDisruptorWorker-1\n1605100168572+A1Handler:11\n**************************\n**************************\nDisruptorWorker-3\n1605100168573+A2Handler:31\n**************************\n```\n\n## 串行模式（池化）\n\n每个消费端有两个线程实例\n\n```java\ndisruptor.handleEventsWithWorkerPool(new A1Handler(),new A1Handler())\n                .then(new A2Handler(),new A2Handler());\n```\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111211136.jpg)\n\n### 结果示例\n\n```shell\n++++++++++++++++++++++++++++++++++++++++++++++++\n**************************\nDisruptorWorker-0\n1605100492248+A1Handler:10\n**************************\n**************************\nDisruptorWorker-2\n1605100492249+A2Handler:30\n**************************\n++++++++++++++++++++++++++++++++++++++++++++++++\n**************************\nDisruptorWorker-1\n1605100493249+A1Handler:11\n**************************\n**************************\nDisruptorWorker-3\n1605100493249+A2Handler:31\n**************************\n```","source":"_posts/java/disruptor/c16646bf-1474-42a7-a5cd-84b99669062c.md","raw":"---\ntitle: Disruptor-消费模式简介(池化)\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-03-01 10:02:15\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Disruptor\n- Java\ncategories:\n- Java\n---\n\n## 并行模式(池化)\n\n每个消费端有两个线程实例\n\n```java\ndisruptor.handleEventsWithWorkerPool(new A1Handler(),new A1Handler());\ndisruptor.handleEventsWithWorkerPool(new A2Handler(),new A2Handler());\n```\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111210802.jpg)\n\n### 结果示例\n\n可以看到每次执行的线程是不一样的\n\n```shell\n++++++++++++++++++++++++++++++++++++++++++++++++\n**************************\nDisruptorWorker-0\n**************************\n1605100167571+A1Handler:10\n**************************\nDisruptorWorker-2\n1605100167572+A2Handler:30\n**************************\n++++++++++++++++++++++++++++++++++++++++++++++++\n**************************\nDisruptorWorker-1\n1605100168572+A1Handler:11\n**************************\n**************************\nDisruptorWorker-3\n1605100168573+A2Handler:31\n**************************\n```\n\n## 串行模式（池化）\n\n每个消费端有两个线程实例\n\n```java\ndisruptor.handleEventsWithWorkerPool(new A1Handler(),new A1Handler())\n                .then(new A2Handler(),new A2Handler());\n```\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111211136.jpg)\n\n### 结果示例\n\n```shell\n++++++++++++++++++++++++++++++++++++++++++++++++\n**************************\nDisruptorWorker-0\n1605100492248+A1Handler:10\n**************************\n**************************\nDisruptorWorker-2\n1605100492249+A2Handler:30\n**************************\n++++++++++++++++++++++++++++++++++++++++++++++++\n**************************\nDisruptorWorker-1\n1605100493249+A1Handler:11\n**************************\n**************************\nDisruptorWorker-3\n1605100493249+A2Handler:31\n**************************\n```","slug":"java/disruptor/c16646bf-1474-42a7-a5cd-84b99669062c","published":1,"updated":"2021-10-08T08:23:46.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ei50079vpuc2gc4fbh1","content":"<h2 id=\"并行模式-池化\"><a href=\"#并行模式-池化\" class=\"headerlink\" title=\"并行模式(池化)\"></a>并行模式(池化)</h2><p>每个消费端有两个线程实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWithWorkerPool(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>());</span><br><span class=\"line\">disruptor.handleEventsWithWorkerPool(<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111210802.jpg\" alt=\"图片\"></p>\n<h3 id=\"结果示例\"><a href=\"#结果示例\" class=\"headerlink\" title=\"结果示例\"></a>结果示例</h3><p>可以看到每次执行的线程是不一样的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">**************************</span><br><span class=\"line\">DisruptorWorker-0</span><br><span class=\"line\">**************************</span><br><span class=\"line\">1605100167571+A1Handler:10</span><br><span class=\"line\">**************************</span><br><span class=\"line\">DisruptorWorker-2</span><br><span class=\"line\">1605100167572+A2Handler:30</span><br><span class=\"line\">**************************</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">**************************</span><br><span class=\"line\">DisruptorWorker-1</span><br><span class=\"line\">1605100168572+A1Handler:11</span><br><span class=\"line\">**************************</span><br><span class=\"line\">**************************</span><br><span class=\"line\">DisruptorWorker-3</span><br><span class=\"line\">1605100168573+A2Handler:31</span><br><span class=\"line\">**************************</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"串行模式（池化）\"><a href=\"#串行模式（池化）\" class=\"headerlink\" title=\"串行模式（池化）\"></a>串行模式（池化）</h2><p>每个消费端有两个线程实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWithWorkerPool(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>())</span><br><span class=\"line\">                .then(<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111211136.jpg\" alt=\"图片\"></p>\n<h3 id=\"结果示例-1\"><a href=\"#结果示例-1\" class=\"headerlink\" title=\"结果示例\"></a>结果示例</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">**************************</span><br><span class=\"line\">DisruptorWorker-0</span><br><span class=\"line\">1605100492248+A1Handler:10</span><br><span class=\"line\">**************************</span><br><span class=\"line\">**************************</span><br><span class=\"line\">DisruptorWorker-2</span><br><span class=\"line\">1605100492249+A2Handler:30</span><br><span class=\"line\">**************************</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">**************************</span><br><span class=\"line\">DisruptorWorker-1</span><br><span class=\"line\">1605100493249+A1Handler:11</span><br><span class=\"line\">**************************</span><br><span class=\"line\">**************************</span><br><span class=\"line\">DisruptorWorker-3</span><br><span class=\"line\">1605100493249+A2Handler:31</span><br><span class=\"line\">**************************</span><br></pre></td></tr></table></figure>","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"并行模式-池化\"><a href=\"#并行模式-池化\" class=\"headerlink\" title=\"并行模式(池化)\"></a>并行模式(池化)</h2><p>每个消费端有两个线程实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWithWorkerPool(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>());</span><br><span class=\"line\">disruptor.handleEventsWithWorkerPool(<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111210802.jpg\" alt=\"图片\"></p>\n<h3 id=\"结果示例\"><a href=\"#结果示例\" class=\"headerlink\" title=\"结果示例\"></a>结果示例</h3><p>可以看到每次执行的线程是不一样的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">**************************</span><br><span class=\"line\">DisruptorWorker-0</span><br><span class=\"line\">**************************</span><br><span class=\"line\">1605100167571+A1Handler:10</span><br><span class=\"line\">**************************</span><br><span class=\"line\">DisruptorWorker-2</span><br><span class=\"line\">1605100167572+A2Handler:30</span><br><span class=\"line\">**************************</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">**************************</span><br><span class=\"line\">DisruptorWorker-1</span><br><span class=\"line\">1605100168572+A1Handler:11</span><br><span class=\"line\">**************************</span><br><span class=\"line\">**************************</span><br><span class=\"line\">DisruptorWorker-3</span><br><span class=\"line\">1605100168573+A2Handler:31</span><br><span class=\"line\">**************************</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"串行模式（池化）\"><a href=\"#串行模式（池化）\" class=\"headerlink\" title=\"串行模式（池化）\"></a>串行模式（池化）</h2><p>每个消费端有两个线程实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">disruptor.handleEventsWithWorkerPool(<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A1Handler</span>())</span><br><span class=\"line\">                .then(<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>(),<span class=\"keyword\">new</span> <span class=\"title class_\">A2Handler</span>());</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20201111211136.jpg\" alt=\"图片\"></p>\n<h3 id=\"结果示例-1\"><a href=\"#结果示例-1\" class=\"headerlink\" title=\"结果示例\"></a>结果示例</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">**************************</span><br><span class=\"line\">DisruptorWorker-0</span><br><span class=\"line\">1605100492248+A1Handler:10</span><br><span class=\"line\">**************************</span><br><span class=\"line\">**************************</span><br><span class=\"line\">DisruptorWorker-2</span><br><span class=\"line\">1605100492249+A2Handler:30</span><br><span class=\"line\">**************************</span><br><span class=\"line\">++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class=\"line\">**************************</span><br><span class=\"line\">DisruptorWorker-1</span><br><span class=\"line\">1605100493249+A1Handler:11</span><br><span class=\"line\">**************************</span><br><span class=\"line\">**************************</span><br><span class=\"line\">DisruptorWorker-3</span><br><span class=\"line\">1605100493249+A2Handler:31</span><br><span class=\"line\">**************************</span><br></pre></td></tr></table></figure>"},{"title":"Disruptor-等待策略","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-03-01T02:02:06.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## BlockingWaitStrategy\n\nDisruptor默认策略\n\n对`EventProcessor`使用等待条件的锁和条件变量的阻塞策略。\n\n**当吞吐量和低延迟不如CPU资源那么重要时，可以使用此策略。**\n\n## LiteBlockingWaitStrategy\n\n**BlockingWaitStrategy的变体**，在无竞争的情况下尝试消除条件唤醒。 显示微基准测试的性能改进。\n\n 但是，由于我尚未完全证明锁省略码的正确性，因此应将这种等待策略视为实验性的。\n\n## BusySpinWaitStrategy\n\n繁忙旋转策略，该繁忙旋转策略对`EventProcessor`的障碍使用繁忙的旋转循环。\n\n**此策略将使用CPU资源来避免可能导致延迟抖动的系统调用。 最好当线程可以绑定到特定的CPU内核时使用。**\n\n## TimeoutBlockingWaitStrategy\n\n\n\n## LiteTimeoutBlockingWaitStrategy\n\n**TimeoutBlockingWaitStrategy的变体**，在无竞争的情况下尝试消除条件唤醒。\n\n## PhasedBackoffWaitStrategy\n\n在屏障上等待EventProcessor的分阶段等待策略。\n\n当吞吐量和低延迟不如CPU资源那么重要时，可以使用此策略。\n旋转，然后屈服，然后使用配置的后备WaitStrategy等待。\n\n## SleepingWaitStrategy\n\n最初启动的休眠策略，然后使用Thread.yield（），最后在EventProcessor等待屏障时，休眠操作系统和JVM将允许的最小数量的nanos。\n\n此策略是性能和CPU资源之间的良好折衷。\n安静时段后可能会出现延迟峰值。 这也将减少对生产线程的影响，因为它不需要发出信号通知任何条件变量来唤醒事件处理线程。\n\n## YieldingWaitStrategy\n\n在初始旋转后，使用Thread.yield（）的EventProcessor在屏障上等待。\n\n如果其他线程需要CPU资源，则此策略将使用100％CPU，但比忙碌的自旋策略更容易放弃CPU。","source":"_posts/java/disruptor/ff51336d-70d4-449c-9214-fff2542bef1f.md","raw":"---\ntitle: Disruptor-等待策略\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-03-01 10:02:06\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Disruptor\n- Java\ncategories:\n- Java\n---\n\n## BlockingWaitStrategy\n\nDisruptor默认策略\n\n对`EventProcessor`使用等待条件的锁和条件变量的阻塞策略。\n\n**当吞吐量和低延迟不如CPU资源那么重要时，可以使用此策略。**\n\n## LiteBlockingWaitStrategy\n\n**BlockingWaitStrategy的变体**，在无竞争的情况下尝试消除条件唤醒。 显示微基准测试的性能改进。\n\n 但是，由于我尚未完全证明锁省略码的正确性，因此应将这种等待策略视为实验性的。\n\n## BusySpinWaitStrategy\n\n繁忙旋转策略，该繁忙旋转策略对`EventProcessor`的障碍使用繁忙的旋转循环。\n\n**此策略将使用CPU资源来避免可能导致延迟抖动的系统调用。 最好当线程可以绑定到特定的CPU内核时使用。**\n\n## TimeoutBlockingWaitStrategy\n\n\n\n## LiteTimeoutBlockingWaitStrategy\n\n**TimeoutBlockingWaitStrategy的变体**，在无竞争的情况下尝试消除条件唤醒。\n\n## PhasedBackoffWaitStrategy\n\n在屏障上等待EventProcessor的分阶段等待策略。\n\n当吞吐量和低延迟不如CPU资源那么重要时，可以使用此策略。\n旋转，然后屈服，然后使用配置的后备WaitStrategy等待。\n\n## SleepingWaitStrategy\n\n最初启动的休眠策略，然后使用Thread.yield（），最后在EventProcessor等待屏障时，休眠操作系统和JVM将允许的最小数量的nanos。\n\n此策略是性能和CPU资源之间的良好折衷。\n安静时段后可能会出现延迟峰值。 这也将减少对生产线程的影响，因为它不需要发出信号通知任何条件变量来唤醒事件处理线程。\n\n## YieldingWaitStrategy\n\n在初始旋转后，使用Thread.yield（）的EventProcessor在屏障上等待。\n\n如果其他线程需要CPU资源，则此策略将使用100％CPU，但比忙碌的自旋策略更容易放弃CPU。","slug":"java/disruptor/ff51336d-70d4-449c-9214-fff2542bef1f","published":1,"updated":"2021-10-08T07:57:24.167Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ei6007dvpucgvav29n5","content":"<h2 id=\"BlockingWaitStrategy\"><a href=\"#BlockingWaitStrategy\" class=\"headerlink\" title=\"BlockingWaitStrategy\"></a>BlockingWaitStrategy</h2><p>Disruptor默认策略</p>\n<p>对<code>EventProcessor</code>使用等待条件的锁和条件变量的阻塞策略。</p>\n<p><strong>当吞吐量和低延迟不如CPU资源那么重要时，可以使用此策略。</strong></p>\n<h2 id=\"LiteBlockingWaitStrategy\"><a href=\"#LiteBlockingWaitStrategy\" class=\"headerlink\" title=\"LiteBlockingWaitStrategy\"></a>LiteBlockingWaitStrategy</h2><p><strong>BlockingWaitStrategy的变体</strong>，在无竞争的情况下尝试消除条件唤醒。 显示微基准测试的性能改进。</p>\n<p> 但是，由于我尚未完全证明锁省略码的正确性，因此应将这种等待策略视为实验性的。</p>\n<h2 id=\"BusySpinWaitStrategy\"><a href=\"#BusySpinWaitStrategy\" class=\"headerlink\" title=\"BusySpinWaitStrategy\"></a>BusySpinWaitStrategy</h2><p>繁忙旋转策略，该繁忙旋转策略对<code>EventProcessor</code>的障碍使用繁忙的旋转循环。</p>\n<p><strong>此策略将使用CPU资源来避免可能导致延迟抖动的系统调用。 最好当线程可以绑定到特定的CPU内核时使用。</strong></p>\n<h2 id=\"TimeoutBlockingWaitStrategy\"><a href=\"#TimeoutBlockingWaitStrategy\" class=\"headerlink\" title=\"TimeoutBlockingWaitStrategy\"></a>TimeoutBlockingWaitStrategy</h2><h2 id=\"LiteTimeoutBlockingWaitStrategy\"><a href=\"#LiteTimeoutBlockingWaitStrategy\" class=\"headerlink\" title=\"LiteTimeoutBlockingWaitStrategy\"></a>LiteTimeoutBlockingWaitStrategy</h2><p><strong>TimeoutBlockingWaitStrategy的变体</strong>，在无竞争的情况下尝试消除条件唤醒。</p>\n<h2 id=\"PhasedBackoffWaitStrategy\"><a href=\"#PhasedBackoffWaitStrategy\" class=\"headerlink\" title=\"PhasedBackoffWaitStrategy\"></a>PhasedBackoffWaitStrategy</h2><p>在屏障上等待EventProcessor的分阶段等待策略。</p>\n<p>当吞吐量和低延迟不如CPU资源那么重要时，可以使用此策略。<br>旋转，然后屈服，然后使用配置的后备WaitStrategy等待。</p>\n<h2 id=\"SleepingWaitStrategy\"><a href=\"#SleepingWaitStrategy\" class=\"headerlink\" title=\"SleepingWaitStrategy\"></a>SleepingWaitStrategy</h2><p>最初启动的休眠策略，然后使用Thread.yield（），最后在EventProcessor等待屏障时，休眠操作系统和JVM将允许的最小数量的nanos。</p>\n<p>此策略是性能和CPU资源之间的良好折衷。<br>安静时段后可能会出现延迟峰值。 这也将减少对生产线程的影响，因为它不需要发出信号通知任何条件变量来唤醒事件处理线程。</p>\n<h2 id=\"YieldingWaitStrategy\"><a href=\"#YieldingWaitStrategy\" class=\"headerlink\" title=\"YieldingWaitStrategy\"></a>YieldingWaitStrategy</h2><p>在初始旋转后，使用Thread.yield（）的EventProcessor在屏障上等待。</p>\n<p>如果其他线程需要CPU资源，则此策略将使用100％CPU，但比忙碌的自旋策略更容易放弃CPU。</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"BlockingWaitStrategy\"><a href=\"#BlockingWaitStrategy\" class=\"headerlink\" title=\"BlockingWaitStrategy\"></a>BlockingWaitStrategy</h2><p>Disruptor默认策略</p>\n<p>对<code>EventProcessor</code>使用等待条件的锁和条件变量的阻塞策略。</p>\n<p><strong>当吞吐量和低延迟不如CPU资源那么重要时，可以使用此策略。</strong></p>\n<h2 id=\"LiteBlockingWaitStrategy\"><a href=\"#LiteBlockingWaitStrategy\" class=\"headerlink\" title=\"LiteBlockingWaitStrategy\"></a>LiteBlockingWaitStrategy</h2><p><strong>BlockingWaitStrategy的变体</strong>，在无竞争的情况下尝试消除条件唤醒。 显示微基准测试的性能改进。</p>\n<p> 但是，由于我尚未完全证明锁省略码的正确性，因此应将这种等待策略视为实验性的。</p>\n<h2 id=\"BusySpinWaitStrategy\"><a href=\"#BusySpinWaitStrategy\" class=\"headerlink\" title=\"BusySpinWaitStrategy\"></a>BusySpinWaitStrategy</h2><p>繁忙旋转策略，该繁忙旋转策略对<code>EventProcessor</code>的障碍使用繁忙的旋转循环。</p>\n<p><strong>此策略将使用CPU资源来避免可能导致延迟抖动的系统调用。 最好当线程可以绑定到特定的CPU内核时使用。</strong></p>\n<h2 id=\"TimeoutBlockingWaitStrategy\"><a href=\"#TimeoutBlockingWaitStrategy\" class=\"headerlink\" title=\"TimeoutBlockingWaitStrategy\"></a>TimeoutBlockingWaitStrategy</h2><h2 id=\"LiteTimeoutBlockingWaitStrategy\"><a href=\"#LiteTimeoutBlockingWaitStrategy\" class=\"headerlink\" title=\"LiteTimeoutBlockingWaitStrategy\"></a>LiteTimeoutBlockingWaitStrategy</h2><p><strong>TimeoutBlockingWaitStrategy的变体</strong>，在无竞争的情况下尝试消除条件唤醒。</p>\n<h2 id=\"PhasedBackoffWaitStrategy\"><a href=\"#PhasedBackoffWaitStrategy\" class=\"headerlink\" title=\"PhasedBackoffWaitStrategy\"></a>PhasedBackoffWaitStrategy</h2><p>在屏障上等待EventProcessor的分阶段等待策略。</p>\n<p>当吞吐量和低延迟不如CPU资源那么重要时，可以使用此策略。<br>旋转，然后屈服，然后使用配置的后备WaitStrategy等待。</p>\n<h2 id=\"SleepingWaitStrategy\"><a href=\"#SleepingWaitStrategy\" class=\"headerlink\" title=\"SleepingWaitStrategy\"></a>SleepingWaitStrategy</h2><p>最初启动的休眠策略，然后使用Thread.yield（），最后在EventProcessor等待屏障时，休眠操作系统和JVM将允许的最小数量的nanos。</p>\n<p>此策略是性能和CPU资源之间的良好折衷。<br>安静时段后可能会出现延迟峰值。 这也将减少对生产线程的影响，因为它不需要发出信号通知任何条件变量来唤醒事件处理线程。</p>\n<h2 id=\"YieldingWaitStrategy\"><a href=\"#YieldingWaitStrategy\" class=\"headerlink\" title=\"YieldingWaitStrategy\"></a>YieldingWaitStrategy</h2><p>在初始旋转后，使用Thread.yield（）的EventProcessor在屏障上等待。</p>\n<p>如果其他线程需要CPU资源，则此策略将使用100％CPU，但比忙碌的自旋策略更容易放弃CPU。</p>\n"},{"title":"Java类初始化","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:01:03.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## 代码结果？\n\n首先，我们来看看下面的代码的输出的结果，可以先试着想一下\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725004926.png)\n\n\n\n```java\n//结果\nCode\n公众号\n```\n\n这时候有同学就会想，以前不是说类加载时，静态代码块都会加载的嘛！怎么`Test1`里的静态代码块没有加载呢？下面就来看看到底怎么回事\n\n## 类的生命周期\n\n了解类加载前，首先熟悉一下类的生命周期\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725003859.png)\n\n这里注意几个点：\n\n- `解析阶段`可以在`初始化阶段`之后，这是为了支持Java语言的运行时绑定特性（也称为`动态绑定`或`晚期绑定`）\n- 这些阶段通常都是互相交叉地混合进行的，会在一个阶段执行的过程中调用、激活另一个阶段。\n\n## 初始化和实例化\n\n我相信很多人跟我刚开始一样，搞不清他们两个的区别，搞不清`new`一个对象，到底是对这个对象进行了初始化还是实例化呢？\n\n- `初始化`：是完成程序执行前的准备工作。在这个阶段，静态的（变量，方法，代码块）会被执行。同时在会开辟一块存储空间用来存放静态的数据。初始化只在类加载的时候执行`一次`。\n\n- `实例化`：是指创建一个对象的过程。这个过程中会在堆中开辟内存，将一些非静态的方法，变量存放在里面。在程序执行的过程中，可以创建多个对象，既多次实例化。每次实例化都会开辟一块新的内存。\n\n  ![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725183421.png)\n\n\n\n## 类的初始化\n\n《Java虚拟机规范》中并没有对`加载`进行强制约束，这点可以交给虚拟机的具体实现来自由把握。但是对于`初始化阶段`，《Java虚拟机规范》则是严格规定了有且只有`六种情况`必须立即对类进行“初始化”（而加载、验证、准备自然需要在此之前开始）：\n\n- 遇到`new`、`getstatic`、`putstatic`或`invokestatic`这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。那到底什么时候能够生成这些指令呢？其实看下字节码就都明白了\n\n  ![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725172134.png)\n\n- 使用`java.lang.reflect`包的方法对类型进行`反射调用`的时候，如果类型没有进行过初始化，则需要先触发其初始化。\n- 当初始化类的时候，如果发现其`父类`还没有进行过初始化，则需要先触发其父类的初始化。\n- 当虚拟机启动时，用户需要指定一个要执行的`主类`（包含main()方法的那个类），虚拟机会先初始化这个主类。\n- 当使用JDK 7新加入的动态语言支持时，如果一个`java.lang.invoke.MethodHandle`实例最后的解析结果为`REF_getStatic`、`REF_putStatic`、`REF_invokeStatic`、`REF_newInvokeSpecial`四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。\n- 当一个接口中定义了`JDK 8`新加入的默认方法（被`default关键字`修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。\n\n> `java.lang.invoke.MethodHandle` 是`JDK7`中新加入类似反射功能的一个类\n\n\n\n## 被动引用\n\n对于以上这六种会触发类型进行`初始化`的场景，《Java虚拟机规范》中使用了一个非常强烈的限定语——“有且只有”，这六种场景中的行为称为对一个类型进行`主动引用`。除此之外，所有引用类型的方式都不会触发初始化，称为`被动引用。`\n\n像文章一开始的代码，就属于被动引用，对于静态字段，**只有直接定义这个字段的类才会被初始化**，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。\n\n\n\n### 例子1--对象数组\n\n直接上图\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725184328.png)\n\n以上代码执行后并不会输出`灰色`两个字，因为创建对象数组时并没有去初始化`Test1`这个类，而是用`anewarray`字节码指令去初始化了另外一个类，它是一个由虚拟机自动生成的、直接继承于java.lang.Object的子类。\n\n\n\n> 拓展：数组越界检查没有封装在数组元素的访问类中，而是封装在数组访问的`xaload`,`xastore`字节码指令中\n\n### 例子2--final修饰的静态字段\n\n- 被`final`修饰的静态字段\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725194122.png)\n\n此时运行该代码时，只会输出`灰色Code`字样，`Test1`并没有触发初始化阶段。这是因为在`编译阶段`通过`常量传播优化`，已经将此常量的值`灰色Code`直接存储在`ClassLoadTest`类的常量池中，所以当`ClassLoadTest`类调用`Test1`里的`value`时，都变成了对自身常量池的调用，和`Test1`类没有任何关系。\n\n\n\n- 没有`final`修饰的静态字段\n\n  ![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725194514.png)\n\n没有使用`final`修饰的静态变量，字节码出现了`getstatic`，所以触发`Test1`的初始化阶段，此时运行结果将会输出`灰色`和`灰色Code`","source":"_posts/java/jvm/java-class-init.md","raw":"---\ntitle: Java类初始化\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:01:03\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\n- Java\ncategories:\n- JVM\n---\n\n\n\n## 代码结果？\n\n首先，我们来看看下面的代码的输出的结果，可以先试着想一下\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725004926.png)\n\n\n\n```java\n//结果\nCode\n公众号\n```\n\n这时候有同学就会想，以前不是说类加载时，静态代码块都会加载的嘛！怎么`Test1`里的静态代码块没有加载呢？下面就来看看到底怎么回事\n\n## 类的生命周期\n\n了解类加载前，首先熟悉一下类的生命周期\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725003859.png)\n\n这里注意几个点：\n\n- `解析阶段`可以在`初始化阶段`之后，这是为了支持Java语言的运行时绑定特性（也称为`动态绑定`或`晚期绑定`）\n- 这些阶段通常都是互相交叉地混合进行的，会在一个阶段执行的过程中调用、激活另一个阶段。\n\n## 初始化和实例化\n\n我相信很多人跟我刚开始一样，搞不清他们两个的区别，搞不清`new`一个对象，到底是对这个对象进行了初始化还是实例化呢？\n\n- `初始化`：是完成程序执行前的准备工作。在这个阶段，静态的（变量，方法，代码块）会被执行。同时在会开辟一块存储空间用来存放静态的数据。初始化只在类加载的时候执行`一次`。\n\n- `实例化`：是指创建一个对象的过程。这个过程中会在堆中开辟内存，将一些非静态的方法，变量存放在里面。在程序执行的过程中，可以创建多个对象，既多次实例化。每次实例化都会开辟一块新的内存。\n\n  ![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725183421.png)\n\n\n\n## 类的初始化\n\n《Java虚拟机规范》中并没有对`加载`进行强制约束，这点可以交给虚拟机的具体实现来自由把握。但是对于`初始化阶段`，《Java虚拟机规范》则是严格规定了有且只有`六种情况`必须立即对类进行“初始化”（而加载、验证、准备自然需要在此之前开始）：\n\n- 遇到`new`、`getstatic`、`putstatic`或`invokestatic`这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。那到底什么时候能够生成这些指令呢？其实看下字节码就都明白了\n\n  ![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725172134.png)\n\n- 使用`java.lang.reflect`包的方法对类型进行`反射调用`的时候，如果类型没有进行过初始化，则需要先触发其初始化。\n- 当初始化类的时候，如果发现其`父类`还没有进行过初始化，则需要先触发其父类的初始化。\n- 当虚拟机启动时，用户需要指定一个要执行的`主类`（包含main()方法的那个类），虚拟机会先初始化这个主类。\n- 当使用JDK 7新加入的动态语言支持时，如果一个`java.lang.invoke.MethodHandle`实例最后的解析结果为`REF_getStatic`、`REF_putStatic`、`REF_invokeStatic`、`REF_newInvokeSpecial`四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。\n- 当一个接口中定义了`JDK 8`新加入的默认方法（被`default关键字`修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。\n\n> `java.lang.invoke.MethodHandle` 是`JDK7`中新加入类似反射功能的一个类\n\n\n\n## 被动引用\n\n对于以上这六种会触发类型进行`初始化`的场景，《Java虚拟机规范》中使用了一个非常强烈的限定语——“有且只有”，这六种场景中的行为称为对一个类型进行`主动引用`。除此之外，所有引用类型的方式都不会触发初始化，称为`被动引用。`\n\n像文章一开始的代码，就属于被动引用，对于静态字段，**只有直接定义这个字段的类才会被初始化**，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。\n\n\n\n### 例子1--对象数组\n\n直接上图\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725184328.png)\n\n以上代码执行后并不会输出`灰色`两个字，因为创建对象数组时并没有去初始化`Test1`这个类，而是用`anewarray`字节码指令去初始化了另外一个类，它是一个由虚拟机自动生成的、直接继承于java.lang.Object的子类。\n\n\n\n> 拓展：数组越界检查没有封装在数组元素的访问类中，而是封装在数组访问的`xaload`,`xastore`字节码指令中\n\n### 例子2--final修饰的静态字段\n\n- 被`final`修饰的静态字段\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725194122.png)\n\n此时运行该代码时，只会输出`灰色Code`字样，`Test1`并没有触发初始化阶段。这是因为在`编译阶段`通过`常量传播优化`，已经将此常量的值`灰色Code`直接存储在`ClassLoadTest`类的常量池中，所以当`ClassLoadTest`类调用`Test1`里的`value`时，都变成了对自身常量池的调用，和`Test1`类没有任何关系。\n\n\n\n- 没有`final`修饰的静态字段\n\n  ![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725194514.png)\n\n没有使用`final`修饰的静态变量，字节码出现了`getstatic`，所以触发`Test1`的初始化阶段，此时运行结果将会输出`灰色`和`灰色Code`","slug":"java/jvm/java-class-init","published":1,"updated":"2021-10-08T08:26:10.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ei7007hvpuc77fv5lpo","content":"<h2 id=\"代码结果？\"><a href=\"#代码结果？\" class=\"headerlink\" title=\"代码结果？\"></a>代码结果？</h2><p>首先，我们来看看下面的代码的输出的结果，可以先试着想一下</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725004926.png\" alt=\"图片\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\">Code</span><br><span class=\"line\">公众号</span><br></pre></td></tr></table></figure>\n\n<p>这时候有同学就会想，以前不是说类加载时，静态代码块都会加载的嘛！怎么<code>Test1</code>里的静态代码块没有加载呢？下面就来看看到底怎么回事</p>\n<h2 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h2><p>了解类加载前，首先熟悉一下类的生命周期</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725003859.png\" alt=\"图片\"></p>\n<p>这里注意几个点：</p>\n<ul>\n<li><code>解析阶段</code>可以在<code>初始化阶段</code>之后，这是为了支持Java语言的运行时绑定特性（也称为<code>动态绑定</code>或<code>晚期绑定</code>）</li>\n<li>这些阶段通常都是互相交叉地混合进行的，会在一个阶段执行的过程中调用、激活另一个阶段。</li>\n</ul>\n<h2 id=\"初始化和实例化\"><a href=\"#初始化和实例化\" class=\"headerlink\" title=\"初始化和实例化\"></a>初始化和实例化</h2><p>我相信很多人跟我刚开始一样，搞不清他们两个的区别，搞不清<code>new</code>一个对象，到底是对这个对象进行了初始化还是实例化呢？</p>\n<ul>\n<li><p><code>初始化</code>：是完成程序执行前的准备工作。在这个阶段，静态的（变量，方法，代码块）会被执行。同时在会开辟一块存储空间用来存放静态的数据。初始化只在类加载的时候执行<code>一次</code>。</p>\n</li>\n<li><p><code>实例化</code>：是指创建一个对象的过程。这个过程中会在堆中开辟内存，将一些非静态的方法，变量存放在里面。在程序执行的过程中，可以创建多个对象，既多次实例化。每次实例化都会开辟一块新的内存。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725183421.png\" alt=\"图片\"></p>\n</li>\n</ul>\n<h2 id=\"类的初始化\"><a href=\"#类的初始化\" class=\"headerlink\" title=\"类的初始化\"></a>类的初始化</h2><p>《Java虚拟机规范》中并没有对<code>加载</code>进行强制约束，这点可以交给虚拟机的具体实现来自由把握。但是对于<code>初始化阶段</code>，《Java虚拟机规范》则是严格规定了有且只有<code>六种情况</code>必须立即对类进行“初始化”（而加载、验证、准备自然需要在此之前开始）：</p>\n<ul>\n<li><p>遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code>或<code>invokestatic</code>这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。那到底什么时候能够生成这些指令呢？其实看下字节码就都明白了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725172134.png\" alt=\"图片\"></p>\n</li>\n<li><p>使用<code>java.lang.reflect</code>包的方法对类型进行<code>反射调用</code>的时候，如果类型没有进行过初始化，则需要先触发其初始化。</p>\n</li>\n<li><p>当初始化类的时候，如果发现其<code>父类</code>还没有进行过初始化，则需要先触发其父类的初始化。</p>\n</li>\n<li><p>当虚拟机启动时，用户需要指定一个要执行的<code>主类</code>（包含main()方法的那个类），虚拟机会先初始化这个主类。</p>\n</li>\n<li><p>当使用JDK 7新加入的动态语言支持时，如果一个<code>java.lang.invoke.MethodHandle</code>实例最后的解析结果为<code>REF_getStatic</code>、<code>REF_putStatic</code>、<code>REF_invokeStatic</code>、<code>REF_newInvokeSpecial</code>四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。</p>\n</li>\n<li><p>当一个接口中定义了<code>JDK 8</code>新加入的默认方法（被<code>default关键字</code>修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。</p>\n</li>\n</ul>\n<blockquote>\n<p><code>java.lang.invoke.MethodHandle</code> 是<code>JDK7</code>中新加入类似反射功能的一个类</p>\n</blockquote>\n<h2 id=\"被动引用\"><a href=\"#被动引用\" class=\"headerlink\" title=\"被动引用\"></a>被动引用</h2><p>对于以上这六种会触发类型进行<code>初始化</code>的场景，《Java虚拟机规范》中使用了一个非常强烈的限定语——“有且只有”，这六种场景中的行为称为对一个类型进行<code>主动引用</code>。除此之外，所有引用类型的方式都不会触发初始化，称为<code>被动引用。</code></p>\n<p>像文章一开始的代码，就属于被动引用，对于静态字段，<strong>只有直接定义这个字段的类才会被初始化</strong>，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。</p>\n<h3 id=\"例子1–对象数组\"><a href=\"#例子1–对象数组\" class=\"headerlink\" title=\"例子1–对象数组\"></a>例子1–对象数组</h3><p>直接上图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725184328.png\" alt=\"图片\"></p>\n<p>以上代码执行后并不会输出<code>灰色</code>两个字，因为创建对象数组时并没有去初始化<code>Test1</code>这个类，而是用<code>anewarray</code>字节码指令去初始化了另外一个类，它是一个由虚拟机自动生成的、直接继承于java.lang.Object的子类。</p>\n<blockquote>\n<p>拓展：数组越界检查没有封装在数组元素的访问类中，而是封装在数组访问的<code>xaload</code>,<code>xastore</code>字节码指令中</p>\n</blockquote>\n<h3 id=\"例子2–final修饰的静态字段\"><a href=\"#例子2–final修饰的静态字段\" class=\"headerlink\" title=\"例子2–final修饰的静态字段\"></a>例子2–final修饰的静态字段</h3><ul>\n<li>被<code>final</code>修饰的静态字段</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725194122.png\" alt=\"图片\"></p>\n<p>此时运行该代码时，只会输出<code>灰色Code</code>字样，<code>Test1</code>并没有触发初始化阶段。这是因为在<code>编译阶段</code>通过<code>常量传播优化</code>，已经将此常量的值<code>灰色Code</code>直接存储在<code>ClassLoadTest</code>类的常量池中，所以当<code>ClassLoadTest</code>类调用<code>Test1</code>里的<code>value</code>时，都变成了对自身常量池的调用，和<code>Test1</code>类没有任何关系。</p>\n<ul>\n<li><p>没有<code>final</code>修饰的静态字段</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725194514.png\" alt=\"图片\"></p>\n</li>\n</ul>\n<p>没有使用<code>final</code>修饰的静态变量，字节码出现了<code>getstatic</code>，所以触发<code>Test1</code>的初始化阶段，此时运行结果将会输出<code>灰色</code>和<code>灰色Code</code></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"代码结果？\"><a href=\"#代码结果？\" class=\"headerlink\" title=\"代码结果？\"></a>代码结果？</h2><p>首先，我们来看看下面的代码的输出的结果，可以先试着想一下</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725004926.png\" alt=\"图片\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\">Code</span><br><span class=\"line\">公众号</span><br></pre></td></tr></table></figure>\n\n<p>这时候有同学就会想，以前不是说类加载时，静态代码块都会加载的嘛！怎么<code>Test1</code>里的静态代码块没有加载呢？下面就来看看到底怎么回事</p>\n<h2 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h2><p>了解类加载前，首先熟悉一下类的生命周期</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725003859.png\" alt=\"图片\"></p>\n<p>这里注意几个点：</p>\n<ul>\n<li><code>解析阶段</code>可以在<code>初始化阶段</code>之后，这是为了支持Java语言的运行时绑定特性（也称为<code>动态绑定</code>或<code>晚期绑定</code>）</li>\n<li>这些阶段通常都是互相交叉地混合进行的，会在一个阶段执行的过程中调用、激活另一个阶段。</li>\n</ul>\n<h2 id=\"初始化和实例化\"><a href=\"#初始化和实例化\" class=\"headerlink\" title=\"初始化和实例化\"></a>初始化和实例化</h2><p>我相信很多人跟我刚开始一样，搞不清他们两个的区别，搞不清<code>new</code>一个对象，到底是对这个对象进行了初始化还是实例化呢？</p>\n<ul>\n<li><p><code>初始化</code>：是完成程序执行前的准备工作。在这个阶段，静态的（变量，方法，代码块）会被执行。同时在会开辟一块存储空间用来存放静态的数据。初始化只在类加载的时候执行<code>一次</code>。</p>\n</li>\n<li><p><code>实例化</code>：是指创建一个对象的过程。这个过程中会在堆中开辟内存，将一些非静态的方法，变量存放在里面。在程序执行的过程中，可以创建多个对象，既多次实例化。每次实例化都会开辟一块新的内存。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725183421.png\" alt=\"图片\"></p>\n</li>\n</ul>\n<h2 id=\"类的初始化\"><a href=\"#类的初始化\" class=\"headerlink\" title=\"类的初始化\"></a>类的初始化</h2><p>《Java虚拟机规范》中并没有对<code>加载</code>进行强制约束，这点可以交给虚拟机的具体实现来自由把握。但是对于<code>初始化阶段</code>，《Java虚拟机规范》则是严格规定了有且只有<code>六种情况</code>必须立即对类进行“初始化”（而加载、验证、准备自然需要在此之前开始）：</p>\n<ul>\n<li><p>遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code>或<code>invokestatic</code>这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。那到底什么时候能够生成这些指令呢？其实看下字节码就都明白了</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725172134.png\" alt=\"图片\"></p>\n</li>\n<li><p>使用<code>java.lang.reflect</code>包的方法对类型进行<code>反射调用</code>的时候，如果类型没有进行过初始化，则需要先触发其初始化。</p>\n</li>\n<li><p>当初始化类的时候，如果发现其<code>父类</code>还没有进行过初始化，则需要先触发其父类的初始化。</p>\n</li>\n<li><p>当虚拟机启动时，用户需要指定一个要执行的<code>主类</code>（包含main()方法的那个类），虚拟机会先初始化这个主类。</p>\n</li>\n<li><p>当使用JDK 7新加入的动态语言支持时，如果一个<code>java.lang.invoke.MethodHandle</code>实例最后的解析结果为<code>REF_getStatic</code>、<code>REF_putStatic</code>、<code>REF_invokeStatic</code>、<code>REF_newInvokeSpecial</code>四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。</p>\n</li>\n<li><p>当一个接口中定义了<code>JDK 8</code>新加入的默认方法（被<code>default关键字</code>修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。</p>\n</li>\n</ul>\n<blockquote>\n<p><code>java.lang.invoke.MethodHandle</code> 是<code>JDK7</code>中新加入类似反射功能的一个类</p>\n</blockquote>\n<h2 id=\"被动引用\"><a href=\"#被动引用\" class=\"headerlink\" title=\"被动引用\"></a>被动引用</h2><p>对于以上这六种会触发类型进行<code>初始化</code>的场景，《Java虚拟机规范》中使用了一个非常强烈的限定语——“有且只有”，这六种场景中的行为称为对一个类型进行<code>主动引用</code>。除此之外，所有引用类型的方式都不会触发初始化，称为<code>被动引用。</code></p>\n<p>像文章一开始的代码，就属于被动引用，对于静态字段，<strong>只有直接定义这个字段的类才会被初始化</strong>，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。</p>\n<h3 id=\"例子1–对象数组\"><a href=\"#例子1–对象数组\" class=\"headerlink\" title=\"例子1–对象数组\"></a>例子1–对象数组</h3><p>直接上图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725184328.png\" alt=\"图片\"></p>\n<p>以上代码执行后并不会输出<code>灰色</code>两个字，因为创建对象数组时并没有去初始化<code>Test1</code>这个类，而是用<code>anewarray</code>字节码指令去初始化了另外一个类，它是一个由虚拟机自动生成的、直接继承于java.lang.Object的子类。</p>\n<blockquote>\n<p>拓展：数组越界检查没有封装在数组元素的访问类中，而是封装在数组访问的<code>xaload</code>,<code>xastore</code>字节码指令中</p>\n</blockquote>\n<h3 id=\"例子2–final修饰的静态字段\"><a href=\"#例子2–final修饰的静态字段\" class=\"headerlink\" title=\"例子2–final修饰的静态字段\"></a>例子2–final修饰的静态字段</h3><ul>\n<li>被<code>final</code>修饰的静态字段</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725194122.png\" alt=\"图片\"></p>\n<p>此时运行该代码时，只会输出<code>灰色Code</code>字样，<code>Test1</code>并没有触发初始化阶段。这是因为在<code>编译阶段</code>通过<code>常量传播优化</code>，已经将此常量的值<code>灰色Code</code>直接存储在<code>ClassLoadTest</code>类的常量池中，所以当<code>ClassLoadTest</code>类调用<code>Test1</code>里的<code>value</code>时，都变成了对自身常量池的调用，和<code>Test1</code>类没有任何关系。</p>\n<ul>\n<li><p>没有<code>final</code>修饰的静态字段</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200725194514.png\" alt=\"图片\"></p>\n</li>\n</ul>\n<p>没有使用<code>final</code>修饰的静态变量，字节码出现了<code>getstatic</code>，所以触发<code>Test1</code>的初始化阶段，此时运行结果将会输出<code>灰色</code>和<code>灰色Code</code></p>\n"},{"title":"JVM中的双亲委派机制","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:02:34.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## 四种类加载器\n\n- 启动类加载器(Bootstrap Class Loader )：加载`$JAVA_HOME/jre/lib`目录下的jar包\n- 拓展类加载器(Extension Class Loader)：加载`$JAVA_HOME/jre/lib/ext`目录下的jar包\n- 应用程序类加载器(Application Class Loader)：加载`ClassPath`目录下的jar包\n- 自定义类加载器(User Class Loader)：加载自定义指定目录下的jar包\n\n## 双亲委派机制\n\n>  如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726204658.jpg)\n\n## 代码示例\n\n> 当获取`Bootstrap class loader`的时候，输出了`null`，说明**开发者无法通过引用操作启动类加载器**\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726210142.png)\n\n\n\n## 双亲委派机制的作用\n\n每个加载器都只需要固定的加载自己管理范围内的类，这样的好处就是`保证了Java体系的稳定`，不然的话你自己定义一个`String`类的话，这样系统中就会有两个`String`类，如果没有双亲委派机制的话，系统就不知道到底该加载哪一个，这样系统就变得一片混乱了。\n\n## 破坏双亲委派机制\n\n双亲委派机制是Java设计者推荐给开发者们的类加载实现方式，并不是一个强制性约束的模型，所以也可以人为的破坏这个机制。\n\n- 源码\n\n> 源码在`java.lang.ClassLoader`有兴趣的可以去看下\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726212038.png)\n\n可以看到，就这短短的几行代码，就实现了听起来很高大上的`双亲委派机制`，所以破坏双亲委派机制的话，就直接重写`loadClass`方法就可以了。","source":"_posts/java/jvm/java-class-load-1.md","raw":"---\ntitle: JVM中的双亲委派机制\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:02:34\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\n- Java\ncategories:\n- JVM\n---\n\n\n\n## 四种类加载器\n\n- 启动类加载器(Bootstrap Class Loader )：加载`$JAVA_HOME/jre/lib`目录下的jar包\n- 拓展类加载器(Extension Class Loader)：加载`$JAVA_HOME/jre/lib/ext`目录下的jar包\n- 应用程序类加载器(Application Class Loader)：加载`ClassPath`目录下的jar包\n- 自定义类加载器(User Class Loader)：加载自定义指定目录下的jar包\n\n## 双亲委派机制\n\n>  如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726204658.jpg)\n\n## 代码示例\n\n> 当获取`Bootstrap class loader`的时候，输出了`null`，说明**开发者无法通过引用操作启动类加载器**\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726210142.png)\n\n\n\n## 双亲委派机制的作用\n\n每个加载器都只需要固定的加载自己管理范围内的类，这样的好处就是`保证了Java体系的稳定`，不然的话你自己定义一个`String`类的话，这样系统中就会有两个`String`类，如果没有双亲委派机制的话，系统就不知道到底该加载哪一个，这样系统就变得一片混乱了。\n\n## 破坏双亲委派机制\n\n双亲委派机制是Java设计者推荐给开发者们的类加载实现方式，并不是一个强制性约束的模型，所以也可以人为的破坏这个机制。\n\n- 源码\n\n> 源码在`java.lang.ClassLoader`有兴趣的可以去看下\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726212038.png)\n\n可以看到，就这短短的几行代码，就实现了听起来很高大上的`双亲委派机制`，所以破坏双亲委派机制的话，就直接重写`loadClass`方法就可以了。","slug":"java/jvm/java-class-load-1","published":1,"updated":"2021-10-08T08:26:34.215Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ei8007lvpucavqy7cpw","content":"<h2 id=\"四种类加载器\"><a href=\"#四种类加载器\" class=\"headerlink\" title=\"四种类加载器\"></a>四种类加载器</h2><ul>\n<li>启动类加载器(Bootstrap Class Loader )：加载<code>$JAVA_HOME/jre/lib</code>目录下的jar包</li>\n<li>拓展类加载器(Extension Class Loader)：加载<code>$JAVA_HOME/jre/lib/ext</code>目录下的jar包</li>\n<li>应用程序类加载器(Application Class Loader)：加载<code>ClassPath</code>目录下的jar包</li>\n<li>自定义类加载器(User Class Loader)：加载自定义指定目录下的jar包</li>\n</ul>\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><blockquote>\n<p> 如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726204658.jpg\" alt=\"图片\"></p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><blockquote>\n<p>当获取<code>Bootstrap class loader</code>的时候，输出了<code>null</code>，说明<strong>开发者无法通过引用操作启动类加载器</strong></p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726210142.png\" alt=\"图片\"></p>\n<h2 id=\"双亲委派机制的作用\"><a href=\"#双亲委派机制的作用\" class=\"headerlink\" title=\"双亲委派机制的作用\"></a>双亲委派机制的作用</h2><p>每个加载器都只需要固定的加载自己管理范围内的类，这样的好处就是<code>保证了Java体系的稳定</code>，不然的话你自己定义一个<code>String</code>类的话，这样系统中就会有两个<code>String</code>类，如果没有双亲委派机制的话，系统就不知道到底该加载哪一个，这样系统就变得一片混乱了。</p>\n<h2 id=\"破坏双亲委派机制\"><a href=\"#破坏双亲委派机制\" class=\"headerlink\" title=\"破坏双亲委派机制\"></a>破坏双亲委派机制</h2><p>双亲委派机制是Java设计者推荐给开发者们的类加载实现方式，并不是一个强制性约束的模型，所以也可以人为的破坏这个机制。</p>\n<ul>\n<li>源码</li>\n</ul>\n<blockquote>\n<p>源码在<code>java.lang.ClassLoader</code>有兴趣的可以去看下</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726212038.png\" alt=\"图片\"></p>\n<p>可以看到，就这短短的几行代码，就实现了听起来很高大上的<code>双亲委派机制</code>，所以破坏双亲委派机制的话，就直接重写<code>loadClass</code>方法就可以了。</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"四种类加载器\"><a href=\"#四种类加载器\" class=\"headerlink\" title=\"四种类加载器\"></a>四种类加载器</h2><ul>\n<li>启动类加载器(Bootstrap Class Loader )：加载<code>$JAVA_HOME/jre/lib</code>目录下的jar包</li>\n<li>拓展类加载器(Extension Class Loader)：加载<code>$JAVA_HOME/jre/lib/ext</code>目录下的jar包</li>\n<li>应用程序类加载器(Application Class Loader)：加载<code>ClassPath</code>目录下的jar包</li>\n<li>自定义类加载器(User Class Loader)：加载自定义指定目录下的jar包</li>\n</ul>\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><blockquote>\n<p> 如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726204658.jpg\" alt=\"图片\"></p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><blockquote>\n<p>当获取<code>Bootstrap class loader</code>的时候，输出了<code>null</code>，说明<strong>开发者无法通过引用操作启动类加载器</strong></p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726210142.png\" alt=\"图片\"></p>\n<h2 id=\"双亲委派机制的作用\"><a href=\"#双亲委派机制的作用\" class=\"headerlink\" title=\"双亲委派机制的作用\"></a>双亲委派机制的作用</h2><p>每个加载器都只需要固定的加载自己管理范围内的类，这样的好处就是<code>保证了Java体系的稳定</code>，不然的话你自己定义一个<code>String</code>类的话，这样系统中就会有两个<code>String</code>类，如果没有双亲委派机制的话，系统就不知道到底该加载哪一个，这样系统就变得一片混乱了。</p>\n<h2 id=\"破坏双亲委派机制\"><a href=\"#破坏双亲委派机制\" class=\"headerlink\" title=\"破坏双亲委派机制\"></a>破坏双亲委派机制</h2><p>双亲委派机制是Java设计者推荐给开发者们的类加载实现方式，并不是一个强制性约束的模型，所以也可以人为的破坏这个机制。</p>\n<ul>\n<li>源码</li>\n</ul>\n<blockquote>\n<p>源码在<code>java.lang.ClassLoader</code>有兴趣的可以去看下</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726212038.png\" alt=\"图片\"></p>\n<p>可以看到，就这短短的几行代码，就实现了听起来很高大上的<code>双亲委派机制</code>，所以破坏双亲委派机制的话，就直接重写<code>loadClass</code>方法就可以了。</p>\n"},{"title":"JVM类加载过程","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:04:22.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## 加载\n\n\n\n1. 通过一个类的全限定名(例如：`java.lang.String`)来获取定义此类的二进制字节流。\n\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n\n2. 在内存中生成一个代表这个类的`java.lang.Class`对象，作为方法区这个类的各种数据的访问入口。\n\n> 对于数组类而言，情况就有所不同，数组类本身不通过类加载器创建，它是由Java虚拟机直接在内存中动态构造出来的。\n\n\n\n- 从ZIP压缩包中读取，这很常见，最终成为日后JAR、EAR、WAR格式的基础。\n\n- 从网络中获取，这种场景最典型的应用就是Web Applet。\n\n- 运行时计算生成，这种场景使用得最多的就是动态代理技术，在java.lang.reflect.Proxy中，就是用了ProxyGenerator.generateProxyClass()来为特定接口生成形式为“*$Proxy”的代理类的二进制字节流。\n\n- 由其他文件生成，典型场景是JSP应用，由JSP文件生成对应的Class文件。\n\n- 从数据库中读取，这种场景相对少见些，例如有些中间件服务器（如SAP Netweaver）可以选择把程序安装到数据库中来完成程序代码在集群间的分发。\n\n- 可以从加密文件中获取，这是典型的防Class文件被反编译的保护措施，通过加载时解密Class文件来保障程序运行逻辑不被窥探。\n\n\n\n## 验证\n\n- 文件格式验证\n  - 是否以魔数0xCAFEBABE开头。\n  - 主、次版本号是否在当前Java虚拟机接受范围之内\n  - 常量池的常量中是否有不被支持的常量类型（检查常量tag标志）。\n  - 指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。\n  - CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据。\n  - ·Class文件中各个部分及文件本身是否有被删除的或附加的其他信息\n  - ......\n- 元数据验证\n  - 这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。\n  - 这个类的父类是否继承了不允许被继承的类（被final修饰的类）。\n  - 如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。\n  - 类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等）。\n  - ......\n- 字节码验证\n  - 保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似于“在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中”这样的情况。\n  - 保证任何跳转指令都不会跳转到方法体以外的字节码指令上。\n  - 保证方法体中的类型转换总是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的。\n  - ......\n- 符号引用验证\n  - 符号引用中通过字符串描述的全限定名是否能找到对应的类\n  - 在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。\n  - 符号引用中的类、字段、方法的可访问性（private、protected、public、<package>）是否可被当前类访问。\n  - ......\n- \n\n## 准备\n\n准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值的阶段\n\n例子：\n\n```java\n// 变量value在准备阶段过后的初始值为0而不是123\n// 因为这时尚未开始执行任何Java方法 value赋值为123的动作要到类的初始化阶段才会被执行\npublic static int value = 123\n```\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726220517.jpeg)\n\n## 解析\n\n解析阶段是Java虚拟机将常量池内的`符号引用`替换为`直接引用`的过程\n\n- **符号引用（Symbolic References）**：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定是已经加载到虚拟机内存当中的内容。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在《Java虚拟机规范》的Class文件格式中。\n\n  > 下面红框中的都属于符号引用\n\n  ![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726220833.png)\n\n- **直接引用（Direct References）**：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机的内存中存在。\n\n## 初始化\n\n参考：[jvm类初始化](https://mp.weixin.qq.com/s?__biz=MzAxMTc4NDUyOA==&tempkey=MTA3MV9NS1dJTVFnVDhRQkRid2hBSDB4aUE2X3Nham5Lcm9VMlpXVlIzTGd4dkk0eDNNb29iV3NlaGh0blA3Z25CcmJ6cXBLYzl5Z09zakZSakNTeFdTOUtkbUQzZnNST0pnUUNTOEhkb1J3Ul84MDhPaEw1bGZSVm9TdXNteG5DLUowSDdmUGxYajkxSWFETENkZ0h0NTY1UkJfOC0yV0laXzdyakNfVDdnfn4%3D&chksm=03a1657734d6ec6126a1c6a802506964f632a2dff53f123de74de0f865b83ef11a9b338a187d#rd)","source":"_posts/java/jvm/java-class-load-2.md","raw":"---\ntitle: JVM类加载过程\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:04:22\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\n- Java\ncategories:\n- JVM\n---\n\n\n\n## 加载\n\n\n\n1. 通过一个类的全限定名(例如：`java.lang.String`)来获取定义此类的二进制字节流。\n\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n\n2. 在内存中生成一个代表这个类的`java.lang.Class`对象，作为方法区这个类的各种数据的访问入口。\n\n> 对于数组类而言，情况就有所不同，数组类本身不通过类加载器创建，它是由Java虚拟机直接在内存中动态构造出来的。\n\n\n\n- 从ZIP压缩包中读取，这很常见，最终成为日后JAR、EAR、WAR格式的基础。\n\n- 从网络中获取，这种场景最典型的应用就是Web Applet。\n\n- 运行时计算生成，这种场景使用得最多的就是动态代理技术，在java.lang.reflect.Proxy中，就是用了ProxyGenerator.generateProxyClass()来为特定接口生成形式为“*$Proxy”的代理类的二进制字节流。\n\n- 由其他文件生成，典型场景是JSP应用，由JSP文件生成对应的Class文件。\n\n- 从数据库中读取，这种场景相对少见些，例如有些中间件服务器（如SAP Netweaver）可以选择把程序安装到数据库中来完成程序代码在集群间的分发。\n\n- 可以从加密文件中获取，这是典型的防Class文件被反编译的保护措施，通过加载时解密Class文件来保障程序运行逻辑不被窥探。\n\n\n\n## 验证\n\n- 文件格式验证\n  - 是否以魔数0xCAFEBABE开头。\n  - 主、次版本号是否在当前Java虚拟机接受范围之内\n  - 常量池的常量中是否有不被支持的常量类型（检查常量tag标志）。\n  - 指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。\n  - CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据。\n  - ·Class文件中各个部分及文件本身是否有被删除的或附加的其他信息\n  - ......\n- 元数据验证\n  - 这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。\n  - 这个类的父类是否继承了不允许被继承的类（被final修饰的类）。\n  - 如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。\n  - 类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等）。\n  - ......\n- 字节码验证\n  - 保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似于“在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中”这样的情况。\n  - 保证任何跳转指令都不会跳转到方法体以外的字节码指令上。\n  - 保证方法体中的类型转换总是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的。\n  - ......\n- 符号引用验证\n  - 符号引用中通过字符串描述的全限定名是否能找到对应的类\n  - 在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。\n  - 符号引用中的类、字段、方法的可访问性（private、protected、public、<package>）是否可被当前类访问。\n  - ......\n- \n\n## 准备\n\n准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值的阶段\n\n例子：\n\n```java\n// 变量value在准备阶段过后的初始值为0而不是123\n// 因为这时尚未开始执行任何Java方法 value赋值为123的动作要到类的初始化阶段才会被执行\npublic static int value = 123\n```\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726220517.jpeg)\n\n## 解析\n\n解析阶段是Java虚拟机将常量池内的`符号引用`替换为`直接引用`的过程\n\n- **符号引用（Symbolic References）**：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定是已经加载到虚拟机内存当中的内容。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在《Java虚拟机规范》的Class文件格式中。\n\n  > 下面红框中的都属于符号引用\n\n  ![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726220833.png)\n\n- **直接引用（Direct References）**：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机的内存中存在。\n\n## 初始化\n\n参考：[jvm类初始化](https://mp.weixin.qq.com/s?__biz=MzAxMTc4NDUyOA==&tempkey=MTA3MV9NS1dJTVFnVDhRQkRid2hBSDB4aUE2X3Nham5Lcm9VMlpXVlIzTGd4dkk0eDNNb29iV3NlaGh0blA3Z25CcmJ6cXBLYzl5Z09zakZSakNTeFdTOUtkbUQzZnNST0pnUUNTOEhkb1J3Ul84MDhPaEw1bGZSVm9TdXNteG5DLUowSDdmUGxYajkxSWFETENkZ0h0NTY1UkJfOC0yV0laXzdyakNfVDdnfn4%3D&chksm=03a1657734d6ec6126a1c6a802506964f632a2dff53f123de74de0f865b83ef11a9b338a187d#rd)","slug":"java/jvm/java-class-load-2","published":1,"updated":"2021-10-08T08:26:49.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ei8007ovpuc4c7z35ny","content":"<h2 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h2><ol>\n<li><p>通过一个类的全限定名(例如：<code>java.lang.String</code>)来获取定义此类的二进制字节流。</p>\n</li>\n<li><p>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>\n</li>\n<li><p>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口。</p>\n</li>\n</ol>\n<blockquote>\n<p>对于数组类而言，情况就有所不同，数组类本身不通过类加载器创建，它是由Java虚拟机直接在内存中动态构造出来的。</p>\n</blockquote>\n<ul>\n<li><p>从ZIP压缩包中读取，这很常见，最终成为日后JAR、EAR、WAR格式的基础。</p>\n</li>\n<li><p>从网络中获取，这种场景最典型的应用就是Web Applet。</p>\n</li>\n<li><p>运行时计算生成，这种场景使用得最多的就是动态代理技术，在java.lang.reflect.Proxy中，就是用了ProxyGenerator.generateProxyClass()来为特定接口生成形式为“*$Proxy”的代理类的二进制字节流。</p>\n</li>\n<li><p>由其他文件生成，典型场景是JSP应用，由JSP文件生成对应的Class文件。</p>\n</li>\n<li><p>从数据库中读取，这种场景相对少见些，例如有些中间件服务器（如SAP Netweaver）可以选择把程序安装到数据库中来完成程序代码在集群间的分发。</p>\n</li>\n<li><p>可以从加密文件中获取，这是典型的防Class文件被反编译的保护措施，通过加载时解密Class文件来保障程序运行逻辑不被窥探。</p>\n</li>\n</ul>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><ul>\n<li>文件格式验证<ul>\n<li>是否以魔数0xCAFEBABE开头。</li>\n<li>主、次版本号是否在当前Java虚拟机接受范围之内</li>\n<li>常量池的常量中是否有不被支持的常量类型（检查常量tag标志）。</li>\n<li>指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。</li>\n<li>CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据。</li>\n<li>·Class文件中各个部分及文件本身是否有被删除的或附加的其他信息</li>\n<li>……</li>\n</ul>\n</li>\n<li>元数据验证<ul>\n<li>这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。</li>\n<li>这个类的父类是否继承了不允许被继承的类（被final修饰的类）。</li>\n<li>如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。</li>\n<li>类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等）。</li>\n<li>……</li>\n</ul>\n</li>\n<li>字节码验证<ul>\n<li>保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似于“在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中”这样的情况。</li>\n<li>保证任何跳转指令都不会跳转到方法体以外的字节码指令上。</li>\n<li>保证方法体中的类型转换总是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的。</li>\n<li>……</li>\n</ul>\n</li>\n<li>符号引用验证<ul>\n<li>符号引用中通过字符串描述的全限定名是否能找到对应的类</li>\n<li>在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。</li>\n<li>符号引用中的类、字段、方法的可访问性（private、protected、public、<package>）是否可被当前类访问。</li>\n<li>……</li>\n</ul>\n</li>\n<li></li>\n</ul>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值的阶段</p>\n<p>例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量value在准备阶段过后的初始值为0而不是123</span></span><br><span class=\"line\"><span class=\"comment\">// 因为这时尚未开始执行任何Java方法 value赋值为123的动作要到类的初始化阶段才会被执行</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726220517.jpeg\" alt=\"图片\"></p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>解析阶段是Java虚拟机将常量池内的<code>符号引用</code>替换为<code>直接引用</code>的过程</p>\n<ul>\n<li><p><strong>符号引用（Symbolic References）</strong>：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定是已经加载到虚拟机内存当中的内容。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在《Java虚拟机规范》的Class文件格式中。</p>\n<blockquote>\n<p>下面红框中的都属于符号引用</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726220833.png\" alt=\"图片\"></p>\n</li>\n<li><p><strong>直接引用（Direct References）</strong>：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机的内存中存在。</p>\n</li>\n</ul>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>参考：<a href=\"https://mp.weixin.qq.com/s?__biz=MzAxMTc4NDUyOA==&tempkey=MTA3MV9NS1dJTVFnVDhRQkRid2hBSDB4aUE2X3Nham5Lcm9VMlpXVlIzTGd4dkk0eDNNb29iV3NlaGh0blA3Z25CcmJ6cXBLYzl5Z09zakZSakNTeFdTOUtkbUQzZnNST0pnUUNTOEhkb1J3Ul84MDhPaEw1bGZSVm9TdXNteG5DLUowSDdmUGxYajkxSWFETENkZ0h0NTY1UkJfOC0yV0laXzdyakNfVDdnfn4=&chksm=03a1657734d6ec6126a1c6a802506964f632a2dff53f123de74de0f865b83ef11a9b338a187d#rd\">jvm类初始化</a></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h2><ol>\n<li><p>通过一个类的全限定名(例如：<code>java.lang.String</code>)来获取定义此类的二进制字节流。</p>\n</li>\n<li><p>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>\n</li>\n<li><p>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口。</p>\n</li>\n</ol>\n<blockquote>\n<p>对于数组类而言，情况就有所不同，数组类本身不通过类加载器创建，它是由Java虚拟机直接在内存中动态构造出来的。</p>\n</blockquote>\n<ul>\n<li><p>从ZIP压缩包中读取，这很常见，最终成为日后JAR、EAR、WAR格式的基础。</p>\n</li>\n<li><p>从网络中获取，这种场景最典型的应用就是Web Applet。</p>\n</li>\n<li><p>运行时计算生成，这种场景使用得最多的就是动态代理技术，在java.lang.reflect.Proxy中，就是用了ProxyGenerator.generateProxyClass()来为特定接口生成形式为“*$Proxy”的代理类的二进制字节流。</p>\n</li>\n<li><p>由其他文件生成，典型场景是JSP应用，由JSP文件生成对应的Class文件。</p>\n</li>\n<li><p>从数据库中读取，这种场景相对少见些，例如有些中间件服务器（如SAP Netweaver）可以选择把程序安装到数据库中来完成程序代码在集群间的分发。</p>\n</li>\n<li><p>可以从加密文件中获取，这是典型的防Class文件被反编译的保护措施，通过加载时解密Class文件来保障程序运行逻辑不被窥探。</p>\n</li>\n</ul>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><ul>\n<li>文件格式验证<ul>\n<li>是否以魔数0xCAFEBABE开头。</li>\n<li>主、次版本号是否在当前Java虚拟机接受范围之内</li>\n<li>常量池的常量中是否有不被支持的常量类型（检查常量tag标志）。</li>\n<li>指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。</li>\n<li>CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据。</li>\n<li>·Class文件中各个部分及文件本身是否有被删除的或附加的其他信息</li>\n<li>……</li>\n</ul>\n</li>\n<li>元数据验证<ul>\n<li>这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。</li>\n<li>这个类的父类是否继承了不允许被继承的类（被final修饰的类）。</li>\n<li>如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。</li>\n<li>类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等）。</li>\n<li>……</li>\n</ul>\n</li>\n<li>字节码验证<ul>\n<li>保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似于“在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中”这样的情况。</li>\n<li>保证任何跳转指令都不会跳转到方法体以外的字节码指令上。</li>\n<li>保证方法体中的类型转换总是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的。</li>\n<li>……</li>\n</ul>\n</li>\n<li>符号引用验证<ul>\n<li>符号引用中通过字符串描述的全限定名是否能找到对应的类</li>\n<li>在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。</li>\n<li>符号引用中的类、字段、方法的可访问性（private、protected、public、<package>）是否可被当前类访问。</li>\n<li>……</li>\n</ul>\n</li>\n<li></li>\n</ul>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值的阶段</p>\n<p>例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量value在准备阶段过后的初始值为0而不是123</span></span><br><span class=\"line\"><span class=\"comment\">// 因为这时尚未开始执行任何Java方法 value赋值为123的动作要到类的初始化阶段才会被执行</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726220517.jpeg\" alt=\"图片\"></p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>解析阶段是Java虚拟机将常量池内的<code>符号引用</code>替换为<code>直接引用</code>的过程</p>\n<ul>\n<li><p><strong>符号引用（Symbolic References）</strong>：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定是已经加载到虚拟机内存当中的内容。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在《Java虚拟机规范》的Class文件格式中。</p>\n<blockquote>\n<p>下面红框中的都属于符号引用</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200726220833.png\" alt=\"图片\"></p>\n</li>\n<li><p><strong>直接引用（Direct References）</strong>：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机的内存中存在。</p>\n</li>\n</ul>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>参考：<a href=\"https://mp.weixin.qq.com/s?__biz=MzAxMTc4NDUyOA==&tempkey=MTA3MV9NS1dJTVFnVDhRQkRid2hBSDB4aUE2X3Nham5Lcm9VMlpXVlIzTGd4dkk0eDNNb29iV3NlaGh0blA3Z25CcmJ6cXBLYzl5Z09zakZSakNTeFdTOUtkbUQzZnNST0pnUUNTOEhkb1J3Ul84MDhPaEw1bGZSVm9TdXNteG5DLUowSDdmUGxYajkxSWFETENkZ0h0NTY1UkJfOC0yV0laXzdyakNfVDdnfn4=&chksm=03a1657734d6ec6126a1c6a802506964f632a2dff53f123de74de0f865b83ef11a9b338a187d#rd\">jvm类初始化</a></p>\n"},{"title":"JVM运行时栈帧","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:06:15.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n在JVM中，每个线程都包含n个栈帧，每一个栈帧都包括了局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息。\n\n栈帧的生命周期**随着方法的创建而创建，随着方法的结束而销毁，无论方法是正常完成还是异常完成（抛出了在方法内未被捕获的异常）都算方法的结束。**\n\n在某条线程执行过程中的某个时间点上，只有目前正在执行的那个方法的栈帧是活动的。这个栈帧称为**当前栈帧**，这个栈帧对应的方法称为**当前方法**，定义这个方法的类称为**当前类**。**对局部变量表和操作数栈的各种操作，通常都指的是对当前栈帧的局部变量表和操作数栈所进行的操作。**\n\n> **注意:**栈帧是线程本地私有的数据，不可能在一个栈帧 之中引用另外一个线程的栈帧\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200731162235.jpg)\n\n\n\n\n\n## 局部变量表\n\n`局部变量表（Local Variables Table）`是一组**变量值**的存储空间，用于存放**方法参数**和**方法内部定义的局部变量**。\n\n### 存储方法\n\n局部变量表的容量以`变量槽（Variable Slot）`为最小单位，一般在虚拟机中，一个Slot占用**32位**存储空间(这不是固定的，虚拟机可以自行改变每个槽占用空间的大小,但一般都是32位)。\n\nJava虚拟机通过**索引定位**的方式使用局部变量表，索引值的范围是从`0`开始至局部变量表最大的变量槽数量。如果访问的是32位数据类型的变量，索引N就代表了使用第N个变量槽，如果访问的是64位数据类型的变量，则说明会同时使用第N和N+1两个变量槽。\n\n#### eg:\n\n在Java中，`long`在内存占64位，所以局部变量表**用2个slot来存储**\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200730225516.png)\n\n\n\n对于两个相邻的共同存放一个64位数据的两个变量槽，虚拟机**不允许采用任何方式单独访问其中的某一个**，《Java虚拟机规范》中明确要求了如果遇到进行这种操作的字节码序列，虚拟机就应该在类加载的校验阶段中抛出异常。\n\n### long和double的非原子性协定\n\n> 在Java内存模型中，对于64位的数据类型（long和double），在模型中特别定义了一条宽松的规定：**允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32位的操作来进行**，即允许虚拟机实现自行选择是否要保证64位数据类型的load、store、read和write这四个操作的原子性，这就是所谓的**“long和double的非原子性协定”（Non-Atomic Treatment of doubleand long Variables）**。\n\n虽然有这个协定，**但是**，由于`局部变量表(Local Variable Table)`是建立在线程堆栈中的，属于**线程私有的数据**，无论读写两个连续的变量槽是否为原子操作，都**不会引起数据竞争和线程安全问题**。\n\n### 初始值问题\n\n我们已经知道**类的字段变量**有两次赋初始值的过程，一次在**准备阶段**，赋予系统初始值；另外一次在**初始化阶段**，赋予程序员定义的初始值。\n\n但**局部变量就不一样**了，如果一个局部变量定义了但**没有赋初始值**，那它是**完全不能使用**的。所以不要认为Java中任何情况下都存在诸如整型变量默认为0、布尔型变量默认为false等这样的默认值规则。\n\n#### eg：\n\n```java\n// 这个方法会报：\n// Error:(12, 28) java: variable y might not have been initialized\npublic class JVMTest {\n    public static void main(String[] args) {\n        int y;\n        int z=3;\n        System.out.println(y+z);\n    }\n}\n\n\n// 这个会正常输出 3； 因为int的初始值为0\npublic class JVMTest {\n    private static int y;\n    public static void main(String[] args) {\n        int z=3;\n        System.out.println(y+z);\n    }\n}\n```\n\n\n\n\n\n## 操作数栈\n\n`操作数栈（Operand Stack）`也常被称为`操作栈`，它是一个后入先出（Last In First Out，LIFO）栈。同局部变量表一样，操作数栈的最大深度也在编译的时候被写入到Code属性的`max_stacks`数据项之中。操作数栈的每一个元素都可以是包括long和double在内的任意Java数据类型。32位数据类型所占的栈容量为1，64位数据类型所占的栈容量为2。Javac编译器的数据流分析工作保证了在方法执行的任何时候，操作数栈的深度都不会超过在`max_stacks`数据项中设定的最大值。\n\n### eg:\n\n```java\npublic class JVMTest {\n    public static void main(String[] args) {\n        long y=9223372036854775800L;\n        int z=2;\n        long x=y+z;\n    }\n}\n```\n\n我们用`javap -verbose JVMTest`来查看他的`class`文件的字节码指令\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200730235131.png)\n\n**在操作栈中的流程大致为：**\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200731105247.jpg)\n\n## 动态链接\n\n每个栈帧都包含一个指向当前方法所在类型的`运行时常量池`的引用，持有这个引用是为了支持`方法调用`过程中的`动态连接（Dynamic Linking）`。在`Class`文件里，一个方法若要调用其他方法，或者访问成员变量，则需要通过`符号引用(symolic reference)`来表示，`动态链接`的作用就是将这些以`符号引用`所表示的方法转换为实际方法的直接引用。\n\n### 什么是符号引用？\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200731110742.png)\n\n通过查看字节码，上面的`#7`，`#8`，`#9`等等都是符号引用，他在class文件里只是个符号，就像你定义一个变量名称一样，变量名只是和`字符符号`，并不是真正的指向内存的地址指针。这些符号都指向`运行时常量池`的引用。\n\n## 方法返回地址\n\nJava在调用方法时，只有两种返回方法，一种是`正常返回`，一种是`异常返回`。\n\n### 正常返回\n\n正常返回指的就是在执行方法时，中间并没有异常抛出，或者已正确处理抛出的异常，这时就称当前`方法正常调用完成`，如果有返回值，就会给他调用者返回一个值，如果没有返回值(`void`)就正常返回。\n\n这种场景下，当前栈帧承担着恢复调用者状态的责任，**包括恢复调用者的局部变量表和操作数栈，以及正确递增程序计数器，以跳过刚才执行的调用方法指令等。**调用者的代码在被调用方法的返回值压入调用者栈帧的操作数栈后，会正常执行。\n\n### 异常返回\n\n在调用一些方法时，一些异常没有被正确捕获，就会导致方法终止，此时称`方法异常调用完成`，那一定不会有方法返回值返回给其调用者。\n\n无论采用何种退出方式，在方法退出之后，都**必须返回到最初方法被调用时的位置**，程序才能继续执行，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层主调方法的执行状态。\n\n怎么理解这个**必须返回到最初方法被调用时的位置**呢？\n\neg:\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200731164803.png)\n\n上面异常是在`13行`发生的，但是它并没有停在`13行`，而是回到了最初调用它`第10行`的位置。","source":"_posts/java/jvm/java-jvm-stack-1.md","raw":"---\ntitle: JVM运行时栈帧\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:06:15\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\n- Java\ncategories:\n- JVM\n---\n\n\n\n在JVM中，每个线程都包含n个栈帧，每一个栈帧都包括了局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息。\n\n栈帧的生命周期**随着方法的创建而创建，随着方法的结束而销毁，无论方法是正常完成还是异常完成（抛出了在方法内未被捕获的异常）都算方法的结束。**\n\n在某条线程执行过程中的某个时间点上，只有目前正在执行的那个方法的栈帧是活动的。这个栈帧称为**当前栈帧**，这个栈帧对应的方法称为**当前方法**，定义这个方法的类称为**当前类**。**对局部变量表和操作数栈的各种操作，通常都指的是对当前栈帧的局部变量表和操作数栈所进行的操作。**\n\n> **注意:**栈帧是线程本地私有的数据，不可能在一个栈帧 之中引用另外一个线程的栈帧\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200731162235.jpg)\n\n\n\n\n\n## 局部变量表\n\n`局部变量表（Local Variables Table）`是一组**变量值**的存储空间，用于存放**方法参数**和**方法内部定义的局部变量**。\n\n### 存储方法\n\n局部变量表的容量以`变量槽（Variable Slot）`为最小单位，一般在虚拟机中，一个Slot占用**32位**存储空间(这不是固定的，虚拟机可以自行改变每个槽占用空间的大小,但一般都是32位)。\n\nJava虚拟机通过**索引定位**的方式使用局部变量表，索引值的范围是从`0`开始至局部变量表最大的变量槽数量。如果访问的是32位数据类型的变量，索引N就代表了使用第N个变量槽，如果访问的是64位数据类型的变量，则说明会同时使用第N和N+1两个变量槽。\n\n#### eg:\n\n在Java中，`long`在内存占64位，所以局部变量表**用2个slot来存储**\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200730225516.png)\n\n\n\n对于两个相邻的共同存放一个64位数据的两个变量槽，虚拟机**不允许采用任何方式单独访问其中的某一个**，《Java虚拟机规范》中明确要求了如果遇到进行这种操作的字节码序列，虚拟机就应该在类加载的校验阶段中抛出异常。\n\n### long和double的非原子性协定\n\n> 在Java内存模型中，对于64位的数据类型（long和double），在模型中特别定义了一条宽松的规定：**允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32位的操作来进行**，即允许虚拟机实现自行选择是否要保证64位数据类型的load、store、read和write这四个操作的原子性，这就是所谓的**“long和double的非原子性协定”（Non-Atomic Treatment of doubleand long Variables）**。\n\n虽然有这个协定，**但是**，由于`局部变量表(Local Variable Table)`是建立在线程堆栈中的，属于**线程私有的数据**，无论读写两个连续的变量槽是否为原子操作，都**不会引起数据竞争和线程安全问题**。\n\n### 初始值问题\n\n我们已经知道**类的字段变量**有两次赋初始值的过程，一次在**准备阶段**，赋予系统初始值；另外一次在**初始化阶段**，赋予程序员定义的初始值。\n\n但**局部变量就不一样**了，如果一个局部变量定义了但**没有赋初始值**，那它是**完全不能使用**的。所以不要认为Java中任何情况下都存在诸如整型变量默认为0、布尔型变量默认为false等这样的默认值规则。\n\n#### eg：\n\n```java\n// 这个方法会报：\n// Error:(12, 28) java: variable y might not have been initialized\npublic class JVMTest {\n    public static void main(String[] args) {\n        int y;\n        int z=3;\n        System.out.println(y+z);\n    }\n}\n\n\n// 这个会正常输出 3； 因为int的初始值为0\npublic class JVMTest {\n    private static int y;\n    public static void main(String[] args) {\n        int z=3;\n        System.out.println(y+z);\n    }\n}\n```\n\n\n\n\n\n## 操作数栈\n\n`操作数栈（Operand Stack）`也常被称为`操作栈`，它是一个后入先出（Last In First Out，LIFO）栈。同局部变量表一样，操作数栈的最大深度也在编译的时候被写入到Code属性的`max_stacks`数据项之中。操作数栈的每一个元素都可以是包括long和double在内的任意Java数据类型。32位数据类型所占的栈容量为1，64位数据类型所占的栈容量为2。Javac编译器的数据流分析工作保证了在方法执行的任何时候，操作数栈的深度都不会超过在`max_stacks`数据项中设定的最大值。\n\n### eg:\n\n```java\npublic class JVMTest {\n    public static void main(String[] args) {\n        long y=9223372036854775800L;\n        int z=2;\n        long x=y+z;\n    }\n}\n```\n\n我们用`javap -verbose JVMTest`来查看他的`class`文件的字节码指令\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200730235131.png)\n\n**在操作栈中的流程大致为：**\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200731105247.jpg)\n\n## 动态链接\n\n每个栈帧都包含一个指向当前方法所在类型的`运行时常量池`的引用，持有这个引用是为了支持`方法调用`过程中的`动态连接（Dynamic Linking）`。在`Class`文件里，一个方法若要调用其他方法，或者访问成员变量，则需要通过`符号引用(symolic reference)`来表示，`动态链接`的作用就是将这些以`符号引用`所表示的方法转换为实际方法的直接引用。\n\n### 什么是符号引用？\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200731110742.png)\n\n通过查看字节码，上面的`#7`，`#8`，`#9`等等都是符号引用，他在class文件里只是个符号，就像你定义一个变量名称一样，变量名只是和`字符符号`，并不是真正的指向内存的地址指针。这些符号都指向`运行时常量池`的引用。\n\n## 方法返回地址\n\nJava在调用方法时，只有两种返回方法，一种是`正常返回`，一种是`异常返回`。\n\n### 正常返回\n\n正常返回指的就是在执行方法时，中间并没有异常抛出，或者已正确处理抛出的异常，这时就称当前`方法正常调用完成`，如果有返回值，就会给他调用者返回一个值，如果没有返回值(`void`)就正常返回。\n\n这种场景下，当前栈帧承担着恢复调用者状态的责任，**包括恢复调用者的局部变量表和操作数栈，以及正确递增程序计数器，以跳过刚才执行的调用方法指令等。**调用者的代码在被调用方法的返回值压入调用者栈帧的操作数栈后，会正常执行。\n\n### 异常返回\n\n在调用一些方法时，一些异常没有被正确捕获，就会导致方法终止，此时称`方法异常调用完成`，那一定不会有方法返回值返回给其调用者。\n\n无论采用何种退出方式，在方法退出之后，都**必须返回到最初方法被调用时的位置**，程序才能继续执行，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层主调方法的执行状态。\n\n怎么理解这个**必须返回到最初方法被调用时的位置**呢？\n\neg:\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200731164803.png)\n\n上面异常是在`13行`发生的，但是它并没有停在`13行`，而是回到了最初调用它`第10行`的位置。","slug":"java/jvm/java-jvm-stack-1","published":1,"updated":"2021-10-08T08:27:43.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6ei9007rvpuc3dgs0bye","content":"<p>在JVM中，每个线程都包含n个栈帧，每一个栈帧都包括了局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息。</p>\n<p>栈帧的生命周期<strong>随着方法的创建而创建，随着方法的结束而销毁，无论方法是正常完成还是异常完成（抛出了在方法内未被捕获的异常）都算方法的结束。</strong></p>\n<p>在某条线程执行过程中的某个时间点上，只有目前正在执行的那个方法的栈帧是活动的。这个栈帧称为<strong>当前栈帧</strong>，这个栈帧对应的方法称为<strong>当前方法</strong>，定义这个方法的类称为<strong>当前类</strong>。<strong>对局部变量表和操作数栈的各种操作，通常都指的是对当前栈帧的局部变量表和操作数栈所进行的操作。</strong></p>\n<blockquote>\n<p>**注意:**栈帧是线程本地私有的数据，不可能在一个栈帧 之中引用另外一个线程的栈帧</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200731162235.jpg\" alt=\"图片\"></p>\n<h2 id=\"局部变量表\"><a href=\"#局部变量表\" class=\"headerlink\" title=\"局部变量表\"></a>局部变量表</h2><p><code>局部变量表（Local Variables Table）</code>是一组<strong>变量值</strong>的存储空间，用于存放<strong>方法参数</strong>和<strong>方法内部定义的局部变量</strong>。</p>\n<h3 id=\"存储方法\"><a href=\"#存储方法\" class=\"headerlink\" title=\"存储方法\"></a>存储方法</h3><p>局部变量表的容量以<code>变量槽（Variable Slot）</code>为最小单位，一般在虚拟机中，一个Slot占用<strong>32位</strong>存储空间(这不是固定的，虚拟机可以自行改变每个槽占用空间的大小,但一般都是32位)。</p>\n<p>Java虚拟机通过<strong>索引定位</strong>的方式使用局部变量表，索引值的范围是从<code>0</code>开始至局部变量表最大的变量槽数量。如果访问的是32位数据类型的变量，索引N就代表了使用第N个变量槽，如果访问的是64位数据类型的变量，则说明会同时使用第N和N+1两个变量槽。</p>\n<h4 id=\"eg\"><a href=\"#eg\" class=\"headerlink\" title=\"eg:\"></a>eg:</h4><p>在Java中，<code>long</code>在内存占64位，所以局部变量表<strong>用2个slot来存储</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200730225516.png\" alt=\"图片\"></p>\n<p>对于两个相邻的共同存放一个64位数据的两个变量槽，虚拟机<strong>不允许采用任何方式单独访问其中的某一个</strong>，《Java虚拟机规范》中明确要求了如果遇到进行这种操作的字节码序列，虚拟机就应该在类加载的校验阶段中抛出异常。</p>\n<h3 id=\"long和double的非原子性协定\"><a href=\"#long和double的非原子性协定\" class=\"headerlink\" title=\"long和double的非原子性协定\"></a>long和double的非原子性协定</h3><blockquote>\n<p>在Java内存模型中，对于64位的数据类型（long和double），在模型中特别定义了一条宽松的规定：<strong>允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32位的操作来进行</strong>，即允许虚拟机实现自行选择是否要保证64位数据类型的load、store、read和write这四个操作的原子性，这就是所谓的<strong>“long和double的非原子性协定”（Non-Atomic Treatment of doubleand long Variables）</strong>。</p>\n</blockquote>\n<p>虽然有这个协定，<strong>但是</strong>，由于<code>局部变量表(Local Variable Table)</code>是建立在线程堆栈中的，属于<strong>线程私有的数据</strong>，无论读写两个连续的变量槽是否为原子操作，都<strong>不会引起数据竞争和线程安全问题</strong>。</p>\n<h3 id=\"初始值问题\"><a href=\"#初始值问题\" class=\"headerlink\" title=\"初始值问题\"></a>初始值问题</h3><p>我们已经知道<strong>类的字段变量</strong>有两次赋初始值的过程，一次在<strong>准备阶段</strong>，赋予系统初始值；另外一次在<strong>初始化阶段</strong>，赋予程序员定义的初始值。</p>\n<p>但<strong>局部变量就不一样</strong>了，如果一个局部变量定义了但<strong>没有赋初始值</strong>，那它是<strong>完全不能使用</strong>的。所以不要认为Java中任何情况下都存在诸如整型变量默认为0、布尔型变量默认为false等这样的默认值规则。</p>\n<h4 id=\"eg：\"><a href=\"#eg：\" class=\"headerlink\" title=\"eg：\"></a>eg：</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个方法会报：</span></span><br><span class=\"line\"><span class=\"comment\">// Error:(12, 28) java: variable y might not have been initialized</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JVMTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> y;</span><br><span class=\"line\">        <span class=\"type\">int</span> z=<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(y+z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个会正常输出 3； 因为int的初始值为0</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JVMTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> z=<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(y+z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"操作数栈\"><a href=\"#操作数栈\" class=\"headerlink\" title=\"操作数栈\"></a>操作数栈</h2><p><code>操作数栈（Operand Stack）</code>也常被称为<code>操作栈</code>，它是一个后入先出（Last In First Out，LIFO）栈。同局部变量表一样，操作数栈的最大深度也在编译的时候被写入到Code属性的<code>max_stacks</code>数据项之中。操作数栈的每一个元素都可以是包括long和double在内的任意Java数据类型。32位数据类型所占的栈容量为1，64位数据类型所占的栈容量为2。Javac编译器的数据流分析工作保证了在方法执行的任何时候，操作数栈的深度都不会超过在<code>max_stacks</code>数据项中设定的最大值。</p>\n<h3 id=\"eg-1\"><a href=\"#eg-1\" class=\"headerlink\" title=\"eg:\"></a>eg:</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JVMTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> y=<span class=\"number\">9223372036854775800L</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> z=<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> x=y+z;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们用<code>javap -verbose JVMTest</code>来查看他的<code>class</code>文件的字节码指令</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200730235131.png\" alt=\"图片\"></p>\n<p><strong>在操作栈中的流程大致为：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200731105247.jpg\" alt=\"图片\"></p>\n<h2 id=\"动态链接\"><a href=\"#动态链接\" class=\"headerlink\" title=\"动态链接\"></a>动态链接</h2><p>每个栈帧都包含一个指向当前方法所在类型的<code>运行时常量池</code>的引用，持有这个引用是为了支持<code>方法调用</code>过程中的<code>动态连接（Dynamic Linking）</code>。在<code>Class</code>文件里，一个方法若要调用其他方法，或者访问成员变量，则需要通过<code>符号引用(symolic reference)</code>来表示，<code>动态链接</code>的作用就是将这些以<code>符号引用</code>所表示的方法转换为实际方法的直接引用。</p>\n<h3 id=\"什么是符号引用？\"><a href=\"#什么是符号引用？\" class=\"headerlink\" title=\"什么是符号引用？\"></a>什么是符号引用？</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200731110742.png\" alt=\"图片\"></p>\n<p>通过查看字节码，上面的<code>#7</code>，<code>#8</code>，<code>#9</code>等等都是符号引用，他在class文件里只是个符号，就像你定义一个变量名称一样，变量名只是和<code>字符符号</code>，并不是真正的指向内存的地址指针。这些符号都指向<code>运行时常量池</code>的引用。</p>\n<h2 id=\"方法返回地址\"><a href=\"#方法返回地址\" class=\"headerlink\" title=\"方法返回地址\"></a>方法返回地址</h2><p>Java在调用方法时，只有两种返回方法，一种是<code>正常返回</code>，一种是<code>异常返回</code>。</p>\n<h3 id=\"正常返回\"><a href=\"#正常返回\" class=\"headerlink\" title=\"正常返回\"></a>正常返回</h3><p>正常返回指的就是在执行方法时，中间并没有异常抛出，或者已正确处理抛出的异常，这时就称当前<code>方法正常调用完成</code>，如果有返回值，就会给他调用者返回一个值，如果没有返回值(<code>void</code>)就正常返回。</p>\n<p>这种场景下，当前栈帧承担着恢复调用者状态的责任，<strong>包括恢复调用者的局部变量表和操作数栈，以及正确递增程序计数器，以跳过刚才执行的调用方法指令等。</strong>调用者的代码在被调用方法的返回值压入调用者栈帧的操作数栈后，会正常执行。</p>\n<h3 id=\"异常返回\"><a href=\"#异常返回\" class=\"headerlink\" title=\"异常返回\"></a>异常返回</h3><p>在调用一些方法时，一些异常没有被正确捕获，就会导致方法终止，此时称<code>方法异常调用完成</code>，那一定不会有方法返回值返回给其调用者。</p>\n<p>无论采用何种退出方式，在方法退出之后，都<strong>必须返回到最初方法被调用时的位置</strong>，程序才能继续执行，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层主调方法的执行状态。</p>\n<p>怎么理解这个<strong>必须返回到最初方法被调用时的位置</strong>呢？</p>\n<p>eg:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200731164803.png\" alt=\"图片\"></p>\n<p>上面异常是在<code>13行</code>发生的，但是它并没有停在<code>13行</code>，而是回到了最初调用它<code>第10行</code>的位置。</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p>在JVM中，每个线程都包含n个栈帧，每一个栈帧都包括了局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息。</p>\n<p>栈帧的生命周期<strong>随着方法的创建而创建，随着方法的结束而销毁，无论方法是正常完成还是异常完成（抛出了在方法内未被捕获的异常）都算方法的结束。</strong></p>\n<p>在某条线程执行过程中的某个时间点上，只有目前正在执行的那个方法的栈帧是活动的。这个栈帧称为<strong>当前栈帧</strong>，这个栈帧对应的方法称为<strong>当前方法</strong>，定义这个方法的类称为<strong>当前类</strong>。<strong>对局部变量表和操作数栈的各种操作，通常都指的是对当前栈帧的局部变量表和操作数栈所进行的操作。</strong></p>\n<blockquote>\n<p>**注意:**栈帧是线程本地私有的数据，不可能在一个栈帧 之中引用另外一个线程的栈帧</p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200731162235.jpg\" alt=\"图片\"></p>\n<h2 id=\"局部变量表\"><a href=\"#局部变量表\" class=\"headerlink\" title=\"局部变量表\"></a>局部变量表</h2><p><code>局部变量表（Local Variables Table）</code>是一组<strong>变量值</strong>的存储空间，用于存放<strong>方法参数</strong>和<strong>方法内部定义的局部变量</strong>。</p>\n<h3 id=\"存储方法\"><a href=\"#存储方法\" class=\"headerlink\" title=\"存储方法\"></a>存储方法</h3><p>局部变量表的容量以<code>变量槽（Variable Slot）</code>为最小单位，一般在虚拟机中，一个Slot占用<strong>32位</strong>存储空间(这不是固定的，虚拟机可以自行改变每个槽占用空间的大小,但一般都是32位)。</p>\n<p>Java虚拟机通过<strong>索引定位</strong>的方式使用局部变量表，索引值的范围是从<code>0</code>开始至局部变量表最大的变量槽数量。如果访问的是32位数据类型的变量，索引N就代表了使用第N个变量槽，如果访问的是64位数据类型的变量，则说明会同时使用第N和N+1两个变量槽。</p>\n<h4 id=\"eg\"><a href=\"#eg\" class=\"headerlink\" title=\"eg:\"></a>eg:</h4><p>在Java中，<code>long</code>在内存占64位，所以局部变量表<strong>用2个slot来存储</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200730225516.png\" alt=\"图片\"></p>\n<p>对于两个相邻的共同存放一个64位数据的两个变量槽，虚拟机<strong>不允许采用任何方式单独访问其中的某一个</strong>，《Java虚拟机规范》中明确要求了如果遇到进行这种操作的字节码序列，虚拟机就应该在类加载的校验阶段中抛出异常。</p>\n<h3 id=\"long和double的非原子性协定\"><a href=\"#long和double的非原子性协定\" class=\"headerlink\" title=\"long和double的非原子性协定\"></a>long和double的非原子性协定</h3><blockquote>\n<p>在Java内存模型中，对于64位的数据类型（long和double），在模型中特别定义了一条宽松的规定：<strong>允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32位的操作来进行</strong>，即允许虚拟机实现自行选择是否要保证64位数据类型的load、store、read和write这四个操作的原子性，这就是所谓的<strong>“long和double的非原子性协定”（Non-Atomic Treatment of doubleand long Variables）</strong>。</p>\n</blockquote>\n<p>虽然有这个协定，<strong>但是</strong>，由于<code>局部变量表(Local Variable Table)</code>是建立在线程堆栈中的，属于<strong>线程私有的数据</strong>，无论读写两个连续的变量槽是否为原子操作，都<strong>不会引起数据竞争和线程安全问题</strong>。</p>\n<h3 id=\"初始值问题\"><a href=\"#初始值问题\" class=\"headerlink\" title=\"初始值问题\"></a>初始值问题</h3><p>我们已经知道<strong>类的字段变量</strong>有两次赋初始值的过程，一次在<strong>准备阶段</strong>，赋予系统初始值；另外一次在<strong>初始化阶段</strong>，赋予程序员定义的初始值。</p>\n<p>但<strong>局部变量就不一样</strong>了，如果一个局部变量定义了但<strong>没有赋初始值</strong>，那它是<strong>完全不能使用</strong>的。所以不要认为Java中任何情况下都存在诸如整型变量默认为0、布尔型变量默认为false等这样的默认值规则。</p>\n<h4 id=\"eg：\"><a href=\"#eg：\" class=\"headerlink\" title=\"eg：\"></a>eg：</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个方法会报：</span></span><br><span class=\"line\"><span class=\"comment\">// Error:(12, 28) java: variable y might not have been initialized</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JVMTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> y;</span><br><span class=\"line\">        <span class=\"type\">int</span> z=<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(y+z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个会正常输出 3； 因为int的初始值为0</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JVMTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> y;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> z=<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(y+z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h2 id=\"操作数栈\"><a href=\"#操作数栈\" class=\"headerlink\" title=\"操作数栈\"></a>操作数栈</h2><p><code>操作数栈（Operand Stack）</code>也常被称为<code>操作栈</code>，它是一个后入先出（Last In First Out，LIFO）栈。同局部变量表一样，操作数栈的最大深度也在编译的时候被写入到Code属性的<code>max_stacks</code>数据项之中。操作数栈的每一个元素都可以是包括long和double在内的任意Java数据类型。32位数据类型所占的栈容量为1，64位数据类型所占的栈容量为2。Javac编译器的数据流分析工作保证了在方法执行的任何时候，操作数栈的深度都不会超过在<code>max_stacks</code>数据项中设定的最大值。</p>\n<h3 id=\"eg-1\"><a href=\"#eg-1\" class=\"headerlink\" title=\"eg:\"></a>eg:</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JVMTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> y=<span class=\"number\">9223372036854775800L</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> z=<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> x=y+z;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们用<code>javap -verbose JVMTest</code>来查看他的<code>class</code>文件的字节码指令</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200730235131.png\" alt=\"图片\"></p>\n<p><strong>在操作栈中的流程大致为：</strong></p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200731105247.jpg\" alt=\"图片\"></p>\n<h2 id=\"动态链接\"><a href=\"#动态链接\" class=\"headerlink\" title=\"动态链接\"></a>动态链接</h2><p>每个栈帧都包含一个指向当前方法所在类型的<code>运行时常量池</code>的引用，持有这个引用是为了支持<code>方法调用</code>过程中的<code>动态连接（Dynamic Linking）</code>。在<code>Class</code>文件里，一个方法若要调用其他方法，或者访问成员变量，则需要通过<code>符号引用(symolic reference)</code>来表示，<code>动态链接</code>的作用就是将这些以<code>符号引用</code>所表示的方法转换为实际方法的直接引用。</p>\n<h3 id=\"什么是符号引用？\"><a href=\"#什么是符号引用？\" class=\"headerlink\" title=\"什么是符号引用？\"></a>什么是符号引用？</h3><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200731110742.png\" alt=\"图片\"></p>\n<p>通过查看字节码，上面的<code>#7</code>，<code>#8</code>，<code>#9</code>等等都是符号引用，他在class文件里只是个符号，就像你定义一个变量名称一样，变量名只是和<code>字符符号</code>，并不是真正的指向内存的地址指针。这些符号都指向<code>运行时常量池</code>的引用。</p>\n<h2 id=\"方法返回地址\"><a href=\"#方法返回地址\" class=\"headerlink\" title=\"方法返回地址\"></a>方法返回地址</h2><p>Java在调用方法时，只有两种返回方法，一种是<code>正常返回</code>，一种是<code>异常返回</code>。</p>\n<h3 id=\"正常返回\"><a href=\"#正常返回\" class=\"headerlink\" title=\"正常返回\"></a>正常返回</h3><p>正常返回指的就是在执行方法时，中间并没有异常抛出，或者已正确处理抛出的异常，这时就称当前<code>方法正常调用完成</code>，如果有返回值，就会给他调用者返回一个值，如果没有返回值(<code>void</code>)就正常返回。</p>\n<p>这种场景下，当前栈帧承担着恢复调用者状态的责任，<strong>包括恢复调用者的局部变量表和操作数栈，以及正确递增程序计数器，以跳过刚才执行的调用方法指令等。</strong>调用者的代码在被调用方法的返回值压入调用者栈帧的操作数栈后，会正常执行。</p>\n<h3 id=\"异常返回\"><a href=\"#异常返回\" class=\"headerlink\" title=\"异常返回\"></a>异常返回</h3><p>在调用一些方法时，一些异常没有被正确捕获，就会导致方法终止，此时称<code>方法异常调用完成</code>，那一定不会有方法返回值返回给其调用者。</p>\n<p>无论采用何种退出方式，在方法退出之后，都<strong>必须返回到最初方法被调用时的位置</strong>，程序才能继续执行，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层主调方法的执行状态。</p>\n<p>怎么理解这个<strong>必须返回到最初方法被调用时的位置</strong>呢？</p>\n<p>eg:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200731164803.png\" alt=\"图片\"></p>\n<p>上面异常是在<code>13行</code>发生的，但是它并没有停在<code>13行</code>，而是回到了最初调用它<code>第10行</code>的位置。</p>\n"},{"title":"JVM4种垃圾收集算法","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-29T02:31:30.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 简介\n\n垃圾收集算法可以划分为“引用计数式垃圾收集”（Reference Counting GC）和“追踪式垃圾收集”（Tracing GC）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。\n\n\n\n##  标记-清除算法\n\n- **标记过程**就是对象是否属于垃圾的判定过程(**采用可达分析算法GC Roots**)\n- 算法分为**“标记”**和**“清除”**两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，**也可以反过来**，标记存活的对象，统一回收所有未被标记的对象。\n\n### 缺点\n\n- 执行效率不稳定，如果Java堆中包含大量对象，而且**其中大部分是需要被回收的**，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的**执行效率都随对象数量增长而降低**；\n- 第二个是内存空间的碎片化问题，标记、清除之后会**产生大量不连续的内存碎片**，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时**无法找到足够的连续内存**而不得不**提前触发另一次垃圾收集动作**。\n- ![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200529100358.png)\n\n![标记清除算法](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200528203926.jpeg)\n\n##  标记-复制算法\n\n- **标记过程**就是对象是否属于垃圾的判定过程(**采用可达分析算法GC Roots**)\n\n- 它将可用内存按容量划分为**大小相等的两块**，每次只使用其中的一块。\n- 当这一块的内存用完了，就将还**存活着的对象复制到另外一块上面**，然后再把**已使用过的内存空间一次清理掉**。\n\n### 缺点\n\n- 如果内存中**多数对象都是存活的**，这种算法将会**产生大量的内存间复制的开销**\n- 代价是将可用内存缩小为了**原来的一半**,空间浪费未免太多了一点.\n- ![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200529100420.jpg)\n\n![标记复制算法](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200528203952.jpeg)\n\n##  标记-整理算法\n\n- **标记过程**就是对象是否属于垃圾的判定过程(**采用可达分析算法GC Roots**)\n- 在**标记-清除**的算法基础上改进,后续步骤不是直接对可回收对象进行清理，而是让**所有存活的对象都向内存空间一端移动**，然后直接**清理掉边界以外的内存**，\n\n### 缺点\n\n- 在有大量存活对象的老年代区域,**移动存活对象**并**更新所有引用**这些对象的地方将会是一种**极为负重**的操作,而且这种对象移动操作**必须全程暂停用户应用程序**才能进行,比**标记-清除**算法停顿时间长.\n- ![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200529100506.jpg)\n\n![标记整理算法](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200528204014.jpeg)\n\n\n\n## 分代收集算法\n\n现代商用虚拟机基于以上算法的优缺点,根据**分代收集理论**,在不同的区域采用了不同的收集算法.\n\n> <font color=red>老年代:新生代=2:1</font>\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200529101100.png)\n\n### 新生代\n\n> 堆大小默认比例:<font color=red>Eden:S0:S1=8:1:1</font>\n>\n> 采用标记-复制算法\n\n新生代分为**Eden区**和**Survior区**,而Survior区又分为**From Survior区(S0)**和**To Survior区(S1)**.此区域采用标记-复制算法.每次Minor GC/Young GC时,会把**Eden区**存活的对象复制到**S0区**,然后清空Eden区,当S0区满时,Eden区和S0区存活的对象会复制到**S1区**,然后S0和S0进行交换,永远保持S1为空状态,当新生代的对象经过一定次数的Minor GC还未被回收时,就会把这个对象移到老年代.\n\n### 老年代\n\n> 采用标记-整理法或标记-清理法\n\n当老年代Old区域满时,会触发**Full GC**,同时回收新生代和老生代的所有区域.回收后诺内存还是不足时,会引发**OOM异常**;","source":"_posts/java/jvm/jvm-gc-alg.md","raw":"---\ntitle: JVM4种垃圾收集算法\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-29 10:31:30\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\ncategories:\n- JVM\n---\n\n## 简介\n\n垃圾收集算法可以划分为“引用计数式垃圾收集”（Reference Counting GC）和“追踪式垃圾收集”（Tracing GC）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。\n\n\n\n##  标记-清除算法\n\n- **标记过程**就是对象是否属于垃圾的判定过程(**采用可达分析算法GC Roots**)\n- 算法分为**“标记”**和**“清除”**两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，**也可以反过来**，标记存活的对象，统一回收所有未被标记的对象。\n\n### 缺点\n\n- 执行效率不稳定，如果Java堆中包含大量对象，而且**其中大部分是需要被回收的**，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的**执行效率都随对象数量增长而降低**；\n- 第二个是内存空间的碎片化问题，标记、清除之后会**产生大量不连续的内存碎片**，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时**无法找到足够的连续内存**而不得不**提前触发另一次垃圾收集动作**。\n- ![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200529100358.png)\n\n![标记清除算法](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200528203926.jpeg)\n\n##  标记-复制算法\n\n- **标记过程**就是对象是否属于垃圾的判定过程(**采用可达分析算法GC Roots**)\n\n- 它将可用内存按容量划分为**大小相等的两块**，每次只使用其中的一块。\n- 当这一块的内存用完了，就将还**存活着的对象复制到另外一块上面**，然后再把**已使用过的内存空间一次清理掉**。\n\n### 缺点\n\n- 如果内存中**多数对象都是存活的**，这种算法将会**产生大量的内存间复制的开销**\n- 代价是将可用内存缩小为了**原来的一半**,空间浪费未免太多了一点.\n- ![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200529100420.jpg)\n\n![标记复制算法](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200528203952.jpeg)\n\n##  标记-整理算法\n\n- **标记过程**就是对象是否属于垃圾的判定过程(**采用可达分析算法GC Roots**)\n- 在**标记-清除**的算法基础上改进,后续步骤不是直接对可回收对象进行清理，而是让**所有存活的对象都向内存空间一端移动**，然后直接**清理掉边界以外的内存**，\n\n### 缺点\n\n- 在有大量存活对象的老年代区域,**移动存活对象**并**更新所有引用**这些对象的地方将会是一种**极为负重**的操作,而且这种对象移动操作**必须全程暂停用户应用程序**才能进行,比**标记-清除**算法停顿时间长.\n- ![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200529100506.jpg)\n\n![标记整理算法](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200528204014.jpeg)\n\n\n\n## 分代收集算法\n\n现代商用虚拟机基于以上算法的优缺点,根据**分代收集理论**,在不同的区域采用了不同的收集算法.\n\n> <font color=red>老年代:新生代=2:1</font>\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200529101100.png)\n\n### 新生代\n\n> 堆大小默认比例:<font color=red>Eden:S0:S1=8:1:1</font>\n>\n> 采用标记-复制算法\n\n新生代分为**Eden区**和**Survior区**,而Survior区又分为**From Survior区(S0)**和**To Survior区(S1)**.此区域采用标记-复制算法.每次Minor GC/Young GC时,会把**Eden区**存活的对象复制到**S0区**,然后清空Eden区,当S0区满时,Eden区和S0区存活的对象会复制到**S1区**,然后S0和S0进行交换,永远保持S1为空状态,当新生代的对象经过一定次数的Minor GC还未被回收时,就会把这个对象移到老年代.\n\n### 老年代\n\n> 采用标记-整理法或标记-清理法\n\n当老年代Old区域满时,会触发**Full GC**,同时回收新生代和老生代的所有区域.回收后诺内存还是不足时,会引发**OOM异常**;","slug":"java/jvm/jvm-gc-alg","published":1,"updated":"2021-10-08T08:28:33.859Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eia007vvpuc26wuatsx","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>垃圾收集算法可以划分为“引用计数式垃圾收集”（Reference Counting GC）和“追踪式垃圾收集”（Tracing GC）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。</p>\n<h2 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h2><ul>\n<li><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</li>\n<li>算法分为<strong>“标记”</strong>和<strong>“清除”</strong>两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，<strong>也可以反过来</strong>，标记存活的对象，统一回收所有未被标记的对象。</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>执行效率不稳定，如果Java堆中包含大量对象，而且<strong>其中大部分是需要被回收的</strong>，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的<strong>执行效率都随对象数量增长而降低</strong>；</li>\n<li>第二个是内存空间的碎片化问题，标记、清除之后会<strong>产生大量不连续的内存碎片</strong>，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时<strong>无法找到足够的连续内存</strong>而不得不<strong>提前触发另一次垃圾收集动作</strong>。</li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200529100358.png\" alt=\"图片\"></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200528203926.jpeg\" alt=\"标记清除算法\"></p>\n<h2 id=\"标记-复制算法\"><a href=\"#标记-复制算法\" class=\"headerlink\" title=\"标记-复制算法\"></a>标记-复制算法</h2><ul>\n<li><p><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</p>\n</li>\n<li><p>它将可用内存按容量划分为<strong>大小相等的两块</strong>，每次只使用其中的一块。</p>\n</li>\n<li><p>当这一块的内存用完了，就将还<strong>存活着的对象复制到另外一块上面</strong>，然后再把<strong>已使用过的内存空间一次清理掉</strong>。</p>\n</li>\n</ul>\n<h3 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>如果内存中<strong>多数对象都是存活的</strong>，这种算法将会<strong>产生大量的内存间复制的开销</strong></li>\n<li>代价是将可用内存缩小为了<strong>原来的一半</strong>,空间浪费未免太多了一点.</li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200529100420.jpg\" alt=\"图片\"></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200528203952.jpeg\" alt=\"标记复制算法\"></p>\n<h2 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h2><ul>\n<li><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</li>\n<li>在<strong>标记-清除</strong>的算法基础上改进,后续步骤不是直接对可回收对象进行清理，而是让<strong>所有存活的对象都向内存空间一端移动</strong>，然后直接<strong>清理掉边界以外的内存</strong>，</li>\n</ul>\n<h3 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>在有大量存活对象的老年代区域,<strong>移动存活对象</strong>并<strong>更新所有引用</strong>这些对象的地方将会是一种<strong>极为负重</strong>的操作,而且这种对象移动操作<strong>必须全程暂停用户应用程序</strong>才能进行,比<strong>标记-清除</strong>算法停顿时间长.</li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200529100506.jpg\" alt=\"图片\"></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200528204014.jpeg\" alt=\"标记整理算法\"></p>\n<h2 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h2><p>现代商用虚拟机基于以上算法的优缺点,根据<strong>分代收集理论</strong>,在不同的区域采用了不同的收集算法.</p>\n<blockquote>\n<p><font color=red>老年代:新生代&#x3D;2:1</font></p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200529101100.png\" alt=\"图片\"></p>\n<h3 id=\"新生代\"><a href=\"#新生代\" class=\"headerlink\" title=\"新生代\"></a>新生代</h3><blockquote>\n<p>堆大小默认比例:<font color=red>Eden:S0:S1&#x3D;8:1:1</font></p>\n<p>采用标记-复制算法</p>\n</blockquote>\n<p>新生代分为<strong>Eden区</strong>和<strong>Survior区</strong>,而Survior区又分为<strong>From Survior区(S0)<strong>和</strong>To Survior区(S1)</strong>.此区域采用标记-复制算法.每次Minor GC&#x2F;Young GC时,会把<strong>Eden区</strong>存活的对象复制到<strong>S0区</strong>,然后清空Eden区,当S0区满时,Eden区和S0区存活的对象会复制到<strong>S1区</strong>,然后S0和S0进行交换,永远保持S1为空状态,当新生代的对象经过一定次数的Minor GC还未被回收时,就会把这个对象移到老年代.</p>\n<h3 id=\"老年代\"><a href=\"#老年代\" class=\"headerlink\" title=\"老年代\"></a>老年代</h3><blockquote>\n<p>采用标记-整理法或标记-清理法</p>\n</blockquote>\n<p>当老年代Old区域满时,会触发<strong>Full GC</strong>,同时回收新生代和老生代的所有区域.回收后诺内存还是不足时,会引发<strong>OOM异常</strong>;</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>垃圾收集算法可以划分为“引用计数式垃圾收集”（Reference Counting GC）和“追踪式垃圾收集”（Tracing GC）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。</p>\n<h2 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h2><ul>\n<li><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</li>\n<li>算法分为<strong>“标记”</strong>和<strong>“清除”</strong>两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，<strong>也可以反过来</strong>，标记存活的对象，统一回收所有未被标记的对象。</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>执行效率不稳定，如果Java堆中包含大量对象，而且<strong>其中大部分是需要被回收的</strong>，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的<strong>执行效率都随对象数量增长而降低</strong>；</li>\n<li>第二个是内存空间的碎片化问题，标记、清除之后会<strong>产生大量不连续的内存碎片</strong>，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时<strong>无法找到足够的连续内存</strong>而不得不<strong>提前触发另一次垃圾收集动作</strong>。</li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200529100358.png\" alt=\"图片\"></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200528203926.jpeg\" alt=\"标记清除算法\"></p>\n<h2 id=\"标记-复制算法\"><a href=\"#标记-复制算法\" class=\"headerlink\" title=\"标记-复制算法\"></a>标记-复制算法</h2><ul>\n<li><p><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</p>\n</li>\n<li><p>它将可用内存按容量划分为<strong>大小相等的两块</strong>，每次只使用其中的一块。</p>\n</li>\n<li><p>当这一块的内存用完了，就将还<strong>存活着的对象复制到另外一块上面</strong>，然后再把<strong>已使用过的内存空间一次清理掉</strong>。</p>\n</li>\n</ul>\n<h3 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>如果内存中<strong>多数对象都是存活的</strong>，这种算法将会<strong>产生大量的内存间复制的开销</strong></li>\n<li>代价是将可用内存缩小为了<strong>原来的一半</strong>,空间浪费未免太多了一点.</li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200529100420.jpg\" alt=\"图片\"></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200528203952.jpeg\" alt=\"标记复制算法\"></p>\n<h2 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h2><ul>\n<li><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</li>\n<li>在<strong>标记-清除</strong>的算法基础上改进,后续步骤不是直接对可回收对象进行清理，而是让<strong>所有存活的对象都向内存空间一端移动</strong>，然后直接<strong>清理掉边界以外的内存</strong>，</li>\n</ul>\n<h3 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>在有大量存活对象的老年代区域,<strong>移动存活对象</strong>并<strong>更新所有引用</strong>这些对象的地方将会是一种<strong>极为负重</strong>的操作,而且这种对象移动操作<strong>必须全程暂停用户应用程序</strong>才能进行,比<strong>标记-清除</strong>算法停顿时间长.</li>\n<li><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200529100506.jpg\" alt=\"图片\"></li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200528204014.jpeg\" alt=\"标记整理算法\"></p>\n<h2 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h2><p>现代商用虚拟机基于以上算法的优缺点,根据<strong>分代收集理论</strong>,在不同的区域采用了不同的收集算法.</p>\n<blockquote>\n<p><font color=red>老年代:新生代&#x3D;2:1</font></p>\n</blockquote>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200529101100.png\" alt=\"图片\"></p>\n<h3 id=\"新生代\"><a href=\"#新生代\" class=\"headerlink\" title=\"新生代\"></a>新生代</h3><blockquote>\n<p>堆大小默认比例:<font color=red>Eden:S0:S1&#x3D;8:1:1</font></p>\n<p>采用标记-复制算法</p>\n</blockquote>\n<p>新生代分为<strong>Eden区</strong>和<strong>Survior区</strong>,而Survior区又分为<strong>From Survior区(S0)<strong>和</strong>To Survior区(S1)</strong>.此区域采用标记-复制算法.每次Minor GC&#x2F;Young GC时,会把<strong>Eden区</strong>存活的对象复制到<strong>S0区</strong>,然后清空Eden区,当S0区满时,Eden区和S0区存活的对象会复制到<strong>S1区</strong>,然后S0和S0进行交换,永远保持S1为空状态,当新生代的对象经过一定次数的Minor GC还未被回收时,就会把这个对象移到老年代.</p>\n<h3 id=\"老年代\"><a href=\"#老年代\" class=\"headerlink\" title=\"老年代\"></a>老年代</h3><blockquote>\n<p>采用标记-整理法或标记-清理法</p>\n</blockquote>\n<p>当老年代Old区域满时,会触发<strong>Full GC</strong>,同时回收新生代和老生代的所有区域.回收后诺内存还是不足时,会引发<strong>OOM异常</strong>;</p>\n"},{"title":"JVM逃逸分析技术","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-26T08:02:00.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n逃逸分析技术的日渐成熟,促使所有的Java对象实例不一定都在Java堆上分配内存\n\n简单来讲就是，Java Hotspot 虚拟机可以分析**新创建对象**的使用范围，并决定是否在 Java 堆上分配内存的一项技术。\n\n## 使用\n\n- 开启逃逸分析：-XX:+DoEscapeAnalysis\n- 关闭逃逸分析：-XX:-DoEscapeAnalysis\n- 显示分析结果：-XX:+PrintEscapeAnalysis\n- 逃逸分析技术在 Java SE 6u23+ 开始支持,并默认设置为启用状态\n\n## 逃逸程度\n\n逸分析的基本行为就是分析对象动态作用域,从**不逃逸**、**方法逃逸**到**线程逃逸**，称为对象**由低到高的不同逃逸程度**。\n\n### 方法逃逸\n\n当一个对象在**方法中**被定义后，它可能被**外部方法**所引用，例如作为调用参数传递到其他地方中，称为**方法逃逸**。\n\n ```java\n /*StringBuffer sb是一个方法内部变量，上述代码中直接将sb返回，这样这个StringBuffer有可能被其他方法所\n *改变，这样它的作用域就不只是在方法内部，虽然它是一个局部变量，称其逃逸到了方法外部。甚至还有可能被外部线\n *程访问到，譬如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸。\n */\n  public static StringBuffer craeteStringBuffer(String s1, String s2) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(s1);\n      sb.append(s2);\n      return sb;\n  }\n  \n  //上述代码如果想要StringBuffer sb不逃出方法，可以这样写：\n  public static String createStringBuffer(String s1, String s2) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(s1);\n      sb.append(s2);\n      return sb.toString();\n  }\n ```\n\n\n\n### 线程逃逸\n\n- 当一个对象在**方法中**被定义后，它可能被**外部线程**访问到，譬如赋值给可以在其他线程中访问的实例变量，这种称为**线程逃逸**。\n\n\n\n\n\n## 逃逸分析优化\n\n如果能**证明一个对象不会逃逸到方法或线程之外**（换句话说是别的方法或线程无法通过任何途径访问到这个对象），或者**逃逸程度比较低**（只逃逸出方法而不会逃逸出线程），则可能为这个对象实例**采取不同程度的优化**\n\n### 栈上分配（Stack Allocations）\n\n- 如果确定一个对象**不会逃逸出线程之外**，那让这个对象在**栈上分配内存**将会是一个很不错的主意，对象所占用的内存空间就可以**随栈帧出栈而销毁**。\n- 由于复杂度等原因，HotSpot中目前暂时还没有做这项优化，但一些其他的虚拟机（如Excelsior JET）使用了这项优化。\n- 栈上分配可以支持方法逃逸，但不能支持线程逃逸。\n\n### 标量替换（Scalar Replacement）\n\n- 若一个数据已经无法再分解成更小的数据来表示了，Java虚拟机中的原始数据类型（int、long等数值类型及reference类型等）都不能再进一步分解了，那么这些数据就可以被称为**标量**。相对的，如果一个数据可以继续分解，那它就被称为**聚合量（Aggregate）**，Java中的对象就是典型的聚合量。\n- -XX:+EliminateAllocations\t开启标量替换(jdk8默认开启)\n- -XX:+PrintEliminateAllocations    查看标量的替换情况\n- 如果把一个Java对象拆散，根据程序访问的情况，将其用到的成员变量恢复为原始类型来访问，这个过程就称为**标量替换**\n- 假如逃逸分析能够证明一个对象**不会被方法外部访问**，并且这个对象可以被拆散，那么程序真正执行的时候将**可能不去创建这个对象**，而改为直接创建它的若干个被这个方法使用的**成员变量**来代替。\n- 标量替换可以视作**栈上分配的一种特例**，实现更简单（不用考虑整个对象完整结构的分配），但对逃逸程度的要求更高，它**不允许对象逃逸出方法范围内**。\n\n### 同步消除（Synchronization Elimination）\n\n> 也叫锁消除\n\n- +XX:+EliminateLocks\t开启同步消除(jdk8默认开启)\n- 线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量**不会逃逸出线程**，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争，对这个变量实施的**同步措施**也就可以**安全地消除掉**。\n- 比如常用的线程安全类:`StringBuffer`,`HashTable`,`Vector`等.","source":"_posts/java/jvm/jvm-javastack-EscapeAnalysis.md","raw":"---\ntitle: JVM逃逸分析技术\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-26 16:02:00\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\ncategories:\n- JVM\n---\n\n\n\n逃逸分析技术的日渐成熟,促使所有的Java对象实例不一定都在Java堆上分配内存\n\n简单来讲就是，Java Hotspot 虚拟机可以分析**新创建对象**的使用范围，并决定是否在 Java 堆上分配内存的一项技术。\n\n## 使用\n\n- 开启逃逸分析：-XX:+DoEscapeAnalysis\n- 关闭逃逸分析：-XX:-DoEscapeAnalysis\n- 显示分析结果：-XX:+PrintEscapeAnalysis\n- 逃逸分析技术在 Java SE 6u23+ 开始支持,并默认设置为启用状态\n\n## 逃逸程度\n\n逸分析的基本行为就是分析对象动态作用域,从**不逃逸**、**方法逃逸**到**线程逃逸**，称为对象**由低到高的不同逃逸程度**。\n\n### 方法逃逸\n\n当一个对象在**方法中**被定义后，它可能被**外部方法**所引用，例如作为调用参数传递到其他地方中，称为**方法逃逸**。\n\n ```java\n /*StringBuffer sb是一个方法内部变量，上述代码中直接将sb返回，这样这个StringBuffer有可能被其他方法所\n *改变，这样它的作用域就不只是在方法内部，虽然它是一个局部变量，称其逃逸到了方法外部。甚至还有可能被外部线\n *程访问到，譬如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸。\n */\n  public static StringBuffer craeteStringBuffer(String s1, String s2) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(s1);\n      sb.append(s2);\n      return sb;\n  }\n  \n  //上述代码如果想要StringBuffer sb不逃出方法，可以这样写：\n  public static String createStringBuffer(String s1, String s2) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(s1);\n      sb.append(s2);\n      return sb.toString();\n  }\n ```\n\n\n\n### 线程逃逸\n\n- 当一个对象在**方法中**被定义后，它可能被**外部线程**访问到，譬如赋值给可以在其他线程中访问的实例变量，这种称为**线程逃逸**。\n\n\n\n\n\n## 逃逸分析优化\n\n如果能**证明一个对象不会逃逸到方法或线程之外**（换句话说是别的方法或线程无法通过任何途径访问到这个对象），或者**逃逸程度比较低**（只逃逸出方法而不会逃逸出线程），则可能为这个对象实例**采取不同程度的优化**\n\n### 栈上分配（Stack Allocations）\n\n- 如果确定一个对象**不会逃逸出线程之外**，那让这个对象在**栈上分配内存**将会是一个很不错的主意，对象所占用的内存空间就可以**随栈帧出栈而销毁**。\n- 由于复杂度等原因，HotSpot中目前暂时还没有做这项优化，但一些其他的虚拟机（如Excelsior JET）使用了这项优化。\n- 栈上分配可以支持方法逃逸，但不能支持线程逃逸。\n\n### 标量替换（Scalar Replacement）\n\n- 若一个数据已经无法再分解成更小的数据来表示了，Java虚拟机中的原始数据类型（int、long等数值类型及reference类型等）都不能再进一步分解了，那么这些数据就可以被称为**标量**。相对的，如果一个数据可以继续分解，那它就被称为**聚合量（Aggregate）**，Java中的对象就是典型的聚合量。\n- -XX:+EliminateAllocations\t开启标量替换(jdk8默认开启)\n- -XX:+PrintEliminateAllocations    查看标量的替换情况\n- 如果把一个Java对象拆散，根据程序访问的情况，将其用到的成员变量恢复为原始类型来访问，这个过程就称为**标量替换**\n- 假如逃逸分析能够证明一个对象**不会被方法外部访问**，并且这个对象可以被拆散，那么程序真正执行的时候将**可能不去创建这个对象**，而改为直接创建它的若干个被这个方法使用的**成员变量**来代替。\n- 标量替换可以视作**栈上分配的一种特例**，实现更简单（不用考虑整个对象完整结构的分配），但对逃逸程度的要求更高，它**不允许对象逃逸出方法范围内**。\n\n### 同步消除（Synchronization Elimination）\n\n> 也叫锁消除\n\n- +XX:+EliminateLocks\t开启同步消除(jdk8默认开启)\n- 线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量**不会逃逸出线程**，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争，对这个变量实施的**同步措施**也就可以**安全地消除掉**。\n- 比如常用的线程安全类:`StringBuffer`,`HashTable`,`Vector`等.","slug":"java/jvm/jvm-javastack-EscapeAnalysis","published":1,"updated":"2021-10-08T07:57:24.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eib007zvpuc2od71llu","content":"<p>逃逸分析技术的日渐成熟,促使所有的Java对象实例不一定都在Java堆上分配内存</p>\n<p>简单来讲就是，Java Hotspot 虚拟机可以分析<strong>新创建对象</strong>的使用范围，并决定是否在 Java 堆上分配内存的一项技术。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li>开启逃逸分析：-XX:+DoEscapeAnalysis</li>\n<li>关闭逃逸分析：-XX:-DoEscapeAnalysis</li>\n<li>显示分析结果：-XX:+PrintEscapeAnalysis</li>\n<li>逃逸分析技术在 Java SE 6u23+ 开始支持,并默认设置为启用状态</li>\n</ul>\n<h2 id=\"逃逸程度\"><a href=\"#逃逸程度\" class=\"headerlink\" title=\"逃逸程度\"></a>逃逸程度</h2><p>逸分析的基本行为就是分析对象动态作用域,从<strong>不逃逸</strong>、<strong>方法逃逸</strong>到<strong>线程逃逸</strong>，称为对象<strong>由低到高的不同逃逸程度</strong>。</p>\n<h3 id=\"方法逃逸\"><a href=\"#方法逃逸\" class=\"headerlink\" title=\"方法逃逸\"></a>方法逃逸</h3><p>当一个对象在<strong>方法中</strong>被定义后，它可能被<strong>外部方法</strong>所引用，例如作为调用参数传递到其他地方中，称为<strong>方法逃逸</strong>。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*StringBuffer sb是一个方法内部变量，上述代码中直接将sb返回，这样这个StringBuffer有可能被其他方法所</span></span><br><span class=\"line\"><span class=\"comment\">*改变，这样它的作用域就不只是在方法内部，虽然它是一个局部变量，称其逃逸到了方法外部。甚至还有可能被外部线</span></span><br><span class=\"line\"><span class=\"comment\">*程访问到，譬如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> StringBuffer <span class=\"title function_\">craeteStringBuffer</span><span class=\"params\">(String s1, String s2)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">     sb.append(s1);</span><br><span class=\"line\">     sb.append(s2);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> sb;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//上述代码如果想要StringBuffer sb不逃出方法，可以这样写：</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">     sb.append(s1);</span><br><span class=\"line\">     sb.append(s2);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"线程逃逸\"><a href=\"#线程逃逸\" class=\"headerlink\" title=\"线程逃逸\"></a>线程逃逸</h3><ul>\n<li>当一个对象在<strong>方法中</strong>被定义后，它可能被<strong>外部线程</strong>访问到，譬如赋值给可以在其他线程中访问的实例变量，这种称为<strong>线程逃逸</strong>。</li>\n</ul>\n<h2 id=\"逃逸分析优化\"><a href=\"#逃逸分析优化\" class=\"headerlink\" title=\"逃逸分析优化\"></a>逃逸分析优化</h2><p>如果能<strong>证明一个对象不会逃逸到方法或线程之外</strong>（换句话说是别的方法或线程无法通过任何途径访问到这个对象），或者<strong>逃逸程度比较低</strong>（只逃逸出方法而不会逃逸出线程），则可能为这个对象实例<strong>采取不同程度的优化</strong></p>\n<h3 id=\"栈上分配（Stack-Allocations）\"><a href=\"#栈上分配（Stack-Allocations）\" class=\"headerlink\" title=\"栈上分配（Stack Allocations）\"></a>栈上分配（Stack Allocations）</h3><ul>\n<li>如果确定一个对象<strong>不会逃逸出线程之外</strong>，那让这个对象在<strong>栈上分配内存</strong>将会是一个很不错的主意，对象所占用的内存空间就可以<strong>随栈帧出栈而销毁</strong>。</li>\n<li>由于复杂度等原因，HotSpot中目前暂时还没有做这项优化，但一些其他的虚拟机（如Excelsior JET）使用了这项优化。</li>\n<li>栈上分配可以支持方法逃逸，但不能支持线程逃逸。</li>\n</ul>\n<h3 id=\"标量替换（Scalar-Replacement）\"><a href=\"#标量替换（Scalar-Replacement）\" class=\"headerlink\" title=\"标量替换（Scalar Replacement）\"></a>标量替换（Scalar Replacement）</h3><ul>\n<li>若一个数据已经无法再分解成更小的数据来表示了，Java虚拟机中的原始数据类型（int、long等数值类型及reference类型等）都不能再进一步分解了，那么这些数据就可以被称为<strong>标量</strong>。相对的，如果一个数据可以继续分解，那它就被称为<strong>聚合量（Aggregate）</strong>，Java中的对象就是典型的聚合量。</li>\n<li>-XX:+EliminateAllocations    开启标量替换(jdk8默认开启)</li>\n<li>-XX:+PrintEliminateAllocations    查看标量的替换情况</li>\n<li>如果把一个Java对象拆散，根据程序访问的情况，将其用到的成员变量恢复为原始类型来访问，这个过程就称为<strong>标量替换</strong></li>\n<li>假如逃逸分析能够证明一个对象<strong>不会被方法外部访问</strong>，并且这个对象可以被拆散，那么程序真正执行的时候将<strong>可能不去创建这个对象</strong>，而改为直接创建它的若干个被这个方法使用的<strong>成员变量</strong>来代替。</li>\n<li>标量替换可以视作<strong>栈上分配的一种特例</strong>，实现更简单（不用考虑整个对象完整结构的分配），但对逃逸程度的要求更高，它<strong>不允许对象逃逸出方法范围内</strong>。</li>\n</ul>\n<h3 id=\"同步消除（Synchronization-Elimination）\"><a href=\"#同步消除（Synchronization-Elimination）\" class=\"headerlink\" title=\"同步消除（Synchronization Elimination）\"></a>同步消除（Synchronization Elimination）</h3><blockquote>\n<p>也叫锁消除</p>\n</blockquote>\n<ul>\n<li>+XX:+EliminateLocks    开启同步消除(jdk8默认开启)</li>\n<li>线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量<strong>不会逃逸出线程</strong>，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争，对这个变量实施的<strong>同步措施</strong>也就可以<strong>安全地消除掉</strong>。</li>\n<li>比如常用的线程安全类:<code>StringBuffer</code>,<code>HashTable</code>,<code>Vector</code>等.</li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p>逃逸分析技术的日渐成熟,促使所有的Java对象实例不一定都在Java堆上分配内存</p>\n<p>简单来讲就是，Java Hotspot 虚拟机可以分析<strong>新创建对象</strong>的使用范围，并决定是否在 Java 堆上分配内存的一项技术。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li>开启逃逸分析：-XX:+DoEscapeAnalysis</li>\n<li>关闭逃逸分析：-XX:-DoEscapeAnalysis</li>\n<li>显示分析结果：-XX:+PrintEscapeAnalysis</li>\n<li>逃逸分析技术在 Java SE 6u23+ 开始支持,并默认设置为启用状态</li>\n</ul>\n<h2 id=\"逃逸程度\"><a href=\"#逃逸程度\" class=\"headerlink\" title=\"逃逸程度\"></a>逃逸程度</h2><p>逸分析的基本行为就是分析对象动态作用域,从<strong>不逃逸</strong>、<strong>方法逃逸</strong>到<strong>线程逃逸</strong>，称为对象<strong>由低到高的不同逃逸程度</strong>。</p>\n<h3 id=\"方法逃逸\"><a href=\"#方法逃逸\" class=\"headerlink\" title=\"方法逃逸\"></a>方法逃逸</h3><p>当一个对象在<strong>方法中</strong>被定义后，它可能被<strong>外部方法</strong>所引用，例如作为调用参数传递到其他地方中，称为<strong>方法逃逸</strong>。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*StringBuffer sb是一个方法内部变量，上述代码中直接将sb返回，这样这个StringBuffer有可能被其他方法所</span></span><br><span class=\"line\"><span class=\"comment\">*改变，这样它的作用域就不只是在方法内部，虽然它是一个局部变量，称其逃逸到了方法外部。甚至还有可能被外部线</span></span><br><span class=\"line\"><span class=\"comment\">*程访问到，譬如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> StringBuffer <span class=\"title function_\">craeteStringBuffer</span><span class=\"params\">(String s1, String s2)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">     sb.append(s1);</span><br><span class=\"line\">     sb.append(s2);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> sb;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//上述代码如果想要StringBuffer sb不逃出方法，可以这样写：</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">     sb.append(s1);</span><br><span class=\"line\">     sb.append(s2);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"线程逃逸\"><a href=\"#线程逃逸\" class=\"headerlink\" title=\"线程逃逸\"></a>线程逃逸</h3><ul>\n<li>当一个对象在<strong>方法中</strong>被定义后，它可能被<strong>外部线程</strong>访问到，譬如赋值给可以在其他线程中访问的实例变量，这种称为<strong>线程逃逸</strong>。</li>\n</ul>\n<h2 id=\"逃逸分析优化\"><a href=\"#逃逸分析优化\" class=\"headerlink\" title=\"逃逸分析优化\"></a>逃逸分析优化</h2><p>如果能<strong>证明一个对象不会逃逸到方法或线程之外</strong>（换句话说是别的方法或线程无法通过任何途径访问到这个对象），或者<strong>逃逸程度比较低</strong>（只逃逸出方法而不会逃逸出线程），则可能为这个对象实例<strong>采取不同程度的优化</strong></p>\n<h3 id=\"栈上分配（Stack-Allocations）\"><a href=\"#栈上分配（Stack-Allocations）\" class=\"headerlink\" title=\"栈上分配（Stack Allocations）\"></a>栈上分配（Stack Allocations）</h3><ul>\n<li>如果确定一个对象<strong>不会逃逸出线程之外</strong>，那让这个对象在<strong>栈上分配内存</strong>将会是一个很不错的主意，对象所占用的内存空间就可以<strong>随栈帧出栈而销毁</strong>。</li>\n<li>由于复杂度等原因，HotSpot中目前暂时还没有做这项优化，但一些其他的虚拟机（如Excelsior JET）使用了这项优化。</li>\n<li>栈上分配可以支持方法逃逸，但不能支持线程逃逸。</li>\n</ul>\n<h3 id=\"标量替换（Scalar-Replacement）\"><a href=\"#标量替换（Scalar-Replacement）\" class=\"headerlink\" title=\"标量替换（Scalar Replacement）\"></a>标量替换（Scalar Replacement）</h3><ul>\n<li>若一个数据已经无法再分解成更小的数据来表示了，Java虚拟机中的原始数据类型（int、long等数值类型及reference类型等）都不能再进一步分解了，那么这些数据就可以被称为<strong>标量</strong>。相对的，如果一个数据可以继续分解，那它就被称为<strong>聚合量（Aggregate）</strong>，Java中的对象就是典型的聚合量。</li>\n<li>-XX:+EliminateAllocations    开启标量替换(jdk8默认开启)</li>\n<li>-XX:+PrintEliminateAllocations    查看标量的替换情况</li>\n<li>如果把一个Java对象拆散，根据程序访问的情况，将其用到的成员变量恢复为原始类型来访问，这个过程就称为<strong>标量替换</strong></li>\n<li>假如逃逸分析能够证明一个对象<strong>不会被方法外部访问</strong>，并且这个对象可以被拆散，那么程序真正执行的时候将<strong>可能不去创建这个对象</strong>，而改为直接创建它的若干个被这个方法使用的<strong>成员变量</strong>来代替。</li>\n<li>标量替换可以视作<strong>栈上分配的一种特例</strong>，实现更简单（不用考虑整个对象完整结构的分配），但对逃逸程度的要求更高，它<strong>不允许对象逃逸出方法范围内</strong>。</li>\n</ul>\n<h3 id=\"同步消除（Synchronization-Elimination）\"><a href=\"#同步消除（Synchronization-Elimination）\" class=\"headerlink\" title=\"同步消除（Synchronization Elimination）\"></a>同步消除（Synchronization Elimination）</h3><blockquote>\n<p>也叫锁消除</p>\n</blockquote>\n<ul>\n<li>+XX:+EliminateLocks    开启同步消除(jdk8默认开启)</li>\n<li>线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量<strong>不会逃逸出线程</strong>，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争，对这个变量实施的<strong>同步措施</strong>也就可以<strong>安全地消除掉</strong>。</li>\n<li>比如常用的线程安全类:<code>StringBuffer</code>,<code>HashTable</code>,<code>Vector</code>等.</li>\n</ul>\n"},{"title":"Java四种引用方法使用和对比","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-29T02:22:07.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200526225718.jpg)\n\n## 强引用（Strongly Reference）\n\n> 无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。\n>\n> <font color=red>回收时机:强引用关系不存在时</font>\n\n```java\nObject obj=new Object();\n```\n\n\n\n## 软引用（Soft Reference）\n\n> 软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。\n>\n> <font color=red>回收时机:发送内存溢出异常前</font>\n\n```java\n//软引用\n\nSoftReference<Object> srf = new SoftReference<Object>(new Object());\n\n//or\n\nObject obj=new Object();\nSoftReference<Object> srf = new SoftReference<Object>(obj);\nobj=null;  //这种方法一定要设置obj为null,否则这个对象除了软引用可达外,还有原来强引用也可达\n```\n\n\n\n### 弱引用（Weak Reference）\n\n> 弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象**只能生存到下一次垃圾收集发生为止**。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。\n>\n> <font color=red>回收时机:下一次垃圾回收时</font>\n\n```java\n//弱引用\n\nWeakReference<Object> wrf = new WeakReference<Object>(new Object());\n\n//or\nObject obj=new Object();\nWeakReference<Object> wrf = new WeakReference<Object>(new Object());\nobj=null;\n```\n\n\n\n### 虚引用（Phantom Reference）\n\n> 虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。\n>\n> <font color=red>回收时机:随时</font>\n\n```java\n//虚引用\nPhantomReference<Object> prf = new PhantomReference<Object>(new Object(), new ReferenceQueue<>());\n\n//or\n\nObject obj=new Object();\nPhantomReference<Object> prf = new PhantomReference<Object>(obj, new ReferenceQueue<>());\nobj=null;\n```\n","source":"_posts/java/jvm/jvm-object-four-quote.md","raw":"---\ntitle: Java四种引用方法使用和对比\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-29 10:22:07\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Jvm\n- Java\ncategories:\n- Java\n---\n\n\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200526225718.jpg)\n\n## 强引用（Strongly Reference）\n\n> 无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。\n>\n> <font color=red>回收时机:强引用关系不存在时</font>\n\n```java\nObject obj=new Object();\n```\n\n\n\n## 软引用（Soft Reference）\n\n> 软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。\n>\n> <font color=red>回收时机:发送内存溢出异常前</font>\n\n```java\n//软引用\n\nSoftReference<Object> srf = new SoftReference<Object>(new Object());\n\n//or\n\nObject obj=new Object();\nSoftReference<Object> srf = new SoftReference<Object>(obj);\nobj=null;  //这种方法一定要设置obj为null,否则这个对象除了软引用可达外,还有原来强引用也可达\n```\n\n\n\n### 弱引用（Weak Reference）\n\n> 弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象**只能生存到下一次垃圾收集发生为止**。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。\n>\n> <font color=red>回收时机:下一次垃圾回收时</font>\n\n```java\n//弱引用\n\nWeakReference<Object> wrf = new WeakReference<Object>(new Object());\n\n//or\nObject obj=new Object();\nWeakReference<Object> wrf = new WeakReference<Object>(new Object());\nobj=null;\n```\n\n\n\n### 虚引用（Phantom Reference）\n\n> 虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。\n>\n> <font color=red>回收时机:随时</font>\n\n```java\n//虚引用\nPhantomReference<Object> prf = new PhantomReference<Object>(new Object(), new ReferenceQueue<>());\n\n//or\n\nObject obj=new Object();\nPhantomReference<Object> prf = new PhantomReference<Object>(obj, new ReferenceQueue<>());\nobj=null;\n```\n","slug":"java/jvm/jvm-object-four-quote","published":1,"updated":"2021-10-08T08:28:46.345Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eic0082vpuc0be7f2qp","content":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200526225718.jpg\" alt=\"图片\"></p>\n<h2 id=\"强引用（Strongly-Reference）\"><a href=\"#强引用（Strongly-Reference）\" class=\"headerlink\" title=\"强引用（Strongly Reference）\"></a>强引用（Strongly Reference）</h2><blockquote>\n<p>无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</p>\n<p><font color=red>回收时机:强引用关系不存在时</font></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object obj=<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"软引用（Soft-Reference）\"><a href=\"#软引用（Soft-Reference）\" class=\"headerlink\" title=\"软引用（Soft Reference）\"></a>软引用（Soft Reference）</h2><blockquote>\n<p>软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。</p>\n<p><font color=red>回收时机:发送内存溢出异常前</font></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//软引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">SoftReference&lt;Object&gt; srf = <span class=\"keyword\">new</span> <span class=\"title class_\">SoftReference</span>&lt;Object&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"></span><br><span class=\"line\">Object obj=<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">SoftReference&lt;Object&gt; srf = <span class=\"keyword\">new</span> <span class=\"title class_\">SoftReference</span>&lt;Object&gt;(obj);</span><br><span class=\"line\">obj=<span class=\"literal\">null</span>;  <span class=\"comment\">//这种方法一定要设置obj为null,否则这个对象除了软引用可达外,还有原来强引用也可达</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"弱引用（Weak-Reference）\"><a href=\"#弱引用（Weak-Reference）\" class=\"headerlink\" title=\"弱引用（Weak Reference）\"></a>弱引用（Weak Reference）</h3><blockquote>\n<p>弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象<strong>只能生存到下一次垃圾收集发生为止</strong>。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</p>\n<p><font color=red>回收时机:下一次垃圾回收时</font></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//弱引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">WeakReference&lt;Object&gt; wrf = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;Object&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\">Object obj=<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">WeakReference&lt;Object&gt; wrf = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;Object&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>());</span><br><span class=\"line\">obj=<span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"虚引用（Phantom-Reference）\"><a href=\"#虚引用（Phantom-Reference）\" class=\"headerlink\" title=\"虚引用（Phantom Reference）\"></a>虚引用（Phantom Reference）</h3><blockquote>\n<p>虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。</p>\n<p><font color=red>回收时机:随时</font></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//虚引用</span></span><br><span class=\"line\">PhantomReference&lt;Object&gt; prf = <span class=\"keyword\">new</span> <span class=\"title class_\">PhantomReference</span>&lt;Object&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>(), <span class=\"keyword\">new</span> <span class=\"title class_\">ReferenceQueue</span>&lt;&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"></span><br><span class=\"line\">Object obj=<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">PhantomReference&lt;Object&gt; prf = <span class=\"keyword\">new</span> <span class=\"title class_\">PhantomReference</span>&lt;Object&gt;(obj, <span class=\"keyword\">new</span> <span class=\"title class_\">ReferenceQueue</span>&lt;&gt;());</span><br><span class=\"line\">obj=<span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200526225718.jpg\" alt=\"图片\"></p>\n<h2 id=\"强引用（Strongly-Reference）\"><a href=\"#强引用（Strongly-Reference）\" class=\"headerlink\" title=\"强引用（Strongly Reference）\"></a>强引用（Strongly Reference）</h2><blockquote>\n<p>无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</p>\n<p><font color=red>回收时机:强引用关系不存在时</font></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object obj=<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"软引用（Soft-Reference）\"><a href=\"#软引用（Soft-Reference）\" class=\"headerlink\" title=\"软引用（Soft Reference）\"></a>软引用（Soft Reference）</h2><blockquote>\n<p>软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。</p>\n<p><font color=red>回收时机:发送内存溢出异常前</font></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//软引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">SoftReference&lt;Object&gt; srf = <span class=\"keyword\">new</span> <span class=\"title class_\">SoftReference</span>&lt;Object&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"></span><br><span class=\"line\">Object obj=<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">SoftReference&lt;Object&gt; srf = <span class=\"keyword\">new</span> <span class=\"title class_\">SoftReference</span>&lt;Object&gt;(obj);</span><br><span class=\"line\">obj=<span class=\"literal\">null</span>;  <span class=\"comment\">//这种方法一定要设置obj为null,否则这个对象除了软引用可达外,还有原来强引用也可达</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"弱引用（Weak-Reference）\"><a href=\"#弱引用（Weak-Reference）\" class=\"headerlink\" title=\"弱引用（Weak Reference）\"></a>弱引用（Weak Reference）</h3><blockquote>\n<p>弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象<strong>只能生存到下一次垃圾收集发生为止</strong>。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</p>\n<p><font color=red>回收时机:下一次垃圾回收时</font></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//弱引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">WeakReference&lt;Object&gt; wrf = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;Object&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\">Object obj=<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">WeakReference&lt;Object&gt; wrf = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;Object&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>());</span><br><span class=\"line\">obj=<span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"虚引用（Phantom-Reference）\"><a href=\"#虚引用（Phantom-Reference）\" class=\"headerlink\" title=\"虚引用（Phantom Reference）\"></a>虚引用（Phantom Reference）</h3><blockquote>\n<p>虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。</p>\n<p><font color=red>回收时机:随时</font></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//虚引用</span></span><br><span class=\"line\">PhantomReference&lt;Object&gt; prf = <span class=\"keyword\">new</span> <span class=\"title class_\">PhantomReference</span>&lt;Object&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>(), <span class=\"keyword\">new</span> <span class=\"title class_\">ReferenceQueue</span>&lt;&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"></span><br><span class=\"line\">Object obj=<span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">PhantomReference&lt;Object&gt; prf = <span class=\"keyword\">new</span> <span class=\"title class_\">PhantomReference</span>&lt;Object&gt;(obj, <span class=\"keyword\">new</span> <span class=\"title class_\">ReferenceQueue</span>&lt;&gt;());</span><br><span class=\"line\">obj=<span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"JVM判断对象是否还活着的两种方法","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-29T02:18:30.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## 引用计数法\n\n> Java虚拟机**并不是**通过引用计数算法来判断对象是否存活的。\n\n在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。\n\n### 优点\n\n- 原理简单,判定效率高\n\n### 缺点\n\n- 不能用于复杂的环境中,比如对象的互相引用问题\n\n\n\n##  可达性分析算法\n\n> Java虚拟机使用此算法来判断对象是否存活\n\n这个算法的基本思路就是通过一系列称为“`GC Roots`”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，**搜索过程所走过的路径称为“引用链”（Reference Chain）**，如果某个对象到GCRoots间**没有任何引用链相连**，或者用图论的话来说就是**从GC Roots到这个对象不可达时**，则证明**此对象是不可能再被使用的**。\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200526224246.jpeg)\n\n\n\nJava中作为GC Roots的对象:\n\n- 在虚拟机栈（**栈帧中的本地变量表**）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。\n- 在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。\n- 在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。\n- 在本地方法栈中JNI（即通常所说的Native方法）引用的对象。\n- Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。\n- 所有被同步锁（synchronized关键字）持有的对象。\n\n- 反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。\n- **其他对象临时性地加入,共同构成GC Roots**","source":"_posts/java/jvm/jvm-object-is-alive.md","raw":"---\ntitle: JVM判断对象是否还活着的两种方法\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-29 10:18:30\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\ncategories:\n- JVM\n---\n\n\n\n## 引用计数法\n\n> Java虚拟机**并不是**通过引用计数算法来判断对象是否存活的。\n\n在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。\n\n### 优点\n\n- 原理简单,判定效率高\n\n### 缺点\n\n- 不能用于复杂的环境中,比如对象的互相引用问题\n\n\n\n##  可达性分析算法\n\n> Java虚拟机使用此算法来判断对象是否存活\n\n这个算法的基本思路就是通过一系列称为“`GC Roots`”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，**搜索过程所走过的路径称为“引用链”（Reference Chain）**，如果某个对象到GCRoots间**没有任何引用链相连**，或者用图论的话来说就是**从GC Roots到这个对象不可达时**，则证明**此对象是不可能再被使用的**。\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200526224246.jpeg)\n\n\n\nJava中作为GC Roots的对象:\n\n- 在虚拟机栈（**栈帧中的本地变量表**）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。\n- 在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。\n- 在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。\n- 在本地方法栈中JNI（即通常所说的Native方法）引用的对象。\n- Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。\n- 所有被同步锁（synchronized关键字）持有的对象。\n\n- 反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。\n- **其他对象临时性地加入,共同构成GC Roots**","slug":"java/jvm/jvm-object-is-alive","published":1,"updated":"2021-10-08T08:28:57.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eid0086vpuchg7og5k5","content":"<h2 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h2><blockquote>\n<p>Java虚拟机<strong>并不是</strong>通过引用计数算法来判断对象是否存活的。</p>\n</blockquote>\n<p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>原理简单,判定效率高</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>不能用于复杂的环境中,比如对象的互相引用问题</li>\n</ul>\n<h2 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h2><blockquote>\n<p>Java虚拟机使用此算法来判断对象是否存活</p>\n</blockquote>\n<p>这个算法的基本思路就是通过一系列称为“<code>GC Roots</code>”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，<strong>搜索过程所走过的路径称为“引用链”（Reference Chain）</strong>，如果某个对象到GCRoots间<strong>没有任何引用链相连</strong>，或者用图论的话来说就是<strong>从GC Roots到这个对象不可达时</strong>，则证明<strong>此对象是不可能再被使用的</strong>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200526224246.jpeg\" alt=\"图片\"></p>\n<p>Java中作为GC Roots的对象:</p>\n<ul>\n<li><p>在虚拟机栈（<strong>栈帧中的本地变量表</strong>）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。</p>\n</li>\n<li><p>在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。</p>\n</li>\n<li><p>在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。</p>\n</li>\n<li><p>在本地方法栈中JNI（即通常所说的Native方法）引用的对象。</p>\n</li>\n<li><p>Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。</p>\n</li>\n<li><p>所有被同步锁（synchronized关键字）持有的对象。</p>\n</li>\n<li><p>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</p>\n</li>\n<li><p><strong>其他对象临时性地加入,共同构成GC Roots</strong></p>\n</li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h2><blockquote>\n<p>Java虚拟机<strong>并不是</strong>通过引用计数算法来判断对象是否存活的。</p>\n</blockquote>\n<p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。</p>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>原理简单,判定效率高</li>\n</ul>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>不能用于复杂的环境中,比如对象的互相引用问题</li>\n</ul>\n<h2 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h2><blockquote>\n<p>Java虚拟机使用此算法来判断对象是否存活</p>\n</blockquote>\n<p>这个算法的基本思路就是通过一系列称为“<code>GC Roots</code>”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，<strong>搜索过程所走过的路径称为“引用链”（Reference Chain）</strong>，如果某个对象到GCRoots间<strong>没有任何引用链相连</strong>，或者用图论的话来说就是<strong>从GC Roots到这个对象不可达时</strong>，则证明<strong>此对象是不可能再被使用的</strong>。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200526224246.jpeg\" alt=\"图片\"></p>\n<p>Java中作为GC Roots的对象:</p>\n<ul>\n<li><p>在虚拟机栈（<strong>栈帧中的本地变量表</strong>）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。</p>\n</li>\n<li><p>在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。</p>\n</li>\n<li><p>在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。</p>\n</li>\n<li><p>在本地方法栈中JNI（即通常所说的Native方法）引用的对象。</p>\n</li>\n<li><p>Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。</p>\n</li>\n<li><p>所有被同步锁（synchronized关键字）持有的对象。</p>\n</li>\n<li><p>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</p>\n</li>\n<li><p><strong>其他对象临时性地加入,共同构成GC Roots</strong></p>\n</li>\n</ul>\n"},{"title":"JVM运行时数据区域","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-26T08:35:47.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n# JVM运行时数据区域\n\n![Java虚拟机运行时数据区](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200526000623.jpeg)\n\n### 程序计数器\n\n- 线程私有\n\n- 唯一一个没有规定 OutOfMemoryError 异常 的区域\n\n- 它可以看作是当前线程所执行的字节码的行号指示器\n\n- 如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）\n\n  \n\n  > (摘自网上)我们想象下，CPU是怎么知道记住之前A线程，执行到哪一处的？\n  >\n  > 答案是，CPU根本就不会记住之前执行到哪里了，它只是埋头苦干；那是什么保证了切换线程的程序可以正常执行的；答案是 ： 程序计数器 ；**程序计数器里面保存的是 当前线程执行的字节码的行号**（看着像行号，其实是指令地址）；\n  >\n  > 那么，我们需要几个程序计数器呢？如果，我们只有一个的话，切换B线程以后，程序计数器里面保存的就是B线程所执行的字节码的行号了，再切换回A线程，就蒙圈了，不知道执行到哪里了，因为，程序计数器里面保存的是B线程当前执行的字节码地址 ；因此，我们可以想象出，要为每个线程都分配一个程序计数器，因此，**程序计数器的内存空间是线程私**有的 ；这样即使线程 A 被挂起，但是线程 A 里面的程序计数器，记住了A线程当前执行到的字节码的指令地址了 ，等再次切回到A线程的时候，看一下程序计数器，就知道之前执行到哪里了！\n  >\n  > 那么程序计数器，什么时候分配内存呢？我们试想下，一个线程在执行的任何期间，都会失去CPU执行权，因此，我们要从一个线程被创建开始执行，就要无时无刻的记录着该线程当前执行到哪里了！因此，线程计数器，必须是**线程被创建开始执行的时候，就要一同被创建**； \n  >\n  > 程序计数器，保存的是当前执行的字节码的偏移地址（也就是之前说的行号，其实那不是行号，是指令的偏移地址，只是为了好理解，才说是行号的，），当执行到下一条指令的时候，改变的只是程序计数器中保存的地址，并不需要申请新的内存来保存新的指令地址；因此，永远都不可能内存溢出的；因此，jvm虚拟机规范，也就没有规定，也是**唯一一个没有规定 OutOfMemoryError 异常 的区域**;\n  >\n  > **当线程执行的是本地方法的时候，程序计数器中保存的值是空（undefined）**；原因很简单：本地方法是C++/C 写的，由系统调用，根本不会产生字节码文件，因此，程序计数器也就不会做任何记录 \n\n\n\n### Java虚拟机栈\n\n- 线程私有\n- 如果线程请求的栈深度大于虚拟机所允许的深度，将抛出`StackOverflowError异常`；\n- 如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出`OutOfMemoryError异常`；(<font color=red>HotSpot虚拟机的栈容量是不可以动态扩展的，以前的Classic虚拟机倒是可以。所以在HotSpot虚拟机上是不会由于虚拟机栈无法扩展而导致OutOfMemoryError异常——只要线程申请栈空间成功了就不会有OOM，但是如果申请时就失败，仍然是会出现OOM异常的</font>)\n- **-Xss5m**:\t设置5m的栈容量\n- 每个方法执行都会创建一个**栈帧**，栈帧包含局部变量表、操作数栈、动态连接、方法出口等\n\n### 本地方法栈\n\n- 线程私有\n- 与Java虚拟机栈相似\n\n- 与Java虚拟机栈区别:\tJava虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。\n- Hot-Spot虚拟机直接就把本地方法栈和虚拟机栈合二为一\n\n- 与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出StackOverflowError和OutOfMemoryError异常\n\n### Java堆\n\n- 线程共享\n- 所有的Java对象实例不一定都在Java堆上分配内存\n- Java堆既可以被实现成固定大小的，也可以是可扩展的，不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数`-Xmx`和`-Xms`设定）。\n- 如果在Java堆中没有内存完成实例分配，并且堆也无法再扩展时，Java虚拟机将会抛出**OutOfMemoryError异常**。\n- Java堆是垃圾收集器(Garbage Collected)管理的内存区域\n\n\n\n### 方法区\n\n- 线程共享\n\n- 用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。\n\n- 虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作**“非堆”（Non-Heap）**，目的是**与Java堆区分开来**。\n\n- 在JDK1.6及之前,使用`永久代`来实现方法区.\n\n  - -XX:MaxPermSize    设置永久代内存上限\n  - -XX:PermSize    设置永久代内存\n\n- JDK1.7把`字符串常量池`、`类的静态变量(class statics)`转移到了java heap,但是永久代还是存在,主要放一些类信息(`运算时常量池`)等.\n\n  \n\n- JDK1.8彻底移除永久代,方法区采用本地内存中实现的元空间（Meta-space）来代替,将JDK1.7中永久代的信息移到了元空间,像`字符串常量池`和`静态变量`还是存在Java Heap中\n\n- 如果方法区无法满足新的内存分配需求时，将抛出**OutOfMemoryError异常**。\n\n","source":"_posts/java/jvm/jvm-running-data-area.md","raw":"---\ntitle: JVM运行时数据区域\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-26 16:35:47\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\ncategories:\n- JVM\n---\n\n# JVM运行时数据区域\n\n![Java虚拟机运行时数据区](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200526000623.jpeg)\n\n### 程序计数器\n\n- 线程私有\n\n- 唯一一个没有规定 OutOfMemoryError 异常 的区域\n\n- 它可以看作是当前线程所执行的字节码的行号指示器\n\n- 如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）\n\n  \n\n  > (摘自网上)我们想象下，CPU是怎么知道记住之前A线程，执行到哪一处的？\n  >\n  > 答案是，CPU根本就不会记住之前执行到哪里了，它只是埋头苦干；那是什么保证了切换线程的程序可以正常执行的；答案是 ： 程序计数器 ；**程序计数器里面保存的是 当前线程执行的字节码的行号**（看着像行号，其实是指令地址）；\n  >\n  > 那么，我们需要几个程序计数器呢？如果，我们只有一个的话，切换B线程以后，程序计数器里面保存的就是B线程所执行的字节码的行号了，再切换回A线程，就蒙圈了，不知道执行到哪里了，因为，程序计数器里面保存的是B线程当前执行的字节码地址 ；因此，我们可以想象出，要为每个线程都分配一个程序计数器，因此，**程序计数器的内存空间是线程私**有的 ；这样即使线程 A 被挂起，但是线程 A 里面的程序计数器，记住了A线程当前执行到的字节码的指令地址了 ，等再次切回到A线程的时候，看一下程序计数器，就知道之前执行到哪里了！\n  >\n  > 那么程序计数器，什么时候分配内存呢？我们试想下，一个线程在执行的任何期间，都会失去CPU执行权，因此，我们要从一个线程被创建开始执行，就要无时无刻的记录着该线程当前执行到哪里了！因此，线程计数器，必须是**线程被创建开始执行的时候，就要一同被创建**； \n  >\n  > 程序计数器，保存的是当前执行的字节码的偏移地址（也就是之前说的行号，其实那不是行号，是指令的偏移地址，只是为了好理解，才说是行号的，），当执行到下一条指令的时候，改变的只是程序计数器中保存的地址，并不需要申请新的内存来保存新的指令地址；因此，永远都不可能内存溢出的；因此，jvm虚拟机规范，也就没有规定，也是**唯一一个没有规定 OutOfMemoryError 异常 的区域**;\n  >\n  > **当线程执行的是本地方法的时候，程序计数器中保存的值是空（undefined）**；原因很简单：本地方法是C++/C 写的，由系统调用，根本不会产生字节码文件，因此，程序计数器也就不会做任何记录 \n\n\n\n### Java虚拟机栈\n\n- 线程私有\n- 如果线程请求的栈深度大于虚拟机所允许的深度，将抛出`StackOverflowError异常`；\n- 如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出`OutOfMemoryError异常`；(<font color=red>HotSpot虚拟机的栈容量是不可以动态扩展的，以前的Classic虚拟机倒是可以。所以在HotSpot虚拟机上是不会由于虚拟机栈无法扩展而导致OutOfMemoryError异常——只要线程申请栈空间成功了就不会有OOM，但是如果申请时就失败，仍然是会出现OOM异常的</font>)\n- **-Xss5m**:\t设置5m的栈容量\n- 每个方法执行都会创建一个**栈帧**，栈帧包含局部变量表、操作数栈、动态连接、方法出口等\n\n### 本地方法栈\n\n- 线程私有\n- 与Java虚拟机栈相似\n\n- 与Java虚拟机栈区别:\tJava虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。\n- Hot-Spot虚拟机直接就把本地方法栈和虚拟机栈合二为一\n\n- 与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出StackOverflowError和OutOfMemoryError异常\n\n### Java堆\n\n- 线程共享\n- 所有的Java对象实例不一定都在Java堆上分配内存\n- Java堆既可以被实现成固定大小的，也可以是可扩展的，不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数`-Xmx`和`-Xms`设定）。\n- 如果在Java堆中没有内存完成实例分配，并且堆也无法再扩展时，Java虚拟机将会抛出**OutOfMemoryError异常**。\n- Java堆是垃圾收集器(Garbage Collected)管理的内存区域\n\n\n\n### 方法区\n\n- 线程共享\n\n- 用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。\n\n- 虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作**“非堆”（Non-Heap）**，目的是**与Java堆区分开来**。\n\n- 在JDK1.6及之前,使用`永久代`来实现方法区.\n\n  - -XX:MaxPermSize    设置永久代内存上限\n  - -XX:PermSize    设置永久代内存\n\n- JDK1.7把`字符串常量池`、`类的静态变量(class statics)`转移到了java heap,但是永久代还是存在,主要放一些类信息(`运算时常量池`)等.\n\n  \n\n- JDK1.8彻底移除永久代,方法区采用本地内存中实现的元空间（Meta-space）来代替,将JDK1.7中永久代的信息移到了元空间,像`字符串常量池`和`静态变量`还是存在Java Heap中\n\n- 如果方法区无法满足新的内存分配需求时，将抛出**OutOfMemoryError异常**。\n\n","slug":"java/jvm/jvm-running-data-area","published":1,"updated":"2021-10-08T08:29:09.825Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eid0089vpuce6sl1pg6","content":"<h1 id=\"JVM运行时数据区域\"><a href=\"#JVM运行时数据区域\" class=\"headerlink\" title=\"JVM运行时数据区域\"></a>JVM运行时数据区域</h1><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200526000623.jpeg\" alt=\"Java虚拟机运行时数据区\"></p>\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><ul>\n<li><p>线程私有</p>\n</li>\n<li><p>唯一一个没有规定 OutOfMemoryError 异常 的区域</p>\n</li>\n<li><p>它可以看作是当前线程所执行的字节码的行号指示器</p>\n</li>\n<li><p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）</p>\n<blockquote>\n<p>(摘自网上)我们想象下，CPU是怎么知道记住之前A线程，执行到哪一处的？</p>\n<p>答案是，CPU根本就不会记住之前执行到哪里了，它只是埋头苦干；那是什么保证了切换线程的程序可以正常执行的；答案是 ： 程序计数器 ；<strong>程序计数器里面保存的是 当前线程执行的字节码的行号</strong>（看着像行号，其实是指令地址）；</p>\n<p>那么，我们需要几个程序计数器呢？如果，我们只有一个的话，切换B线程以后，程序计数器里面保存的就是B线程所执行的字节码的行号了，再切换回A线程，就蒙圈了，不知道执行到哪里了，因为，程序计数器里面保存的是B线程当前执行的字节码地址 ；因此，我们可以想象出，要为每个线程都分配一个程序计数器，因此，<strong>程序计数器的内存空间是线程私</strong>有的 ；这样即使线程 A 被挂起，但是线程 A 里面的程序计数器，记住了A线程当前执行到的字节码的指令地址了 ，等再次切回到A线程的时候，看一下程序计数器，就知道之前执行到哪里了！</p>\n<p>那么程序计数器，什么时候分配内存呢？我们试想下，一个线程在执行的任何期间，都会失去CPU执行权，因此，我们要从一个线程被创建开始执行，就要无时无刻的记录着该线程当前执行到哪里了！因此，线程计数器，必须是<strong>线程被创建开始执行的时候，就要一同被创建</strong>； </p>\n<p>程序计数器，保存的是当前执行的字节码的偏移地址（也就是之前说的行号，其实那不是行号，是指令的偏移地址，只是为了好理解，才说是行号的，），当执行到下一条指令的时候，改变的只是程序计数器中保存的地址，并不需要申请新的内存来保存新的指令地址；因此，永远都不可能内存溢出的；因此，jvm虚拟机规范，也就没有规定，也是<strong>唯一一个没有规定 OutOfMemoryError 异常 的区域</strong>;</p>\n<p><strong>当线程执行的是本地方法的时候，程序计数器中保存的值是空（undefined）</strong>；原因很简单：本地方法是C++&#x2F;C 写的，由系统调用，根本不会产生字节码文件，因此，程序计数器也就不会做任何记录</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Java虚拟机栈\"><a href=\"#Java虚拟机栈\" class=\"headerlink\" title=\"Java虚拟机栈\"></a>Java虚拟机栈</h3><ul>\n<li>线程私有</li>\n<li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出<code>StackOverflowError异常</code>；</li>\n<li>如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出<code>OutOfMemoryError异常</code>；(<font color=red>HotSpot虚拟机的栈容量是不可以动态扩展的，以前的Classic虚拟机倒是可以。所以在HotSpot虚拟机上是不会由于虚拟机栈无法扩展而导致OutOfMemoryError异常——只要线程申请栈空间成功了就不会有OOM，但是如果申请时就失败，仍然是会出现OOM异常的</font>)</li>\n<li><strong>-Xss5m</strong>:    设置5m的栈容量</li>\n<li>每个方法执行都会创建一个<strong>栈帧</strong>，栈帧包含局部变量表、操作数栈、动态连接、方法出口等</li>\n</ul>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><ul>\n<li><p>线程私有</p>\n</li>\n<li><p>与Java虚拟机栈相似</p>\n</li>\n<li><p>与Java虚拟机栈区别:    Java虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</p>\n</li>\n<li><p>Hot-Spot虚拟机直接就把本地方法栈和虚拟机栈合二为一</p>\n</li>\n<li><p>与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出StackOverflowError和OutOfMemoryError异常</p>\n</li>\n</ul>\n<h3 id=\"Java堆\"><a href=\"#Java堆\" class=\"headerlink\" title=\"Java堆\"></a>Java堆</h3><ul>\n<li>线程共享</li>\n<li>所有的Java对象实例不一定都在Java堆上分配内存</li>\n<li>Java堆既可以被实现成固定大小的，也可以是可扩展的，不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数<code>-Xmx</code>和<code>-Xms</code>设定）。</li>\n<li>如果在Java堆中没有内存完成实例分配，并且堆也无法再扩展时，Java虚拟机将会抛出<strong>OutOfMemoryError异常</strong>。</li>\n<li>Java堆是垃圾收集器(Garbage Collected)管理的内存区域</li>\n</ul>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><ul>\n<li><p>线程共享</p>\n</li>\n<li><p>用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。</p>\n</li>\n<li><p>虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作<strong>“非堆”（Non-Heap）</strong>，目的是<strong>与Java堆区分开来</strong>。</p>\n</li>\n<li><p>在JDK1.6及之前,使用<code>永久代</code>来实现方法区.</p>\n<ul>\n<li>-XX:MaxPermSize    设置永久代内存上限</li>\n<li>-XX:PermSize    设置永久代内存</li>\n</ul>\n</li>\n<li><p>JDK1.7把<code>字符串常量池</code>、<code>类的静态变量(class statics)</code>转移到了java heap,但是永久代还是存在,主要放一些类信息(<code>运算时常量池</code>)等.</p>\n</li>\n<li><p>JDK1.8彻底移除永久代,方法区采用本地内存中实现的元空间（Meta-space）来代替,将JDK1.7中永久代的信息移到了元空间,像<code>字符串常量池</code>和<code>静态变量</code>还是存在Java Heap中</p>\n</li>\n<li><p>如果方法区无法满足新的内存分配需求时，将抛出<strong>OutOfMemoryError异常</strong>。</p>\n</li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h1 id=\"JVM运行时数据区域\"><a href=\"#JVM运行时数据区域\" class=\"headerlink\" title=\"JVM运行时数据区域\"></a>JVM运行时数据区域</h1><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200526000623.jpeg\" alt=\"Java虚拟机运行时数据区\"></p>\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><ul>\n<li><p>线程私有</p>\n</li>\n<li><p>唯一一个没有规定 OutOfMemoryError 异常 的区域</p>\n</li>\n<li><p>它可以看作是当前线程所执行的字节码的行号指示器</p>\n</li>\n<li><p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）</p>\n<blockquote>\n<p>(摘自网上)我们想象下，CPU是怎么知道记住之前A线程，执行到哪一处的？</p>\n<p>答案是，CPU根本就不会记住之前执行到哪里了，它只是埋头苦干；那是什么保证了切换线程的程序可以正常执行的；答案是 ： 程序计数器 ；<strong>程序计数器里面保存的是 当前线程执行的字节码的行号</strong>（看着像行号，其实是指令地址）；</p>\n<p>那么，我们需要几个程序计数器呢？如果，我们只有一个的话，切换B线程以后，程序计数器里面保存的就是B线程所执行的字节码的行号了，再切换回A线程，就蒙圈了，不知道执行到哪里了，因为，程序计数器里面保存的是B线程当前执行的字节码地址 ；因此，我们可以想象出，要为每个线程都分配一个程序计数器，因此，<strong>程序计数器的内存空间是线程私</strong>有的 ；这样即使线程 A 被挂起，但是线程 A 里面的程序计数器，记住了A线程当前执行到的字节码的指令地址了 ，等再次切回到A线程的时候，看一下程序计数器，就知道之前执行到哪里了！</p>\n<p>那么程序计数器，什么时候分配内存呢？我们试想下，一个线程在执行的任何期间，都会失去CPU执行权，因此，我们要从一个线程被创建开始执行，就要无时无刻的记录着该线程当前执行到哪里了！因此，线程计数器，必须是<strong>线程被创建开始执行的时候，就要一同被创建</strong>； </p>\n<p>程序计数器，保存的是当前执行的字节码的偏移地址（也就是之前说的行号，其实那不是行号，是指令的偏移地址，只是为了好理解，才说是行号的，），当执行到下一条指令的时候，改变的只是程序计数器中保存的地址，并不需要申请新的内存来保存新的指令地址；因此，永远都不可能内存溢出的；因此，jvm虚拟机规范，也就没有规定，也是<strong>唯一一个没有规定 OutOfMemoryError 异常 的区域</strong>;</p>\n<p><strong>当线程执行的是本地方法的时候，程序计数器中保存的值是空（undefined）</strong>；原因很简单：本地方法是C++&#x2F;C 写的，由系统调用，根本不会产生字节码文件，因此，程序计数器也就不会做任何记录</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"Java虚拟机栈\"><a href=\"#Java虚拟机栈\" class=\"headerlink\" title=\"Java虚拟机栈\"></a>Java虚拟机栈</h3><ul>\n<li>线程私有</li>\n<li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出<code>StackOverflowError异常</code>；</li>\n<li>如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出<code>OutOfMemoryError异常</code>；(<font color=red>HotSpot虚拟机的栈容量是不可以动态扩展的，以前的Classic虚拟机倒是可以。所以在HotSpot虚拟机上是不会由于虚拟机栈无法扩展而导致OutOfMemoryError异常——只要线程申请栈空间成功了就不会有OOM，但是如果申请时就失败，仍然是会出现OOM异常的</font>)</li>\n<li><strong>-Xss5m</strong>:    设置5m的栈容量</li>\n<li>每个方法执行都会创建一个<strong>栈帧</strong>，栈帧包含局部变量表、操作数栈、动态连接、方法出口等</li>\n</ul>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><ul>\n<li><p>线程私有</p>\n</li>\n<li><p>与Java虚拟机栈相似</p>\n</li>\n<li><p>与Java虚拟机栈区别:    Java虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</p>\n</li>\n<li><p>Hot-Spot虚拟机直接就把本地方法栈和虚拟机栈合二为一</p>\n</li>\n<li><p>与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出StackOverflowError和OutOfMemoryError异常</p>\n</li>\n</ul>\n<h3 id=\"Java堆\"><a href=\"#Java堆\" class=\"headerlink\" title=\"Java堆\"></a>Java堆</h3><ul>\n<li>线程共享</li>\n<li>所有的Java对象实例不一定都在Java堆上分配内存</li>\n<li>Java堆既可以被实现成固定大小的，也可以是可扩展的，不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数<code>-Xmx</code>和<code>-Xms</code>设定）。</li>\n<li>如果在Java堆中没有内存完成实例分配，并且堆也无法再扩展时，Java虚拟机将会抛出<strong>OutOfMemoryError异常</strong>。</li>\n<li>Java堆是垃圾收集器(Garbage Collected)管理的内存区域</li>\n</ul>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><ul>\n<li><p>线程共享</p>\n</li>\n<li><p>用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。</p>\n</li>\n<li><p>虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作<strong>“非堆”（Non-Heap）</strong>，目的是<strong>与Java堆区分开来</strong>。</p>\n</li>\n<li><p>在JDK1.6及之前,使用<code>永久代</code>来实现方法区.</p>\n<ul>\n<li>-XX:MaxPermSize    设置永久代内存上限</li>\n<li>-XX:PermSize    设置永久代内存</li>\n</ul>\n</li>\n<li><p>JDK1.7把<code>字符串常量池</code>、<code>类的静态变量(class statics)</code>转移到了java heap,但是永久代还是存在,主要放一些类信息(<code>运算时常量池</code>)等.</p>\n</li>\n<li><p>JDK1.8彻底移除永久代,方法区采用本地内存中实现的元空间（Meta-space）来代替,将JDK1.7中永久代的信息移到了元空间,像<code>字符串常量池</code>和<code>静态变量</code>还是存在Java Heap中</p>\n</li>\n<li><p>如果方法区无法满足新的内存分配需求时，将抛出<strong>OutOfMemoryError异常</strong>。</p>\n</li>\n</ul>\n"},{"title":"Java的NIO编程-Reactor模式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-03-01T02:07:04.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 0x1 Reactor模型\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 0x1 单Reactor单线程","source":"_posts/java/nio/0702ff46-16cd-4520-9d33-0794cfda4b09.md","raw":"---\ntitle: Java的NIO编程-Reactor模式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-03-01 10:07:04\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\n- Nio\ncategories:\n- Java\n---\n\n## 0x1 Reactor模型\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n## 0x1 单Reactor单线程","slug":"java/nio/0702ff46-16cd-4520-9d33-0794cfda4b09","published":1,"updated":"2021-10-08T07:57:24.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eie008evpuc9xfkc1n9","content":"<h2 id=\"0x1-Reactor模型\"><a href=\"#0x1-Reactor模型\" class=\"headerlink\" title=\"0x1 Reactor模型\"></a>0x1 Reactor模型</h2><h2 id=\"0x1-单Reactor单线程\"><a href=\"#0x1-单Reactor单线程\" class=\"headerlink\" title=\"0x1 单Reactor单线程\"></a>0x1 单Reactor单线程</h2>","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"0x1-Reactor模型\"><a href=\"#0x1-Reactor模型\" class=\"headerlink\" title=\"0x1 Reactor模型\"></a>0x1 Reactor模型</h2><h2 id=\"0x1-单Reactor单线程\"><a href=\"#0x1-单Reactor单线程\" class=\"headerlink\" title=\"0x1 单Reactor单线程\"></a>0x1 单Reactor单线程</h2>"},{"title":"Java的NIO编程-Selector","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-03-01T02:07:07.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 0x1 监控\n\n通道和选择器之间的关系，通过`register`（注册）的方式完成。调用通道的`Channel.register`（Selector sel, int ops）方法，可以将通道实例注册到一个选择器中。`register方法`有两个参数：第一个参数，指定通道注册到的**选择器实例**；第二个参数，指定选择器要监控的**IO事件类型**。\n\nIO事件类型有：\n\n- 可读：`SelectionKey.OP_READ`\n- 可写：`SelectionKey.OP_WRITE`\n- 连接：`SelectionKey.OP_CONNECT`\n- 接收：`SelectionKey.OP_ACCEPT`\n\n> 如果一下要监控多个事件的话可以用`位或`运算符来实现\n>\n> ```java\n> int key = SelectionKey.OP_READ | SelectionKey.OP_WRITE;\n> ```\n\n## 0x2 SelectionKey选择键\n\n选择键的功能是很强大的。通过`SelectionKey`选择键，不仅仅可以获得通道的**IO事件类型**，比方说`SelectionKey.OP_READ`；还可以获得发生**IO事件所在的通道**；另外，也可以获得选出选择键的**选择器实例**。\n\n### 常用方法\n\n- `isAcceptable()`：判断IO事件类型是否是`SelectionKey.OP_ACCEPT`\n- `isReadable()`：判断IO事件是否是`SelectionKey.OP_READ`\n- `isConnectable()`:判断IO事件是否是`SelectionKey.OP_CONNECT`\n- `isWritable()`：判断IO事件是否是`SelectionKey.OP_WRITE`\n\n## 0x3 使用条件\n\n并不是所有的`Channel`都可以使用`Selector`，判断一个通道能否被选择器监控或选择，有一个前提：判断它是否继承了抽象类`SelectableChannel`（可选择通道）。如果继承了`SelectableChannel`，则可以被选择，否则不能。\n\n简单地说，一条通道若能被选择，必须继承`SelectableChannel`类。\n\n> `FileChannel`就没有继承`SelectableChannel`类，所以不能使用`Selector`\n\n## 0x4 使用流程\n\n使用选择器，主要有以下三步：\n\n1. 获取选择器实例；\n2. 将通道注册到选择器中；\n3. 轮询感兴趣的IO就绪事件（选择键集合）。\n\n## 0x5 Demo\n\n源码地址： https://github.com/GreyCode9/nio-demo/tree/main/src/io/selector","source":"_posts/java/nio/2571330c-67ef-4d4c-8717-6c96768009c7.md","raw":"---\ntitle: Java的NIO编程-Selector\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-03-01 10:07:07\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\n- Nio\ncategories:\n- Java\n---\n\n## 0x1 监控\n\n通道和选择器之间的关系，通过`register`（注册）的方式完成。调用通道的`Channel.register`（Selector sel, int ops）方法，可以将通道实例注册到一个选择器中。`register方法`有两个参数：第一个参数，指定通道注册到的**选择器实例**；第二个参数，指定选择器要监控的**IO事件类型**。\n\nIO事件类型有：\n\n- 可读：`SelectionKey.OP_READ`\n- 可写：`SelectionKey.OP_WRITE`\n- 连接：`SelectionKey.OP_CONNECT`\n- 接收：`SelectionKey.OP_ACCEPT`\n\n> 如果一下要监控多个事件的话可以用`位或`运算符来实现\n>\n> ```java\n> int key = SelectionKey.OP_READ | SelectionKey.OP_WRITE;\n> ```\n\n## 0x2 SelectionKey选择键\n\n选择键的功能是很强大的。通过`SelectionKey`选择键，不仅仅可以获得通道的**IO事件类型**，比方说`SelectionKey.OP_READ`；还可以获得发生**IO事件所在的通道**；另外，也可以获得选出选择键的**选择器实例**。\n\n### 常用方法\n\n- `isAcceptable()`：判断IO事件类型是否是`SelectionKey.OP_ACCEPT`\n- `isReadable()`：判断IO事件是否是`SelectionKey.OP_READ`\n- `isConnectable()`:判断IO事件是否是`SelectionKey.OP_CONNECT`\n- `isWritable()`：判断IO事件是否是`SelectionKey.OP_WRITE`\n\n## 0x3 使用条件\n\n并不是所有的`Channel`都可以使用`Selector`，判断一个通道能否被选择器监控或选择，有一个前提：判断它是否继承了抽象类`SelectableChannel`（可选择通道）。如果继承了`SelectableChannel`，则可以被选择，否则不能。\n\n简单地说，一条通道若能被选择，必须继承`SelectableChannel`类。\n\n> `FileChannel`就没有继承`SelectableChannel`类，所以不能使用`Selector`\n\n## 0x4 使用流程\n\n使用选择器，主要有以下三步：\n\n1. 获取选择器实例；\n2. 将通道注册到选择器中；\n3. 轮询感兴趣的IO就绪事件（选择键集合）。\n\n## 0x5 Demo\n\n源码地址： https://github.com/GreyCode9/nio-demo/tree/main/src/io/selector","slug":"java/nio/2571330c-67ef-4d4c-8717-6c96768009c7","published":1,"updated":"2021-10-08T07:57:24.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eif008gvpucdnw79kqq","content":"<h2 id=\"0x1-监控\"><a href=\"#0x1-监控\" class=\"headerlink\" title=\"0x1 监控\"></a>0x1 监控</h2><p>通道和选择器之间的关系，通过<code>register</code>（注册）的方式完成。调用通道的<code>Channel.register</code>（Selector sel, int ops）方法，可以将通道实例注册到一个选择器中。<code>register方法</code>有两个参数：第一个参数，指定通道注册到的<strong>选择器实例</strong>；第二个参数，指定选择器要监控的<strong>IO事件类型</strong>。</p>\n<p>IO事件类型有：</p>\n<ul>\n<li>可读：<code>SelectionKey.OP_READ</code></li>\n<li>可写：<code>SelectionKey.OP_WRITE</code></li>\n<li>连接：<code>SelectionKey.OP_CONNECT</code></li>\n<li>接收：<code>SelectionKey.OP_ACCEPT</code></li>\n</ul>\n<blockquote>\n<p>如果一下要监控多个事件的话可以用<code>位或</code>运算符来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> SelectionKey.OP_READ | SelectionKey.OP_WRITE;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"0x2-SelectionKey选择键\"><a href=\"#0x2-SelectionKey选择键\" class=\"headerlink\" title=\"0x2 SelectionKey选择键\"></a>0x2 SelectionKey选择键</h2><p>选择键的功能是很强大的。通过<code>SelectionKey</code>选择键，不仅仅可以获得通道的<strong>IO事件类型</strong>，比方说<code>SelectionKey.OP_READ</code>；还可以获得发生<strong>IO事件所在的通道</strong>；另外，也可以获得选出选择键的<strong>选择器实例</strong>。</p>\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><ul>\n<li><code>isAcceptable()</code>：判断IO事件类型是否是<code>SelectionKey.OP_ACCEPT</code></li>\n<li><code>isReadable()</code>：判断IO事件是否是<code>SelectionKey.OP_READ</code></li>\n<li><code>isConnectable()</code>:判断IO事件是否是<code>SelectionKey.OP_CONNECT</code></li>\n<li><code>isWritable()</code>：判断IO事件是否是<code>SelectionKey.OP_WRITE</code></li>\n</ul>\n<h2 id=\"0x3-使用条件\"><a href=\"#0x3-使用条件\" class=\"headerlink\" title=\"0x3 使用条件\"></a>0x3 使用条件</h2><p>并不是所有的<code>Channel</code>都可以使用<code>Selector</code>，判断一个通道能否被选择器监控或选择，有一个前提：判断它是否继承了抽象类<code>SelectableChannel</code>（可选择通道）。如果继承了<code>SelectableChannel</code>，则可以被选择，否则不能。</p>\n<p>简单地说，一条通道若能被选择，必须继承<code>SelectableChannel</code>类。</p>\n<blockquote>\n<p><code>FileChannel</code>就没有继承<code>SelectableChannel</code>类，所以不能使用<code>Selector</code></p>\n</blockquote>\n<h2 id=\"0x4-使用流程\"><a href=\"#0x4-使用流程\" class=\"headerlink\" title=\"0x4 使用流程\"></a>0x4 使用流程</h2><p>使用选择器，主要有以下三步：</p>\n<ol>\n<li>获取选择器实例；</li>\n<li>将通道注册到选择器中；</li>\n<li>轮询感兴趣的IO就绪事件（选择键集合）。</li>\n</ol>\n<h2 id=\"0x5-Demo\"><a href=\"#0x5-Demo\" class=\"headerlink\" title=\"0x5 Demo\"></a>0x5 Demo</h2><p>源码地址： <a href=\"https://github.com/GreyCode9/nio-demo/tree/main/src/io/selector\">https://github.com/GreyCode9/nio-demo/tree/main/src/io/selector</a></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"0x1-监控\"><a href=\"#0x1-监控\" class=\"headerlink\" title=\"0x1 监控\"></a>0x1 监控</h2><p>通道和选择器之间的关系，通过<code>register</code>（注册）的方式完成。调用通道的<code>Channel.register</code>（Selector sel, int ops）方法，可以将通道实例注册到一个选择器中。<code>register方法</code>有两个参数：第一个参数，指定通道注册到的<strong>选择器实例</strong>；第二个参数，指定选择器要监控的<strong>IO事件类型</strong>。</p>\n<p>IO事件类型有：</p>\n<ul>\n<li>可读：<code>SelectionKey.OP_READ</code></li>\n<li>可写：<code>SelectionKey.OP_WRITE</code></li>\n<li>连接：<code>SelectionKey.OP_CONNECT</code></li>\n<li>接收：<code>SelectionKey.OP_ACCEPT</code></li>\n</ul>\n<blockquote>\n<p>如果一下要监控多个事件的话可以用<code>位或</code>运算符来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> SelectionKey.OP_READ | SelectionKey.OP_WRITE;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"0x2-SelectionKey选择键\"><a href=\"#0x2-SelectionKey选择键\" class=\"headerlink\" title=\"0x2 SelectionKey选择键\"></a>0x2 SelectionKey选择键</h2><p>选择键的功能是很强大的。通过<code>SelectionKey</code>选择键，不仅仅可以获得通道的<strong>IO事件类型</strong>，比方说<code>SelectionKey.OP_READ</code>；还可以获得发生<strong>IO事件所在的通道</strong>；另外，也可以获得选出选择键的<strong>选择器实例</strong>。</p>\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><ul>\n<li><code>isAcceptable()</code>：判断IO事件类型是否是<code>SelectionKey.OP_ACCEPT</code></li>\n<li><code>isReadable()</code>：判断IO事件是否是<code>SelectionKey.OP_READ</code></li>\n<li><code>isConnectable()</code>:判断IO事件是否是<code>SelectionKey.OP_CONNECT</code></li>\n<li><code>isWritable()</code>：判断IO事件是否是<code>SelectionKey.OP_WRITE</code></li>\n</ul>\n<h2 id=\"0x3-使用条件\"><a href=\"#0x3-使用条件\" class=\"headerlink\" title=\"0x3 使用条件\"></a>0x3 使用条件</h2><p>并不是所有的<code>Channel</code>都可以使用<code>Selector</code>，判断一个通道能否被选择器监控或选择，有一个前提：判断它是否继承了抽象类<code>SelectableChannel</code>（可选择通道）。如果继承了<code>SelectableChannel</code>，则可以被选择，否则不能。</p>\n<p>简单地说，一条通道若能被选择，必须继承<code>SelectableChannel</code>类。</p>\n<blockquote>\n<p><code>FileChannel</code>就没有继承<code>SelectableChannel</code>类，所以不能使用<code>Selector</code></p>\n</blockquote>\n<h2 id=\"0x4-使用流程\"><a href=\"#0x4-使用流程\" class=\"headerlink\" title=\"0x4 使用流程\"></a>0x4 使用流程</h2><p>使用选择器，主要有以下三步：</p>\n<ol>\n<li>获取选择器实例；</li>\n<li>将通道注册到选择器中；</li>\n<li>轮询感兴趣的IO就绪事件（选择键集合）。</li>\n</ol>\n<h2 id=\"0x5-Demo\"><a href=\"#0x5-Demo\" class=\"headerlink\" title=\"0x5 Demo\"></a>0x5 Demo</h2><p>源码地址： <a href=\"https://github.com/GreyCode9/nio-demo/tree/main/src/io/selector\">https://github.com/GreyCode9/nio-demo/tree/main/src/io/selector</a></p>\n"},{"title":"Java的NIO编程-Channel","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-03-01T02:07:09.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 0x1 主要类型\n\n在Java中有许多`NIO Channel`实现，本文只选最主要的四种`Channel`：\n\n- FileChannel：文件通道，用于文件的数据读写\n- SocketChannel：套接字通道，用于Socket套接字`TCP`连接的数据读写。\n- ServerSocketChannel：服务器嵌套字通道（或服务器监听通道），允许我们监听`TCP`连接请求，为每个监听到的请求，创建一个SocketChannel套接字通道。\n- DatagramChannel：数据报通道，用于`UDP`协议的数据读写。\n\n## 0x2 使用\n\n### FileChannel\n\n#### 读取通道数据\n\n首先在本地创建文件`/home/zheng/channeltest`，在里面编写内容：**hello,world!**\n\n```java\npublic class ChannelTest {\n\n    public static void main(String[] args) throws IOException {\n        // 创建输入流\n        File file = new File(\"/home/zheng/channeltest\");\n        FileInputStream fis = new FileInputStream(file);\n        // 获取通道\n        FileChannel fileChannel = fis.getChannel();\n        // 创建缓冲区\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        int length = -1;\n        // 读取通道数据到缓冲区\n        while ((length=fileChannel.read(byteBuffer))!=-1){\n            System.out.println(\"缓冲区size：\"+length);\n        }\n        fis.close();\n        fileChannel.close();\n        // 读取Buffer缓存数据\n        byteBuffer.flip();\n        StringBuilder str = new StringBuilder();\n        while (byteBuffer.position()!=byteBuffer.limit()){\n            char c = (char) byteBuffer.get();\n            str.append(c);\n        }\n        System.out.println(str.toString());\n    }\n}\n\n//输出\n缓冲区size：13\nhello,world!\n```\n\n#### 写入数据到通道\n\n```java\npublic class ChannelTest {\n\n    public static void main(String[] args) throws IOException {\n\t\t// 创建输入流\n        File file = new File(\"/home/zheng/channelOut\");\n        FileOutputStream fos = new FileOutputStream(file);\n        // 获取通道\n        FileChannel fileChannel = fos.getChannel();\n        // 创建缓冲区\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        byte c = 'c';\n        byte o = 'o';\n        byte d = 'd';\n        byte e = 'e';\n        byteBuffer.put(c);\n        byteBuffer.put(o);\n        byteBuffer.put(d);\n        byteBuffer.put(e);\n        int length = 0;\n        // 缓冲区转换为读模式\n        byteBuffer.flip();\n        // 向通道写入数据\n        while ((length=fileChannel.write(byteBuffer))!=0){\n            System.out.println(\"写入数据size：\"+length);\n        }\n        //强制刷盘\n        fileChannel.force(true);\n        fileChannel.close();\n    }\n}\n\n// 输出\n写入数据size：4\n```\n\n此时查看文件`/home/zheng/channelOut`，里面内容是:**code**\n\n#### SocketChannel和ServerSocketChannel\n\n- 服务端\n\n  ```java\n  public class SocketServer {\n      public static void main(String[] args) throws IOException {\n          // 打开ServerSocketChannel\n          ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n          // 绑定端口\n          serverSocketChannel.socket().bind(new InetSocketAddress(8989));\n          // 设置为非阻塞式工作模式（io多路复用）\n          serverSocketChannel.configureBlocking(false);\n          while (true){\n              // 等待客户端连接\n              SocketChannel channel = serverSocketChannel.accept();\n              if (channel!=null){\n                  System.out.println(\"==================\");\n                  System.out.println(\"客户端地址：\"+channel.getRemoteAddress());\n                  ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n                  // 读取通道的数据到缓冲区\n                  channel.read(byteBuffer);\n                  // 读取Buffer缓存数据\n                  byteBuffer.flip();\n                  StringBuilder str = new StringBuilder();\n                  while (byteBuffer.position()!=byteBuffer.limit()){\n                      char c = (char) byteBuffer.get();\n                      str.append(c);\n                  }\n                  System.out.println(\"接收到消息：\"+str.toString());\n              }\n          }\n      }\n  }\n  ```\n\n- 客户端\n\n  ```java\n  public class SocketClient {\n      public static void main(String[] args) throws IOException, InterruptedException {\n          // 打开SocketChannel\n          SocketChannel channel = SocketChannel.open();\n          // 设置为非阻塞式工作模式（io多路复用）\n          channel.configureBlocking(false);\n          // 连接\n          channel.connect(new InetSocketAddress(\"127.0.0.1\",8989));\n          while (!channel.finishConnect()){\n              System.out.println(\"连接中...\");\n              Thread.sleep(1000);\n          }\n          ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n          byteBuffer.put((byte)'s');\n          byteBuffer.flip();\n          // 从缓冲区写入数据到通道\n          channel.write(byteBuffer);\n          channel.close();\n      }\n  }\n  ```\n\n先运行服务端，然后在运行客户端，此时服务端控制台打印出：\n\n```shell\n==================\n客户端地址：/127.0.0.1:44728\n接收到消息：s\n```\n\n#### DatagramChannel\n\n- 发送端\n\n  ```java\n  public class DatagramClient {\n      public static void main(String[] args) throws IOException {\n          // 开启DatagramChannel\n          DatagramChannel channel = DatagramChannel.open();\n          // 设置为非阻塞式工作模式（io多路复用）\n          channel.configureBlocking(false);\n          // 创建缓存区\n          ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n          Scanner scanner = new Scanner(System.in);\n          System.out.println(\"请输入要发送的消息：\");\n          while (scanner.hasNext()){\n              String s = scanner.next();\n              byteBuffer.put(s.getBytes());\n              byteBuffer.flip();\n              // 发送数据\n              channel.send(byteBuffer,new InetSocketAddress(\"127.0.0.1\",8989));\n              byteBuffer.clear();\n          }\n          channel.close();\n      }\n  }\n  ```\n\n- 接收端\n\n  ```java\n  public class DatagramServer {\n      public static void main(String[] args) throws IOException {\n          // 开启DatagramChannel\n          DatagramChannel serverChannel = DatagramChannel.open();\n          // 设置为非阻塞式工作模式（io多路复用）\n          serverChannel.configureBlocking(false);\n          // 绑定监听地址\n          serverChannel.bind(new InetSocketAddress(\"127.0.0.1\",8989));\n          // 创建缓存区\n          ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n          while (true){\n              // 接收消息并保存到缓存区\n              serverChannel.receive(byteBuffer);\n              byteBuffer.flip();\n              if (byteBuffer.limit()!=0){\n                  // 读取Buffer缓存数据\n                  StringBuilder str = new StringBuilder();\n                  while (byteBuffer.position()!=byteBuffer.limit()){\n                      char c = (char) byteBuffer.get();\n                      str.append(c);\n                  }\n                  System.out.println(\"接收到消息：\"+str.toString());\n                  byteBuffer.clear();\n              }\n              byteBuffer.clear();\n          }\n      }\n  }\n  ```\n\n  \n\n源码地址：https://github.com/GreyCode9/nio-demo","source":"_posts/java/nio/534d0985-a4a0-4239-ae81-d76378f64552.md","raw":"---\ntitle: Java的NIO编程-Channel\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-03-01 10:07:09\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\n- Nio\ncategories:\n- Java\n---\n\n## 0x1 主要类型\n\n在Java中有许多`NIO Channel`实现，本文只选最主要的四种`Channel`：\n\n- FileChannel：文件通道，用于文件的数据读写\n- SocketChannel：套接字通道，用于Socket套接字`TCP`连接的数据读写。\n- ServerSocketChannel：服务器嵌套字通道（或服务器监听通道），允许我们监听`TCP`连接请求，为每个监听到的请求，创建一个SocketChannel套接字通道。\n- DatagramChannel：数据报通道，用于`UDP`协议的数据读写。\n\n## 0x2 使用\n\n### FileChannel\n\n#### 读取通道数据\n\n首先在本地创建文件`/home/zheng/channeltest`，在里面编写内容：**hello,world!**\n\n```java\npublic class ChannelTest {\n\n    public static void main(String[] args) throws IOException {\n        // 创建输入流\n        File file = new File(\"/home/zheng/channeltest\");\n        FileInputStream fis = new FileInputStream(file);\n        // 获取通道\n        FileChannel fileChannel = fis.getChannel();\n        // 创建缓冲区\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        int length = -1;\n        // 读取通道数据到缓冲区\n        while ((length=fileChannel.read(byteBuffer))!=-1){\n            System.out.println(\"缓冲区size：\"+length);\n        }\n        fis.close();\n        fileChannel.close();\n        // 读取Buffer缓存数据\n        byteBuffer.flip();\n        StringBuilder str = new StringBuilder();\n        while (byteBuffer.position()!=byteBuffer.limit()){\n            char c = (char) byteBuffer.get();\n            str.append(c);\n        }\n        System.out.println(str.toString());\n    }\n}\n\n//输出\n缓冲区size：13\nhello,world!\n```\n\n#### 写入数据到通道\n\n```java\npublic class ChannelTest {\n\n    public static void main(String[] args) throws IOException {\n\t\t// 创建输入流\n        File file = new File(\"/home/zheng/channelOut\");\n        FileOutputStream fos = new FileOutputStream(file);\n        // 获取通道\n        FileChannel fileChannel = fos.getChannel();\n        // 创建缓冲区\n        ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n        byte c = 'c';\n        byte o = 'o';\n        byte d = 'd';\n        byte e = 'e';\n        byteBuffer.put(c);\n        byteBuffer.put(o);\n        byteBuffer.put(d);\n        byteBuffer.put(e);\n        int length = 0;\n        // 缓冲区转换为读模式\n        byteBuffer.flip();\n        // 向通道写入数据\n        while ((length=fileChannel.write(byteBuffer))!=0){\n            System.out.println(\"写入数据size：\"+length);\n        }\n        //强制刷盘\n        fileChannel.force(true);\n        fileChannel.close();\n    }\n}\n\n// 输出\n写入数据size：4\n```\n\n此时查看文件`/home/zheng/channelOut`，里面内容是:**code**\n\n#### SocketChannel和ServerSocketChannel\n\n- 服务端\n\n  ```java\n  public class SocketServer {\n      public static void main(String[] args) throws IOException {\n          // 打开ServerSocketChannel\n          ServerSocketChannel serverSocketChannel = ServerSocketChannel.open();\n          // 绑定端口\n          serverSocketChannel.socket().bind(new InetSocketAddress(8989));\n          // 设置为非阻塞式工作模式（io多路复用）\n          serverSocketChannel.configureBlocking(false);\n          while (true){\n              // 等待客户端连接\n              SocketChannel channel = serverSocketChannel.accept();\n              if (channel!=null){\n                  System.out.println(\"==================\");\n                  System.out.println(\"客户端地址：\"+channel.getRemoteAddress());\n                  ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n                  // 读取通道的数据到缓冲区\n                  channel.read(byteBuffer);\n                  // 读取Buffer缓存数据\n                  byteBuffer.flip();\n                  StringBuilder str = new StringBuilder();\n                  while (byteBuffer.position()!=byteBuffer.limit()){\n                      char c = (char) byteBuffer.get();\n                      str.append(c);\n                  }\n                  System.out.println(\"接收到消息：\"+str.toString());\n              }\n          }\n      }\n  }\n  ```\n\n- 客户端\n\n  ```java\n  public class SocketClient {\n      public static void main(String[] args) throws IOException, InterruptedException {\n          // 打开SocketChannel\n          SocketChannel channel = SocketChannel.open();\n          // 设置为非阻塞式工作模式（io多路复用）\n          channel.configureBlocking(false);\n          // 连接\n          channel.connect(new InetSocketAddress(\"127.0.0.1\",8989));\n          while (!channel.finishConnect()){\n              System.out.println(\"连接中...\");\n              Thread.sleep(1000);\n          }\n          ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n          byteBuffer.put((byte)'s');\n          byteBuffer.flip();\n          // 从缓冲区写入数据到通道\n          channel.write(byteBuffer);\n          channel.close();\n      }\n  }\n  ```\n\n先运行服务端，然后在运行客户端，此时服务端控制台打印出：\n\n```shell\n==================\n客户端地址：/127.0.0.1:44728\n接收到消息：s\n```\n\n#### DatagramChannel\n\n- 发送端\n\n  ```java\n  public class DatagramClient {\n      public static void main(String[] args) throws IOException {\n          // 开启DatagramChannel\n          DatagramChannel channel = DatagramChannel.open();\n          // 设置为非阻塞式工作模式（io多路复用）\n          channel.configureBlocking(false);\n          // 创建缓存区\n          ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n          Scanner scanner = new Scanner(System.in);\n          System.out.println(\"请输入要发送的消息：\");\n          while (scanner.hasNext()){\n              String s = scanner.next();\n              byteBuffer.put(s.getBytes());\n              byteBuffer.flip();\n              // 发送数据\n              channel.send(byteBuffer,new InetSocketAddress(\"127.0.0.1\",8989));\n              byteBuffer.clear();\n          }\n          channel.close();\n      }\n  }\n  ```\n\n- 接收端\n\n  ```java\n  public class DatagramServer {\n      public static void main(String[] args) throws IOException {\n          // 开启DatagramChannel\n          DatagramChannel serverChannel = DatagramChannel.open();\n          // 设置为非阻塞式工作模式（io多路复用）\n          serverChannel.configureBlocking(false);\n          // 绑定监听地址\n          serverChannel.bind(new InetSocketAddress(\"127.0.0.1\",8989));\n          // 创建缓存区\n          ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n          while (true){\n              // 接收消息并保存到缓存区\n              serverChannel.receive(byteBuffer);\n              byteBuffer.flip();\n              if (byteBuffer.limit()!=0){\n                  // 读取Buffer缓存数据\n                  StringBuilder str = new StringBuilder();\n                  while (byteBuffer.position()!=byteBuffer.limit()){\n                      char c = (char) byteBuffer.get();\n                      str.append(c);\n                  }\n                  System.out.println(\"接收到消息：\"+str.toString());\n                  byteBuffer.clear();\n              }\n              byteBuffer.clear();\n          }\n      }\n  }\n  ```\n\n  \n\n源码地址：https://github.com/GreyCode9/nio-demo","slug":"java/nio/534d0985-a4a0-4239-ae81-d76378f64552","published":1,"updated":"2021-10-08T07:57:24.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eig008kvpucezbx881q","content":"<h2 id=\"0x1-主要类型\"><a href=\"#0x1-主要类型\" class=\"headerlink\" title=\"0x1 主要类型\"></a>0x1 主要类型</h2><p>在Java中有许多<code>NIO Channel</code>实现，本文只选最主要的四种<code>Channel</code>：</p>\n<ul>\n<li>FileChannel：文件通道，用于文件的数据读写</li>\n<li>SocketChannel：套接字通道，用于Socket套接字<code>TCP</code>连接的数据读写。</li>\n<li>ServerSocketChannel：服务器嵌套字通道（或服务器监听通道），允许我们监听<code>TCP</code>连接请求，为每个监听到的请求，创建一个SocketChannel套接字通道。</li>\n<li>DatagramChannel：数据报通道，用于<code>UDP</code>协议的数据读写。</li>\n</ul>\n<h2 id=\"0x2-使用\"><a href=\"#0x2-使用\" class=\"headerlink\" title=\"0x2 使用\"></a>0x2 使用</h2><h3 id=\"FileChannel\"><a href=\"#FileChannel\" class=\"headerlink\" title=\"FileChannel\"></a>FileChannel</h3><h4 id=\"读取通道数据\"><a href=\"#读取通道数据\" class=\"headerlink\" title=\"读取通道数据\"></a>读取通道数据</h4><p>首先在本地创建文件<code>/home/zheng/channeltest</code>，在里面编写内容：<strong>hello,world!</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChannelTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建输入流</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/home/zheng/channeltest&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">        <span class=\"comment\">// 获取通道</span></span><br><span class=\"line\">        <span class=\"type\">FileChannel</span> <span class=\"variable\">fileChannel</span> <span class=\"operator\">=</span> fis.getChannel();</span><br><span class=\"line\">        <span class=\"comment\">// 创建缓冲区</span></span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 读取通道数据到缓冲区</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((length=fileChannel.read(byteBuffer))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;缓冲区size：&quot;</span>+length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fis.close();</span><br><span class=\"line\">        fileChannel.close();</span><br><span class=\"line\">        <span class=\"comment\">// 读取Buffer缓存数据</span></span><br><span class=\"line\">        byteBuffer.flip();</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (byteBuffer.position()!=byteBuffer.limit())&#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> (<span class=\"type\">char</span>) byteBuffer.get();</span><br><span class=\"line\">            str.append(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(str.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">缓冲区size：<span class=\"number\">13</span></span><br><span class=\"line\">hello,world!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写入数据到通道\"><a href=\"#写入数据到通道\" class=\"headerlink\" title=\"写入数据到通道\"></a>写入数据到通道</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChannelTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建输入流</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/home/zheng/channelOut&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(file);</span><br><span class=\"line\">        <span class=\"comment\">// 获取通道</span></span><br><span class=\"line\">        <span class=\"type\">FileChannel</span> <span class=\"variable\">fileChannel</span> <span class=\"operator\">=</span> fos.getChannel();</span><br><span class=\"line\">        <span class=\"comment\">// 创建缓冲区</span></span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;c&#x27;</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;o&#x27;</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;d&#x27;</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;e&#x27;</span>;</span><br><span class=\"line\">        byteBuffer.put(c);</span><br><span class=\"line\">        byteBuffer.put(o);</span><br><span class=\"line\">        byteBuffer.put(d);</span><br><span class=\"line\">        byteBuffer.put(e);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 缓冲区转换为读模式</span></span><br><span class=\"line\">        byteBuffer.flip();</span><br><span class=\"line\">        <span class=\"comment\">// 向通道写入数据</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((length=fileChannel.write(byteBuffer))!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;写入数据size：&quot;</span>+length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//强制刷盘</span></span><br><span class=\"line\">        fileChannel.force(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        fileChannel.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">写入数据size：<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>此时查看文件<code>/home/zheng/channelOut</code>，里面内容是:<strong>code</strong></p>\n<h4 id=\"SocketChannel和ServerSocketChannel\"><a href=\"#SocketChannel和ServerSocketChannel\" class=\"headerlink\" title=\"SocketChannel和ServerSocketChannel\"></a>SocketChannel和ServerSocketChannel</h4><ul>\n<li><p>服务端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SocketServer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打开ServerSocketChannel</span></span><br><span class=\"line\">        <span class=\"type\">ServerSocketChannel</span> <span class=\"variable\">serverSocketChannel</span> <span class=\"operator\">=</span> ServerSocketChannel.open();</span><br><span class=\"line\">        <span class=\"comment\">// 绑定端口</span></span><br><span class=\"line\">        serverSocketChannel.socket().bind(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(<span class=\"number\">8989</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 设置为非阻塞式工作模式（io多路复用）</span></span><br><span class=\"line\">        serverSocketChannel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 等待客户端连接</span></span><br><span class=\"line\">            <span class=\"type\">SocketChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> serverSocketChannel.accept();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (channel!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;==================&quot;</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;客户端地址：&quot;</span>+channel.getRemoteAddress());</span><br><span class=\"line\">                <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 读取通道的数据到缓冲区</span></span><br><span class=\"line\">                channel.read(byteBuffer);</span><br><span class=\"line\">                <span class=\"comment\">// 读取Buffer缓存数据</span></span><br><span class=\"line\">                byteBuffer.flip();</span><br><span class=\"line\">                <span class=\"type\">StringBuilder</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (byteBuffer.position()!=byteBuffer.limit())&#123;</span><br><span class=\"line\">                    <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> (<span class=\"type\">char</span>) byteBuffer.get();</span><br><span class=\"line\">                    str.append(c);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;接收到消息：&quot;</span>+str.toString());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SocketClient</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打开SocketChannel</span></span><br><span class=\"line\">        <span class=\"type\">SocketChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> SocketChannel.open();</span><br><span class=\"line\">        <span class=\"comment\">// 设置为非阻塞式工作模式（io多路复用）</span></span><br><span class=\"line\">        channel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 连接</span></span><br><span class=\"line\">        channel.connect(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">8989</span>));</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!channel.finishConnect())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;连接中...&quot;</span>);</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        byteBuffer.put((<span class=\"type\">byte</span>)<span class=\"string\">&#x27;s&#x27;</span>);</span><br><span class=\"line\">        byteBuffer.flip();</span><br><span class=\"line\">        <span class=\"comment\">// 从缓冲区写入数据到通道</span></span><br><span class=\"line\">        channel.write(byteBuffer);</span><br><span class=\"line\">        channel.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>先运行服务端，然后在运行客户端，此时服务端控制台打印出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">==================</span><br><span class=\"line\">客户端地址：/127.0.0.1:44728</span><br><span class=\"line\">接收到消息：s</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DatagramChannel\"><a href=\"#DatagramChannel\" class=\"headerlink\" title=\"DatagramChannel\"></a>DatagramChannel</h4><ul>\n<li><p>发送端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DatagramClient</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开启DatagramChannel</span></span><br><span class=\"line\">        <span class=\"type\">DatagramChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> DatagramChannel.open();</span><br><span class=\"line\">        <span class=\"comment\">// 设置为非阻塞式工作模式（io多路复用）</span></span><br><span class=\"line\">        channel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 创建缓存区</span></span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入要发送的消息：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (scanner.hasNext())&#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> scanner.next();</span><br><span class=\"line\">            byteBuffer.put(s.getBytes());</span><br><span class=\"line\">            byteBuffer.flip();</span><br><span class=\"line\">            <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">            channel.send(byteBuffer,<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">8989</span>));</span><br><span class=\"line\">            byteBuffer.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        channel.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接收端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DatagramServer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开启DatagramChannel</span></span><br><span class=\"line\">        <span class=\"type\">DatagramChannel</span> <span class=\"variable\">serverChannel</span> <span class=\"operator\">=</span> DatagramChannel.open();</span><br><span class=\"line\">        <span class=\"comment\">// 设置为非阻塞式工作模式（io多路复用）</span></span><br><span class=\"line\">        serverChannel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 绑定监听地址</span></span><br><span class=\"line\">        serverChannel.bind(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">8989</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 创建缓存区</span></span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 接收消息并保存到缓存区</span></span><br><span class=\"line\">            serverChannel.receive(byteBuffer);</span><br><span class=\"line\">            byteBuffer.flip();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (byteBuffer.limit()!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 读取Buffer缓存数据</span></span><br><span class=\"line\">                <span class=\"type\">StringBuilder</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (byteBuffer.position()!=byteBuffer.limit())&#123;</span><br><span class=\"line\">                    <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> (<span class=\"type\">char</span>) byteBuffer.get();</span><br><span class=\"line\">                    str.append(c);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;接收到消息：&quot;</span>+str.toString());</span><br><span class=\"line\">                byteBuffer.clear();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            byteBuffer.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>源码地址：<a href=\"https://github.com/GreyCode9/nio-demo\">https://github.com/GreyCode9/nio-demo</a></p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"0x1-主要类型\"><a href=\"#0x1-主要类型\" class=\"headerlink\" title=\"0x1 主要类型\"></a>0x1 主要类型</h2><p>在Java中有许多<code>NIO Channel</code>实现，本文只选最主要的四种<code>Channel</code>：</p>\n<ul>\n<li>FileChannel：文件通道，用于文件的数据读写</li>\n<li>SocketChannel：套接字通道，用于Socket套接字<code>TCP</code>连接的数据读写。</li>\n<li>ServerSocketChannel：服务器嵌套字通道（或服务器监听通道），允许我们监听<code>TCP</code>连接请求，为每个监听到的请求，创建一个SocketChannel套接字通道。</li>\n<li>DatagramChannel：数据报通道，用于<code>UDP</code>协议的数据读写。</li>\n</ul>\n<h2 id=\"0x2-使用\"><a href=\"#0x2-使用\" class=\"headerlink\" title=\"0x2 使用\"></a>0x2 使用</h2><h3 id=\"FileChannel\"><a href=\"#FileChannel\" class=\"headerlink\" title=\"FileChannel\"></a>FileChannel</h3><h4 id=\"读取通道数据\"><a href=\"#读取通道数据\" class=\"headerlink\" title=\"读取通道数据\"></a>读取通道数据</h4><p>首先在本地创建文件<code>/home/zheng/channeltest</code>，在里面编写内容：<strong>hello,world!</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChannelTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 创建输入流</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/home/zheng/channeltest&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">        <span class=\"comment\">// 获取通道</span></span><br><span class=\"line\">        <span class=\"type\">FileChannel</span> <span class=\"variable\">fileChannel</span> <span class=\"operator\">=</span> fis.getChannel();</span><br><span class=\"line\">        <span class=\"comment\">// 创建缓冲区</span></span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 读取通道数据到缓冲区</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((length=fileChannel.read(byteBuffer))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;缓冲区size：&quot;</span>+length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        fis.close();</span><br><span class=\"line\">        fileChannel.close();</span><br><span class=\"line\">        <span class=\"comment\">// 读取Buffer缓存数据</span></span><br><span class=\"line\">        byteBuffer.flip();</span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (byteBuffer.position()!=byteBuffer.limit())&#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> (<span class=\"type\">char</span>) byteBuffer.get();</span><br><span class=\"line\">            str.append(c);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(str.toString());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">缓冲区size：<span class=\"number\">13</span></span><br><span class=\"line\">hello,world!</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"写入数据到通道\"><a href=\"#写入数据到通道\" class=\"headerlink\" title=\"写入数据到通道\"></a>写入数据到通道</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ChannelTest</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 创建输入流</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/home/zheng/channelOut&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(file);</span><br><span class=\"line\">        <span class=\"comment\">// 获取通道</span></span><br><span class=\"line\">        <span class=\"type\">FileChannel</span> <span class=\"variable\">fileChannel</span> <span class=\"operator\">=</span> fos.getChannel();</span><br><span class=\"line\">        <span class=\"comment\">// 创建缓冲区</span></span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;c&#x27;</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;o&#x27;</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;d&#x27;</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;e&#x27;</span>;</span><br><span class=\"line\">        byteBuffer.put(c);</span><br><span class=\"line\">        byteBuffer.put(o);</span><br><span class=\"line\">        byteBuffer.put(d);</span><br><span class=\"line\">        byteBuffer.put(e);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 缓冲区转换为读模式</span></span><br><span class=\"line\">        byteBuffer.flip();</span><br><span class=\"line\">        <span class=\"comment\">// 向通道写入数据</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((length=fileChannel.write(byteBuffer))!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;写入数据size：&quot;</span>+length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//强制刷盘</span></span><br><span class=\"line\">        fileChannel.force(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        fileChannel.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\">写入数据size：<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<p>此时查看文件<code>/home/zheng/channelOut</code>，里面内容是:<strong>code</strong></p>\n<h4 id=\"SocketChannel和ServerSocketChannel\"><a href=\"#SocketChannel和ServerSocketChannel\" class=\"headerlink\" title=\"SocketChannel和ServerSocketChannel\"></a>SocketChannel和ServerSocketChannel</h4><ul>\n<li><p>服务端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SocketServer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打开ServerSocketChannel</span></span><br><span class=\"line\">        <span class=\"type\">ServerSocketChannel</span> <span class=\"variable\">serverSocketChannel</span> <span class=\"operator\">=</span> ServerSocketChannel.open();</span><br><span class=\"line\">        <span class=\"comment\">// 绑定端口</span></span><br><span class=\"line\">        serverSocketChannel.socket().bind(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(<span class=\"number\">8989</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 设置为非阻塞式工作模式（io多路复用）</span></span><br><span class=\"line\">        serverSocketChannel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 等待客户端连接</span></span><br><span class=\"line\">            <span class=\"type\">SocketChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> serverSocketChannel.accept();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (channel!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;==================&quot;</span>);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;客户端地址：&quot;</span>+channel.getRemoteAddress());</span><br><span class=\"line\">                <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 读取通道的数据到缓冲区</span></span><br><span class=\"line\">                channel.read(byteBuffer);</span><br><span class=\"line\">                <span class=\"comment\">// 读取Buffer缓存数据</span></span><br><span class=\"line\">                byteBuffer.flip();</span><br><span class=\"line\">                <span class=\"type\">StringBuilder</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (byteBuffer.position()!=byteBuffer.limit())&#123;</span><br><span class=\"line\">                    <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> (<span class=\"type\">char</span>) byteBuffer.get();</span><br><span class=\"line\">                    str.append(c);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;接收到消息：&quot;</span>+str.toString());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>客户端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SocketClient</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 打开SocketChannel</span></span><br><span class=\"line\">        <span class=\"type\">SocketChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> SocketChannel.open();</span><br><span class=\"line\">        <span class=\"comment\">// 设置为非阻塞式工作模式（io多路复用）</span></span><br><span class=\"line\">        channel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 连接</span></span><br><span class=\"line\">        channel.connect(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">8989</span>));</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!channel.finishConnect())&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;连接中...&quot;</span>);</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        byteBuffer.put((<span class=\"type\">byte</span>)<span class=\"string\">&#x27;s&#x27;</span>);</span><br><span class=\"line\">        byteBuffer.flip();</span><br><span class=\"line\">        <span class=\"comment\">// 从缓冲区写入数据到通道</span></span><br><span class=\"line\">        channel.write(byteBuffer);</span><br><span class=\"line\">        channel.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>先运行服务端，然后在运行客户端，此时服务端控制台打印出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">==================</span><br><span class=\"line\">客户端地址：/127.0.0.1:44728</span><br><span class=\"line\">接收到消息：s</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DatagramChannel\"><a href=\"#DatagramChannel\" class=\"headerlink\" title=\"DatagramChannel\"></a>DatagramChannel</h4><ul>\n<li><p>发送端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DatagramClient</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开启DatagramChannel</span></span><br><span class=\"line\">        <span class=\"type\">DatagramChannel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> DatagramChannel.open();</span><br><span class=\"line\">        <span class=\"comment\">// 设置为非阻塞式工作模式（io多路复用）</span></span><br><span class=\"line\">        channel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 创建缓存区</span></span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scanner</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;请输入要发送的消息：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (scanner.hasNext())&#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> scanner.next();</span><br><span class=\"line\">            byteBuffer.put(s.getBytes());</span><br><span class=\"line\">            byteBuffer.flip();</span><br><span class=\"line\">            <span class=\"comment\">// 发送数据</span></span><br><span class=\"line\">            channel.send(byteBuffer,<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">8989</span>));</span><br><span class=\"line\">            byteBuffer.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        channel.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>接收端</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DatagramServer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开启DatagramChannel</span></span><br><span class=\"line\">        <span class=\"type\">DatagramChannel</span> <span class=\"variable\">serverChannel</span> <span class=\"operator\">=</span> DatagramChannel.open();</span><br><span class=\"line\">        <span class=\"comment\">// 设置为非阻塞式工作模式（io多路复用）</span></span><br><span class=\"line\">        serverChannel.configureBlocking(<span class=\"literal\">false</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 绑定监听地址</span></span><br><span class=\"line\">        serverChannel.bind(<span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">8989</span>));</span><br><span class=\"line\">        <span class=\"comment\">// 创建缓存区</span></span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">byteBuffer</span> <span class=\"operator\">=</span> ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 接收消息并保存到缓存区</span></span><br><span class=\"line\">            serverChannel.receive(byteBuffer);</span><br><span class=\"line\">            byteBuffer.flip();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (byteBuffer.limit()!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">// 读取Buffer缓存数据</span></span><br><span class=\"line\">                <span class=\"type\">StringBuilder</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (byteBuffer.position()!=byteBuffer.limit())&#123;</span><br><span class=\"line\">                    <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> (<span class=\"type\">char</span>) byteBuffer.get();</span><br><span class=\"line\">                    str.append(c);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;接收到消息：&quot;</span>+str.toString());</span><br><span class=\"line\">                byteBuffer.clear();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            byteBuffer.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>源码地址：<a href=\"https://github.com/GreyCode9/nio-demo\">https://github.com/GreyCode9/nio-demo</a></p>\n"},{"title":"Java的NIO编程-Buffer","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2021-03-01T02:07:05.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 0x1 子类\n\nBuffer是一个抽象类，所以一般使用他的子类来进行编程，常用的子类有：\n\n- ByteBuffer\n\n- IntBuffer\n- LongBuffer\n- CharBuffer\n- DoubleBufffer\n- FloatBuffer\n- ShortBuffer\n- MappedByteBuffer\n\n## 0x2 属性\n\nBuffer中有四个重要的属性，分别是：\n\n- capacity：Buffer类的capacity属性，表示内部容量的大小\n- position：Buffer类的position属性，表示当前的位置\n- limit：Buffer类的limit属性，表示读写的最大上限。\n- mark：暂存属性，暂时保存position的值，方便后面的重复使用position值。\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/epub_26174369_8.jpeg)\n\n## 0x3 方法\n\nBuffer中几个重要的方法有：\n\n- allocate()：创建缓存区（BUffer创建缓存区不是用`new`，而是用这个方法来创建)\n- put()：向缓冲器插入数据\n- filp()：翻转模式，将缓冲区改为读模式（缓冲区默认模式为**写模式**）。其实就改变了`limit`，`position`，`mark`属性的值。\n- get()：从缓冲区读取数据，从`position`位置开始读\n- rewind()：倒带（重复读取），就是将`position`的位置重置为`0`\n- mark()：`mark()`方法的作用就是将当前`position`的位置暂存起来，放在`mark`属性中。\n- reset()：将`position`重置为`mark`属性的位置。\n- clean()：清空缓存区，重置`position`，`limit`，`mark`属性为初始值","source":"_posts/java/nio/8d2049e3-3eb1-46ed-a44b-57398964eb21.md","raw":"---\ntitle: Java的NIO编程-Buffer\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2021-03-01 10:07:05\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\n- Nio\ncategories:\n- Java\n---\n\n## 0x1 子类\n\nBuffer是一个抽象类，所以一般使用他的子类来进行编程，常用的子类有：\n\n- ByteBuffer\n\n- IntBuffer\n- LongBuffer\n- CharBuffer\n- DoubleBufffer\n- FloatBuffer\n- ShortBuffer\n- MappedByteBuffer\n\n## 0x2 属性\n\nBuffer中有四个重要的属性，分别是：\n\n- capacity：Buffer类的capacity属性，表示内部容量的大小\n- position：Buffer类的position属性，表示当前的位置\n- limit：Buffer类的limit属性，表示读写的最大上限。\n- mark：暂存属性，暂时保存position的值，方便后面的重复使用position值。\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/epub_26174369_8.jpeg)\n\n## 0x3 方法\n\nBuffer中几个重要的方法有：\n\n- allocate()：创建缓存区（BUffer创建缓存区不是用`new`，而是用这个方法来创建)\n- put()：向缓冲器插入数据\n- filp()：翻转模式，将缓冲区改为读模式（缓冲区默认模式为**写模式**）。其实就改变了`limit`，`position`，`mark`属性的值。\n- get()：从缓冲区读取数据，从`position`位置开始读\n- rewind()：倒带（重复读取），就是将`position`的位置重置为`0`\n- mark()：`mark()`方法的作用就是将当前`position`的位置暂存起来，放在`mark`属性中。\n- reset()：将`position`重置为`mark`属性的位置。\n- clean()：清空缓存区，重置`position`，`limit`，`mark`属性为初始值","slug":"java/nio/8d2049e3-3eb1-46ed-a44b-57398964eb21","published":1,"updated":"2021-10-08T08:29:17.320Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eii008mvpuc17xi7tlh","content":"<h2 id=\"0x1-子类\"><a href=\"#0x1-子类\" class=\"headerlink\" title=\"0x1 子类\"></a>0x1 子类</h2><p>Buffer是一个抽象类，所以一般使用他的子类来进行编程，常用的子类有：</p>\n<ul>\n<li><p>ByteBuffer</p>\n</li>\n<li><p>IntBuffer</p>\n</li>\n<li><p>LongBuffer</p>\n</li>\n<li><p>CharBuffer</p>\n</li>\n<li><p>DoubleBufffer</p>\n</li>\n<li><p>FloatBuffer</p>\n</li>\n<li><p>ShortBuffer</p>\n</li>\n<li><p>MappedByteBuffer</p>\n</li>\n</ul>\n<h2 id=\"0x2-属性\"><a href=\"#0x2-属性\" class=\"headerlink\" title=\"0x2 属性\"></a>0x2 属性</h2><p>Buffer中有四个重要的属性，分别是：</p>\n<ul>\n<li>capacity：Buffer类的capacity属性，表示内部容量的大小</li>\n<li>position：Buffer类的position属性，表示当前的位置</li>\n<li>limit：Buffer类的limit属性，表示读写的最大上限。</li>\n<li>mark：暂存属性，暂时保存position的值，方便后面的重复使用position值。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/epub_26174369_8.jpeg\" alt=\"图片\"></p>\n<h2 id=\"0x3-方法\"><a href=\"#0x3-方法\" class=\"headerlink\" title=\"0x3 方法\"></a>0x3 方法</h2><p>Buffer中几个重要的方法有：</p>\n<ul>\n<li>allocate()：创建缓存区（BUffer创建缓存区不是用<code>new</code>，而是用这个方法来创建)</li>\n<li>put()：向缓冲器插入数据</li>\n<li>filp()：翻转模式，将缓冲区改为读模式（缓冲区默认模式为<strong>写模式</strong>）。其实就改变了<code>limit</code>，<code>position</code>，<code>mark</code>属性的值。</li>\n<li>get()：从缓冲区读取数据，从<code>position</code>位置开始读</li>\n<li>rewind()：倒带（重复读取），就是将<code>position</code>的位置重置为<code>0</code></li>\n<li>mark()：<code>mark()</code>方法的作用就是将当前<code>position</code>的位置暂存起来，放在<code>mark</code>属性中。</li>\n<li>reset()：将<code>position</code>重置为<code>mark</code>属性的位置。</li>\n<li>clean()：清空缓存区，重置<code>position</code>，<code>limit</code>，<code>mark</code>属性为初始值</li>\n</ul>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"0x1-子类\"><a href=\"#0x1-子类\" class=\"headerlink\" title=\"0x1 子类\"></a>0x1 子类</h2><p>Buffer是一个抽象类，所以一般使用他的子类来进行编程，常用的子类有：</p>\n<ul>\n<li><p>ByteBuffer</p>\n</li>\n<li><p>IntBuffer</p>\n</li>\n<li><p>LongBuffer</p>\n</li>\n<li><p>CharBuffer</p>\n</li>\n<li><p>DoubleBufffer</p>\n</li>\n<li><p>FloatBuffer</p>\n</li>\n<li><p>ShortBuffer</p>\n</li>\n<li><p>MappedByteBuffer</p>\n</li>\n</ul>\n<h2 id=\"0x2-属性\"><a href=\"#0x2-属性\" class=\"headerlink\" title=\"0x2 属性\"></a>0x2 属性</h2><p>Buffer中有四个重要的属性，分别是：</p>\n<ul>\n<li>capacity：Buffer类的capacity属性，表示内部容量的大小</li>\n<li>position：Buffer类的position属性，表示当前的位置</li>\n<li>limit：Buffer类的limit属性，表示读写的最大上限。</li>\n<li>mark：暂存属性，暂时保存position的值，方便后面的重复使用position值。</li>\n</ul>\n<p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/epub_26174369_8.jpeg\" alt=\"图片\"></p>\n<h2 id=\"0x3-方法\"><a href=\"#0x3-方法\" class=\"headerlink\" title=\"0x3 方法\"></a>0x3 方法</h2><p>Buffer中几个重要的方法有：</p>\n<ul>\n<li>allocate()：创建缓存区（BUffer创建缓存区不是用<code>new</code>，而是用这个方法来创建)</li>\n<li>put()：向缓冲器插入数据</li>\n<li>filp()：翻转模式，将缓冲区改为读模式（缓冲区默认模式为<strong>写模式</strong>）。其实就改变了<code>limit</code>，<code>position</code>，<code>mark</code>属性的值。</li>\n<li>get()：从缓冲区读取数据，从<code>position</code>位置开始读</li>\n<li>rewind()：倒带（重复读取），就是将<code>position</code>的位置重置为<code>0</code></li>\n<li>mark()：<code>mark()</code>方法的作用就是将当前<code>position</code>的位置暂存起来，放在<code>mark</code>属性中。</li>\n<li>reset()：将<code>position</code>重置为<code>mark</code>属性的位置。</li>\n<li>clean()：清空缓存区，重置<code>position</code>，<code>limit</code>，<code>mark</code>属性为初始值</li>\n</ul>\n"},{"title":"创建线程的3种方式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-06-22T08:29:38.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## Java线程状态变迁图\n\n![Java线程状态变迁图](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200602150941.jpeg)\n\n\n\n## 构造一个线程\n\n在线程执行`start()`方法之前,首先需要初始化(NEW)一个线程,初始化的时候,可以设置线程名称,线程所属的线程组、线程优先级、是否是Daemon线程等信息。\n\n**Thread常见参数及设置方法:**\n\n- ```java\n  //线程是否是守护线程  默认false\n  private boolean     daemon = false;\n  //设置方法\n  Thread thread=new Thread();\n  thread.setDaemon(true);\n  ```\n\n- ```java\n  //线程名字\t默认\"Thread-\" + nextThreadNum()\n  private volatile String name;\n  //设置方法\n  Thread thread=new Thread();\n  thread.setName(\"myThread\"); //不能设置为null,会报异常\n  ```\n\n- ```java\n  //线程优先级  是否起作用和操作系统及虚拟机版本相关\n  private int priority;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n  //设置方法  范围:1-10  默认5\n  myThread.setPriority(1);\n  ```\n\n  \n\n### Thread源码构造方法\n\n在Thread源码中,一共提供了`9种`构造方法.\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200602151437.png)\n\n从这些构造方法中,大致可以分为`有Runnable构造参数`的,和`无Runnable构造参数`两大类,无Runnable构造参数的就需要去继承`Thread`来重写`run()`方法<font color=grey>(注:`Thread`也实现了Runnable接口)</font>,有Runnable构造参数的,就实现Runnable接口的run方法,然后通过构造参数,把实现Runnable接口的实例传入Thread.\n\n\n\n### 无返回值的线程\n\n可以看到,通过集成`Thread`类和实现`Runnable`接口的`run()`方法返回值都是`void`.这类是没有返回值的\n\n#### 方法一:继承Thread类创建一个线程\n\n```java\n//继承Thread类,重写run方法\nclass MyThread extends Thread{\n    @Override\n    public void run() {\n        System.out.println(\"继承Thread,重写run方法\");\n    }\n}\n\npublic class ThreadTest{\n    public static void main(String[] args){\n        MyThread myThread=new MyThread();\n        myThread.start();\n    }\n}\n```\n\n\n\n#### 方法二:实现Runnable接口创建线程\n\n```java\n//实现Runnable接口的run方法,然后以构造参数的形式设置Thread的target\nclass MyRun implements Runnable{\n    @Override\n    public void run() {\n        System.out.println(\"实现Runnable方法\");\n    }\n}\n\npublic class ThreadTest{\n    public static void main(String[] args){\n        MyRun myRun=new MyRun();\n        Thread thread=new Thread(myRun);\n        thread.start();\n    }\n}\n```\n\n\n\n### 有返回值的线程\t\n\n上面两个方法,都有一个共同缺点,就是**没有返回值**,当有一些特殊需求时,比如开启一个线程,用来计算一些东西,或者是处理另外一些需要返回数据的业务,这时就需要借助`FutureTask`来完成了\n\n#### 方法三:通过FutureTask创建一个线程\n\n```java\n//实现Callable接口的call方法   类似实现Runnable的run方法\nclass MyCall implements Callable<Integer>{\n    @Override\n    public Integer call() throws Exception {\n        //计算1+1\n        return 1+1;\n    }\n}\n\npublic class ThreadTest{\n    public static void main(String[] args){\n        MyCall myCall=new MyCall();\n        //创建异步任务\n        FutureTask<Integer> futureTask=new FutureTask<>(myCall);\n        Thread thread2=new Thread(futureTask);\n        thread2.start();\n        //获取线程执行结果\n        Integer res=futureTask.get();\n        System.out.println(res); //输出2\n    }\n}\n```\n\n\n\n## 总结\n\n使用继承方式的好处是方便传参，你可以在子类里面添加成员变量，通过set方法设置参数或者通过构造函数进行传递，而如果使用Runnable方式，则只能使用主线程里面被声明为final的变量。不好的地方是Java不支持多继承，如果继承了Thread类，那么子类不能再继承其他类，而Runable则没有这个限制。前两种方式都没办法拿到任务的返回结果，但是Futuretask方式可以。","source":"_posts/java/thread/create-thread-3.md","raw":"---\ntitle: 创建线程的3种方式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-06-22 16:29:38\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 多线程\ncategories:\n- Java\n---\n\n\n\n## Java线程状态变迁图\n\n![Java线程状态变迁图](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200602150941.jpeg)\n\n\n\n## 构造一个线程\n\n在线程执行`start()`方法之前,首先需要初始化(NEW)一个线程,初始化的时候,可以设置线程名称,线程所属的线程组、线程优先级、是否是Daemon线程等信息。\n\n**Thread常见参数及设置方法:**\n\n- ```java\n  //线程是否是守护线程  默认false\n  private boolean     daemon = false;\n  //设置方法\n  Thread thread=new Thread();\n  thread.setDaemon(true);\n  ```\n\n- ```java\n  //线程名字\t默认\"Thread-\" + nextThreadNum()\n  private volatile String name;\n  //设置方法\n  Thread thread=new Thread();\n  thread.setName(\"myThread\"); //不能设置为null,会报异常\n  ```\n\n- ```java\n  //线程优先级  是否起作用和操作系统及虚拟机版本相关\n  private int priority;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n  //设置方法  范围:1-10  默认5\n  myThread.setPriority(1);\n  ```\n\n  \n\n### Thread源码构造方法\n\n在Thread源码中,一共提供了`9种`构造方法.\n\n![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200602151437.png)\n\n从这些构造方法中,大致可以分为`有Runnable构造参数`的,和`无Runnable构造参数`两大类,无Runnable构造参数的就需要去继承`Thread`来重写`run()`方法<font color=grey>(注:`Thread`也实现了Runnable接口)</font>,有Runnable构造参数的,就实现Runnable接口的run方法,然后通过构造参数,把实现Runnable接口的实例传入Thread.\n\n\n\n### 无返回值的线程\n\n可以看到,通过集成`Thread`类和实现`Runnable`接口的`run()`方法返回值都是`void`.这类是没有返回值的\n\n#### 方法一:继承Thread类创建一个线程\n\n```java\n//继承Thread类,重写run方法\nclass MyThread extends Thread{\n    @Override\n    public void run() {\n        System.out.println(\"继承Thread,重写run方法\");\n    }\n}\n\npublic class ThreadTest{\n    public static void main(String[] args){\n        MyThread myThread=new MyThread();\n        myThread.start();\n    }\n}\n```\n\n\n\n#### 方法二:实现Runnable接口创建线程\n\n```java\n//实现Runnable接口的run方法,然后以构造参数的形式设置Thread的target\nclass MyRun implements Runnable{\n    @Override\n    public void run() {\n        System.out.println(\"实现Runnable方法\");\n    }\n}\n\npublic class ThreadTest{\n    public static void main(String[] args){\n        MyRun myRun=new MyRun();\n        Thread thread=new Thread(myRun);\n        thread.start();\n    }\n}\n```\n\n\n\n### 有返回值的线程\t\n\n上面两个方法,都有一个共同缺点,就是**没有返回值**,当有一些特殊需求时,比如开启一个线程,用来计算一些东西,或者是处理另外一些需要返回数据的业务,这时就需要借助`FutureTask`来完成了\n\n#### 方法三:通过FutureTask创建一个线程\n\n```java\n//实现Callable接口的call方法   类似实现Runnable的run方法\nclass MyCall implements Callable<Integer>{\n    @Override\n    public Integer call() throws Exception {\n        //计算1+1\n        return 1+1;\n    }\n}\n\npublic class ThreadTest{\n    public static void main(String[] args){\n        MyCall myCall=new MyCall();\n        //创建异步任务\n        FutureTask<Integer> futureTask=new FutureTask<>(myCall);\n        Thread thread2=new Thread(futureTask);\n        thread2.start();\n        //获取线程执行结果\n        Integer res=futureTask.get();\n        System.out.println(res); //输出2\n    }\n}\n```\n\n\n\n## 总结\n\n使用继承方式的好处是方便传参，你可以在子类里面添加成员变量，通过set方法设置参数或者通过构造函数进行传递，而如果使用Runnable方式，则只能使用主线程里面被声明为final的变量。不好的地方是Java不支持多继承，如果继承了Thread类，那么子类不能再继承其他类，而Runable则没有这个限制。前两种方式都没办法拿到任务的返回结果，但是Futuretask方式可以。","slug":"java/thread/create-thread-3","published":1,"updated":"2021-10-08T08:29:39.373Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl19i6eij008qvpuc8w2h3f26","content":"<h2 id=\"Java线程状态变迁图\"><a href=\"#Java线程状态变迁图\" class=\"headerlink\" title=\"Java线程状态变迁图\"></a>Java线程状态变迁图</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200602150941.jpeg\" alt=\"Java线程状态变迁图\"></p>\n<h2 id=\"构造一个线程\"><a href=\"#构造一个线程\" class=\"headerlink\" title=\"构造一个线程\"></a>构造一个线程</h2><p>在线程执行<code>start()</code>方法之前,首先需要初始化(NEW)一个线程,初始化的时候,可以设置线程名称,线程所属的线程组、线程优先级、是否是Daemon线程等信息。</p>\n<p><strong>Thread常见参数及设置方法:</strong></p>\n<ul>\n<li><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//线程是否是守护线程  默认false</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span>     daemon <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//设置方法</span>\nThread thread<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nthread<span class=\"token punctuation\">.</span><span class=\"token function\">setDaemon</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span>figure <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"highlight plaintext\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>table<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>tr<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>td <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"code\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>pre<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>span <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"line\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>span <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"line\"</span><span class=\"token operator\">></span><span class=\"token operator\">-</span> ```java<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>br<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>span <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"line\"</span><span class=\"token operator\">></span>  <span class=\"token comment\" spellcheck=\"true\">//线程名字\t默认\"Thread-\" + nextThreadNum()&lt;/span>&lt;br>&lt;span class=\"line\">  private volatile String name;&lt;/span>&lt;br>&lt;span class=\"line\">  //设置方法&lt;/span>&lt;br>&lt;span class=\"line\">  Thread thread=new Thread();&lt;/span>&lt;br>&lt;span class=\"line\">  thread.setName(\"myThread\"); //不能设置为null,会报异常&lt;/span>&lt;br>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>&lt;/figure></span>\n</code></pre>\n</li>\n<li><p>&#96;&#96;&#96;java<br>&#x2F;&#x2F;线程优先级  是否起作用和操作系统及虚拟机版本相关<br>private int priority;<br>&#x2F;&#x2F;设置方法  范围:1-10  默认5<br>myThread.setPriority(1);</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">### Thread源码构造方法</span><br><span class=\"line\"></span><br><span class=\"line\">在Thread源码中,一共提供了`9种`构造方法.</span><br><span class=\"line\"></span><br><span class=\"line\">![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200602151437.png)</span><br><span class=\"line\"></span><br><span class=\"line\">从这些构造方法中,大致可以分为`有Runnable构造参数`的,和`无Runnable构造参数`两大类,无Runnable构造参数的就需要去继承`Thread`来重写`run()`方法&lt;font color=grey&gt;(注:`Thread`也实现了Runnable接口)&lt;/font&gt;,有Runnable构造参数的,就实现Runnable接口的run方法,然后通过构造参数,把实现Runnable接口的实例传入Thread.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 无返回值的线程</span><br><span class=\"line\"></span><br><span class=\"line\">可以看到,通过集成`Thread`类和实现`Runnable`接口的`run()`方法返回值都是`void`.这类是没有返回值的</span><br><span class=\"line\"></span><br><span class=\"line\">#### 方法一:继承Thread类创建一个线程</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">//继承Thread类,重写run方法</span><br><span class=\"line\">class MyThread extends Thread&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        System.out.println(&quot;继承Thread,重写run方法&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ThreadTest&#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        MyThread myThread=new MyThread();</span><br><span class=\"line\">        myThread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"方法二-实现Runnable接口创建线程\"><a href=\"#方法二-实现Runnable接口创建线程\" class=\"headerlink\" title=\"方法二:实现Runnable接口创建线程\"></a>方法二:实现Runnable接口创建线程</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现Runnable接口的run方法,然后以构造参数的形式设置Thread的target</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyRun</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;实现Runnable方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadTest</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        MyRun myRun=<span class=\"keyword\">new</span> <span class=\"title class_\">MyRun</span>();</span><br><span class=\"line\">        Thread thread=<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(myRun);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"有返回值的线程\"><a href=\"#有返回值的线程\" class=\"headerlink\" title=\"有返回值的线程\"></a>有返回值的线程</h3><p>上面两个方法,都有一个共同缺点,就是<strong>没有返回值</strong>,当有一些特殊需求时,比如开启一个线程,用来计算一些东西,或者是处理另外一些需要返回数据的业务,这时就需要借助<code>FutureTask</code>来完成了</p>\n<h4 id=\"方法三-通过FutureTask创建一个线程\"><a href=\"#方法三-通过FutureTask创建一个线程\" class=\"headerlink\" title=\"方法三:通过FutureTask创建一个线程\"></a>方法三:通过FutureTask创建一个线程</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现Callable接口的call方法   类似实现Runnable的run方法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyCall</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Callable</span>&lt;Integer&gt;&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//计算1+1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadTest</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        MyCall myCall=<span class=\"keyword\">new</span> <span class=\"title class_\">MyCall</span>();</span><br><span class=\"line\">        <span class=\"comment\">//创建异步任务</span></span><br><span class=\"line\">        FutureTask&lt;Integer&gt; futureTask=<span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;&gt;(myCall);</span><br><span class=\"line\">        Thread thread2=<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(futureTask);</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">        <span class=\"comment\">//获取线程执行结果</span></span><br><span class=\"line\">        Integer res=futureTask.get();</span><br><span class=\"line\">        System.out.println(res); <span class=\"comment\">//输出2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用继承方式的好处是方便传参，你可以在子类里面添加成员变量，通过set方法设置参数或者通过构造函数进行传递，而如果使用Runnable方式，则只能使用主线程里面被声明为final的变量。不好的地方是Java不支持多继承，如果继承了Thread类，那么子类不能再继承其他类，而Runable则没有这个限制。前两种方式都没办法拿到任务的返回结果，但是Futuretask方式可以。</p>\n","site":{"data":{"wikis":{"Golang学习笔记":{"link":"https://greycode.top/golang-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/golang-wiki/images/go.png","desc":"学习Go中记的一些笔记"},"设计模式":{"link":"https://greycode.top/design-patterns-wiki/","avatar":"//cdn.jsdelivr.net/gh/greycodee/design-patterns-wiki/images/gof.png","desc":"设计模式学习笔记"},"TypeScript学习笔记":{"link":"https://greycode.top/ts-wiki/","avatar":"//cdn.mjava.top/blog/mL5HJa64px-Typescript_logo_2020.svg.png","desc":"在学习TypeScript时的笔记"}},"links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"},"打工纪实":{"link":"https://greycode.top/","avatar":"//cdn.jsdelivr.net/gh/greycodee/greycodee.github.io/images/avatar.jpg","desc":"浅水是喧哗的，深水是沉默的"}}}},"excerpt":"","more":"<h2 id=\"Java线程状态变迁图\"><a href=\"#Java线程状态变迁图\" class=\"headerlink\" title=\"Java线程状态变迁图\"></a>Java线程状态变迁图</h2><p><img src=\"https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200602150941.jpeg\" alt=\"Java线程状态变迁图\"></p>\n<h2 id=\"构造一个线程\"><a href=\"#构造一个线程\" class=\"headerlink\" title=\"构造一个线程\"></a>构造一个线程</h2><p>在线程执行<code>start()</code>方法之前,首先需要初始化(NEW)一个线程,初始化的时候,可以设置线程名称,线程所属的线程组、线程优先级、是否是Daemon线程等信息。</p>\n<p><strong>Thread常见参数及设置方法:</strong></p>\n<ul>\n<li><pre><code class=\"java\">//线程是否是守护线程  默认false\nprivate boolean     daemon = false;\n//设置方法\nThread thread=new Thread();\nthread.setDaemon(true);\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- ```java</span><br><span class=\"line\">  //线程名字\t默认&quot;Thread-&quot; + nextThreadNum()</span><br><span class=\"line\">  private volatile String name;</span><br><span class=\"line\">  //设置方法</span><br><span class=\"line\">  Thread thread=new Thread();</span><br><span class=\"line\">  thread.setName(&quot;myThread&quot;); //不能设置为null,会报异常</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>&#96;&#96;&#96;java<br>&#x2F;&#x2F;线程优先级  是否起作用和操作系统及虚拟机版本相关<br>private int priority;<br>&#x2F;&#x2F;设置方法  范围:1-10  默认5<br>myThread.setPriority(1);</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\"></span><br><span class=\"line\">### Thread源码构造方法</span><br><span class=\"line\"></span><br><span class=\"line\">在Thread源码中,一共提供了`9种`构造方法.</span><br><span class=\"line\"></span><br><span class=\"line\">![图片](https://cdn.jsdelivr.net/gh/greycodee/images@main/images/2021/10/08/20200602151437.png)</span><br><span class=\"line\"></span><br><span class=\"line\">从这些构造方法中,大致可以分为`有Runnable构造参数`的,和`无Runnable构造参数`两大类,无Runnable构造参数的就需要去继承`Thread`来重写`run()`方法&lt;font color=grey&gt;(注:`Thread`也实现了Runnable接口)&lt;/font&gt;,有Runnable构造参数的,就实现Runnable接口的run方法,然后通过构造参数,把实现Runnable接口的实例传入Thread.</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">### 无返回值的线程</span><br><span class=\"line\"></span><br><span class=\"line\">可以看到,通过集成`Thread`类和实现`Runnable`接口的`run()`方法返回值都是`void`.这类是没有返回值的</span><br><span class=\"line\"></span><br><span class=\"line\">#### 方法一:继承Thread类创建一个线程</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">//继承Thread类,重写run方法</span><br><span class=\"line\">class MyThread extends Thread&#123;</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void run() &#123;</span><br><span class=\"line\">        System.out.println(&quot;继承Thread,重写run方法&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class ThreadTest&#123;</span><br><span class=\"line\">    public static void main(String[] args)&#123;</span><br><span class=\"line\">        MyThread myThread=new MyThread();</span><br><span class=\"line\">        myThread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"方法二-实现Runnable接口创建线程\"><a href=\"#方法二-实现Runnable接口创建线程\" class=\"headerlink\" title=\"方法二:实现Runnable接口创建线程\"></a>方法二:实现Runnable接口创建线程</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现Runnable接口的run方法,然后以构造参数的形式设置Thread的target</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyRun</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;实现Runnable方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadTest</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        MyRun myRun=<span class=\"keyword\">new</span> <span class=\"title class_\">MyRun</span>();</span><br><span class=\"line\">        Thread thread=<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(myRun);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"有返回值的线程\"><a href=\"#有返回值的线程\" class=\"headerlink\" title=\"有返回值的线程\"></a>有返回值的线程</h3><p>上面两个方法,都有一个共同缺点,就是<strong>没有返回值</strong>,当有一些特殊需求时,比如开启一个线程,用来计算一些东西,或者是处理另外一些需要返回数据的业务,这时就需要借助<code>FutureTask</code>来完成了</p>\n<h4 id=\"方法三-通过FutureTask创建一个线程\"><a href=\"#方法三-通过FutureTask创建一个线程\" class=\"headerlink\" title=\"方法三:通过FutureTask创建一个线程\"></a>方法三:通过FutureTask创建一个线程</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现Callable接口的call方法   类似实现Runnable的run方法</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyCall</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Callable</span>&lt;Integer&gt;&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//计算1+1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadTest</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        MyCall myCall=<span class=\"keyword\">new</span> <span class=\"title class_\">MyCall</span>();</span><br><span class=\"line\">        <span class=\"comment\">//创建异步任务</span></span><br><span class=\"line\">        FutureTask&lt;Integer&gt; futureTask=<span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;&gt;(myCall);</span><br><span class=\"line\">        Thread thread2=<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(futureTask);</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">        <span class=\"comment\">//获取线程执行结果</span></span><br><span class=\"line\">        Integer res=futureTask.get();</span><br><span class=\"line\">        System.out.println(res); <span class=\"comment\">//输出2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用继承方式的好处是方便传参，你可以在子类里面添加成员变量，通过set方法设置参数或者通过构造函数进行传递，而如果使用Runnable方式，则只能使用主线程里面被声明为final的变量。不好的地方是Java不支持多继承，如果继承了Thread类，那么子类不能再继承其他类，而Runable则没有这个限制。前两种方式都没办法拿到任务的返回结果，但是Futuretask方式可以。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl19i6eet0001vpuceln4a77e","category_id":"cl19i6ef10004vpuca2jab91j","_id":"cl19i6efi000jvpuccmpe8und"},{"post_id":"cl19i6eez0003vpuc6i3vgi23","category_id":"cl19i6ef10004vpuca2jab91j","_id":"cl19i6efm000qvpucbkq337vl"},{"post_id":"cl19i6ef60007vpuccpog7ro5","category_id":"cl19i6ef10004vpuca2jab91j","_id":"cl19i6efr000wvpuc6s019g3j"},{"post_id":"cl19i6ef80009vpucem3vboym","category_id":"cl19i6efm000pvpucdup1gadh","_id":"cl19i6efx0014vpucbgi2ffr0"},{"post_id":"cl19i6efa000bvpuc2obhbpqs","category_id":"cl19i6efr000xvpuchgfe6w7h","_id":"cl19i6eg0001cvpuccb9x46lu"},{"post_id":"cl19i6efe000fvpucbb5p2ygr","category_id":"cl19i6efr000xvpuchgfe6w7h","_id":"cl19i6eg3001ivpuc26d4dmx7"},{"post_id":"cl19i6efg000hvpuc6nbz9h5v","category_id":"cl19i6efr000xvpuchgfe6w7h","_id":"cl19i6eg6001nvpucciirco2z"},{"post_id":"cl19i6efj000mvpuc8ef28v58","category_id":"cl19i6efr000xvpuchgfe6w7h","_id":"cl19i6eg9001svpuc4vv04ebr"},{"post_id":"cl19i6efl000ovpuce1hx0a6f","category_id":"cl19i6efr000xvpuchgfe6w7h","_id":"cl19i6egb001zvpucbb6vhns0"},{"post_id":"cl19i6efo000tvpuc8f2n7w0j","category_id":"cl19i6efr000xvpuchgfe6w7h","_id":"cl19i6ege0026vpuc8tek5gla"},{"post_id":"cl19i6efq000vvpuc3swd8g5t","category_id":"cl19i6efr000xvpuchgfe6w7h","_id":"cl19i6egn002cvpucadbq0jja"},{"post_id":"cl19i6efs0010vpuc7osh2too","category_id":"cl19i6ege0025vpuc45wy13fi","_id":"cl19i6egp002hvpucg88n2q0q"},{"post_id":"cl19i6efy0017vpuc38swfpqq","category_id":"cl19i6egn002dvpuc6ibbey84","_id":"cl19i6egs002pvpucajmgh65k"},{"post_id":"cl19i6efz001avpucem0abkj5","category_id":"cl19i6egq002jvpuc8c3a9dgy","_id":"cl19i6egu002wvpucdpwu00b8"},{"post_id":"cl19i6eg0001evpucd6e6a8w4","category_id":"cl19i6egs002qvpuc4dse53ca","_id":"cl19i6egw0034vpuc217647gd"},{"post_id":"cl19i6eg1001gvpuc0yh5hai3","category_id":"cl19i6egs002qvpuc4dse53ca","_id":"cl19i6egy003avpuceeyb2ow5"},{"post_id":"cl19i6eg3001jvpuc7bndc9yh","category_id":"cl19i6egw0033vpucgjbjd0fv","_id":"cl19i6eh0003jvpucdoay9pln"},{"post_id":"cl19i6eg5001lvpuc033c72kb","category_id":"cl19i6egw0033vpucgjbjd0fv","_id":"cl19i6eh1003pvpuc0nj55ycw"},{"post_id":"cl19i6eh0003mvpucgg9e42d0","category_id":"cl19i6ege0025vpuc45wy13fi","_id":"cl19i6eh4003xvpuc74ew09tv"},{"post_id":"cl19i6eg6001ovpuc31ed8euj","category_id":"cl19i6eh0003ivpucdrqsc301","_id":"cl19i6eh50040vpucd8vvawwh"},{"post_id":"cl19i6eh1003qvpucbyng5vbf","category_id":"cl19i6ege0025vpuc45wy13fi","_id":"cl19i6eh60043vpuc0b9p24vn"},{"post_id":"cl19i6eg8001qvpucatkrbw6k","category_id":"cl19i6eh0003ivpucdrqsc301","_id":"cl19i6eh70047vpuc4a9dh5k8"},{"post_id":"cl19i6eg9001uvpuc1dy25ww5","category_id":"cl19i6eh0003ivpucdrqsc301","_id":"cl19i6eh8004cvpucayus1huy"},{"post_id":"cl19i6ega001xvpuc9lbc5d12","category_id":"cl19i6eh0003ivpucdrqsc301","_id":"cl19i6eha004gvpuc41zf9ilg"},{"post_id":"cl19i6eh9004dvpuc629p7zfs","category_id":"cl19i6egq002jvpuc8c3a9dgy","_id":"cl19i6ehc004mvpucaidtbxhr"},{"post_id":"cl19i6egc0021vpuccurkfg50","category_id":"cl19i6eh0003ivpucdrqsc301","_id":"cl19i6ehd004qvpucdioq2j1v"},{"post_id":"cl19i6egd0023vpuc9k4o22vo","category_id":"cl19i6eh0003ivpucdrqsc301","_id":"cl19i6ehe004tvpucbqa1f7a5"},{"post_id":"cl19i6egf0028vpuc1tcbaj71","category_id":"cl19i6eh0003ivpucdrqsc301","_id":"cl19i6ehf004yvpuc9t34bmfk"},{"post_id":"cl19i6egg002avpucanwnf05w","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ehh0055vpuc7akc9cq5"},{"post_id":"cl19i6egn002evpucf2gc1mbr","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ehj005bvpuc24v8g9y3"},{"post_id":"cl19i6ego002fvpucg4zzca41","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ehm005ivpuc6dyb5sfa"},{"post_id":"cl19i6egp002ivpuc7c9bawbd","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6eho005nvpuc0dlxc7h9"},{"post_id":"cl19i6egq002lvpuc9bfsc9ye","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ehq005svpuc2yvdbf2u"},{"post_id":"cl19i6egr002ovpuc586l5fer","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ehr005zvpuc5i8r6big"},{"post_id":"cl19i6egs002svpucena3et9t","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6eht0065vpuc934h4ow2"},{"post_id":"cl19i6egt002vvpuc52hr078a","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ehv0069vpuc6q823am2"},{"post_id":"cl19i6egu002zvpuchh96d7vr","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ehw006gvpuc7key3k0p"},{"post_id":"cl19i6egv0032vpuc4zwh10o5","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ehy006mvpuccxihgwpd"},{"post_id":"cl19i6egw0036vpuc40e08klv","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ei0006rvpucfqycai22"},{"post_id":"cl19i6egx0038vpuc4w4xa0wk","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ei1006wvpuc26jl1jq9"},{"post_id":"cl19i6egy003dvpuc9s37dz12","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ei30071vpuc1dhoerk2"},{"post_id":"cl19i6ei1006uvpuch28j4r3a","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ei30073vpuc5bucct2f"},{"post_id":"cl19i6ei1006xvpuchcap84yr","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ei40078vpucfvjq10ff"},{"post_id":"cl19i6egz003fvpuc3e5y2fmy","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ei5007bvpuc4u6kb8hj"},{"post_id":"cl19i6ei2006zvpucbtasa5bw","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ei6007gvpucds5w4ms4"},{"post_id":"cl19i6ei30072vpuc2fuaf8l0","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ei7007jvpucdu1yfamp"},{"post_id":"cl19i6eh0003kvpucb3qw2akd","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ei8007mvpuc8k675cyc"},{"post_id":"cl19i6ei40075vpucgwu1gsoy","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6ei9007pvpuc2s315foe"},{"post_id":"cl19i6ei50079vpuc2gc4fbh1","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6eia007tvpucgf8oelza"},{"post_id":"cl19i6eh2003tvpucbbvmft2q","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6eib007xvpucdl0n15uq"},{"post_id":"cl19i6ei6007dvpucgvav29n5","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6eic0081vpuc2yi5a53p"},{"post_id":"cl19i6eh3003wvpuc7hdt5eex","category_id":"cl19i6ei6007fvpuce0cy7y5s","_id":"cl19i6eic0084vpuc539j5l4i"},{"post_id":"cl19i6eh4003zvpuc7wd8hzno","category_id":"cl19i6ei8007nvpuc9pbj7ryf","_id":"cl19i6eid0087vpuc0fme9il8"},{"post_id":"cl19i6eh50042vpuc0uoe3j2s","category_id":"cl19i6eia007uvpuc2ju7adt2","_id":"cl19i6eie008bvpuc1eyveo65"},{"post_id":"cl19i6eic0082vpuc0be7f2qp","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6eif008fvpuc1a0aclu4"},{"post_id":"cl19i6eh60046vpuc7vj87ztt","category_id":"cl19i6eia007uvpuc2ju7adt2","_id":"cl19i6eig008ivpuc4g1kedjl"},{"post_id":"cl19i6eie008evpuc9xfkc1n9","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6eii008nvpuch08ebmr6"},{"post_id":"cl19i6eh8004avpuc8sa8f6md","category_id":"cl19i6eie008avpuc6zfugaqc","_id":"cl19i6eij008rvpuc8x3z85se"},{"post_id":"cl19i6eif008gvpucdnw79kqq","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6eik008tvpucg3523f29"},{"post_id":"cl19i6eig008kvpucezbx881q","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6eik008vvpuc2zdj3xl8"},{"post_id":"cl19i6eh9004evpuc0wz47lkv","category_id":"cl19i6eie008avpuc6zfugaqc","_id":"cl19i6eil008yvpuca08yc6nf"},{"post_id":"cl19i6eii008mvpuc17xi7tlh","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6eil0091vpuchdol3stv"},{"post_id":"cl19i6eij008qvpuc8w2h3f26","category_id":"cl19i6ehd004svpuces4e57qs","_id":"cl19i6eil0093vpucbrr30vuv"},{"post_id":"cl19i6ehb004jvpuc8t0idfyx","category_id":"cl19i6eie008avpuc6zfugaqc","_id":"cl19i6eil0095vpuc8p53a78r"},{"post_id":"cl19i6ehb004lvpuc7hlshdqd","category_id":"cl19i6eie008avpuc6zfugaqc","_id":"cl19i6eim0097vpuca7tqhqev"},{"post_id":"cl19i6ehc004pvpucb2a9d9jm","category_id":"cl19i6eie008avpuc6zfugaqc","_id":"cl19i6eim0099vpuc6cwy4nlc"},{"post_id":"cl19i6ehd004rvpucbkso5p9z","category_id":"cl19i6eil0094vpuc32sg3awf","_id":"cl19i6ein009dvpucdmm7crhu"},{"post_id":"cl19i6ehe004vvpucaj2w1xow","category_id":"cl19i6eil0094vpuc32sg3awf","_id":"cl19i6ein009hvpuchyd216oe"},{"post_id":"cl19i6ehf004xvpuc4p3dgxa2","category_id":"cl19i6ein009cvpucedq84wn2","_id":"cl19i6eio009lvpuc0jdn0tos"},{"post_id":"cl19i6ehg0052vpuc8udje5ep","category_id":"cl19i6ein009ivpucenm24jyr","_id":"cl19i6eio009qvpuc74oghqsy"},{"post_id":"cl19i6ehg0053vpuc5bc4akak","category_id":"cl19i6ein009ivpucenm24jyr","_id":"cl19i6eip009uvpucdfdv6hnh"},{"post_id":"cl19i6ehh0057vpuc2a1r9664","category_id":"cl19i6ein009ivpucenm24jyr","_id":"cl19i6eiq009zvpuc17qu198c"},{"post_id":"cl19i6ehi0059vpuc43b0566a","category_id":"cl19i6ein009ivpucenm24jyr","_id":"cl19i6eiq00a4vpuc8wa69244"},{"post_id":"cl19i6ehj005dvpuch4s248nx","category_id":"cl19i6ein009ivpucenm24jyr","_id":"cl19i6eir00a8vpuc2qg49s0t"},{"post_id":"cl19i6ehk005gvpucddzeez5b","category_id":"cl19i6ein009ivpucenm24jyr","_id":"cl19i6eir00aavpucac71fl33"},{"post_id":"cl19i6ehm005jvpucdv440lbj","category_id":"cl19i6eir00a7vpuc27dqd0br","_id":"cl19i6eis00ahvpuceroahzin"},{"post_id":"cl19i6eho005ovpuc8hp915yh","category_id":"cl19i6eir00a7vpuc27dqd0br","_id":"cl19i6eit00akvpucfkqd6vts"},{"post_id":"cl19i6ehp005qvpuc5fpf3hxs","category_id":"cl19i6eir00a7vpuc27dqd0br","_id":"cl19i6eiu00apvpucc4687wbe"},{"post_id":"cl19i6ehq005uvpuc6l2wgg9t","category_id":"cl19i6eir00a7vpuc27dqd0br","_id":"cl19i6eiv00atvpuc3oxd8sc7"},{"post_id":"cl19i6ehr005xvpuc5fy8ht2n","category_id":"cl19i6eir00a7vpuc27dqd0br","_id":"cl19i6eiv00awvpuc19v6dgtb"},{"post_id":"cl19i6ehs0061vpuc1vcd2nkn","category_id":"cl19i6eiv00asvpucbn3egweh","_id":"cl19i6eiw00b1vpucdt07c1sr"},{"post_id":"cl19i6ehs0062vpucajar1agf","category_id":"cl19i6eiv00asvpucbn3egweh","_id":"cl19i6eix00b5vpuch36n5hue"},{"post_id":"cl19i6ehu0067vpuc22a2eig4","category_id":"cl19i6eiw00b0vpuccijo84r7","_id":"cl19i6eiy00bavpucdi4uctkb"},{"post_id":"cl19i6ehv006bvpucg8fzdwmh","category_id":"cl19i6eiw00b0vpuccijo84r7","_id":"cl19i6eiz00bevpuc332442w0"},{"post_id":"cl19i6ehw006dvpucea23e1mz","category_id":"cl19i6eiw00b0vpuccijo84r7","_id":"cl19i6ej000bivpucgq974a9w"},{"post_id":"cl19i6ehx006ivpucbhf5ax4o","category_id":"cl19i6eiz00bdvpuc8rprd9hs","_id":"cl19i6ej000bmvpucdx9c76wb"},{"post_id":"cl19i6ehx006kvpuc3b8ufmte","category_id":"cl19i6eiz00bdvpuc8rprd9hs","_id":"cl19i6ej100bqvpuc1pt1dk2a"},{"post_id":"cl19i6ehy006ovpuc5lzi95sy","category_id":"cl19i6eiz00bdvpuc8rprd9hs","_id":"cl19i6ej200buvpuc9n4a4wfg"},{"post_id":"cl19i6ehz006pvpuc86hu8zft","category_id":"cl19i6ej100bpvpuc1zvs05n0","_id":"cl19i6ej200bzvpuc0u7q2yck"},{"post_id":"cl19i6ei0006tvpucd7evfsiz","category_id":"cl19i6ej100bpvpuc1zvs05n0","_id":"cl19i6ej300c2vpucfnd29j1y"},{"post_id":"cl19i6ei7007hvpuc77fv5lpo","category_id":"cl19i6ej200byvpuc6s8l2tb0","_id":"cl19i6ej300c8vpuc5t41f6sp"},{"post_id":"cl19i6ei8007lvpucavqy7cpw","category_id":"cl19i6ej200byvpuc6s8l2tb0","_id":"cl19i6ej400ccvpucfp9gceog"},{"post_id":"cl19i6ei8007ovpuc4c7z35ny","category_id":"cl19i6ej200byvpuc6s8l2tb0","_id":"cl19i6ej500cfvpucfuzw64rl"},{"post_id":"cl19i6ei9007rvpuc3dgs0bye","category_id":"cl19i6ej200byvpuc6s8l2tb0","_id":"cl19i6ej500cjvpuc5j48bj46"},{"post_id":"cl19i6eia007vvpuc26wuatsx","category_id":"cl19i6ej200byvpuc6s8l2tb0","_id":"cl19i6ej600cnvpuc50n0el8r"},{"post_id":"cl19i6eib007zvpuc2od71llu","category_id":"cl19i6ej200byvpuc6s8l2tb0","_id":"cl19i6ej600crvpucauha61ab"},{"post_id":"cl19i6eid0086vpuchg7og5k5","category_id":"cl19i6ej200byvpuc6s8l2tb0","_id":"cl19i6ej700cuvpuc0j5hbx27"},{"post_id":"cl19i6eid0089vpuce6sl1pg6","category_id":"cl19i6ej200byvpuc6s8l2tb0","_id":"cl19i6ej700cxvpucgb5rcwpv"}],"PostTag":[{"post_id":"cl19i6eet0001vpuceln4a77e","tag_id":"cl19i6ef40005vpuc3rho0g1l","_id":"cl19i6eft0011vpuc3to93ezq"},{"post_id":"cl19i6eet0001vpuceln4a77e","tag_id":"cl19i6efb000dvpuc93cw1pl5","_id":"cl19i6efx0016vpuce7e9ezg3"},{"post_id":"cl19i6eet0001vpuceln4a77e","tag_id":"cl19i6efi000kvpuc2izeg561","_id":"cl19i6efz0019vpucf99yay2u"},{"post_id":"cl19i6eet0001vpuceln4a77e","tag_id":"cl19i6efn000rvpuc0mpyd7h4","_id":"cl19i6eg0001dvpucafxggfz5"},{"post_id":"cl19i6eez0003vpuc6i3vgi23","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6eg9001tvpuc3q33g7e4"},{"post_id":"cl19i6eez0003vpuc6i3vgi23","tag_id":"cl19i6efy0018vpucgsf94jvh","_id":"cl19i6ega001vvpuc8dxshtws"},{"post_id":"cl19i6eez0003vpuc6i3vgi23","tag_id":"cl19i6eg1001fvpuc9ouxcgmd","_id":"cl19i6egc0020vpuc4w00hda7"},{"post_id":"cl19i6eez0003vpuc6i3vgi23","tag_id":"cl19i6eg4001kvpuc6qysa0wx","_id":"cl19i6egd0022vpuc6yzb3mho"},{"post_id":"cl19i6ef60007vpuccpog7ro5","tag_id":"cl19i6efb000dvpuc93cw1pl5","_id":"cl19i6egf0027vpuc25qp6paf"},{"post_id":"cl19i6ef80009vpucem3vboym","tag_id":"cl19i6ega001wvpucd9mzhkxv","_id":"cl19i6egg0029vpuccvp3h7b1"},{"post_id":"cl19i6efa000bvpuc2obhbpqs","tag_id":"cl19i6ege0024vpucc7q8cwfm","_id":"cl19i6egq002kvpuc81ko4070"},{"post_id":"cl19i6efa000bvpuc2obhbpqs","tag_id":"cl19i6egn002bvpuc8hqobmho","_id":"cl19i6egr002mvpucenlg9yhg"},{"post_id":"cl19i6ego002fvpucg4zzca41","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6egs002rvpucdzs2bbwn"},{"post_id":"cl19i6egp002ivpuc7c9bawbd","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6egt002tvpucgqy69a5x"},{"post_id":"cl19i6efe000fvpucbb5p2ygr","tag_id":"cl19i6ege0024vpucc7q8cwfm","_id":"cl19i6egu002yvpuc31uve0sv"},{"post_id":"cl19i6efe000fvpucbb5p2ygr","tag_id":"cl19i6egr002nvpuce1omdmaf","_id":"cl19i6egv0030vpuc2lp97wjm"},{"post_id":"cl19i6egs002svpucena3et9t","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6egw0035vpuccfis51z6"},{"post_id":"cl19i6egt002vvpuc52hr078a","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6egx0037vpuc50m36n4j"},{"post_id":"cl19i6egu002zvpuchh96d7vr","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6egy003bvpuc46bpg4gk"},{"post_id":"cl19i6egw0036vpuc40e08klv","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6egz003evpucc4d28pse"},{"post_id":"cl19i6efg000hvpuc6nbz9h5v","tag_id":"cl19i6ege0024vpucc7q8cwfm","_id":"cl19i6eh0003hvpuch3xv3x34"},{"post_id":"cl19i6efg000hvpuc6nbz9h5v","tag_id":"cl19i6egv0031vpuc7o4x9bs2","_id":"cl19i6eh0003lvpuc4494hrwi"},{"post_id":"cl19i6egx0038vpuc4w4xa0wk","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6eh1003ovpucg1uqb6q5"},{"post_id":"cl19i6efj000mvpuc8ef28v58","tag_id":"cl19i6egx0039vpuc6sqyc46c","_id":"cl19i6eh2003svpucd56z9v2h"},{"post_id":"cl19i6efj000mvpuc8ef28v58","tag_id":"cl19i6egz003gvpucc495g3kk","_id":"cl19i6eh3003vvpucfn69ffa4"},{"post_id":"cl19i6efl000ovpuce1hx0a6f","tag_id":"cl19i6ege0024vpucc7q8cwfm","_id":"cl19i6eh60045vpuc9cc7go1d"},{"post_id":"cl19i6efl000ovpuce1hx0a6f","tag_id":"cl19i6eh3003uvpucgbw047j7","_id":"cl19i6eh70048vpuca9x50f49"},{"post_id":"cl19i6efo000tvpuc8f2n7w0j","tag_id":"cl19i6egx0039vpuc6sqyc46c","_id":"cl19i6eha004ivpucbwq5e12s"},{"post_id":"cl19i6efo000tvpuc8f2n7w0j","tag_id":"cl19i6eh70049vpuc5mf5au90","_id":"cl19i6ehb004kvpuce2p0dt9s"},{"post_id":"cl19i6efq000vvpuc3swd8g5t","tag_id":"cl19i6ege0024vpucc7q8cwfm","_id":"cl19i6ehe004wvpuc2e37cxp0"},{"post_id":"cl19i6efq000vvpuc3swd8g5t","tag_id":"cl19i6ehc004ovpucbddg5nrp","_id":"cl19i6ehf004zvpucg2rj8tie"},{"post_id":"cl19i6efs0010vpuc7osh2too","tag_id":"cl19i6ehe004uvpucak1x4ct4","_id":"cl19i6ehi0058vpuc2niv3rbj"},{"post_id":"cl19i6efs0010vpuc7osh2too","tag_id":"cl19i6ehg0051vpucgl46erx4","_id":"cl19i6ehj005cvpuc1hmlegtg"},{"post_id":"cl19i6efw0013vpucbn35hv9n","tag_id":"cl19i6ehh0056vpuc6gqrdb4o","_id":"cl19i6ehk005fvpucgqvj6841"},{"post_id":"cl19i6efy0017vpuc38swfpqq","tag_id":"cl19i6ehk005evpuchjsucaxa","_id":"cl19i6ehq005tvpucgn64gm4s"},{"post_id":"cl19i6efy0017vpuc38swfpqq","tag_id":"cl19i6ehn005kvpucgry6ai9h","_id":"cl19i6ehq005vvpuc2n486uj3"},{"post_id":"cl19i6efz001avpucem0abkj5","tag_id":"cl19i6ehp005pvpuc7uv31qig","_id":"cl19i6ehs0060vpucdxfnfncb"},{"post_id":"cl19i6eg0001evpucd6e6a8w4","tag_id":"cl19i6ehr005wvpucef0whrqt","_id":"cl19i6ehw006cvpuc1pxy64aj"},{"post_id":"cl19i6eg0001evpucd6e6a8w4","tag_id":"cl19i6eht0063vpuc7e7r50uj","_id":"cl19i6ehw006evpuc2zn036gr"},{"post_id":"cl19i6eg1001gvpuc0yh5hai3","tag_id":"cl19i6ehr005wvpucef0whrqt","_id":"cl19i6ehx006jvpucdat89z7c"},{"post_id":"cl19i6eg3001jvpuc7bndc9yh","tag_id":"cl19i6ehw006hvpuc1cc2bw7y","_id":"cl19i6ei40076vpuc1xs17zln"},{"post_id":"cl19i6eg3001jvpuc7bndc9yh","tag_id":"cl19i6ehy006nvpuc6zyth7cq","_id":"cl19i6ei5007avpucg07m8eq7"},{"post_id":"cl19i6eg3001jvpuc7bndc9yh","tag_id":"cl19i6ei0006svpuc3yuv6ll4","_id":"cl19i6ei6007evpuc4va661fg"},{"post_id":"cl19i6eg3001jvpuc7bndc9yh","tag_id":"cl19i6ei2006yvpuc69k53h4j","_id":"cl19i6ei7007ivpuc93r53x4t"},{"post_id":"cl19i6eg5001lvpuc033c72kb","tag_id":"cl19i6ei0006svpuc3yuv6ll4","_id":"cl19i6eia007svpucb5co5p63"},{"post_id":"cl19i6eg5001lvpuc033c72kb","tag_id":"cl19i6ehw006hvpuc1cc2bw7y","_id":"cl19i6eib007wvpucf72chd40"},{"post_id":"cl19i6eg5001lvpuc033c72kb","tag_id":"cl19i6ei2006yvpuc69k53h4j","_id":"cl19i6eib0080vpucejmr57nk"},{"post_id":"cl19i6eg6001ovpuc31ed8euj","tag_id":"cl19i6ei2006yvpuc69k53h4j","_id":"cl19i6eid0088vpucgglqhh87"},{"post_id":"cl19i6eg6001ovpuc31ed8euj","tag_id":"cl19i6eib007yvpuch7o32q4u","_id":"cl19i6eie008cvpucf0d60h6h"},{"post_id":"cl19i6eg8001qvpucatkrbw6k","tag_id":"cl19i6eic0085vpuc78uueo9g","_id":"cl19i6eii008lvpucbddn5bu7"},{"post_id":"cl19i6eg8001qvpucatkrbw6k","tag_id":"cl19i6ei2006yvpuc69k53h4j","_id":"cl19i6eij008pvpuc7sloddvz"},{"post_id":"cl19i6eg9001uvpuc1dy25ww5","tag_id":"cl19i6eig008jvpuc504432si","_id":"cl19i6eil008xvpuch3it9p17"},{"post_id":"cl19i6eg9001uvpuc1dy25ww5","tag_id":"cl19i6ei2006yvpuc69k53h4j","_id":"cl19i6eil0090vpuc2pyu8549"},{"post_id":"cl19i6ega001xvpuc9lbc5d12","tag_id":"cl19i6ei2006yvpuc69k53h4j","_id":"cl19i6eim009bvpucawlx9d7j"},{"post_id":"cl19i6ega001xvpuc9lbc5d12","tag_id":"cl19i6ei0006svpuc3yuv6ll4","_id":"cl19i6ein009evpuc5bqw9cde"},{"post_id":"cl19i6ega001xvpuc9lbc5d12","tag_id":"cl19i6eil0096vpucewfe7y1s","_id":"cl19i6ein009gvpuc2kbf0aln"},{"post_id":"cl19i6egc0021vpuccurkfg50","tag_id":"cl19i6eim009avpucg2mi548e","_id":"cl19i6eio009kvpuc3yd8et01"},{"post_id":"cl19i6egc0021vpuccurkfg50","tag_id":"cl19i6ei2006yvpuc69k53h4j","_id":"cl19i6eio009nvpuc1j2gggts"},{"post_id":"cl19i6egd0023vpuc9k4o22vo","tag_id":"cl19i6ei2006yvpuc69k53h4j","_id":"cl19i6eip009svpuc9ip76jca"},{"post_id":"cl19i6egd0023vpuc9k4o22vo","tag_id":"cl19i6eio009ovpucd9ozc03z","_id":"cl19i6eip009vvpuc98ht4ksd"},{"post_id":"cl19i6egf0028vpuc1tcbaj71","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6eip009xvpucgqli42yt"},{"post_id":"cl19i6egf0028vpuc1tcbaj71","tag_id":"cl19i6ei2006yvpuc69k53h4j","_id":"cl19i6eiq00a0vpuce7dygh57"},{"post_id":"cl19i6egg002avpucanwnf05w","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6eiq00a2vpuc9qt69jyh"},{"post_id":"cl19i6egg002avpucanwnf05w","tag_id":"cl19i6ei2006yvpuc69k53h4j","_id":"cl19i6eiq00a5vpucgl2zcg0u"},{"post_id":"cl19i6egn002evpucf2gc1mbr","tag_id":"cl19i6eiq00a1vpuceox296i0","_id":"cl19i6eir00abvpuc8s26eu25"},{"post_id":"cl19i6egn002evpucf2gc1mbr","tag_id":"cl19i6eir00a6vpuc8rfpfs9d","_id":"cl19i6eis00advpucfujb6yx4"},{"post_id":"cl19i6egn002evpucf2gc1mbr","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6eis00afvpucbqq3crhb"},{"post_id":"cl19i6egq002lvpuc9bfsc9ye","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6eit00alvpuc0ovd3bxe"},{"post_id":"cl19i6egq002lvpuc9bfsc9ye","tag_id":"cl19i6eir00a9vpuc4vwbcrsn","_id":"cl19i6eit00amvpucc6p0c494"},{"post_id":"cl19i6egq002lvpuc9bfsc9ye","tag_id":"cl19i6eis00aevpuc2rpfaou6","_id":"cl19i6eiu00aqvpuc4md8707y"},{"post_id":"cl19i6egr002ovpuc586l5fer","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6eiv00auvpuc0yyd3me9"},{"post_id":"cl19i6egr002ovpuc586l5fer","tag_id":"cl19i6eis00aevpuc2rpfaou6","_id":"cl19i6eiv00avvpucauec826l"},{"post_id":"cl19i6egr002ovpuc586l5fer","tag_id":"cl19i6eiu00anvpuc5vqf4t02","_id":"cl19i6eiw00azvpuc8xsc9atl"},{"post_id":"cl19i6egv0032vpuc4zwh10o5","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6eix00b3vpuch27e3iq3"},{"post_id":"cl19i6egv0032vpuc4zwh10o5","tag_id":"cl19i6eiv00arvpucefab5anp","_id":"cl19i6eix00b4vpuccbulekra"},{"post_id":"cl19i6egv0032vpuc4zwh10o5","tag_id":"cl19i6eiv00axvpuccx388su1","_id":"cl19i6eix00b8vpuc2wx30hg6"},{"post_id":"cl19i6egy003dvpuc9s37dz12","tag_id":"cl19i6eiw00b2vpuc40538iq2","_id":"cl19i6eiy00bcvpucff9ogt6a"},{"post_id":"cl19i6egy003dvpuc9s37dz12","tag_id":"cl19i6eix00b7vpuc6jiw65oh","_id":"cl19i6eiz00bfvpuc5l3s7vnf"},{"post_id":"cl19i6egz003fvpuc3e5y2fmy","tag_id":"cl19i6eiy00bbvpuc26c97fxg","_id":"cl19i6ej000bhvpucawfsc0m4"},{"post_id":"cl19i6eh0003kvpucb3qw2akd","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ej100bovpuc72byhoxb"},{"post_id":"cl19i6eh0003kvpucb3qw2akd","tag_id":"cl19i6eiz00bgvpuc7bu1fmh5","_id":"cl19i6ej100brvpuc395b6gtw"},{"post_id":"cl19i6eh0003kvpucb3qw2akd","tag_id":"cl19i6ehy006nvpuc6zyth7cq","_id":"cl19i6ej100btvpuc3qo1hb11"},{"post_id":"cl19i6eh0003mvpucgg9e42d0","tag_id":"cl19i6ehy006nvpuc6zyth7cq","_id":"cl19i6ej200bxvpuccgcj4n46"},{"post_id":"cl19i6eh0003mvpucgg9e42d0","tag_id":"cl19i6ehe004uvpucak1x4ct4","_id":"cl19i6ej200c0vpuc4vmd8k1b"},{"post_id":"cl19i6eh1003qvpucbyng5vbf","tag_id":"cl19i6ehy006nvpuc6zyth7cq","_id":"cl19i6ej300c5vpucem6c62cl"},{"post_id":"cl19i6eh1003qvpucbyng5vbf","tag_id":"cl19i6ehe004uvpucak1x4ct4","_id":"cl19i6ej300c6vpuc9gmue6xq"},{"post_id":"cl19i6eh2003tvpucbbvmft2q","tag_id":"cl19i6ej300c4vpucfaolbvx3","_id":"cl19i6ej400cavpucg0c6hcca"},{"post_id":"cl19i6eh3003wvpuc7hdt5eex","tag_id":"cl19i6ej400c9vpuc2jc95nhb","_id":"cl19i6ej500chvpuc6qro8jtr"},{"post_id":"cl19i6eh3003wvpuc7hdt5eex","tag_id":"cl19i6ej400cdvpuc6qo96gas","_id":"cl19i6ej500ckvpuc6d7w7rbf"},{"post_id":"cl19i6eh4003zvpuc7wd8hzno","tag_id":"cl19i6ej500cgvpucf15c067a","_id":"cl19i6ej600cpvpuc66qq5d8p"},{"post_id":"cl19i6eh4003zvpuc7wd8hzno","tag_id":"cl19i6ei2006yvpuc69k53h4j","_id":"cl19i6ej600csvpuc6e9bg28r"},{"post_id":"cl19i6eh50042vpuc0uoe3j2s","tag_id":"cl19i6ej600covpuc1a33fi2i","_id":"cl19i6ej700cvvpuc98vk3iql"},{"post_id":"cl19i6eh60046vpuc7vj87ztt","tag_id":"cl19i6ej600ctvpucfkco098r","_id":"cl19i6ej700czvpuc9gjohm8y"},{"post_id":"cl19i6eh60046vpuc7vj87ztt","tag_id":"cl19i6ej700cwvpucfoo39j3l","_id":"cl19i6ej700d0vpuccpt834ki"},{"post_id":"cl19i6eh8004avpuc8sa8f6md","tag_id":"cl19i6ej700cyvpuchpuo45w8","_id":"cl19i6ej800d3vpuc1is6gry9"},{"post_id":"cl19i6eh8004avpuc8sa8f6md","tag_id":"cl19i6ej700d1vpuccr4obwlf","_id":"cl19i6ej800d4vpuccwp676q5"},{"post_id":"cl19i6eh9004dvpuc629p7zfs","tag_id":"cl19i6ej800d2vpuc1s0rde7y","_id":"cl19i6ej800d7vpuccl0babpa"},{"post_id":"cl19i6eh9004dvpuc629p7zfs","tag_id":"cl19i6ej800d5vpuc6mvf8uj8","_id":"cl19i6ej800d8vpuccigqholy"},{"post_id":"cl19i6eh9004evpuc0wz47lkv","tag_id":"cl19i6eiy00bbvpuc26c97fxg","_id":"cl19i6ej900dbvpuc7eypb3yt"},{"post_id":"cl19i6eh9004evpuc0wz47lkv","tag_id":"cl19i6ej800d9vpuc1il9b8zi","_id":"cl19i6ej900dcvpuc6ubscg8g"},{"post_id":"cl19i6ehb004jvpuc8t0idfyx","tag_id":"cl19i6ej900davpuc9yfv4het","_id":"cl19i6ej900devpuc7jc11f9v"},{"post_id":"cl19i6ehb004lvpuc7hlshdqd","tag_id":"cl19i6ej900ddvpuc53h8f9k9","_id":"cl19i6eja00dhvpucgmku4wwx"},{"post_id":"cl19i6ehb004lvpuc7hlshdqd","tag_id":"cl19i6ej900dfvpuc2lnwfg1e","_id":"cl19i6eja00divpuc57d438g0"},{"post_id":"cl19i6ehc004pvpucb2a9d9jm","tag_id":"cl19i6eja00dgvpucg8062llp","_id":"cl19i6eja00dlvpucdq7606id"},{"post_id":"cl19i6ehc004pvpucb2a9d9jm","tag_id":"cl19i6eja00djvpuc3a9eb2ma","_id":"cl19i6eja00dmvpucecmudydv"},{"post_id":"cl19i6ehd004rvpucbkso5p9z","tag_id":"cl19i6eja00dkvpucce1dd1sp","_id":"cl19i6ejb00dpvpucck02e8tu"},{"post_id":"cl19i6ehd004rvpucbkso5p9z","tag_id":"cl19i6ehy006nvpuc6zyth7cq","_id":"cl19i6ejb00dqvpucfu0cbbsy"},{"post_id":"cl19i6ehe004vvpucaj2w1xow","tag_id":"cl19i6ejb00dovpuc0azv1yzz","_id":"cl19i6ejc00duvpuc0h0ie8qa"},{"post_id":"cl19i6ehe004vvpucaj2w1xow","tag_id":"cl19i6eja00dkvpucce1dd1sp","_id":"cl19i6ejc00dvvpucb67qg8kz"},{"post_id":"cl19i6ehe004vvpucaj2w1xow","tag_id":"cl19i6ejb00dsvpuc0olzazkd","_id":"cl19i6ejc00dxvpucfucresi8"},{"post_id":"cl19i6ehf004xvpuc4p3dgxa2","tag_id":"cl19i6ejb00dtvpucee2z8b29","_id":"cl19i6ejc00dyvpucg6a96dhy"},{"post_id":"cl19i6ehg0052vpuc8udje5ep","tag_id":"cl19i6ejc00dwvpucdr8j5ljj","_id":"cl19i6ejc00e0vpucbcf7fb8n"},{"post_id":"cl19i6ehg0053vpuc5bc4akak","tag_id":"cl19i6ejc00dwvpucdr8j5ljj","_id":"cl19i6ejd00e4vpuc73zd4loc"},{"post_id":"cl19i6ehg0053vpuc5bc4akak","tag_id":"cl19i6ei0006svpuc3yuv6ll4","_id":"cl19i6ejd00e5vpucf41nbljj"},{"post_id":"cl19i6ehg0053vpuc5bc4akak","tag_id":"cl19i6ei2006yvpuc69k53h4j","_id":"cl19i6eje00e7vpucdoyt9qbz"},{"post_id":"cl19i6ehh0057vpuc2a1r9664","tag_id":"cl19i6ejc00dwvpucdr8j5ljj","_id":"cl19i6eje00e8vpucgnbzefu7"},{"post_id":"cl19i6ehi0059vpuc43b0566a","tag_id":"cl19i6ejc00dwvpucdr8j5ljj","_id":"cl19i6eje00ecvpucfll47l21"},{"post_id":"cl19i6ehi0059vpuc43b0566a","tag_id":"cl19i6eje00e9vpuc83zwhf8g","_id":"cl19i6ejf00edvpuc06091b98"},{"post_id":"cl19i6ehi0059vpuc43b0566a","tag_id":"cl19i6ei0006svpuc3yuv6ll4","_id":"cl19i6ejf00efvpucgb2a9i6w"},{"post_id":"cl19i6ehj005dvpuch4s248nx","tag_id":"cl19i6ejc00dwvpucdr8j5ljj","_id":"cl19i6ejf00egvpuchr3ganjw"},{"post_id":"cl19i6ehk005gvpucddzeez5b","tag_id":"cl19i6ejc00dwvpucdr8j5ljj","_id":"cl19i6ejf00eivpuc8ogeflai"},{"post_id":"cl19i6ehm005jvpucdv440lbj","tag_id":"cl19i6ejf00ehvpucc38t5jek","_id":"cl19i6ejf00ekvpuc0vp67s7o"},{"post_id":"cl19i6eho005ovpuc8hp915yh","tag_id":"cl19i6ejf00ejvpuc6i0eb139","_id":"cl19i6ejg00envpuc8fohhsny"},{"post_id":"cl19i6eho005ovpuc8hp915yh","tag_id":"cl19i6ejg00elvpuccbyi627i","_id":"cl19i6ejg00eovpuch45qbqm2"},{"post_id":"cl19i6eho005ovpuc8hp915yh","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ejg00eqvpuce9ck8t91"},{"post_id":"cl19i6ehp005qvpuc5fpf3hxs","tag_id":"cl19i6ejg00emvpuc7nclh9z4","_id":"cl19i6ejg00ervpuc9rss0cy0"},{"post_id":"cl19i6ehq005uvpuc6l2wgg9t","tag_id":"cl19i6ej300c4vpucfaolbvx3","_id":"cl19i6ejh00etvpucg33gfphu"},{"post_id":"cl19i6ehr005xvpuc5fy8ht2n","tag_id":"cl19i6ejg00esvpuc1v118q0t","_id":"cl19i6ejh00evvpuc9slfh5ma"},{"post_id":"cl19i6ehs0061vpuc1vcd2nkn","tag_id":"cl19i6ejh00euvpuc54stea3p","_id":"cl19i6ejh00exvpuc095ode2h"},{"post_id":"cl19i6ehs0062vpucajar1agf","tag_id":"cl19i6ejh00ewvpuc5u6o28a7","_id":"cl19i6eji00ezvpucfp8yhjjc"},{"post_id":"cl19i6eht0066vpuc0t9pc3a1","tag_id":"cl19i6ejh00eyvpucaroy5o7h","_id":"cl19i6eji00f1vpuc4ft2b0wg"},{"post_id":"cl19i6ehu0067vpuc22a2eig4","tag_id":"cl19i6eji00f0vpuccs93biv6","_id":"cl19i6eji00f3vpuc4chrfqq2"},{"post_id":"cl19i6ehv006bvpucg8fzdwmh","tag_id":"cl19i6eji00f0vpuccs93biv6","_id":"cl19i6ejj00f6vpuc26ja4qhh"},{"post_id":"cl19i6ehv006bvpucg8fzdwmh","tag_id":"cl19i6eji00f4vpuc74g8c291","_id":"cl19i6ejj00f7vpucg8ymco1n"},{"post_id":"cl19i6ehw006dvpucea23e1mz","tag_id":"cl19i6eji00f0vpuccs93biv6","_id":"cl19i6ejk00favpucdi834nlo"},{"post_id":"cl19i6ehw006dvpucea23e1mz","tag_id":"cl19i6ejj00f8vpucc4076e1s","_id":"cl19i6ejk00fbvpuc7pu7c1hj"},{"post_id":"cl19i6ehx006ivpucbhf5ax4o","tag_id":"cl19i6ejj00f9vpuc02se7x9n","_id":"cl19i6ejk00fevpuc5q11937j"},{"post_id":"cl19i6ehx006ivpucbhf5ax4o","tag_id":"cl19i6ejk00fcvpuch2p6el12","_id":"cl19i6ejk00ffvpucdal2egom"},{"post_id":"cl19i6ehx006kvpuc3b8ufmte","tag_id":"cl19i6ejk00fdvpuc0n4pe8zp","_id":"cl19i6ejl00fivpuc57imh0pf"},{"post_id":"cl19i6ehx006kvpuc3b8ufmte","tag_id":"cl19i6ejk00fgvpucdy9g243f","_id":"cl19i6ejl00fjvpuc15d193mw"},{"post_id":"cl19i6ehy006ovpuc5lzi95sy","tag_id":"cl19i6ejl00fhvpuc1n6j3j2d","_id":"cl19i6ejl00fmvpuc6v61b6sb"},{"post_id":"cl19i6ehy006ovpuc5lzi95sy","tag_id":"cl19i6ejl00fkvpuccyhd3ktz","_id":"cl19i6ejl00fnvpucbezt1e5s"},{"post_id":"cl19i6ehz006pvpuc86hu8zft","tag_id":"cl19i6ejl00flvpucad9adzbq","_id":"cl19i6ejm00frvpuc9fqa07io"},{"post_id":"cl19i6ehz006pvpuc86hu8zft","tag_id":"cl19i6ejm00fovpuc7xuaekih","_id":"cl19i6ejm00fsvpuc5jxigp7p"},{"post_id":"cl19i6ehz006pvpuc86hu8zft","tag_id":"cl19i6ejm00fpvpucfpizabw7","_id":"cl19i6ejn00fuvpuc4t8v4grg"},{"post_id":"cl19i6ei0006tvpucd7evfsiz","tag_id":"cl19i6ejm00fpvpucfpizabw7","_id":"cl19i6ejn00fwvpuc0gy0e9su"},{"post_id":"cl19i6ei0006tvpucd7evfsiz","tag_id":"cl19i6ejm00fovpuc7xuaekih","_id":"cl19i6ejn00fxvpuce0yw80xz"},{"post_id":"cl19i6ei1006uvpuch28j4r3a","tag_id":"cl19i6ejn00fvvpuc4ey7e1ty","_id":"cl19i6ejo00fzvpucdrfi8yjh"},{"post_id":"cl19i6ei1006uvpuch28j4r3a","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ejo00g0vpuc6tqbgloc"},{"post_id":"cl19i6ei1006xvpuchcap84yr","tag_id":"cl19i6ejn00fvvpuc4ey7e1ty","_id":"cl19i6ejo00g2vpucdgfh9wsd"},{"post_id":"cl19i6ei1006xvpuchcap84yr","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ejo00g3vpuc58uqad3t"},{"post_id":"cl19i6ei2006zvpucbtasa5bw","tag_id":"cl19i6ejn00fvvpuc4ey7e1ty","_id":"cl19i6ejp00g5vpuc1vjx0vbr"},{"post_id":"cl19i6ei2006zvpucbtasa5bw","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ejp00g6vpuc5sdyfgvw"},{"post_id":"cl19i6ei30072vpuc2fuaf8l0","tag_id":"cl19i6ejn00fvvpuc4ey7e1ty","_id":"cl19i6ejp00g8vpucft6yfc7l"},{"post_id":"cl19i6ei30072vpuc2fuaf8l0","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ejp00g9vpuc9vx2frkk"},{"post_id":"cl19i6ei40075vpucgwu1gsoy","tag_id":"cl19i6ejn00fvvpuc4ey7e1ty","_id":"cl19i6ejq00gbvpuc7w5i30h7"},{"post_id":"cl19i6ei40075vpucgwu1gsoy","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ejq00gcvpuccfpe8ai8"},{"post_id":"cl19i6ei50079vpuc2gc4fbh1","tag_id":"cl19i6ejn00fvvpuc4ey7e1ty","_id":"cl19i6ejq00gevpuc6owj2ci0"},{"post_id":"cl19i6ei50079vpuc2gc4fbh1","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ejq00gfvpucetjw9q2t"},{"post_id":"cl19i6ei6007dvpucgvav29n5","tag_id":"cl19i6ejn00fvvpuc4ey7e1ty","_id":"cl19i6ejr00ghvpuc4qo90hfm"},{"post_id":"cl19i6ei6007dvpucgvav29n5","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ejr00givpucbvo8axb7"},{"post_id":"cl19i6ei7007hvpuc77fv5lpo","tag_id":"cl19i6ejq00ggvpucb921ejhc","_id":"cl19i6ejr00gkvpuc326pfnb9"},{"post_id":"cl19i6ei7007hvpuc77fv5lpo","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ejr00glvpucaia2dr4r"},{"post_id":"cl19i6ei8007lvpucavqy7cpw","tag_id":"cl19i6ejq00ggvpucb921ejhc","_id":"cl19i6ejr00gnvpuchgv4egrx"},{"post_id":"cl19i6ei8007lvpucavqy7cpw","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ejs00govpucavza2330"},{"post_id":"cl19i6ei8007ovpuc4c7z35ny","tag_id":"cl19i6ejq00ggvpucb921ejhc","_id":"cl19i6ejs00gqvpucg3jf4b7g"},{"post_id":"cl19i6ei8007ovpuc4c7z35ny","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ejs00grvpuc2ffpb45w"},{"post_id":"cl19i6ei9007rvpuc3dgs0bye","tag_id":"cl19i6ejq00ggvpucb921ejhc","_id":"cl19i6ejs00gtvpuc6il416at"},{"post_id":"cl19i6ei9007rvpuc3dgs0bye","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ejs00guvpuc6deceetd"},{"post_id":"cl19i6eia007vvpuc26wuatsx","tag_id":"cl19i6ejq00ggvpucb921ejhc","_id":"cl19i6ejt00gwvpucaf519dwx"},{"post_id":"cl19i6eib007zvpuc2od71llu","tag_id":"cl19i6ejq00ggvpucb921ejhc","_id":"cl19i6ejt00gyvpucf1x3dav6"},{"post_id":"cl19i6eic0082vpuc0be7f2qp","tag_id":"cl19i6ejt00gxvpuc6qpkai7d","_id":"cl19i6eju00h0vpuc2c6y7t6q"},{"post_id":"cl19i6eic0082vpuc0be7f2qp","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6eju00h1vpuc3y42cyso"},{"post_id":"cl19i6eid0086vpuchg7og5k5","tag_id":"cl19i6ejq00ggvpucb921ejhc","_id":"cl19i6eju00h3vpuchmn7apkh"},{"post_id":"cl19i6eid0089vpuce6sl1pg6","tag_id":"cl19i6ejq00ggvpucb921ejhc","_id":"cl19i6eju00h5vpuc72v198dg"},{"post_id":"cl19i6eie008evpuc9xfkc1n9","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ejv00h7vpucfqab9txb"},{"post_id":"cl19i6eie008evpuc9xfkc1n9","tag_id":"cl19i6eju00h4vpucc04b1szz","_id":"cl19i6ejv00h8vpuch5gfazt8"},{"post_id":"cl19i6eif008gvpucdnw79kqq","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ejv00havpucg3os7n39"},{"post_id":"cl19i6eif008gvpucdnw79kqq","tag_id":"cl19i6eju00h4vpucc04b1szz","_id":"cl19i6ejv00hbvpuc6khp0lhk"},{"post_id":"cl19i6eig008kvpucezbx881q","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ejw00hdvpuc84yea1ag"},{"post_id":"cl19i6eig008kvpucezbx881q","tag_id":"cl19i6eju00h4vpucc04b1szz","_id":"cl19i6ejw00hevpucfxnrajww"},{"post_id":"cl19i6eii008mvpuc17xi7tlh","tag_id":"cl19i6efr000yvpuch8u34a8c","_id":"cl19i6ejw00hgvpucf0rc739b"},{"post_id":"cl19i6eii008mvpuc17xi7tlh","tag_id":"cl19i6eju00h4vpucc04b1szz","_id":"cl19i6ejw00hhvpuchh3bgc56"},{"post_id":"cl19i6eij008qvpuc8w2h3f26","tag_id":"cl19i6ejw00hfvpuc7pexgyww","_id":"cl19i6ejw00hivpuca15p2nv3"}],"Tag":[{"name":"AVL","_id":"cl19i6ef40005vpuc3rho0g1l"},{"name":"数据结构","_id":"cl19i6efb000dvpuc93cw1pl5"},{"name":"平衡二叉树","_id":"cl19i6efi000kvpuc2izeg561"},{"name":"二叉树","_id":"cl19i6efn000rvpuc0mpyd7h4"},{"name":"Java","_id":"cl19i6efr000yvpuch8u34a8c"},{"name":"Recursive","_id":"cl19i6efy0018vpucgsf94jvh"},{"name":"Algorithm","_id":"cl19i6eg1001fvpuc9ouxcgmd"},{"name":"Json","_id":"cl19i6eg4001kvpuc6qysa0wx"},{"name":"UML","_id":"cl19i6ega001wvpucd9mzhkxv"},{"name":"设计模式","_id":"cl19i6ege0024vpucc7q8cwfm"},{"name":"抽象工厂模式","_id":"cl19i6egn002bvpuc8hqobmho"},{"name":"建造者模式","_id":"cl19i6egr002nvpuce1omdmaf"},{"name":"工厂方法模式","_id":"cl19i6egv0031vpuc7o4x9bs2"},{"name":"GOF","_id":"cl19i6egx0039vpuc6sqyc46c"},{"name":"OOP","_id":"cl19i6egz003gvpucc495g3kk"},{"name":"原型模式","_id":"cl19i6eh3003uvpucgbw047j7"},{"name":"Singleton","_id":"cl19i6eh70049vpuc5mf5au90"},{"name":"模板方法模式","_id":"cl19i6ehc004ovpucbddg5nrp"},{"name":"MySQL","_id":"cl19i6ehe004uvpucak1x4ct4"},{"name":"协议","_id":"cl19i6ehg0051vpucgl46erx4"},{"name":"gitalk","_id":"cl19i6ehh0056vpuc6gqrdb4o"},{"name":"P2P","_id":"cl19i6ehk005evpuchjsucaxa"},{"name":"网络","_id":"cl19i6ehn005kvpucgry6ai9h"},{"name":"Dubbo","_id":"cl19i6ehp005pvpuc7uv31qig"},{"name":"Go","_id":"cl19i6ehr005wvpucef0whrqt"},{"name":"钉钉机器人","_id":"cl19i6eht0063vpuc7e7r50uj"},{"name":"Mysql","_id":"cl19i6ehw006hvpuc1cc2bw7y"},{"name":"Pit","_id":"cl19i6ehy006nvpuc6zyth7cq"},{"name":"Docker","_id":"cl19i6ei0006svpuc3yuv6ll4"},{"name":"Linux","_id":"cl19i6ei2006yvpuc69k53h4j"},{"name":"Centos","_id":"cl19i6eib007yvpuch7o32q4u"},{"name":"Shell","_id":"cl19i6eic0085vpuc78uueo9g"},{"name":"Time","_id":"cl19i6eig008jvpuc504432si"},{"name":"RaspberryPi","_id":"cl19i6eil0096vpucewfe7y1s"},{"name":"Github Actions","_id":"cl19i6eim009avpucg2mi548e"},{"name":"fastDFS","_id":"cl19i6eio009ovpucd9ozc03z"},{"name":"表达式引擎","_id":"cl19i6eiq00a1vpuceox296i0"},{"name":"Aviator","_id":"cl19i6eir00a6vpuc8rfpfs9d"},{"name":"ArrayList","_id":"cl19i6eir00a9vpuc4vwbcrsn"},{"name":"源码解析","_id":"cl19i6eis00aevpuc2rpfaou6"},{"name":"ArrayDeque","_id":"cl19i6eiu00anvpuc5vqf4t02"},{"name":"源码分析","_id":"cl19i6eiv00arvpucefab5anp"},{"name":"LinkedList","_id":"cl19i6eiv00axvpuccx388su1"},{"name":"Logback","_id":"cl19i6eiw00b2vpuc40538iq2"},{"name":"MDC","_id":"cl19i6eix00b7vpuc6jiw65oh"},{"name":"Nacos","_id":"cl19i6eiy00bbvpuc26c97fxg"},{"name":"Base64","_id":"cl19i6eiz00bgvpuc7bu1fmh5"},{"name":"Git","_id":"cl19i6ej300c4vpucfaolbvx3"},{"name":"UI","_id":"cl19i6ej400c9vpuc2jc95nhb"},{"name":"推荐","_id":"cl19i6ej400cdvpuc6qo96gas"},{"name":"RocketMQ","_id":"cl19i6ej500cgvpucf15c067a"},{"name":"HTTP协议","_id":"cl19i6ej600covpuc1a33fi2i"},{"name":"smtp","_id":"cl19i6ej600ctvpucfkco098r"},{"name":"telnet","_id":"cl19i6ej700cwvpucfoo39j3l"},{"name":"SpringCloud","_id":"cl19i6ej700cyvpuchpuo45w8"},{"name":"Gateway","_id":"cl19i6ej700d1vpuccr4obwlf"},{"name":"Dubbbo","_id":"cl19i6ej800d2vpuc1s0rde7y"},{"name":"Spring","_id":"cl19i6ej800d5vpuc6mvf8uj8"},{"name":"Spring Cloud Gateway","_id":"cl19i6ej800d9vpuc1il9b8zi"},{"name":"SpringBoot","_id":"cl19i6ej900davpuc9yfv4het"},{"name":"Fegin","_id":"cl19i6ej900ddvpuc53h8f9k9"},{"name":"Resttemplate","_id":"cl19i6ej900dfvpuc2lnwfg1e"},{"name":"Spring AOP","_id":"cl19i6eja00dgvpucg8062llp"},{"name":"注解","_id":"cl19i6eja00djvpuc3a9eb2ma"},{"name":"Vue","_id":"cl19i6eja00dkvpucce1dd1sp"},{"name":"Vuex","_id":"cl19i6ejb00dovpuc0azv1yzz"},{"name":"TypeScript","_id":"cl19i6ejb00dsvpuc0olzazkd"},{"name":"Vert.x","_id":"cl19i6ejb00dtvpucee2z8b29"},{"name":"Jenkins","_id":"cl19i6ejc00dwvpucdr8j5ljj"},{"name":"SonarQube","_id":"cl19i6eje00e9vpuc83zwhf8g"},{"name":"Darabonba","_id":"cl19i6ejf00ehvpucc38t5jek"},{"name":"Json-Schema","_id":"cl19i6ejf00ejvpuc6i0eb139"},{"name":"参数验证","_id":"cl19i6ejg00elvpuccbyi627i"},{"name":"DDNS","_id":"cl19i6ejg00emvpuc7nclh9z4"},{"name":"SEO","_id":"cl19i6ejg00esvpuc1v118q0t"},{"name":"抒发情感","_id":"cl19i6ejh00euvpuc54stea3p"},{"name":"闲谈","_id":"cl19i6ejh00ewvpuc5u6o28a7"},{"name":"SaaS","_id":"cl19i6ejh00eyvpucaroy5o7h"},{"name":"Quarkus","_id":"cl19i6eji00f0vpuccs93biv6"},{"name":"Graal VM","_id":"cl19i6eji00f4vpuc74g8c291"},{"name":"Maven","_id":"cl19i6ejj00f8vpucc4076e1s"},{"name":"OAuth2.0","_id":"cl19i6ejj00f9vpuc02se7x9n"},{"name":"JWT","_id":"cl19i6ejk00fcvpuch2p6el12"},{"name":"OAuth","_id":"cl19i6ejk00fdvpuc0n4pe8zp"},{"name":"spring-security","_id":"cl19i6ejk00fgvpucdy9g243f"},{"name":"SSO","_id":"cl19i6ejl00fhvpuc1n6j3j2d"},{"name":"CAS框架","_id":"cl19i6ejl00fkvpuccyhd3ktz"},{"name":"集群","_id":"cl19i6ejl00flvpucad9adzbq"},{"name":"分布式","_id":"cl19i6ejm00fovpuc7xuaekih"},{"name":"ZooKeeper","_id":"cl19i6ejm00fpvpucfpizabw7"},{"name":"Disruptor","_id":"cl19i6ejn00fvvpuc4ey7e1ty"},{"name":"JVM","_id":"cl19i6ejq00ggvpucb921ejhc"},{"name":"Jvm","_id":"cl19i6ejt00gxvpuc6qpkai7d"},{"name":"Nio","_id":"cl19i6eju00h4vpucc04b1szz"},{"name":"多线程","_id":"cl19i6ejw00hfvpuc7pexgyww"}]}}